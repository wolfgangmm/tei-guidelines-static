{"link":"/ref/att.ascribed","tag":"reference","content":"provides attributes for elements representing speech or action that can be ascribed to a specific individual. Declarations for classes, datatypes, and macros available to all TEI modules indicates the person, or group of people, to whom the element content is ascribed.","title":"att.ascribed"}
{"link":"/ref/att.ascribed.directed","tag":"reference","content":"provides attributes for elements representing speech or action that can be directed at a group or individual. Declarations for classes, datatypes, and macros available to all TEI modules indicates the person, or group of people, to whom a speech act or action is directed.","title":"att.ascribed.directed"}
{"link":"/ref/att.canonical","tag":"reference","content":"provides attributes that can be used to associate a representation such as a name or title with canonical information about the object being named or referenced. Declarations for classes, datatypes, and macros available to all TEI modules provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind. provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.","title":"att.canonical"}
{"link":"/ref/att.ranging","tag":"reference","content":"provides attributes for describing numerical ranges. Declarations for classes, datatypes, and macros available to all TEI modules gives a minimum estimated value for the approximate measurement. gives a maximum estimated value for the approximate measurement. where the measurement summarizes more than one observation or a range, supplies the minimum value observed. where the measurement summarizes more than one observation or a range, supplies the maximum value observed. specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by min and max, or the proportion of observed values that fall within that range.","title":"att.ranging"}
{"link":"/ref/att.dimensions","tag":"reference","content":"provides attributes for describing the size of physical objects. Declarations for classes, datatypes, and macros available to all TEI modules names the unit used for the measurement specifies the length in the units specified indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. characterizes the precision of the values specified by the other attributes. where the measurement summarizes more than one observation, specifies the applicability of this measurement.","title":"att.dimensions"}
{"link":"/ref/att.damaged","tag":"reference","content":"provides attributes describing the nature of any physical damage affecting a reading. Declarations for classes, datatypes, and macros available to all TEI modules categorizes the cause of the damage, if it can be identified. provides a coded representation of the degree of damage, either as a number between 0 (undamaged) and 1 (very extensively damaged), or as one of the codes high, medium, low, or unknown. The damage element with the degree attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as supplied . assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon.","title":"att.damaged"}
{"link":"/ref/att.written","tag":"reference","content":"provides attributes to indicate the hand in which the content of an element was written in the source being transcribed. Declarations for classes, datatypes, and macros available to all TEI modules points to a handNote element describing the hand considered responsible for the content of the element concerned.","title":"att.written"}
{"link":"/ref/att.cReferencing","tag":"reference","content":"provides attributes that may be used to supply a canonical reference as a means of identifying the target of a pointer. Declarations for classes, datatypes, and macros available to all TEI modules specifies the destination of the pointer by supplying a canonical reference expressed using the scheme defined in a refsDecl element in the TEI header","title":"att.cReferencing"}
{"link":"/ref/att.breaking","tag":"reference","content":"provides attributes to indicate whether or not the element concerned is considered to mark the end of an orthographic token in the same way as whitespace. Declarations for classes, datatypes, and macros available to all TEI modules indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.","title":"att.breaking"}
{"link":"/ref/att.datable.custom","tag":"reference","content":"provides attributes for normalization of elements that contain datable events to a custom dating system (i.e. other than the Gregorian used by W3 and ISO). Names and dates supplies the value of a date or time in some custom standard form. specifies the earliest possible date for the event in some custom standard form. specifies the latest possible date for the event in some custom standard form. indicates the starting point of the period in some custom standard form. indicates the ending point of the period in some custom standard form. supplies a pointer to some location defining a named point in time with reference to which the datable item is understood to have occurred supplies a pointer to a calendar element or other means of interpreting the values of the custom dating attributes.","title":"att.datable.custom"}
{"link":"/ref/att.datable.w3c","tag":"reference","content":"provides attributes for normalization of elements that contain datable events conforming to the W3C XML Schema Part 2: Datatypes Second Edition . Declarations for classes, datatypes, and macros available to all TEI modules supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. indicates the starting point of the period in standard form, e.g. yyyy-mm-dd. indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.","title":"att.datable.w3c"}
{"link":"/ref/att.datcat","tag":"reference","content":"provides attributes that are used to align XML elements or attributes with the appropriate Data Categories (DCs) defined by the ISO 12620:2009 standard and stored in the Web repository called ISOCat at 1 . Declarations for classes, datatypes, and macros available to all TEI modules contains a PID (persistent identifier) that aligns the given element with the appropriate Data Category (or categories) in ISOcat. contains a PID (persistent identifier) that aligns the content of the given element or the value of the given attribute with the appropriate simple Data Category (or categories) in ISOcat.","title":"att.datcat"}
{"link":"/ref/att.datable","tag":"reference","content":"provides attributes for normalization of elements that contain dates, times, or datable events. Declarations for classes, datatypes, and macros available to all TEI modules indicates one or more systems or calendars to which the date represented by the content of this element belongs. supplies pointers to one or more definitions of named periods of time (typically category s or calendar s) within which the datable item is understood to have occurred.","title":"att.datable"}
{"link":"/ref/att.declarable","tag":"reference","content":"provides attributes for those elements in the TEI header which may be independently selected by means of the special purpose decls attribute. Declarations for classes, datatypes, and macros available to all TEI modules indicates whether or not this element is selected by default when its parent is selected.","title":"att.declarable"}
{"link":"/ref/att.fragmentable","tag":"reference","content":"provides attributes for representing fragmentation of a structural element, typically as a consequence of some overlapping hierarchy. Declarations for classes, datatypes, and macros available to all TEI modules specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.","title":"att.fragmentable"}
{"link":"/ref/att.declaring","tag":"reference","content":"provides attributes for elements which may be independently associated with a particular declarable element within the header, thus overriding the inherited default for that element. Declarations for classes, datatypes, and macros available to all TEI modules identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.","title":"att.declaring"}
{"link":"/ref/att.divLike","tag":"reference","content":"provides attributes common to all elements which behave in the same way as divisions. Declarations for classes, datatypes, and macros available to all TEI modules specifies how the content of the division is organized. indicates whether this division is a sample of the original source and if so, from which part.","title":"att.divLike"}
{"link":"/ref/att.docStatus","tag":"reference","content":"provides attributes for use on metadata elements describing the status of a document. Declarations for classes, datatypes, and macros available to all TEI modules describes the status of a document either currently or, when associated with a dated element, at the time indicated.","title":"att.docStatus"}
{"link":"/ref/att.duration","tag":"reference","content":"provides attributes for normalization of elements that contain datable events. Transcribed Speech","title":"att.duration"}
{"link":"/ref/att.global.responsibility","tag":"reference","content":"provides attributes indicating the agent responsible for some aspect of the text, the markup or something asserted by the markup, and the degree of certainty associated with it. Declarations for classes, datatypes, and macros available to all TEI modules signifies the degree of certainty associated with the intervention or interpretation. indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.","title":"att.global.responsibility"}
{"link":"/ref/att.editLike","tag":"reference","content":"provides attributes describing the nature of an encoded scholarly intervention or interpretation of any kind. Declarations for classes, datatypes, and macros available to all TEI modules indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. indicates whether this is an instant revision or not.","title":"att.editLike"}
{"link":"/ref/att.duration.w3c","tag":"reference","content":"provides attributes for recording normalized temporal durations. Declarations for classes, datatypes, and macros available to all TEI modules indicates the length of this element in time.","title":"att.duration.w3c"}
{"link":"/ref/att.global.rendition","tag":"reference","content":"provides rendering attributes common to all elements in the TEI encoding scheme. Declarations for classes, datatypes, and macros available to all TEI modules indicates how the element in question was rendered or presented in the source text. contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text points to a description of the rendering or presentation used for this element in the source text.","title":"att.global.rendition"}
{"link":"/ref/att.global","tag":"reference","content":"provides attributes common to all elements in the TEI encoding scheme. Declarations for classes, datatypes, and macros available to all TEI modules provides a unique identifier for the element bearing the attribute. gives a number (or other label) for an element, which is not necessarily unique within the document. indicates the language of the element content using a tag generated according to BCP 47 . provides a base URI reference with which applications can resolve relative URI references into absolute URI references. signals an intention about how white space should be managed by applications.","title":"att.global"}
{"link":"/ref/att.handFeatures","tag":"reference","content":"provides attributes describing aspects of the hand in which a manuscript is written. Declarations for classes, datatypes, and macros available to all TEI modules gives a name or other identifier for the scribe believed to be responsible for this hand. points to a full description of the scribe concerned, typically supplied by a person element elsewhere in the description. characterizes the particular script or writing style used by this hand, for example secretary , copperplate , Chancery , Italian , etc. points to a full description of the script or writing style used by this hand, typically supplied by a scriptNote element elsewhere in the description. describes the tint or type of ink, e.g. brown , or other writing medium, e.g. pencil specifies how widely this hand is used in the manuscript.","title":"att.handFeatures"}
{"link":"/ref/att.media","tag":"reference","content":"provides attributes for specifying display and related properties of external media. Declarations for classes, datatypes, and macros available to all TEI modules Where the media are displayed, indicates the display width Where the media are displayed, indicates the display height Where the media are displayed, indicates a scale factor to be applied when generating the desired display size","title":"att.media"}
{"link":"/ref/att.resourced","tag":"reference","content":"provides attributes by which a resource (such as an externally held media file) may be located. Declarations for classes, datatypes, and macros available to all TEI modules specifies the URL from which the media concerned may be obtained.","title":"att.resourced"}
{"link":"/ref/att.interpLike","tag":"reference","content":"provides attributes for elements which represent a formal analysis or interpretation. Declarations for classes, datatypes, and macros available to all TEI modules indicates what kind of phenomenon is being noted in the passage. provides a sub-categorization of the phenomenon is being noted in the passage, if needed points to instances of the analysis or interpretation represented by the current element.","title":"att.interpLike"}
{"link":"/ref/att.measurement","tag":"reference","content":"provides attributes to represent a regularized or normalized measurement. Declarations for classes, datatypes, and macros available to all TEI modules indicates the units used for the measurement, usually using the standard symbol for the desired units. points to a unique identifier stored in the xml:id of a unitDef element that defines a unit of measure. specifies the number of the specified units that comprise the measurement indicates the substance that is being measured","title":"att.measurement"}
{"link":"/ref/att.milestoneUnit","tag":"reference","content":"provides attributes to indicate the type of section which is changing at a specific milestone. Elements common to all TEI documents provides a conventional name for the kind of section changing at this milestone.","title":"att.milestoneUnit"}
{"link":"/ref/att.naming","tag":"reference","content":"provides attributes common to elements which refer to named persons, places, organizations etc. Declarations for classes, datatypes, and macros available to all TEI modules may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place. provides a means of locating the canonical form ( nym ) of the names associated with the object named by the element bearing it.","title":"att.naming"}
{"link":"/ref/att.notated","tag":"reference","content":"provides attributes to indicate any specialised notation used for element content. Declarations for classes, datatypes, and macros available to all TEI modules names the notation used for the content of the element.","title":"att.notated"}
{"link":"/ref/att.placement","tag":"reference","content":"provides attributes for describing where on the source page or object a textual element appears. Declarations for classes, datatypes, and macros available to all TEI modules specifies where this item is placed.","title":"att.placement"}
{"link":"/ref/att.typed","tag":"reference","content":"provides attributes that can be used to classify or subclassify elements in any way. Declarations for classes, datatypes, and macros available to all TEI modules characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed","title":"att.typed"}
{"link":"/ref/att.pointing","tag":"reference","content":"provides a set of attributes used by all elements which point to other elements by means of one or more URI references. Declarations for classes, datatypes, and macros available to all TEI modules specifies the language of the content to be found at the destination referenced by target, using a language tag generated according to BCP 47 . specifies the destination of the reference by supplying one or more URI References specifies the intended meaning when the target of a pointer is itself a pointer.","title":"att.pointing"}
{"link":"/ref/att.scoping","tag":"reference","content":"provides attributes for selecting particular elements within a document. Declarations for classes, datatypes, and macros available to all TEI modules points at one or more sets of zero or more elements each. supplies an XPath selection pattern using the syntax defined in 1 which identifies a set of nodes, selected within the context identified by the target attribute if this is supplied, or within the context of the parent element if it is not. ","title":"att.scoping"}
{"link":"/ref/att.pointing.group","tag":"reference","content":"provides a set of attributes common to all elements which enclose groups of pointer elements. Declarations for classes, datatypes, and macros available to all TEI modules optionally specifies the identifiers of the elements within which all elements indicated by the contents of this element lie. describes the function of each of the values of the target attribute of the enclosed link , join , or alt tags.","title":"att.pointing.group"}
{"link":"/ref/att.sortable","tag":"reference","content":"provides attributes for elements in lists or groups that are sortable, but whose sorting key cannot be derived mechanically from the element content. Declarations for classes, datatypes, and macros available to all TEI modules supplies the sort key for this element in an index, list or group which contains it.","title":"att.sortable"}
{"link":"/ref/att.segLike","tag":"reference","content":"provides attributes for elements used for arbitrary segmentation. Declarations for classes, datatypes, and macros available to all TEI modules characterizes the function of the segment.","title":"att.segLike"}
{"link":"/ref/att.edition","tag":"reference","content":"provides attributes identifying the source edition from which some encoded feature derives. Declarations for classes, datatypes, and macros available to all TEI modules supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text. provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.","title":"att.edition"}
{"link":"/ref/att.spanning","tag":"reference","content":"provides attributes for elements which delimit a span of text by pointing mechanisms rather than by enclosing it. Declarations for classes, datatypes, and macros available to all TEI modules indicates the end of a span initiated by the element bearing this attribute.","title":"att.spanning"}
{"link":"/ref/att.styleDef","tag":"reference","content":"provides attributes to specify the name of a formal definition language used to provide formatting or rendition information. Declarations for classes, datatypes, and macros available to all TEI modules identifies the language used to describe the rendition. supplies a version number for the style language provided in scheme.","title":"att.styleDef"}
{"link":"/ref/att.tableDecoration","tag":"reference","content":"provides attributes used to decorate rows or cells of a table. Tables, formulæ, notated music, and figures indicates the kind of information held in this cell or in each cell of this row. indicates the number of rows occupied by this cell or row. indicates the number of columns occupied by this cell or row.","title":"att.tableDecoration"}
{"link":"/ref/att.timed","tag":"reference","content":"provides attributes common to those elements which have a duration in time, expressed either absolutely or by reference to an alignment map. Declarations for classes, datatypes, and macros available to all TEI modules indicates the location within a temporal alignment at which this element begins. indicates the location within a temporal alignment at which this element ends.","title":"att.timed"}
{"link":"/ref/att.transcriptional","tag":"reference","content":"provides attributes specific to elements encoding authorial or scribal intervention in a text when transcribing manuscript or similar sources. Declarations for classes, datatypes, and macros available to all TEI modules indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present. documents the presumed cause for the intervention. assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.","title":"att.transcriptional"}
{"link":"/ref/model.nameLike.agent","tag":"reference","content":"groups elements which contain names of individuals or corporate bodies. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.nameLike.agent"}
{"link":"/ref/att.citing","tag":"reference","content":"provides attributes for specifying the specific part of a bibliographic item being cited. Declarations for classes, datatypes, and macros available to all TEI modules identifies the unit of information conveyed by the element, e.g. columns, pages, volume, entry. specifies the starting point of the range of units indicated by the unit attribute. specifies the end-point of the range of units indicated by the unit attribute.","title":"att.citing"}
{"link":"/ref/model.segLike","tag":"reference","content":"groups elements used for arbitrary segmentation. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.segLike"}
{"link":"/ref/model.hiLike","tag":"reference","content":"groups phrase-level elements which are typographically distinct but to which no specific function can be attributed. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.hiLike"}
{"link":"/ref/model.emphLike","tag":"reference","content":"groups phrase-level elements which are typographically distinct and to which a specific function can be attributed. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.emphLike"}
{"link":"/ref/model.highlighted","tag":"reference","content":"groups phrase-level elements which are typographically distinct. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.highlighted"}
{"link":"/ref/model.dateLike","tag":"reference","content":"groups elements containing temporal expressions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.dateLike"}
{"link":"/ref/model.dimLike","tag":"reference","content":"groups elements which describe a measurement forming part of the physical dimensions of some object. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.dimLike"}
{"link":"/ref/model.measureLike","tag":"reference","content":"groups elements which denote a number, a quantity, a measurement, or similar piece of text that conveys some numerical meaning. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.measureLike"}
{"link":"/ref/model.graphicLike","tag":"reference","content":"groups elements containing images, formulae, and similar objects. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.graphicLike"}
{"link":"/ref/model.egLike","tag":"reference","content":"groups elements containing examples or illustrations. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.egLike"}
{"link":"/ref/model.offsetLike","tag":"reference","content":"groups elements which can appear only as part of a place name. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.offsetLike"}
{"link":"/ref/model.pPart.msdesc","tag":"reference","content":"groups phrase-level elements used in manuscript description. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.pPart.msdesc"}
{"link":"/ref/model.pPart.editorial","tag":"reference","content":"groups phrase-level elements for simple editorial interventions that may be useful both in transcribing and in authoring. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.pPart.editorial"}
{"link":"/ref/model.pPart.transcriptional","tag":"reference","content":"groups phrase-level elements used for editorial transcription of pre-existing source materials. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.pPart.transcriptional"}
{"link":"/ref/model.pPart.edit","tag":"reference","content":"groups phrase-level elements for simple editorial correction and transcription. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.pPart.edit"}
{"link":"/ref/model.linePart","tag":"reference","content":"groups transcriptional elements which appear within lines or zones of a source-oriented transcription within a sourceDoc element. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.linePart"}
{"link":"/ref/model.ptrLike","tag":"reference","content":"groups elements used for purposes of location and reference. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.ptrLike"}
{"link":"/ref/model.lPart","tag":"reference","content":"groups phrase-level elements which may appear within verse only. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.lPart"}
{"link":"/ref/model.global.meta","tag":"reference","content":"groups globally available elements which describe the status of other elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.global.meta"}
{"link":"/ref/model.milestoneLike","tag":"reference","content":"groups milestone-style elements used to represent reference systems. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.milestoneLike"}
{"link":"/ref/model.oddDecl","tag":"reference","content":"groups elements which generate declarations in some markup language in ODD documents. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.oddDecl"}
{"link":"/ref/model.phrase.xml","tag":"reference","content":"groups phrase-level elements used to encode XML constructs such as element names, attribute names, and attribute values Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.phrase.xml"}
{"link":"/ref/model.specDescLike","tag":"reference","content":"groups elements for referring to specification elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.specDescLike"}
{"link":"/ref/model.biblLike","tag":"reference","content":"groups elements containing a bibliographic description. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.biblLike"}
{"link":"/ref/model.headLike","tag":"reference","content":"groups elements used to provide a title or heading at the start of a text division. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.headLike"}
{"link":"/ref/model.labelLike","tag":"reference","content":"groups elements used to gloss or explain other parts of a document. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.labelLike"}
{"link":"/ref/model.listLike","tag":"reference","content":"groups list-like elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.listLike"}
{"link":"/ref/model.lLike","tag":"reference","content":"groups elements representing metrical components such as verse lines. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.lLike"}
{"link":"/ref/model.noteLike","tag":"reference","content":"groups globally-available note-like elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.noteLike"}
{"link":"/ref/model.pLike","tag":"reference","content":"groups paragraph-like elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.pLike"}
{"link":"/ref/model.stageLike","tag":"reference","content":"groups elements containing stage directions or similar things defined by the module for performance texts. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.stageLike"}
{"link":"/ref/model.featureVal.complex","tag":"reference","content":"groups elements which express complex feature values in feature structures. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.featureVal.complex"}
{"link":"/ref/model.featureVal.single","tag":"reference","content":"group elements used to represent atomic feature values in feature structures. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.featureVal.single"}
{"link":"/ref/model.entryPart","tag":"reference","content":"groups non-morphological elements appearing within a dictionary entry. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.entryPart"}
{"link":"/ref/model.eventLike","tag":"reference","content":"groups elements which describe events. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.eventLike"}
{"link":"/ref/model.entryPart.top","tag":"reference","content":"groups high level elements within a structured dictionary entry Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.entryPart.top"}
{"link":"/ref/model.global.edit","tag":"reference","content":"groups globally available elements which perform a specifically editorial function. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.global.edit"}
{"link":"/ref/model.global.spoken","tag":"reference","content":"groups elements which may appear globally within spoken texts. Transcribed Speech","title":"model.global.spoken"}
{"link":"/ref/model.persStateLike","tag":"reference","content":"groups elements describing changeable characteristics of a person which have a definite duration, for example occupation, residence, or name. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.persStateLike"}
{"link":"/ref/model.divPart","tag":"reference","content":"groups paragraph-level elements appearing directly within divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divPart"}
{"link":"/ref/model.personLike","tag":"reference","content":"groups elements which provide information about people and their relationships. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.personLike"}
{"link":"/ref/model.personPart","tag":"reference","content":"groups elements which form part of the description of a person. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.personPart"}
{"link":"/ref/model.placeStateLike","tag":"reference","content":"groups elements which describe changing states of a place. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.placeStateLike"}
{"link":"/ref/model.placeNamePart","tag":"reference","content":"groups elements which form part of a place name. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.placeNamePart"}
{"link":"/ref/model.orgPart","tag":"reference","content":"groups elements which form part of the description of an organization. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.orgPart"}
{"link":"/ref/model.publicationStmtPart.agency","tag":"reference","content":"groups the child elements of a publicationStmt element of the TEI header that indicate an authorising agent. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.publicationStmtPart.agency"}
{"link":"/ref/model.availabilityPart","tag":"reference","content":"groups elements such as licences and paragraphs of text which may appear as part of an availability statement Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.availabilityPart"}
{"link":"/ref/model.publicationStmtPart.detail","tag":"reference","content":"groups the agency-specific child elements of the publicationStmt element of the TEI header. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.publicationStmtPart.detail"}
{"link":"/ref/model.certLike","tag":"reference","content":"groups elements which are used to indicate uncertainty or precision of other elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.certLike"}
{"link":"/ref/model.descLike","tag":"reference","content":"groups elements which contain a description of their function. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.descLike"}
{"link":"/ref/model.glossLike","tag":"reference","content":"groups elements which provide an alternative name, explanation, or description for any markup construct. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.glossLike"}
{"link":"/ref/model.quoteLike","tag":"reference","content":"groups elements used to directly contain quotations. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.quoteLike"}
{"link":"/ref/model.attributable","tag":"reference","content":"groups elements that contain a word or phrase that can be attributed to a source. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.attributable"}
{"link":"/ref/model.rdgLike","tag":"reference","content":"groups elements which contain a single reading, other than the lemma, within a textual variation. Critical Apparatus","title":"model.rdgLike"}
{"link":"/ref/model.respLike","tag":"reference","content":"groups elements which are used to indicate intellectual or other significant responsibility, for example within a bibliographic element. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.respLike"}
{"link":"/ref/model.divWrapper","tag":"reference","content":"groups elements which can appear at either top or bottom of a textual division. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divWrapper"}
{"link":"/ref/model.divTopPart","tag":"reference","content":"groups elements which can occur only at the beginning of a text division. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divTopPart"}
{"link":"/ref/model.divTop","tag":"reference","content":"groups elements appearing at the beginning of a text division. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divTop"}
{"link":"/ref/model.frontPart.drama","tag":"reference","content":"groups elements which appear at the level of divisions within front or back matter of performance texts only. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.frontPart.drama"}
{"link":"/ref/model.pLike.front","tag":"reference","content":"groups paragraph-like elements which can occur as direct constituents of front matter. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.pLike.front"}
{"link":"/ref/model.divBottomPart","tag":"reference","content":"groups elements which can occur only at the end of a text division. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divBottomPart"}
{"link":"/ref/model.oddRef","tag":"reference","content":"groups elements which reference declarations in some markup language in ODD documents. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.oddRef"}
{"link":"/ref/model.titlepagePart","tag":"reference","content":"groups elements which can occur as direct constituents of a title page, such as docTitle , docAuthor , docImprint , or epigraph . Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.titlepagePart"}
{"link":"/ref/model.msQuoteLike","tag":"reference","content":"groups elements which represent passages such as titles quoted from a manuscript as a part of its description. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.msQuoteLike"}
{"link":"/ref/model.msItemPart","tag":"reference","content":"groups elements which can appear within a manuscript item description. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.msItemPart"}
{"link":"/ref/model.choicePart","tag":"reference","content":"groups elements (other than choice itself) which can be used within a choice alternation. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.choicePart"}
{"link":"/ref/model.recordingPart","tag":"reference","content":"groups elements used to describe details of an audio or video recording. Transcribed Speech","title":"model.recordingPart"}
{"link":"/ref/model.catDescPart","tag":"reference","content":"groups component elements of the TEI header Category Description. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.catDescPart"}
{"link":"/ref/model.imprintPart","tag":"reference","content":"groups the bibliographic elements which occur inside imprints. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.imprintPart"}
{"link":"/ref/model.settingPart","tag":"reference","content":"groups elements used to describe the setting of a linguistic interaction. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.settingPart"}
{"link":"/ref/model.textDescPart","tag":"reference","content":"groups elements used to categorize a text for example in terms of its situational parameters. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.textDescPart"}
{"link":"/ref/model.castItemPart","tag":"reference","content":"groups component elements of an entry in a cast list, such as dramatic role or actor's name. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.castItemPart"}
{"link":"/ref/model.addressLike","tag":"reference","content":"groups elements used to represent a postal or email address. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.addressLike"}
{"link":"/ref/model.nameLike","tag":"reference","content":"groups elements which name or refer to a person, place, or organization. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.nameLike"}
{"link":"/ref/model.persNamePart","tag":"reference","content":"groups elements which form part of a personal name. Names and dates","title":"model.persNamePart"}
{"link":"/ref/model.global","tag":"reference","content":"groups elements which may appear at any point within a TEI text. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.global"}
{"link":"/ref/model.featureVal","tag":"reference","content":"groups elements which represent feature values in feature structures. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.featureVal"}
{"link":"/ref/model.addrPart","tag":"reference","content":"groups elements such as names or postal codes which may appear as part of a postal address. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.addrPart"}
{"link":"/ref/model.frontPart","tag":"reference","content":"groups elements which appear at the level of divisions within front or back matter. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.frontPart"}
{"link":"/ref/model.pPart.data","tag":"reference","content":"groups phrase-level elements containing names, dates, numbers, measures, and similar data. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.pPart.data"}
{"link":"/ref/model.inter","tag":"reference","content":"groups elements which can appear either within or between paragraph-like elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.inter"}
{"link":"/ref/model.biblPart","tag":"reference","content":"groups elements which represent components of a bibliographic description. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.biblPart"}
{"link":"/ref/model.common","tag":"reference","content":"groups common chunk- and inter-level elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.common"}
{"link":"/ref/model.phrase","tag":"reference","content":"groups elements which can occur at the level of individual words or phrases. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.phrase"}
{"link":"/ref/model.limitedPhrase","tag":"reference","content":"groups phrase-level elements excluding those elements primarily intended for transcription of existing sources. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.limitedPhrase"}
{"link":"/ref/model.divGenLike","tag":"reference","content":"groups elements used to represent a structural division which is generated rather than explicitly present in the source. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divGenLike"}
{"link":"/ref/model.divLike","tag":"reference","content":"groups elements used to represent un-numbered generic structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divLike"}
{"link":"/ref/model.div1Like","tag":"reference","content":"groups top-level structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.div1Like"}
{"link":"/ref/model.div2Like","tag":"reference","content":"groups second-level structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.div2Like"}
{"link":"/ref/model.div3Like","tag":"reference","content":"groups third-level structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.div3Like"}
{"link":"/ref/model.div4Like","tag":"reference","content":"groups fourth-level structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.div4Like"}
{"link":"/ref/att.internetMedia","tag":"reference","content":"provides attributes for specifying the type of a computer resource using a standard taxonomy. Declarations for classes, datatypes, and macros available to all TEI modules specifies the applicable multimedia internet mail extension (MIME) media type","title":"att.internetMedia"}
{"link":"/ref/model.divBottom","tag":"reference","content":"groups elements appearing at the end of a text division. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.divBottom"}
{"link":"/ref/model.div6Like","tag":"reference","content":"groups sixth-level structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.div6Like"}
{"link":"/ref/model.div7Like","tag":"reference","content":"groups seventh-level structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.div7Like"}
{"link":"/ref/model.annotationLike","tag":"reference","content":"groups elements used to represent annotations. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.annotationLike"}
{"link":"/ref/model.annotationPart.body","tag":"reference","content":"groups elements which may be used as an annotation body. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.annotationPart.body"}
{"link":"/ref/model.teiHeaderPart","tag":"reference","content":"groups high level elements which may appear more than once in a TEI header. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.teiHeaderPart"}
{"link":"/ref/model.applicationLike","tag":"reference","content":"groups elements used to record application-specific information about a document in its header. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.applicationLike"}
{"link":"/ref/model.sourceDescPart","tag":"reference","content":"groups elements which may be used inside sourceDesc and appear multiple times. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.sourceDescPart"}
{"link":"/ref/model.encodingDescPart","tag":"reference","content":"groups elements which may be used inside encodingDesc and appear multiple times. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.encodingDescPart"}
{"link":"/ref/model.standOffPart","tag":"reference","content":"groups elements which may be used as children of standOff . Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.standOffPart"}
{"link":"/ref/model.editorialDeclPart","tag":"reference","content":"groups elements which may be used inside editorialDecl and appear multiple times. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.editorialDeclPart"}
{"link":"/ref/model.profileDescPart","tag":"reference","content":"groups elements which may be used inside profileDesc and appear multiple times. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.profileDescPart"}
{"link":"/ref/macro.limitedContent","tag":"reference","content":"defines the content of prose elements that are not used for transcription of extant materials. Declarations for classes, datatypes, and macros available to all TEI modules","title":"macro.limitedContent"}
{"link":"/ref/macro.phraseSeq","tag":"reference","content":"defines a sequence of character data and phrase-level elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"macro.phraseSeq"}
{"link":"/ref/macro.phraseSeq.limited","tag":"reference","content":"defines a sequence of character data and those phrase-level elements that are not typically used for transcribing extant documents. Declarations for classes, datatypes, and macros available to all TEI modules","title":"macro.phraseSeq.limited"}
{"link":"/ref/macro.specialPara","tag":"reference","content":"defines the content model of elements such as notes or list items, which either contain a series of component-level elements or else have the same structure as a paragraph, containing a series of phrase-level and inter-level elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"macro.specialPara"}
{"link":"/ref/macro.xtext","tag":"reference","content":"defines a sequence of character data and gaiji elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"macro.xtext"}
{"link":"/ref/teidata.certainty","tag":"reference","content":"defines the range of attribute values expressing a degree of certainty.","title":"teidata.certainty"}
{"link":"/ref/teidata.numeric","tag":"reference","content":"defines the range of attribute values used for numeric values.","title":"teidata.numeric"}
{"link":"/ref/teidata.probability","tag":"reference","content":"defines the range of attribute values expressing a probability.","title":"teidata.probability"}
{"link":"/ref/teidata.interval","tag":"reference","content":"defines attribute values used to express an interval value.","title":"teidata.interval"}
{"link":"/ref/teidata.count","tag":"reference","content":"defines the range of attribute values used for a non-negative integer value used as a count.","title":"teidata.count"}
{"link":"/ref/teidata.temporal.w3c","tag":"reference","content":"defines the range of attribute values expressing a temporal expression such as a date, a time, or a combination of them, that conform to the W3C XML Schema Part 2: Datatypes Second Edition specification.","title":"teidata.temporal.w3c"}
{"link":"/ref/teidata.duration.w3c","tag":"reference","content":"defines the range of attribute values available for representation of a duration in time using W3C datatypes.","title":"teidata.duration.w3c"}
{"link":"/ref/teidata.temporal.working","tag":"reference","content":"defines the range of values, conforming to the W3C XML Schema Part 2: Datatypes Second Edition specification, expressing a date or a date and a time within the working life of the document.","title":"teidata.temporal.working"}
{"link":"/ref/teidata.truthValue","tag":"reference","content":"defines the range of attribute values used to express a truth value.","title":"teidata.truthValue"}
{"link":"/ref/teidata.xTruthValue","tag":"reference","content":"defines the range of attribute values used to express a truth value which may be unknown.","title":"teidata.xTruthValue"}
{"link":"/ref/teidata.language","tag":"reference","content":"defines the range of attribute values used to identify a particular combination of human language and writing system.","title":"teidata.language"}
{"link":"/ref/teidata.namespace","tag":"reference","content":"defines the range of attribute values used to indicate XML namespaces as defined by the W3C Namespaces in XML Technical Recommendation.","title":"teidata.namespace"}
{"link":"/ref/teidata.namespaceOrName","tag":"reference","content":"defines attribute values which contain either an absolute namespace URI or a qualified XML name.","title":"teidata.namespaceOrName"}
{"link":"/ref/teidata.outputMeasurement","tag":"reference","content":"defines a range of values for use in specifying the size of an object that is intended for display.","title":"teidata.outputMeasurement"}
{"link":"/ref/teidata.pattern","tag":"reference","content":"defines attribute values which are expressed as a regular expression.","title":"teidata.pattern"}
{"link":"/ref/teidata.point","tag":"reference","content":"defines the data type used to express a point in cartesian space.","title":"teidata.point"}
{"link":"/ref/teidata.pointer","tag":"reference","content":"defines the range of attribute values used to provide a single URI, absolute or relative, pointing to some other resource, either within the current document or elsewhere.","title":"teidata.pointer"}
{"link":"/ref/teidata.authority","tag":"reference","content":"defines attribute values which derive from an authority list, which may be an enumerated list defined in the document's schema, a list or taxonomy elsewhere in the document, or an online taxonomy, gazetteer, or other authority.","title":"teidata.authority"}
{"link":"/ref/teidata.versionNumber","tag":"reference","content":"defines the range of attribute values used for version numbers.","title":"teidata.versionNumber"}
{"link":"/ref/teidata.version","tag":"reference","content":"defines the range of attribute values which may be used to specify a TEI or Unicode version number.","title":"teidata.version"}
{"link":"/ref/att.anchoring","tag":"reference","content":"provides attributes for use on annotations, e.g. notes and groups of notes describing the existence and position of an anchor for annotations. Declarations for classes, datatypes, and macros available to all TEI modules indicates whether the copy text shows the exact place of reference for the note. points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.","title":"att.anchoring"}
{"link":"/ref/teidata.replacement","tag":"reference","content":"defines attribute values which contain a replacement template.","title":"teidata.replacement"}
{"link":"/ref/teidata.xpath","tag":"reference","content":"defines attribute values which contain an XPath expression.","title":"teidata.xpath"}
{"link":"/ref/teidata.prefix","tag":"reference","content":"defines a range of values that may function as a URI scheme name.","title":"teidata.prefix"}
{"link":"/ref/teidata.xmlName","tag":"reference","content":"defines attribute values which contain an XML name.","title":"teidata.xmlName"}
{"link":"/ref/teidata.enumerated","tag":"reference","content":"defines the range of attribute values expressed as a single XML name taken from a list of documented possibilities.","title":"teidata.enumerated"}
{"link":"/ref/teidata.gender","tag":"reference","content":"defines the range of attribute values used to represent the gender of a person, persona, or character.","title":"teidata.gender"}
{"link":"/ref/teidata.sex","tag":"reference","content":"defines the range of attribute values used to identify the sex of an organism.","title":"teidata.sex"}
{"link":"/ref/teidata.unboundedInt","tag":"reference","content":"defines an attribute value which can be either any non-negative integer or the string \"unbounded\".","title":"teidata.unboundedInt"}
{"link":"/ref/teidata.probCert","tag":"reference","content":"defines a range of attribute values which can be expressed either as a numeric probability or as a coded certainty value.","title":"teidata.probCert"}
{"link":"/ref/teidata.nullOrName","tag":"reference","content":"defines attribute values which contain either the null string or an XML name.","title":"teidata.nullOrName"}
{"link":"/ref/teiHeader","tag":"reference","content":"supplies descriptive and declarative metadata associated with a digital resource or set of resources. The TEI header","title":"teiHeader"}
{"link":"/ref/fileDesc","tag":"reference","content":"contains a full bibliographic description of an electronic file. The TEI header","title":"fileDesc"}
{"link":"/ref/titleStmt","tag":"reference","content":"groups information about the title of a work and those responsible for its content. The TEI header","title":"titleStmt"}
{"link":"/ref/sponsor","tag":"reference","content":"specifies the name of a sponsoring organization or institution. The TEI header","title":"sponsor"}
{"link":"/ref/funder","tag":"reference","content":"specifies the name of an individual, institution, or organization responsible for the funding of a project or text. The TEI header","title":"funder"}
{"link":"/ref/principal","tag":"reference","content":"supplies the name of the principal researcher responsible for the creation of an electronic text. The TEI header","title":"principal"}
{"link":"/ref/editionStmt","tag":"reference","content":"groups information relating to one edition of a text. The TEI header","title":"editionStmt"}
{"link":"/ref/edition","tag":"reference","content":"describes the particularities of one edition of a text. The TEI header","title":"edition"}
{"link":"/ref/model.gLike","tag":"reference","content":"groups elements used to represent individual non-Unicode characters or glyphs. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.gLike"}
{"link":"/ref/publicationStmt","tag":"reference","content":"groups information concerning the publication or distribution of an electronic or other text. The TEI header","title":"publicationStmt"}
{"link":"/ref/distributor","tag":"reference","content":"supplies the name of a person or other agency responsible for the distribution of a text. The TEI header","title":"distributor"}
{"link":"/ref/authority","tag":"reference","content":"supplies the name of a person or other agency responsible for making a work available, other than a publisher or distributor. The TEI header","title":"authority"}
{"link":"/ref/idno","tag":"reference","content":"supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. The TEI header categorizes the identifier, for example as an ISBN, Social Security number, etc.","title":"idno"}
{"link":"/ref/availability","tag":"reference","content":"supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. The TEI header supplies a code identifying the current availability of the text.","title":"availability"}
{"link":"/ref/licence","tag":"reference","content":"contains information about a licence or other legal agreement applicable to the text. The TEI header","title":"licence"}
{"link":"/ref/teidata.word","tag":"reference","content":"defines the range of attribute values expressed as a single word or token.","title":"teidata.word"}
{"link":"/ref/seriesStmt","tag":"reference","content":"groups information about the series, if any, to which a publication belongs. The TEI header","title":"seriesStmt"}
{"link":"/ref/sourceDesc","tag":"reference","content":"describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as \"born digital\" for a text which has no previous existence. The TEI header","title":"sourceDesc"}
{"link":"/ref/biblFull","tag":"reference","content":"contains a fully-structured bibliographic citation, in which all components of the TEI file description are present. The TEI header","title":"biblFull"}
{"link":"/ref/encodingDesc","tag":"reference","content":"documents the relationship between an electronic text and the source or sources from which it was derived. The TEI header","title":"encodingDesc"}
{"link":"/ref/schemaRef","tag":"reference","content":"describes or points to a related customization or schema file The TEI header the identifier used for the customization or schema","title":"schemaRef"}
{"link":"/ref/samplingDecl","tag":"reference","content":"contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. The TEI header","title":"samplingDecl"}
{"link":"/ref/projectDesc","tag":"reference","content":"describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. The TEI header","title":"projectDesc"}
{"link":"/ref/editorialDecl","tag":"reference","content":"provides details of editorial principles and practices applied during the encoding of a text. The TEI header","title":"editorialDecl"}
{"link":"/ref/correction","tag":"reference","content":"states how and under what circumstances corrections have been made in the text. The TEI header indicates the degree of correction applied to the text. indicates the method adopted to indicate corrections within the text.","title":"correction"}
{"link":"/ref/normalization","tag":"reference","content":"indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. The TEI header indicates the method adopted to indicate normalizations within the text.","title":"normalization"}
{"link":"/ref/quotation","tag":"reference","content":"specifies editorial practice adopted with respect to quotation marks in the original. The TEI header indicates whether or not quotation marks have been retained as content within the text.","title":"quotation"}
{"link":"/ref/hyphenation","tag":"reference","content":"summarizes the way in which hyphenation in a source text has been treated in an encoded version of it. The TEI header indicates whether or not end-of-line hyphenation has been retained in a text.","title":"hyphenation"}
{"link":"/ref/segmentation","tag":"reference","content":"describes the principles according to which the text has been segmented, for example into sentences, tone-units, graphemic strata, etc. The TEI header","title":"segmentation"}
{"link":"/ref/stdVals","tag":"reference","content":"specifies the format used when standardized date or number values are supplied. The TEI header","title":"stdVals"}
{"link":"/ref/interpretation","tag":"reference","content":"describes the scope of any analytic or interpretive information added to the text in addition to the transcription. The TEI header","title":"interpretation"}
{"link":"/ref/punctuation","tag":"reference","content":"specifies editorial practice adopted with respect to punctuation marks in the original. The TEI header indicates whether or not punctation marks have been retained as content within the text. indicates the positioning of punctuation marks that are associated with marked up text as being encoded within the element surrounding the text or immediately before or after it.","title":"punctuation"}
{"link":"/ref/tagUsage","tag":"reference","content":"documents the usage of a specific element within a specified document. The TEI header specifies the name (generic identifier) of the element indicated by the tag, within the namespace indicated by the parent namespace element. specifies the number of occurrences of this element within the text. specifies the number of occurrences of this element within the text which bear a distinct value for the global xml:id attribute.","title":"tagUsage"}
{"link":"/ref/tagsDecl","tag":"reference","content":"provides detailed information about the tagging applied to a document. The TEI header indicates whether the element types listed exhaustively include all those found within text , or represent only a subset.","title":"tagsDecl"}
{"link":"/ref/namespace","tag":"reference","content":"supplies the formal name of the namespace to which the elements documented by its children belong. The TEI header specifies the full formal name of the namespace concerned.","title":"namespace"}
{"link":"/ref/rendition","tag":"reference","content":"supplies information about the rendition or appearance of one or more elements in the source text. The TEI header where CSS is used, provides a way of defining pseudo-elements, that is, styling rules applicable to specific sub-portions of an element. contains a selector or series of selectors specifying the elements to which the contained style description applies, expressed in the language specified in the scheme attribute. ","title":"rendition"}
{"link":"/ref/styleDefDecl","tag":"reference","content":"specifies the name of the formal language in which style or renditional information is supplied elsewhere in the document. The specific version of the scheme may also be supplied. The TEI header","title":"styleDefDecl"}
{"link":"/ref/citeStructure","tag":"reference","content":"declares a structure and method for citing the current document. The TEI header supplies a delimiting string preceding the structural component. supplies an XPath selection pattern using the syntax defined in 1 which identifies a set of nodes which are citable structural components. The expression may be absolute (beginning with / ) or relative. match on a citeStructure without a citeStructure parent must be an absolute XPath. If it is relative, its context is set by the match of the parent citeStructure . describes the structural unit indicated by the citeStructure .","title":"citeStructure"}
{"link":"/ref/refsDecl","tag":"reference","content":"specifies how canonical references are constructed for this text. The TEI header","title":"refsDecl"}
{"link":"/ref/citeData","tag":"reference","content":"specifies how information may be extracted from citation structures. The TEI header A URI indicating a property definition.","title":"citeData"}
{"link":"/ref/att.citeStructurePart","tag":"reference","content":"provides attributes for selecting particular elements within a document. The TEI header supplies an XPath selection pattern using the syntax defined in 1 . The XPath pattern is relative to the context given in match, which will either be a sibling attribute in the case of citeStructure or on the parent citeStructure in the case of citeData.","title":"att.citeStructurePart"}
{"link":"/ref/cRefPattern","tag":"reference","content":"specifies an expression and replacement pattern for transforming a canonical reference into a URI. The TEI header","title":"cRefPattern"}
{"link":"/ref/prefixDef","tag":"reference","content":"defines a prefixing scheme used in teidata.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. The TEI header supplies a name which functions as the prefix for an abbreviated pointing scheme such as a private URI scheme. The prefix constitutes the text preceding the first colon.","title":"prefixDef"}
{"link":"/ref/att.patternReplacement","tag":"reference","content":"provides attributes for regular-expression matching and replacement. The TEI header specifies a regular expression against which the values of other attributes can be matched. specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the matchPattern which, once subpattern substitution has been performed, complete the URI.","title":"att.patternReplacement"}
{"link":"/ref/refState","tag":"reference","content":"specifies one component of a canonical reference defined by the milestone method. The TEI header specifies the fixed length of the reference component. supplies a delimiting string following the reference component.","title":"refState"}
{"link":"/ref/listPrefixDef","tag":"reference","content":"contains a list of definitions of prefixing schemes used in teidata.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. The TEI header","title":"listPrefixDef"}
{"link":"/ref/classDecl","tag":"reference","content":"contains one or more taxonomies defining any classificatory codes used elsewhere in the text. The TEI header","title":"classDecl"}
{"link":"/ref/taxonomy","tag":"reference","content":"defines a typology either implicitly, by means of a bibliographic citation, or explicitly by a structured taxonomy. The TEI header","title":"taxonomy"}
{"link":"/ref/category","tag":"reference","content":"contains an individual descriptive category, possibly nested within a superordinate category, within a user-defined taxonomy. The TEI header","title":"category"}
{"link":"/ref/catDesc","tag":"reference","content":"describes some category within a taxonomy or text typology, either in the form of a brief prose description or in terms of the situational parameters used by the TEI formal textDesc . The TEI header","title":"catDesc"}
{"link":"/ref/geoDecl","tag":"reference","content":"documents the notation and the datum used for geographic coordinates expressed as content of the geo element elsewhere within the document. The TEI header supplies a commonly used code name for the datum employed.","title":"geoDecl"}
{"link":"/ref/unitDecl","tag":"reference","content":"provides information about units of measurement that are not members of the International System of Units. The TEI header","title":"unitDecl"}
{"link":"/ref/model.div5Like","tag":"reference","content":"groups fifth-level structural divisions. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.div5Like"}
{"link":"/ref/conversion","tag":"reference","content":"defines how to calculate one unit of measure in terms of another. The TEI header indicates a source unit of measure that is to be converted into another unit indicated in toUnit. the target unit of measurement for a conversion from a source unit referenced in fromUnit.","title":"conversion"}
{"link":"/ref/att.formula","tag":"reference","content":"provides attributes for defining a mathematical formula. Declarations for classes, datatypes, and macros available to all TEI modules A formula is provided to describe a mathematical calculation such as a conversion between measurement systems.","title":"att.formula"}
{"link":"/ref/att.locatable","tag":"reference","content":"provides attributes for referencing locations by pointing to entries in a canonical list of places. Declarations for classes, datatypes, and macros available to all TEI modules indicates one or more locations by pointing to a place element or other canonical description.","title":"att.locatable"}
{"link":"/ref/appInfo","tag":"reference","content":"records information about an application which has edited the TEI file. The TEI header","title":"appInfo"}
{"link":"/ref/application","tag":"reference","content":"provides information about an application which has acted upon the document. The TEI header supplies an identifier for the application, independent of its version number or display name. supplies a version number for the application, independent of its identifier or display name.","title":"application"}
{"link":"/ref/handNote","tag":"reference","content":"describes a particular style or hand distinguished within a manuscript. The TEI header","title":"handNote"}
{"link":"/ref/abstract","tag":"reference","content":"contains a summary or formal abstract prefixed to an existing source document by the encoder. The TEI header","title":"abstract"}
{"link":"/ref/creation","tag":"reference","content":"contains information about the creation of a text. The TEI header","title":"creation"}
{"link":"/ref/att.global.source","tag":"reference","content":"provides attributes used by elements to point to an external source. Declarations for classes, datatypes, and macros available to all TEI modules specifies the source from which some aspect of this element is drawn.","title":"att.global.source"}
{"link":"/ref/langUsage","tag":"reference","content":"describes the languages, sublanguages, registers, dialects, etc. represented within a text. The TEI header","title":"langUsage"}
{"link":"/ref/textClass","tag":"reference","content":"groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. The TEI header","title":"textClass"}
{"link":"/ref/language","tag":"reference","content":"characterizes a single language or sublanguage used within a text. The TEI header Supplies a language code constructed as defined in BCP 47 which is used to identify the language documented by this element, and which is referenced by the global xml:lang attribute. specifies the approximate percentage (by volume) of the text which uses this language.","title":"language"}
{"link":"/ref/keywords","tag":"reference","content":"contains a list of keywords or phrases identifying the topic or nature of a text. The TEI header identifies the controlled vocabulary within which the set of keywords concerned is defined, for example by a taxonomy element, or by some other resource.","title":"keywords"}
{"link":"/ref/catRef","tag":"reference","content":"specifies one or more defined categories within some taxonomy or text typology. The TEI header identifies the classification scheme within which the set of categories concerned is defined, for example by a taxonomy element, or by some other resource.","title":"catRef"}
{"link":"/ref/classCode","tag":"reference","content":"contains the classification code used for this text in some standard classification system. The TEI header identifies the classification system in use, as defined by, e.g. a taxonomy element, or some other resource.","title":"classCode"}
{"link":"/ref/calendarDesc","tag":"reference","content":"contains a description of the calendar system used in any dating expression found in the text. The TEI header","title":"calendarDesc"}
{"link":"/ref/correspDesc","tag":"reference","content":"contains a description of the actions related to one act of correspondence. The TEI header","title":"correspDesc"}
{"link":"/ref/calendar","tag":"reference","content":"describes a calendar or dating system used in a dating formula in the text. The TEI header","title":"calendar"}
{"link":"/ref/correspContext","tag":"reference","content":"provides references to preceding or following correspondence related to this piece of correspondence. The TEI header","title":"correspContext"}
{"link":"/ref/correspAction","tag":"reference","content":"contains a structured description of the place, the name of a person/organization and the date related to the sending/receiving of a message or any other action related to the correspondence. The TEI header describes the nature of the action.","title":"correspAction"}
{"link":"/ref/model.correspActionPart","tag":"reference","content":"groups elements which define the parts (usually names, dates and places) of one action related to the correspondence. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.correspActionPart"}
{"link":"/ref/model.correspContextPart","tag":"reference","content":"groups elements which may appear as part of the correspContext element Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.correspContextPart"}
{"link":"/ref/model.correspDescPart","tag":"reference","content":"groups together metadata elements for describing correspondence Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.correspDescPart"}
{"link":"/ref/xenoData","tag":"reference","content":"provides a container element into which metadata in non-TEI formats may be placed. The TEI header","title":"xenoData"}
{"link":"/ref/revisionDesc","tag":"reference","content":"summarizes the revision history for a file. The TEI header","title":"revisionDesc"}
{"link":"/ref/change","tag":"reference","content":"documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. The TEI header points to one or more elements that belong to this change.","title":"change"}
{"link":"/ref/p","tag":"reference","content":"marks paragraphs in prose. Elements common to all TEI documents","title":"p"}
{"link":"/ref/foreign","tag":"reference","content":"identifies a word or phrase as belonging to some language other than that of the surrounding text. Elements common to all TEI documents","title":"foreign"}
{"link":"/ref/emph","tag":"reference","content":"marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. Elements common to all TEI documents","title":"emph"}
{"link":"/ref/hi","tag":"reference","content":"marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. Elements common to all TEI documents","title":"hi"}
{"link":"/ref/distinct","tag":"reference","content":"identifies any word or phrase which is regarded as linguistically distinct, for example as archaic, technical, dialectal, non-preferred, etc., or as forming part of a sublanguage. Elements common to all TEI documents specifies the sublanguage or register to which the word or phrase is being assigned specifies how the phrase is distinct diachronically specifies how the phrase is distinct diatopically specifies how the phrase is distinct diastratically","title":"distinct"}
{"link":"/ref/said","tag":"reference","content":"indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. Elements common to all TEI documents may be used to indicate whether the quoted matter is regarded as having been vocalized or signed. may be used to indicate whether the quoted matter is regarded as direct or indirect speech.","title":"said"}
{"link":"/ref/quote","tag":"reference","content":"contains a phrase or passage attributed by the narrator or author to some agency external to the text. Elements common to all TEI documents","title":"quote"}
{"link":"p5.xml?id=TitlePageVerso","tag":"guidelines","content":"1 Releases of the TEI Guidelines 1990, C.M. Sperberg-McQueen and Lou Burnard 1992, C.M. Sperberg-McQueen and Lou Burnard 1994, C.M. Sperberg-McQueen and Lou Burnard 2001, Lou Burnard, Syd Bauman, and Steven DeRose 2007, Lou Burnard and Syd Bauman","title":"<span class=\"tei-front1 breadcrumb\">Front matter</span> <span class=\"tei-div7 breadcrumb\">1 Releases of the TEI Guidelines</span>"}
{"link":"p5.xml?id=dedication","tag":"guidelines","content":"2 Dedication Donald E. Walker 22 November 1928 – 26 November 1993 Antonio Zampolli 1937 – 22 August 2003 Sebastian Rahtz 13 February 1955 – 15 March 2016 ","title":"<span class=\"tei-front1 breadcrumb\">Front matter</span> <span class=\"tei-div7 breadcrumb\">2 Dedication</span>"}
{"link":"p5.xml?id=FM1","tag":"guidelines","content":"3 Preface and Acknowledgments This publication constitutes the fifth distinct version of the Guidelines for Electronic Text Encoding and Interchange , and the first complete revision since the appearance of P3 in 1994. It includes substantial amounts of new material and a major revision of the underlying technical infrastructure. With this version, these Guidelines enter a new stage in their development as a community-maintained open source project. This edition is the first version to have benefitted from the close overview and oversight of an elected TEI Technical Council. The editors are therefore particularly pleased to acknowledge with gratitude the hard work and dedication put into this project by the Council over the last five years. The Chair of the TEI Board sits on the Technical Council, and the Board appoints the Chair of the Technical Council and one other member of the Council. Other Council members are all elected by the Consortium membership, and serve periods of up to two years at a time. The names and affiliations of all Council members who served during the production of this edition of the Guidelines are listed below. 2004–2005: Julia Flanders (Brown University) 2006: Matthew Zimmerman (New York University) 2007–2011: Daniel O'Donnell (University of Lethbridge) 2011: Martin Mueller (Northwestern University) 2011–2012: John Unsworth (University of Illinois at Urbana-Champaign / Brandeis University) 2012–2015: Elena Pierazzo (King's College London / Université Stendhal-Grenoble 3) 2016–2017: Michelle Dalmau (Indiana University) 2018–2021: Kathryn Tomasek (Wheaton College) 2022: Diane K. Jakacki (Bucknell University) 2002–2003: John Unsworth (University of Virginia) 2003–2007: Christian Wittern (Kyoto University) 2008–2011: Laurent Romary (Max Planck Digital Library / Inria & Humboldt-Universität zu Berlin) 2012–2014: James Cummings (University of Oxford) 2015–2017: Hugh Cayless (Duke University) 2018–2022: Martina Scholger (University of Graz) 2001–2009: Sebastian Rahtz (University of Oxford) 2010–2014: Lou Burnard (University of Oxford / TGE Adonis / Independent Consultant) 2001–2007: Syd Bauman (Brown Univesity) 2001–2007: Lou Burnard (University of Oxford) 2011–2012: Piotr Bański (University of Warsaw) 2010–2013: Brett Barney (University of Nebraska) 2013–2023: Syd Bauman (Brown University / Northeastern University) 2021–2022: Helena Bermúdez Sabel (Université de Neuchâtel) 2016–2024: Elisa Beshero-Bondar (University of Pittsburgh at Greensburg / Penn State Erie, The Behrend College) 2022: Elli Bleeker (Huygens Institute for the History of the Netherlands) 2019–2020: Vanessa Bigot Juloux (Ecole Pratique des Hautes Etudes / Paris Sciences et Lettres / Andrews University, Michigan) 2003–2006, 2017–2018: Alejandro Bia (University of Alicante) 2004–2007: David Birnbaum (University of Pittsburgh) 2008–2013: Gabriel Bodard (King's College London) 2008–2009: Peter Boot (Huygens Institute for Netherlands History) 2020–2021: Meaghan Brown (Papers of the Bibliographical Society of America) 2007–2008: Tone Merete Bruvik (University of Bergen) 2015–2016: Lou Burnard (Independent Consultant) 2013–2023: Hugh Cayless (New York University / Duke University) 2014–2015: Fabio Ciotti (University of Rome “Tor Vergata”) 2007–2009: Arianna Ciula (King's College London / European Science Foundation) 2005–2019: James Cummings (University of Oxford / Newcastle University) 2020: Nicholas Cole (Pembroke College Oxford) 2002–2007, 2010: Matthew Driscoll (University of Copenhagen) 2002–2004: David Durand (Ingenta plc) 2002–2004: Tomas Erjavec (Jozef Stefan Institute, Ljubljana) 2014–2015: Stefanie Gehrke (Biblissima) 2010–2013: Kevin Hawkins (University of Michigan) 2010–2015: Martin Holmes (University of Victoria) 2002: Fotis Jannidis (University of Munich) 2021–2023: Janelle Jenstad (University of Victoria) 2006: Amit Kumar (University of Illinois at Urbana-Champaign) 2020–2021: Jessica H. Lu (University of Maryland) 2015–2016: Stefan Majewski (Austrian National Library) 2002: Martin Mueller (Northwestern University) 2013–2014, 2016–2019: Elli Mylonas (Brown University) 2010–2011: Julianne Nyhan (University of Trier / University College London) 2008–2011: Elena Pierazzo (King's College London) 2006–2007, 2009–2010: Dot Porter (University of Kentucky / Digital Humanities Observatory / Indiana University) 2002–2003: Merillee Proffitt (Research Libraries Group) 2002: Peter Robinson (De Montfort University) 2009–2014: Sebastian Rahtz (University of Oxford) 2002: Geoffrey Rockwell (Macmaster University) 2002–2007: Laurent Romary (Inria / CNRS / Max Planck Digital Library) 2008–2009, 2012–2015: Paul Schaffner (University of Michigan) 2016–2024: Martina Scholger (University of Graz) 2003–2007: Susan Schreibman (University of Maryland) 2022-2024: Sabine Seifert (University of Potsdam) 2008–2009: David Sewell (University of Virginia) 2004–2005: Natasha Smith (University of North Carolina at Chapel Hill) 2014–2022: Peter Stadler (Carl-Maria-von-Weber-Gesamtausgabe / University of Paderborn) 2017–2019: Sarah Stanley (Florida State University) 2008–2009: Manfred Thaller (University of Cologne) 2006–2007: Conal Tuohy (Victoria University of Wellington) 2016–2024: Magdalena Turska (eXist Solutions / University of Oxford) 2004–2005: Edward Vanhoutte (Royal Academy of Dutch Language and Literature) 2015–2023: Raffaele Viglianti (University of Maryland) 2005–2008: John Walsh (Indiana University) 2012–2013: Rebecca Welzenbach (University of Michigan) 2002–2005: Perry Willett (Indiana University / University of Michigan) 2011–2012: Stuart Yeates (New Zealand Electronic Text Centre) The bulk of the Council's work has been carried out by email and by regular telephone conference. In addition, the Council has held many two-day face-to-face meetings. During production of P5, these meetings were generously hosted by the following institutions: King's College, London (2002) Oxford University Computing Services (2003) Royal Academy of Dutch Language and Literature, Ghent (2004) AFNOR: Association française de normalisation, Paris (2005) Institute for Research in Humanities, Kyoto University (2006) Berlin-Brandenburgische Akademie der Wissenschaften, Berlin (2007) National University of Ireland, Galway (2008) Ecole Normale Supérieure, Lyon (2009) Royal Irish Academy, Dublin (2010) Big Ten Center, Chicago (2011) Inria, Paris (2011) University of Michigan, Ann Arbor (2012) University of Oxford (2012) Brown University (2013) University of Oxford (2013) University of Oxford (2014) Duke University (2014) University of Michigan, Ann Arbor (2015) Lyon (2015) Brown University (2016) Austrian Academy of Sciences (2016) Prague (2017) Victoria (2017) CCEH, Cologne University (2018) University of Tokyo (2018) Folger Shakespeare Library, Washington, D.C. (2019) ZIM-ACDH, University of Graz (2019) Virtual meeting (May 2020) Virtual meeting (October 2020) Short virtual meeting (January 2021) Short virtual meeting (May 2021) Short virtual meeting (October 2021) Short virtual (April 2022) During the production of TEI P5, the Council chartered a number of smaller workgroups and similar activities, each of which made significant contribution to the intellectual content of the work. Active members of these are listed below: Active between July 2001 and January 2005, this group revised and developed the recommendations now forming chapters 6 Languages and Character Sets and 5 Characters, Glyphs, and Writing Modes . It was chaired by Christian Wittern, and its membership included: Deborah Anderson (Berkeley); Michael Beddow (independent scholar); David Birnbaum (University of Pittsburgh); Martin Duerst (W3C/Keio University); Patrick Durusau (Society of Biblical Literature); Tomohiko Morioka (Kyoto University); and Espen Ore (National Library of Norway). Active between July 2001 and January 2005, this group revised and developed the recommendations now forming chapters 6 Languages and Character Sets and 5 Characters, Glyphs, and Writing Modes . It was chaired by Christian Wittern, and its membership included: Deborah Anderson (Berkeley); Michael Beddow (independent scholar); David Birnbaum (University of Pittsburgh); Martin Duerst (W3C/Keio University); Patrick Durusau (Society of Biblical Literature); Tomohiko Morioka (Kyoto University); and Espen Ore (National Library of Norway). Active between February 2003 and February 2005, this group developed the material now forming 22 Documentation Elements . It was chaired by Sebastian Rahtz, and its membership included: Alejandro Bia; David G. Durand; Laurent Romary; Norman Walsh (Sun Microsystems); and Christian Wittern. Active between February 2003 and February 2005, this group developed the material now forming 22 Documentation Elements . It was chaired by Sebastian Rahtz, and its membership included: Alejandro Bia; David G. Durand; Laurent Romary; Norman Walsh (Sun Microsystems); and Christian Wittern. Active between February 2002 and January 2006, this group reviewed and expanded the material now largely forming part of 16 Linking, Segmentation, and Alignment . It was chaired by David G. Durand, and its membership included: Jean Carletta (Edinburgh University); Chris Caton (University of Oxford); Jessica P. Hekman (Ingenta plc); Nancy M. Ide (Vassar College); and Fabio Vitali (University of Bologna). Active between February 2002 and January 2006, this group reviewed and expanded the material now largely forming part of 16 Linking, Segmentation, and Alignment . It was chaired by David G. Durand, and its membership included: Jean Carletta (Edinburgh University); Chris Caton (University of Oxford); Jessica P. Hekman (Ingenta plc); Nancy M. Ide (Vassar College); and Fabio Vitali (University of Bologna). Active between February 2003 and December 2005, this group reviewed and finalised the material now forming 10 Manuscript Description . It was chaired by Matthew Driscoll and comprised David Birnbaum and Merrilee Proffitt, in addition to the TEI Editors. Active between February 2003 and December 2005, this group reviewed and finalised the material now forming 10 Manuscript Description . It was chaired by Matthew Driscoll and comprised David Birnbaum and Merrilee Proffitt, in addition to the TEI Editors. Active between January 2006 and May 2007, this group formulated the new material now forming part of 13 Names, Dates, People, and Places . It was chaired by Matthew Driscoll. and its membership included Gabriel Bodard (King's College London); Arianna Ciula; James Cummings; Tom Elliott (University of North Carolina at Chapel Hill); Øyvind Eide (University of Oslo); Leif Isaksen (Oxford Archaeology plc); Richard Light (private consultant); Tadeusz Piotrowski (Opole University); Sebastian Rahtz; and Tatiana Timcenko (Vilnius University). Active between January 2006 and May 2007, this group formulated the new material now forming part of 13 Names, Dates, People, and Places . It was chaired by Matthew Driscoll. and its membership included Gabriel Bodard (King's College London); Arianna Ciula; James Cummings; Tom Elliott (University of North Carolina at Chapel Hill); Øyvind Eide (University of Oslo); Leif Isaksen (Oxford Archaeology plc); Richard Light (private consultant); Tadeusz Piotrowski (Opole University); Sebastian Rahtz; and Tatiana Timcenko (Vilnius University). Active between January 2003 and August 2007, this group reviewed the material now presented in 18 Feature Structures and revised it for inclusion in ISO Standard 24610. It was chaired by Kiyong Lee (Korea University), and its active membership included the following: Harry Bunt (Tilburg); Lionel Clément (INRIA); Eric de la Clergerie (INRIA); Thierry Declerck (Saarbrücken); Patrick Drouin (University of Montréal); Lee Gillam (Surrey University); and Kōiti Hasida (ICOT). Active between January 2003 and August 2007, this group reviewed the material now presented in 18 Feature Structures and revised it for inclusion in ISO Standard 24610. It was chaired by Kiyong Lee (Korea University), and its active membership included the following: Harry Bunt (Tilburg); Lionel Clément (INRIA); Eric de la Clergerie (INRIA); Thierry Declerck (Saarbrücken); Patrick Drouin (University of Montréal); Lee Gillam (Surrey University); and Kōiti Hasida (ICOT). From 2000 to 2008 the TEI had two appointed Editors, Lou Burnard (University of Oxford) and Syd Bauman (Brown University), who served ex officio on the Council and, as far as possible, on all Council workgroups. The Council also oversees an Internationalization and Localization project, led by Sebastian Rahtz and with funding from the ALLC. This activity, ongoing since October 2005, is engaged in translating key parts of the P5 source into a variety of languages. Production of the translations currently included in P5 has been coordinated by the following: Marcus Bingenheimer (Chung-hwa Institute of Buddhist Studies, Taipei / Temple University) and Weining Hwang (Würzburg University) Pierre-Yves Duchemin (ENSSIB); Jean-Luc Benoit (ATILF); Anila Angjeli (BnF); Joëlle Bellec Martini (BnF); Marie-France Claerebout (Aldine); Magali Le Coënt (BIUSJ); Florence Clavaud (EnC); Cécile Pierre (BIUSJ). Werner Wegstein (Würzburg University), Franz Fischer (Cologne University), Martina Scholger (University of Graz) and Peter Stadler (Paderborn University) Marco Venuti (University of Venice) and Letizia Cirillo (University of Bologna) Ohya Kazushi (Tsurumi University), Kiyonori Nagasaki (University of Tokyo) and Martin Holmes (University of Victoria) Beom-mo Kang and Jungha Hong (Korea University) Carmen Arronis Llopis (University of Alicante), Alejandro Bia (Miguel Hernández University), Gimena del Rio Riande (Consejo Nacional de Investigaciones Científicas y Técnicas) and Susanna Allés-Torrent (University of Miami) Any one who works closely with the TEI Guidelines, whether as translator, editor, or reader is constantly reminded of the ambitious scope and exceptionally high editorial standards set by the original project, now approaching twenty years ago. It is appropriate therefore to retain a sense of the history of this document, as it has evolved since its first appearance in 1990, and to acknowledge with gratitude the contributions made to that evolution by very many individuals and institutions around the world. The original prefatory notes to each major edition of the Guidelines recording these names are therefore preserved in an appendix to the current edition (see 8 Prefatory Notes ).","title":"<span class=\"tei-front1 breadcrumb\">Front matter</span> <span class=\"tei-div7 breadcrumb\">3 Preface and Acknowledgments</span>"}
{"link":"p5.xml?id=AB","tag":"guidelines","content":"4 About These Guidelines These Guidelines have been developed and are maintained by the Text Encoding Initiative Consortium (TEI); see 4.2 Historical Background . They are addressed to anyone who works with any kind of textual resource in digital form. They make recommendations about suitable ways of representing those features of textual resources which need to be identified explicitly in order to facilitate processing by computer programs. In particular, they specify a set of markers (or tags ) which may be inserted in the electronic representation of the text, in order to mark the text structure and other features of interest. Many, or most, computer programs depend on the presence of such explicit markers for their functionality, since without them a digitized text appears to be nothing but a sequence of undifferentiated bits. The success of the World Wide Web, for example, is partly a consequence of its use of such markup to indicate such features as headings and lists on individual pages, and to indicate links between pages. The process of inserting such explicit markers for implicit textual features is often called markup, or equivalently within this work encoding; the term tagging is also used informally. We use the term encoding scheme or markup language to denote the complete set of rules associated with the use of markup in a given context; we use the term markup vocabulary for the specific set of markers or named distinctions employed by a given encoding scheme. Thus, this work both describes the TEI encoding scheme, and documents the TEI markup vocabulary. The TEI encoding scheme is of particular usefulness in facilitating the loss-free interchange of data amongst individuals and research groups using different programs, computer systems, or application software. Since they contain an inventory of the features most often deployed for computer-based text processing, these Guidelines are also useful as a starting point for those designing new systems and creating new materials, even where interchange of information is not a primary objective. These Guidelines apply to texts in any natural language, of any date, in any literary genre or text type, without restriction on form or content. They treat both continuous materials (running text) and discontinuous materials such as dictionaries and linguistic corpora. Though principally directed to the needs of the scholarly research community, these Guidelines are not restricted to esoteric academic applications. They are also useful for librarians maintaining and documenting electronic materials, and for publishers and others creating or distributing electronic texts. Although they focus on problems of representing in electronic form texts which already exist in traditional media, these Guidelines are also applicable to textual material which is born digital. We believe them to be adequate to the widest variety of currently existing practices in using digital textual data, but by no means limited to them. The rules and recommendations made in these Guidelines are expressed in terms of what is currently the most widely-used markup language for digital resources of all kinds: the Extensible Markup Language (XML), as defined by the World Wide Web Consortium's XML Recommendation. However, the TEI encoding scheme itself does not depend on this language; it was originally formulated in terms of SGML (the ISO Standard Generalized Markup Language), a predecessor of XML, and may in future years be re-expressed in other ways as the field of markup develops and matures. For more information on markup languages see chapter 5 A Gentle Introduction to XML ; for more information on the associated character encoding issues see chapter 6 Languages and Character Sets . This document provides the authoritative and complete statement of the requirements and usage of the TEI encoding scheme. As such, although it includes numerous small examples, it must be stressed that this work is intended to be a reference manual rather than a tutorial guide. The remainder of this chapter comprises three sections. The first gives an overview of the structure and notational conventions used throughout these Guidelines. The second enumerates the design principles underlying the TEI scheme and the application environments in which it may be found useful. Finally, the third section gives a brief account of the origins and development of the Text Encoding Initiative itself. 4.1 Structure and Notational Conventions of this Document The remaining two sections of the front matter to these Guidelines provide background tutorial material for those unfamiliar with basic markup technologies. Following the present introductory section, we present a detailed introduction to XML itself, intended to cover in a relatively painless manner as much as the novice user of the TEI scheme needs to know about markup languages in general and XML in particular. This is followed by a discussion of the general principles underlying current practice in the representation of different languages and writing systems in digital form. This chapter is largely intended for the user unfamiliar with the Unicode encoding systems, though the expert may also find its historical overview of interest. The body of this edition of these Guidelines proper contains 23 chapters arranged in increasing order of specialist interest. The first five chapters discuss in depth matters likely to be of importance to anyone intending to apply the TEI scheme to virtually any kind of text. The next seven focus on particular kinds of text: verse, drama, spoken text, dictionaries, and manuscript materials. The next nine chapters deal with a wide range of topics, one or more of which are likely to be of interest in specialist applications of various kinds. The last two chapters deal with the XML encoding used to represent the TEI scheme itself, and provide technical information about its implementation. The last chapter also defines the notion of TEI conformance and its implications for interchange of materials produced according to these Guidelines. As noted above, this is a reference work, and is not intended to be read through from beginning to end. However, the reader wishing to understand the full potential of the TEI scheme will need a thorough grasp of the material covered by the first four chapters and the last two. Beyond that, the reader is recommended to select according to their specific interests: one of the strengths of the TEI architecture is its modular nature. As far as possible, extensive cross referencing is provided wherever related topics are dealt with; these are particularly effective in the online version of these Guidelines. In addition, a series of technical appendixes provide detailed formal definitions for every element, every class, and every macro discussed in the body of the work; these are also cross linked as appropriate. Finally, a detailed bibliography is provided, which identifies the source of many examples cited in the text as well as documenting works referred to, and listing other relevant publications. As an aid to the reader, most chapters of these Guidelines follow the same basic organization. The chapter begins with an overview of the subjects treated within it, linked to the following subsections. Within each section where new elements are described, a summary table is first given, which provides their names and a brief description of their intended usage. This is then followed where appropriate by further discussion of each element, including wherever possible usage examples taken somewhat eclectically from a variety of real sources. These examples are not intended to be exhaustive, but rather to suggest typical ways in which the elements concerned may usefully be applied. Where appropriate, a link to a statement of the source for most examples is provided in the online version. Within the examples, use of whitespace such as newlines or indentation is simply intended to aid legibility, and is not prescriptive or normative. Wherever TEI elements or classes are mentioned in the text, they are linked in the online version to the relevant reference specification for the element or class concerned. Element names are always given in the form name , where name is the generic identifier of the element; empty elements such as pb or anchor include a closing slash to distinguish them wherever they are discussed. References to attributes take the form attname, where attname is the name of the attribute. References to classes are also presented as links, for example model.divLike for a model class, and att.global for an attribute class. 4.1.1 The use of modal verbs In general the TEI guidelines try to be careful when using modal verbs and phrases such as 'must', 'must not, 'should', 'should not' and 'may'. In terms of the meanings, these generally follow https://tools.ietf.org/html/bcp14 in the different meanings of these words. In particular: This word, or the terms \"REQUIRED\" or \"SHALL\", means that this is an absolute requirement of the TEI Guidelines for production of a TEI conformant file. This phrase, or the phrase \"SHALL NOT\", means that this is an absolute prohibition of the TEI Guidelines for production of a TEI conformant file. This word, or the adjective \"RECOMMENDED\", means that there may exist valid reasons in particular circumstances to ignore a particular recommendation, but the full implications must be understood and carefully weighed before choosing a different course. This phrase, or the phrase \"NOT RECOMMENDED\" means that there may exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood and the case carefully weighed before implementing any behavior so described. This word, or the adjective \"OPTIONAL\", means that a recommendation is truly optional. One user may choose to follow the recommendation because a particular project requires it or feels that it enhances their work while another project may choose to not follow this recommendation. 4.1.2 TEI Naming Conventions These Guidelines use a more or less consistent set of conventions in the naming of XML elements and classes. This section summarizes those conventions. 4.1.2.1 Element and Attribute Names An unadorned name such as blort is the name of a TEI element or attribute. 1 . The following conventions apply to the choice of names: Elements are given generic identifiers as far as possible consisting of one or more tokens , by which we mean whole words or recognisable abbreviations of them, taken from the English language. Where an element name contains more than one token, the first letter of the second token, and of any subsequent ones, is capitalized, as in for example biblStruct , listPerson . This camelCasing is used also for attribute names and symbolic values. Module names also use whole words, for the most part, but are always all lower case. The specification for an element or attribute whose name contains abbreviations generally also includes a gloss element providing the expanded sense of the name. An element specification may also contain approved translations for element or attribute names in one or more other languages using the altIdent element; this is not however generally done in TEI P5. Whole words are generally preferred for clarity. The following abbreviations are however commonly used within generic identifiers: attribute bibliographic description or reference in a bibliography category, especially as used in text classification character, typically a Unicode character document: this usually refers to the original source document which is being encoded, declaration: has a specific sense in the TEI header, as discussed in 2.1.2 Types of Content in the TEI Header description: has a specific sense in the TEI header, as discussed in 2.1.2 Types of Content in the TEI Header group. In TEI usage, a group is distinguished from a list in that the former associates several objects which act as a single entity, while the latter does not. For example, a linkGrp combines several link elements which have certain properties in common, whereas a listBibl simply lists a number of otherwise unrelated bibl elements. interpretation or analysis (natural) language manuscript organization, that is, a named group of people or legal entity reading or version found in a specific witness reference or link technical specification or definition statement: used in a specific sense in the TEI header, as discussed in 2.1.2 Types of Content in the TEI Header structured: that is, containing a specific set of named elements rather than mixed content value, for example of a variable or an attribute witness: that is, a specific document which attests specific readings in a textual tradition or apparatus Some abbreviations are used inconsistently: for example, add is an addition, and addSpan is a spanning addition, but addName is an additional name, not the name of an addition. Such inconsistencies are relatively few in number, and it is hoped to remove them in subsequent revisions of these Guidelines. Some elements have very short abbreviated names: these are for the most part elements which are likely to be used very frequently in a marked up text, for example p (paragraph), s (segment) hi (highlighted phrase), ptr (pointer), div (division) etc. We do not specifically list such elements here: as noted above, an expansion of each such abbreviated name is provided within the documentation using the gloss element . 4.1.3 Class, Macro, and Datatype Names All named objects other than elements and attributes have one of the following prefixes, which indicate whether the object is a module, an attribute class, a model class, a datatype, or a macro: The concepts of model class, attribute class, etc. are defined in 1 The TEI Infrastructure . Here we simply note some conventions about their naming. The following rules apply to attribute class names: Attribute class names take the form att.xxx , where xxx is typically an adjective, or a series of adjectives separated by dots, describing a property common to the attributes which make up the class. Attributes with the same name are considered to have the same semantics, whether the attribute is inherited from a class, or locally defined. The following rules apply to model class names: Model classes have names beginning model. followed by a root name , and zero or more suffixes as described below. A root name may be the name of an element, generally the prototypical parent or sibling for elements which are members of the class. The first suffix should be Part , if the class members are all children of the element named rootname; or Like , if the class members are all siblings of the element named rootname . The rootname global is used to indicate that class members are permitted anywhere in a TEI document. Additional suffixes may be added, prefixed by a dot, to distinguish subclasses, semantic or structural. For example, the class of elements which can form part of a div is called model.divPart . This class includes as a subclass the elements which can form part of a div in a spoken text, which is named model.divPart.spoken 4.1.4 Design Principles Because of its roots in the humanities research community, the TEI scheme is driven by its original goal of serving the needs of research, and is therefore committed to providing a maximum of comprehensibility, flexibility, and extensibility. More specific design goals of the TEI have been that these Guidelines should: provide a standard format for data interchange provide guidance for the encoding of texts in this format support the encoding of all kinds of features of all kinds of texts studied by researchers be application independent the choice of XML and Unicode the provision of a large predefined tag set encodings for different views of text alternative encodings for the same textual features mechanisms for user-defined modification of the scheme The goal of creating a common interchange format which is application independent requires the definition of a specific markup syntax as well as the definition of a large set of elements or concepts. The syntax of the recommendations made in this document conforms to the World Wide Web Consortium's XML Recommendation ( 1 ) but their definition is as far as possible independent of any particular schema language. The goal of providing guidance for text encoding suggests that recommendations be made as to what textual features should be recorded in various situations. However, when selecting certain features for encoding in preference to others, these Guidelines have tended to prefer generic solutions to specific ones, and to avoid areas where no consensus exists, while attempting to accommodate as many diverse views as feasible. Consequently, the TEI Guidelines make (with relatively rare exceptions) no suggestions or restrictions as to the relative importance of textual features. The philosophy of these Guidelines is if you want to encode this feature, do it this way —but very few features are mandatory. In the same spirit, while these Guidelines very rarely require you to encode any particular feature, they do require you to be honest about which features you have encoded, that is, to respect the meanings and usage rules they recommend for specific elements and attributes proposed. The requirement to support all kinds of materials likely to be of interest in research has largely conditioned the development of the TEI into a very flexible and modular system. The development of other XML vocabularies or standards is typically motivated by the desire to create a single fully specified encoding scheme for use in a well-defined application domain. By contrast, the TEI is intended for use in a large number of rather ill-defined and often overlapping domains. It achieves its generality by means of the modular architecture described in 1 The TEI Infrastructure which enables each user to create a schema appropriate to their needs without compromising the interoperability of their data. The Guidelines have been written largely with a focus on text capture (i.e. the representation in electronic form of an already existing copy text in another medium) rather than text creation (where no such copy text exists). Hence the frequent use of terms like transcription, original, copy text, etc. However, these Guidelines are equally applicable to text creation, although certain elements, such as sourceDesc , and certain attributes, such as the rendition indicators , will not be relevant in this case. Concerning text capture the TEI Guidelines do not specify a particular approach to the problem of fidelity to the source text and recoverability of the original; such a choice is the responsibility of the text encoder. The current version of these Guidelines, however, provides a more fully elaborated set of tags for markup of rhetorical, linguistic, and simple typographic characteristics of the text than for detailed markup of page layout or for fine distinctions among type fonts or manuscript hands. It should be noted also that, with the present version of these Guidelines, it is no longer necessarily the case that an unmediated version of the source text can be recovered from an encoded text simply by removing the markup. In these Guidelines, no hard and fast distinction is drawn between objective and subjective information or between representation and interpretation. These distinctions, though widely made and often useful in narrow, well-defined contexts, are perhaps best interpreted as distinctions between issues on which there is a scholarly consensus and issues where no such consensus exists. Such consensus has been, and no doubt will be, subject to change. The TEI Guidelines do not make suggestions or restrictions as to which of these features should be encoded. The use of the terms descriptive and interpretive about different types of encoding in these Guidelines is not intended to support any particular view on these theoretical issues. Historically, it reflects a purely practical division of responsibility amongst the original working committees (see further 4.2 Historical Background ). In general, the accuracy and the reliability of the encoding and the appropriateness of the interpretation is for the individual user of the text to determine. The Guidelines provide a means of documenting the encoding in such a way that a user of the text can know the reasoning behind that encoding, and the general interpretive decisions on which it is based. The TEI header should be used to document and justify many such aspects of the encoding, but the choice of TEI elements for a particular feature is in itself a statement about the interpretation reached by the encoder. In many situations more than one view of a text is needed since no absolute recommendation to embody one specific view of text can apply to all texts and all approaches to them. Within limits, the syntax of XML ensures that some encodings can be ignored for some purposes. To enable encoding multiple views, these Guidelines not only treat a variety of textual features, but sometimes provide several alternative encodings for what appear to be identical textual phenomena. These Guidelines offer the possibility of encoding many different views of the text, simultaneously if necessary. Where different views of the formal structure of a text are required, as opposed to different annotations on a single structural view, however, the formal syntax of XML (which requires a single hierarchical view of text structure) poses some problems; recommendations concerning ways of overcoming or circumventing that restriction are discussed in chapter 20 Non-hierarchical Structures . In brief, the TEI Guidelines define a general-purpose encoding scheme which makes it possible to encode different views of text, possibly intended for different applications, serving the majority of scholarly purposes of text studies in the humanities. Because no predefined encoding scheme can possibly serve all research purposes, the TEI scheme is designed to facilitate both selection from a wide range of predefined markup choices, and the addition of new (non-TEI) markup options. By providing a formally verifiable means of extending the TEI recommendations, the TEI makes it simple for such user-identified modifications to be incorporated into future releases of these Guidelines as they evolve. The underlying mechanisms which support these aspects of the scheme are introduced in chapter 1 The TEI Infrastructure , and detailed discussions of their use provided in chapter 23 Using the TEI . 4.1.5 Intended Use We envisage three primary functions for these Guidelines: guidance for individual or local practice in text creation and data capture; support of data interchange; support of application-independent local processing. 4.1.5.1 Use in Text Capture and Text Creation The description of textual features found in the chapters which follow should provide a useful checklist from which scholars planning to create electronic texts should select the subset of features suitable for their project. Problems specific to text creation or text capture have not been considered explicitly in this document. These Guidelines are not concerned with the process by which a digital text comes into being: it can be typed by hand, scanned from a printed book or typescript, read from a typesetter's tape, or acquired from another researcher who may have used another markup scheme (or no explicit markup at all). We include here only some general points which are often raised about markup and the process of data capture. XML can appear distressingly verbose, particularly when (as in these Guidelines) the names of tags and attributes are chosen for clarity and not for brevity. Editor macros and keyboard shortcuts can allow a typist to enter frequently used tags with single keystrokes. It is often possible to transform word-processed or scanned text automatically. Markup-aware software can help with maintaining the hierarchical structure of the document, and display the document with visual formatting rather than raw tags. The techniques described in chapter 23.3 Customization may be used to develop simpler data capture TEI-conformant schemas, for example with limited numbers of elements, or with shorter names for the tags being used most often. Documents created with such schemas may then be automatically converted to a more elaborated TEI form. 4.1.5.2 Use for Interchange The TEI format may simply be used as an interchange format, permitting projects to share resources even when their local encoding schemes differ. If there are n different encoding formats, to provide mappings between each possible pair of formats requires n×(n-1) translations; with an interchange format, only 2×n such mappings are needed. However, for such translations to be carried out without loss of information, the interchange format chosen must be as expressive (in a formal sense) as any of the target formats; this is a further reason for the TEI's provision of both highly abstract or generic encodings and highly specific ones. To translate between any pair of encoding schemes implies: identifying the sets of textual features distinguished by the two schemes; determining where the two sets of features correspond; creating a suitable set of mappings. For example, to translate from encoding scheme X into the TEI scheme: Make a list of all the textual features distinguished in X. Identify the corresponding feature in the TEI scheme. There are three possibilities for each feature: the feature exists in both X and the TEI scheme; X has a feature which is absent from the TEI scheme; X has a feature which corresponds with more than one feature in the TEI scheme. The first case is a trivial renaming. The second will require an extension to the TEI scheme, as described in chapter 23.3 Customization . The third is more problematic, but not impossible, provided that a consistent choice can be made (and documented) amongst the alternatives. the feature exists in both X and the TEI scheme; X has a feature which is absent from the TEI scheme; X has a feature which corresponds with more than one feature in the TEI scheme. The ease with which this translation can be defined will of course depend on the clarity with which scheme X represents the features it encodes. Translating from the TEI into scheme X follows the same pattern, except that if a TEI feature has no equivalent in X, and X cannot be extended, information must be lost in translation. The rules defining conformance to these Guidelines are given in some detail in chapter 23.4 Conformance . The basic principles informing those rules may be summarized as follows: The TEI abstract model (that is, the set of categorical distinctions which it defines in the prose of the Guidelines) must be respected. The correspondence between a tag X and the semantic function assigned to it by these Guidelines may not be changed; such changes are known as tag abuse and strongly discouraged. A TEI document must be expressed as a valid XML-conformant document which uses the TEI namespace appropriately. If, for example, the document encodes features not provided by these Guidelines, such extensions should not be associated with the TEI namespace. It must be possible to validate a TEI document against a schema derived from these Guidelines, possibly with extensions provided in the recommended manner. 4.1.5.3 Use for Local Processing Machine-readable text can be manipulated in many ways; some users: edit texts (e.g. word processors, syntax-directed editors) edit, display, and link texts in hypertext systems format and print texts using desktop publishing systems, or batch-oriented formatting programs load texts into free-text retrieval databases or conventional databases unload texts from databases as search results or for export to other software search texts for words or phrases perform content analysis on texts collate texts for critical editions scan texts for automatic indexing or similar purposes parse texts linguistically analyze texts stylistically scan verse texts metrically link text and images These applications cover a wide range of likely uses but are by no means exhaustive. The aim has been to make the TEI Guidelines useful for encoding the same texts for different purposes. We have avoided anything which would restrict the use of the text for other applications. We have also tried not to omit anything essential to any single application. Because the TEI format is expressed using XML, almost any modern text processing system is able to process it, and new TEI-aware software systems are able to build on a solid base of existing software libraries. 4.2 Historical Background The Text Encoding Initiative grew out of a planning conference sponsored by the Association for Computers and the Humanities (ACH) and funded by the U.S. National Endowment for the Humanities (NEH), which was held at Vassar College in November 1987. At this conference some thirty representatives of text archives, scholarly societies, and research projects met to discuss the feasibility of a standard encoding scheme and to make recommendations for its scope, structure, content, and drafting. During the conference, the Association for Computational Linguistics and the Association for Literary and Linguistic Computing agreed to join ACH as sponsors of a project to develop these Guidelines. The outcome of the conference was a set of principles (the Poughkeepsie Principles, 1 ), which determined the further course of the project. The Text Encoding Initiative project began in June 1988 with funding from the NEH, soon followed by further funding from the Commission of the European Communities, the Andrew W. Mellon Foundation, and the Social Science and Humanities Research Council of Canada. Four working committees, composed of distinguished scholars and researchers from both Europe and North America, were named to deal with problems of text documentation, text representation, text analysis and interpretation, and metalanguage and syntax issues. Each committee was charged with the task of identifying significant particularities in a range of texts, and two editors appointed to harmonize the resulting recommendations. A first draft version (P1, with the P here and subsequently standing for Proposal ) of the Guidelines was distributed in July 1990 under the title Guidelines for the Encoding and Interchange of Machine-Readable Texts . Extensive public comment and further work on areas not covered in this version resulted in the drafting of a revised version, TEI P2, distribution of which began in April 1992. This version included substantial amounts of new material, resulting from work carried out by several specialist working groups, set up in 1990 and 1991 to propose extensions and revisions to the text of P1. The overall organization, both of the draft itself and of the scheme it describes, was entirely revised and reorganized in response to public comment on the first draft. In June 1993 an Advisory Board met to review the current state of the TEI Guidelines, and recommended the formal publication of the work done to that time. That version of the TEI Guidelines, TEI P3, consolidated the work published as parts of TEI P2, along with some additional new material and was finally published in May of 1994 without the label draft , thus marking the conclusion of the initial development work. In February of 1998 the World Wide Web Consortium issued a final Recommendation for the Extensible Markup Language, XML. 2 Following the rapid take-up of this new standard metalanguage, it became evident that the TEI Guidelines (which had been published originally as an SGML application) needed to be re-expressed in this new formalism if they were to survive. The TEI editors, with abundant assistance from others who had developed and used TEI, developed an update plan, and made tentative decisions on relevant syntactic issues. In January of 1999, the University of Virginia and the University of Bergen formally proposed the creation of an international membership organization, to be known as the TEI Consortium, which would maintain, develop, and promote the TEI. Shortly thereafter, two further institutions with longstanding ties to the TEI (Brown University and Oxford University) joined them in formulating an Agreement to Establish a Consortium for the Maintenance of the Text Encoding Initiative ( 1 ), on which basis the TEI Consortium was eventually established and incorporated as a not-for-profit legal entity at the end of the year 2000. The first members of the new TEI Board took office during January of 2001. The TEI Consortium was established in order to maintain a permanent home for the TEI as a democratically constituted, academically and economically independent, self-sustaining, non-profit organization. In addition, the TEI Consortium was intended to foster a broad-based user community with sustained involvement in the future development and widespread use of the TEI Guidelines ( 1 ). To oversee and manage the revision process in collaboration with the TEI Editors, the TEI Board formed a Technical Council, with a membership elected from the TEI user community. The Council met for the first time in January 2002 at King's College London. Its first task was to oversee production of an XML version of the TEI Guidelines, updating P3 to enable users to work with the emerging XML toolset. This, the P4 version of the Guidelines, was published in June 2002. It was essentially an XML version of P3, making no substantive changes to the constraints expressed in the schemas apart from those necessitated by the shift to XML, and changing only corrigible errors identified in the prose of the P3 Guidelines. However, given that P3 had by this time been in steady use since 1994, it was clear that a substantial revision of its content was necessary, and work began immediately on the P5 version of the Guidelines. This was planned as a thorough overhaul, involving a public call for features and new development in a number of important areas not previously addressed including character encoding, graphics, manuscript description, biographical and geographical data, and the encoding language in which the TEI Guidelines themselves are written. The members of the TEI Council and its associated workgroups are listed in 3 Preface and Acknowledgments . In preparing this edition, they have been attentive to the requirements and practice of the widest possible range of TEI users, who are now to be found in many different research communities across the world, and have been largely instrumental in transforming the TEI from a grant-supported international research project into a self-sustaining community-based effort. One effect of the incorporation of the TEI has been the legal requirement to hold an annual meeting of the Consortium members; these meetings have emerged as an invaluable opportunity to sustain and reinforce that sense of community. The present work is therefore the result of a sustained period of consultation, drafting, and revision, with input from many different experts. Whatever merits it may have are to be attributed to them; the Editors accept responsibility only for the errors remaining. 4.3 Future Developments and Version Numbers The encoding recommended by this document may be used without fear that future versions of the TEI scheme will be inconsistent with it in fundamental ways. The TEI will be sensitive, in revising these Guidelines, to the possible problems which revision might pose for those who are already using this version of these Guidelines. With TEI P5, a version numbering system is introduced following the pattern specified by the Unicode Consortium : the first digit identifies a major version number, the second digit a minor version number, and the third digit a sub-minor version number. The TEI undertakes that no change will be made to the formal expression of these Guidelines (that is, a TEI schema, as defined in 23.4 Conformance ) such that documents conformant to a given major numbered release cease to be compatible with a subsequent release of the same major number. Moreover, as far as possible, new minor releases will be made only for the purpose of adding new compatible features, or of correcting errors in existing features. The Guidelines are currently maintained as an open source project on the Github site https://github.com/TEIC/TEI , from which released and development versions may be freely downloaded. See Previous Releases of P5 for information on how to find specific versions of TEI releases (Guidelines, schemas etc.). Notice of errors detected and enhancements requested may be submitted at https://github.com/TEIC/TEI/issues .","title":"<span class=\"tei-front1 breadcrumb\">Front matter</span> <span class=\"tei-div7 breadcrumb\">4 About These Guidelines</span>"}
{"link":"p5.xml?id=SG","tag":"guidelines","content":"5 A Gentle Introduction to XML The encoding scheme defined by these Guidelines is formulated as an application of the Extensible Markup Language (XML) ( 1 ). XML is widely used for the definition of device-independent, system-independent methods of storing and processing texts in electronic form. It is now also the interchange and communication format used by many applications on the World Wide Web. In the present chapter we informally introduce some of its basic concepts and attempt to explain to the reader encountering them for the first time how and why they are used in the TEI scheme. More detailed technical accounts of TEI practice in this respect are provided in chapters 23 Using the TEI , 1 The TEI Infrastructure , and 22 Documentation Elements of these Guidelines. Strictly speaking, XML is a metalanguage , that is, a language used to describe other languages, in this case, markup languages. Historically, the word markup has been used to describe annotation or other marks within a text intended to instruct a compositor or typist how a particular passage should be printed or laid out. Examples include wavy underlining to indicate boldface, special symbols for passages to be omitted or printed in a particular font, and so forth. As the formatting and printing of texts was automated, the term was extended to cover all sorts of special codes inserted into electronic texts to govern formatting, printing, or other processing. Generalizing from that sense, we define markup , or (synonymously) encoding , as any means of making explicit an interpretation of a text. Of course, all printed texts are implicitly encoded (or marked up) in this sense: punctuation marks, capitalization, disposition of letters around the page, even the spaces between words all might be regarded as a kind of markup, the purpose of which is to help the human reader determine where one word ends and another begins, or how to identify gross structural features such as headings or simple syntactic units such as dependent clauses or sentences. Encoding a text for computer processing is, in principle, like transcribing a manuscript from scriptio continua 1 ; it is a process of making explicit what is conjectural or implicit, a process of directing the user as to how the content of the text should be (or has been) interpreted. By markup language we mean a set of markup conventions used together for encoding texts. A markup language must specify how markup is to be distinguished from text, what markup is allowed, what markup is required, and what the markup means. XML provides the means for doing the first three; documentation such as these Guidelines is required for the last. The present chapter attempts to give an informal introduction to those parts of XML of which a proper understanding is necessary to make best use of these Guidelines. The interested reader should also consult one or more of the many excellent introductory textbooks and web sites now available on the subject. 2 5.1 What's Special about XML? XML has three highly distinctive advantages: it places emphasis on descriptive rather than procedural markup; it distinguishes the concepts of syntactic correctness and of validity with respect to a document type definition ; it is independent of any one hardware or software system. XML is frequently compared with HTML, the language in which web pages have generally been written, which shares some of the above characteristics. Compared with HTML, however, XML has some other important features: XML is extensible : it does not consist of a fixed set of tags; XML documents must be well-formed according to a defined syntax; an XML document can be formally validated against a set of schema rules for consistent application; XML is more interested in the meaning of data than in its presentation. 5.1.1 Descriptive Markup In a descriptive markup system, the markup codes used do little more than categorize parts of a document. Markup codes such as para or \\end{list} simply identify a portion of a document and assert of it that the following item is a paragraph , or this is the end of the most recently begun list , etc. By contrast, a procedural markup system defines what processing is to be carried out at particular points in a document: call procedure PARA with parameters 42, b, and x here or move the left margin 2 quads left, move the right margin 2 quads right, skip down one line, and go to the new left margin, etc. In XML, the instructions needed to process a document for some particular purpose (for example, to format it) are sharply distinguished from the markup used to describe it. Usually, the markup or other information needed to process a document will be maintained separately from the document itself, typically in a distinct document called a stylesheet , though it may do much more than simply define the rendition or visual appearance of a document. 3 When descriptive markup is used, the same document can readily be processed in many different ways, using only those parts of it which are considered relevant. For example, a content analysis program might disregard entirely the footnotes embedded in an annotated text, while a formatting program might extract and collect them all together for printing at the end of each chapter. Different kinds of processing can be carried out with the same part of a file. For example, one program might extract names of persons and places from a document to create an index or database, while another, operating on the same text, but using a different stylesheet, might print names of persons and places in a distinctive typeface. 5.1.2 Types of Document A second key aspect of XML is its notion of a document type : documents are regarded as having types, just as other objects processed by computers do. The type of a document is formally defined by its constituent parts and their structure. The definition of a report, for example, might be that it consisted of a title and possibly an author, followed by an abstract and a sequence of one or more paragraphs. Anything lacking a title, according to this formal definition, would not formally be a report, and neither would a sequence of paragraphs followed by an abstract, whatever other report-like characteristics these might have for the human reader. If documents are of known types, a special-purpose program (called a parser ), once provided with an unambiguous definition of a document type, can check that any document claiming to be of that type does in fact conform to the specification. A parser can check that all elements specified for a particular document type are present and no others, that they are combined in appropriate ways, correctly ordered, and so forth. More significantly, different documents of the same type can be processed in a uniform way. Programs can be written which take advantage of the knowledge encapsulated in the document type information, and which can thus behave in a more intelligent fashion. 5.1.3 Data Independence A basic design goal of XML is to ensure that documents encoded according to its provisions can move from one hardware and software environment to another without loss of information. The two features discussed so far both address this requirement at an abstract level; the third feature addresses it at the level of the strings of data characters that make up a document. All XML documents, whatever languages or writing systems they employ, use the same underlying character encoding (that is, the same method of representing as binary data those graphic forms making up a particular writing system). 4 This encoding is defined by an international standard, 5 which is implemented by a universal character set maintained by an industry group called the Unicode Consortium, and known as Unicode. 6 Unicode provides a standardized way of representing any of the many thousands of discrete symbols making up the world's writing systems, past and present. Most modern computing systems now support Unicode directly; for those which do not, XML provides a mechanism for the indirect representation of single characters by means of their character number, known as character references ; see further 5.7.1 Character References . 5.2 Textual Structures A text is not an undifferentiated sequence of words, much less of bytes. For different purposes, it may be divided into many different units, of different types or sizes. A prose text such as this one might be divided into sections, chapters, paragraphs, and sentences. A verse text might be divided into cantos, stanzas, and lines. Once printed, sequences of prose and verse might be divided into volumes, gatherings, and pages. Structural units of this kind are most often used to identify specific locations or refer to points within a text ( the third sentence of the second paragraph in chapter ten ; canto 10, line 1234 ; page 412 , etc.) but they may also be used to subdivide a text into meaningful fragments for analytic purposes ( is the average sentence length of section 2 different from that of section 5? how many paragraphs separate each occurrence of the word nature ? how many pages? ). Other structural units are more clearly analytic, in that they characterize a section of a text. A dramatic text might regard each speech by a different character as a unit of one kind, and stage directions or pieces of action as units of another kind. Such an analysis is less useful for locating parts of the text ( the 93rd speech by Horatio in Act 2 ) than for facilitating comparisons between the words used by one character and those of another, or those used by the same character at different points of the play. In a prose text one might similarly wish to regard as units of different types passages in direct or indirect speech, passages employing different stylistic registers (narrative, polemic, commentary, argument, etc.), passages of different authorship and so forth. And for certain types of analysis (most notably textual criticism) the physical appearance of one particular printed or manuscript source may be of importance: paradoxically, one may wish to use descriptive markup to describe presentational features such as typeface, line breaks, use of whitespace and so forth. These textual structures overlap with one another in complex and unpredictable ways. Particularly when dealing with texts as instantiated by paper technology, the reader needs to be aware of both the physical organization of the book and the logical structure of the work it contains. Many great works (Sterne's Tristram Shandy for example) cannot be fully appreciated without an awareness of the interplay between narrative units (such as chapters or paragraphs) and presentational ones (such as page divisions). For many types of research, the interplay among different levels of analysis is crucial: the extent to which syntactic structure and narrative structure mesh, or fail to mesh, for example, or the extent to which phonological structures reflect morphology. 5.3 XML Structures This section describes the simple and consistent mechanism for the markup or identification of textual structure provided by XML. It also describes the methods XML provides for the expression of rules defining how units of textual structure can meaningfully be combined in a text. 5.3.1 Elements The technical term used in XML for a textual unit, viewed as a structural component, is element . Different types of elements are given different names, but XML provides no way of expressing the meaning of a particular type of element, other than its relationship to other element types. That is, all one can say about an element called (say) blort is that instances of it may (or may not) occur within elements of type farble , and that it may (or may not) be decomposed into elements of type blortette . It should be stressed that XML is entirely unconcerned with the semantics of textual elements, because these are considered to be application dependent. It is up to the creators of XML vocabularies (such as these Guidelines) to choose intelligible element names and to define their intended use in text markup. That is the chief purpose of documents such as the TEI Guidelines. From the need to choose element names indicative of function comes the technical term for the name of an element type, which is generic identifier , or GI. Within a marked-up text (a document instance ), each element must be explicitly marked or tagged in some way. This is done by inserting a tag at the beginning of the element (a start-tag ) and another at its end (an end-tag ). The start- and end-tag pair are used to bracket off element occurrences within the running text, in rather the same way as different types of parentheses or quotation marks are used in conventional punctuation. For example, a quotation element in a text might be tagged as follows: 5.3.2 Content Models: an Example An element may be empty , that is, it may have no content at all, or it may contain just a sequence of characters with no other elements. Often, however, elements of one type will be embedded (contained entirely) within elements of a different type. To illustrate this, we will consider a very simple structural model. Let us assume that we wish to identify within an anthology only poems, their headings, and the stanzas and lines of which they are composed. In XML terms, our document type is the anthology , and it consists of a series of poem s. Each poem has embedded within it one element, a heading , and several occurrences of another, a stanza , each stanza having embedded within it a number of line elements. Fully marked up, a text conforming to this model might appear as follows: It should be stressed that this example does not use the names proposed for corresponding elements elsewhere in these Guidelines: the above is thus not a valid TEI document. 8 It will, however, serve as an introduction to the basic notions of XML. Whitespace and line breaks have been added to the example for the sake of visual clarity only; they have no particular significance in the XML encoding itself. Also, the line As it stands, the above example is what is known as a well-formed XML document because it obeys the following simple rules: there is a single element enclosing the whole document: this is known as the root element ( anthology in our case); each element is completely contained by the root element, or by an element that is so contained; elements do not partially overlap one another; a tag explicitly marks the start and end of each element. A well-formed XML document can be processed in a number of useful ways. A simple indexing program could extract only the relevant text elements in order to make a list of headings, first lines, or words used in the poem text; a simple formatting program could insert blank lines between stanzas, perhaps indenting the first line of each, or inserting a stanza number. Different parts of each poem could be typeset in different ways. A more ambitious analytic program could relate the use of punctuation marks to stanzaic and metrical divisions. 9 Scholars wishing to see the implications of changing the stanza or line divisions chosen by the editor of this poem can do so simply by altering the position of the tags. And of course, the text as presented above can be transported from one computer to another and processed by any program (or person) capable of making sense of the tags embedded within it with no need for the sort of transformations and translations needed for files which have been saved in one or other of the proprietary formats preferred by most word-processing programs. As we noted above, one of the attractions of XML is that it enables us to apply our own names for the elements rather than requiring us always to use names predefined by other agencies. Clearly, however, if we wish to exchange our poems with others, or to include poems others have marked up in our anthology, we will need to know a bit more about the names used for the tags. The means that XML provides for this is called a namespace . In our simple example, the tags just contain a simple name. As we shall see, it is also possible to use tags that include a qualified name , that is, a name with an optional prefix identifying the set of names to which it belongs. For example, we have defined an element line for the purpose of marking lines of verse. Another person might, however, define an element called line for the purpose of marking typographic lines, or drawn lines. Because of these different meanings, if we wish to share data it will be necessary to distinguish the two line components in our marked-up texts. This is achieved by including a namespace prefix within the markup, for example like this: Namespaces allow us to represent the fact that a name belongs to a group of names, but don't allow us to do much more by way of checking the integrity or accuracy of our tagging. Simple well-formedness alone is not enough for the full range of what might be useful in marking up a document. It might well be useful if, in the process of preparing our digital anthology, a computer system could check some basic rules about how stanzas, lines, and headings can sensibly co-occur in a document. It would be even more useful if the system could check that stanzas are always tagged stanza and not occasionally canto or Stanza. An XML document in which such rules have been checked is technically known as a valid document, and the ability to perform such validation is one of the key advantages of using XML. To carry this out, some way of formally stating the criteria for successful validation is necessary: in XML this formal statement is provided by an additional document known as a schema . 10 5.4 Validating a Document's Structure The design of a schema may be as lax or as restrictive as the occasion warrants. A balance must be struck between the convenience of following simple rules and the complexity of handling real texts. This is particularly the case when the rules being defined relate to texts that already exist: the designer may have only the haziest of notions as to an ancient text's original purpose or meaning and hence find it very difficult to specify consistent rules about its structure. On the other hand, where a new text is being prepared to an exact specification, for entry into a textual database of some kind for example, the more precisely stated the rules, the better they can be enforced. Even in marking up an existing text, a restrictive set of schema rules may be beneficial, especially when applied to test a particular view or hypothesis about the text. A schema designed for use by a small project or team is likely to take a different position on such issues than one intended for use by a large and possibly fragmented community. It is important to remember that every schema results from an interpretation of a text. There is no single schema encompassing the absolute truth about any text, although it may be convenient to privilege some schemas above others for particular types of analysis. XML is widely used in environments where uniformity of document structure is a major desideratum. In the production of technical documentation, for example, it is of major importance that sections and subsections should be properly nested, that cross-references should be properly resolved and so forth. In such situations, documents are seen as raw material to match against predefined sets of rules. As discussed above, however, the use of simple rules can also greatly simplify the task of tagging accurately elements of less rigidly constrained texts. By making these schema rules explicit, scholars reduce their own burdens with consistently marking up and verifying the electronic text. By defining and sharing their schema rules, scholars openly express a project-specific interpretation of the structure and significant particularities of the text being encoded. Schema validation for XML is usually written in the RELAX NG language ( http://relaxng.org/ ) originally developed within the OASIS Technical Committee and now an ISO standard 11 , though other older methods include the Document Type Definition (DTD) language which XML inherited from SGML and the XML Schema language ( https://www.w3.org/XML/Schema ) defined by the W3C. 12 In this chapter, and throughout these Guidelines, we give examples using the compact syntax of RELAX NG for ease of reading. The specifications for the TEI Guidelines are first expressed in the TEI language itself and a RELAX NG schema is generated from them for processing convenience. Details about schema customization using the TEI ODD language are addressed in 22 Documentation Elements , 23.3 Customization and 23.5 Implementation of an ODD System . 5.4.1 An Example Schema For the purposes of illustrating how a schema works to restrict how XML may be written, we use the RELAX NG compact syntax in what follows. The following schema can be used to validate our example poem: Note that this is not the only way in which a RELAX NG schema might be written; we have adopted this idiom, however, because it matches that used throughout the rest of these Guidelines. A RELAX NG schema expresses rules about the possible structure of a document in terms of patterns ; that is, it defines a number of named patterns, each of which acts as a kind of template against which an input document can be matched. The meaning of a pattern is expressed in a schema either by reference to other patterns, or to a small number of fundamental built-in concepts, as we shall see. In the example above, the word to the left of the equals sign is the pattern's name, and the material following it declares a meaning for the pattern. Patterns may also be of particular types; the ones that interest us here are called element patterns and attribute patterns . In this example we see definitions for five element patterns. Note that we have used similar names for the pattern and the element which the pattern describes: so, for example, the line anthology_p = element anthology {poem_p+} defines an element pattern called anthology_p , the value of which defines an element called anthology . These naming conventions are arbitrary; we could use the same name for the pattern as for the element, but we want to make clear that the two are syntactically quite distinct. The name, or generic identifier , of the element follows the word element , and the content model for the element is given within the curly braces following that. Each of these parts is discussed further below. The last line of the schema above tells a RELAX NG validator which element (or elements) in a document can be used as the root element: in our case only anthology . This enables the validator to detect whether a particular document is well-formed but incomplete; it also simplifies the processing task by providing an entry point . 5.4.1.1 Generic Identifier Following the word element each pattern declaration gives the generic identifier (often abbreviated to GI) of the element being defined, for example poem , heading , etc. A GI may contain letters, digits, hyphens, underscore characters, or full stops, but must begin with a letter and may not contain a space. 13 Uppercase and lowercase letters are quite distinct: an element with the GI foo is not the same as an element with the GI Foo ; the root element of a TEI-conformant document is TEI , not tei . 5.4.1.2 Content Model The second part of each declaration, enclosed in curly braces, is called the content model of the element being defined, because it specifies what may legitimately be contained within it. In RELAX NG, the content model is defined in terms of other patterns, either by embedding them, or (as in our examples above) by naming or referring to them. The RELAX NG compact syntax also uses a small number of reserved words to identify other possible contents for an element, of which by far the most commonly encountered is text , as in this example: it means that the element being defined may contain any valid character data, but no elements. If an XML document is thought of as a structure like a family tree, with a single ancestor at the top (in our case, this would be anthology), then almost always, following the branches of the tree downwards (for example, from anthology to poem to stanza to line and heading ) will lead eventually to text . In our example, heading and line are so defined, since their content models say text only and name no embedded elements. 5.4.1.3 Occurrence Indicators The declaration for stanza in the example above states that a stanza consists of one or more lines. It uses an occurrence indicator (the plus sign) to indicate how many times something matching the pattern line_p may be repeated. There are three occurrence indicators: the plus sign, the question mark, and the asterisk or star. The plus sign means that the pattern can match one or more times; the question mark means that it may match at most once but is not mandatory; the star means that the pattern concerned is not mandatory, but may match more than once. Thus, if the content model for stanza were {line_p*} , stanzas with no lines would be possible as well as those with more than one line. If it were {line_p?} , again empty stanzas would be permitted, but no stanza could have more than a single line. The declaration for poem in the example above thus states that a poem cannot have more than one heading, but may have none, and that it must have at least one stanza and may have several. 5.4.1.4 Connectors The content model {heading_p?, stanza_p+} contains more than one component, and thus needs additionally to specify the order in which these patterns ( heading_p and stanza_p ) may appear. This ordering is determined by the connector (the comma) used between its components. The comma connector indicates that the patterns concerned must appear in the sequence given. Another commonly encountered connector is the vertical bar, representing alternation. If the comma in this example were replaced by a vertical bar, then a poem would consist of either a heading or just stanzas—but not both! 5.4.1.5 Groups In our example so far, the components of each content model have been either single patterns or text . We often need to define content models in more complicated ways, in which the components are lists of patterns, combined by connectors. Such lists may also be modified by occurrence indicators and themselves combined by connectors. To demonstrate these facilities, let us expand our example so that it may include non-stanzaic types of verse. For the sake of demonstration, we will categorize poems as one of the following: stanzaic , couplets , or blank (or stichic ). A blank-verse poem consists simply of lines (we ignore the possibility of verse paragraphs for the moment), so no additional elements need be defined for it. We could define a couplet as a firstLine followed by a secondLine , which distinction might be useful in a study of rhyme schemes. 14 The patterns firstLine_p and secondLine_p define elements firstLine and secondLine ; these will have exactly the same content model as the existing line element. We will therefore add the following two lines to our example schema: A group of this kind can contain text as well as named elements: this combination, known as mixed content , allows for elements in which the sub-components appear with intervening stretches of character data. For example, if we wished to mark place names wherever they appear inside our verse lines, then, assuming we have also added a pattern for the name element, we could change the definition for line to Some XML schema languages place no constraints on the way that mixed content models may be defined, but in the XML DTD language, when text appears with other elements in a content model, it must always appear as the first option in an alternation; it may appear once only, and in the outermost model group; and if the group containing it is repeated, the star operator must be used. Although these constraints are not strictly necessary in RELAX NG schemas, all TEI content models currently obey them. Quite complex models can be built in this way, to match the structural complexity of many types of text. For example, consider the case of stanzaic verse in which a refrain or chorus appears. Like a stanza, a refrain consists of repetitions of the line element. A refrain can appear at the start of a poem only, or as an optional addition following each stanza. This could be expressed by a pattern such as the following: Note that the apparent complexity of this model derives from the constraints expressed informally above. A simpler model, such as It is beyond the scope of this \"Gentle Introduction to XML\" to provide a complete orientation to schema writing with Relax NG, but interested readers may wish to consult more thorough tutorials on the subject. 15 The examples and explanation provided here may be helpful to consult when reading the schema declarations posted for groupings of TEI elements that share the same content model, such as macro.phraseSeq , whose declaration features an example of mixed text and element content. Due to the complexity of the TEI schema as expressed in Relax NG, it is best to customize its content model in TEI itself by writing an ODD, as discussed in 23.5 Implementation of an ODD System . 5.5 Complicating the Issue In the simple cases described so far, we have assumed that one can identify the immediate constituents of every element in a textual structure. A poem consists of stanzas, and an anthology consists of poems. Stanzas do not float around unattached to poems or combined into some other unrelated element; a poem cannot contain an anthology. All the elements of a given document type may be arranged into a hierarchic structure like a family tree, with a single ancestor at one end and many children (mostly the elements containing simple text) at the other. For example, we could represent an anthology containing two poems, the first of which contains two four-line stanzas and the second a single stanza, by a tree structure like the following figure: This graphic represents the hierarchical structure of an XML document, resembling a family tree. Most XML processing systems now use a standardized way of accessing parts of an XML document called XPath . 16 XPath gives us a non-graphical way of referring to any part of an XML document: for example, we might refer to the last line of Blake's poem as /anthology/poem[1]/stanza[2]/line[4] . The square brackets here indicate a numerical selection: we are talking about the fourth line in the second stanza of the first poem in the anthology. If we left out all the square-bracketted selections, the corresponding XPath expression would refer to all lines contained by stanzas contained by poems contained by anthologies. An XPath expression can refer to any collection of elements: for example, the expression /anthology/poem refers to all poems in an anthology and the expression /anthology/poem/heading refers to all their headings. The forward slash (‘/’, U+002F SOLIDUS) within an XPath expression behaves in much the same way as a forward slash or backslash does in a filename specification. To use a family tree analogy, a single slash indicates that the item to the immediate left is a parent of the item(s) to the right of it. For example, in the XPath expression /anthology/poem , the single slash between anthology and poem indicates that anthology is a parent of the poem children elements. (The first forward slash in the XPath expression indicates the document node.) In XPath, it is also possible to refer to children, grandchildren, and other descendants of the family tree using two forward slashes together. For example, the XPath expression /anthology/poem//line will refer to all of the lines of all of the stanzas of all the poems, without having to represent the stanza element in the XPath. Clearly, there are many such trees that might be drawn to describe the structure of this or other anthologies. Some of them might be representable as further subdivisions of this tree: for example, we might subdivide the lines into individual words, since in our simple example no word crosses a line boundary. Surprisingly perhaps, this grossly simplified view of what text is (memorably termed an ordered hierarchy of content objects (OHCO) view of text by Renear et al. 17 ) turns out to be very effective for a large number of purposes. It is not, however, adequate for the full complexity of real textual structures, for which more complex mechanisms need to be employed. There are many other trees that might be drawn which do not fit within the anthology model which we have presented so far. We might, for example, be interested in syntactic structures or other linguistic constructs, which rarely respect the formal boundaries of verse. Or, to take a simpler example, we might want to represent the pagination of different editions of the same text. In the OHCO model of text, representation of cases where different elements overlap so that several different trees may be identified in the same document is generally problematic. All the elements marked up in a document, no matter what namespace they belong to, must fit within a single hierarchy. To represent overlapping structures, therefore, a single hierarchy must be chosen, and the points at which other hierarchies intersect with it marked. For example, we might choose the verse structure as our primary hierarchy, and then mark the pagination by means of empty elements inserted at the boundary points between one page and the next. Or we could represent alternative hierarchies by means of the pointing and linking mechanisms described in chapter 16 Linking, Segmentation, and Alignment of these Guidelines. These mechanisms all depend on the use of attributes , which may be used both to identify particular elements within a document and to point to, link, or align them into arbitrary structures. 5.6 Attributes In the XML context, the word attribute , like some other words, has a specific technical sense. It is used to describe information that is in some sense descriptive of a specific element occurrence but not regarded as part of its content. For example, you might wish to add a status attribute to occurrences of some elements in a document to indicate their degree of reliability, or to add an identifier attribute so that you could refer to particular element occurrences from elsewhere within a document. Attributes are useful in precisely such circumstances. Although different elements may have attributes with the same name (for example, in the TEI scheme, every element is defined as having an attribute named n), they are always regarded as different, and may have different values assigned to them. If an element has been defined as having attributes, the attribute values are supplied in the document instance as attribute-value pairs inside the start-tag for the element occurrence. An end-tag cannot contain an attribute-value specification, since it would be redundant. The order in which attribute-value pairs are supplied inside a tag has no significance; they must, however, be separated by at least one whitespace (blank, newline, or tab) character. The value part must always be given inside matching quotation marks, either single or double 18 . For example: 5.6.1 Declaring Attributes Attributes are declared in a schema in the same way as elements. As well as specifying an attribute's name and the element to which it is to be attached, it is possible to specify (within limits) what kind of value is acceptable for an attribute. In the compact syntax of RELAX NG, an attribute is defined by means of an attribute pattern, like the following: A pattern defining the possible values for this attribute is given within the curly braces, in just the same way as a content model is given for an element pattern. In this case, the attribute's value must be one of the strings presented explicitly above. The attribute pattern definition must be included or referenced within the definition for every element to which the attribute is attached. We therefore modify the definition for the poem_p pattern given above as follows: Instead of supplying a list of explicit values, an attribute pattern can specify that the attribute must have a value of a particular type, for example a text string, a numeric value, a normalized date, etc. This is accomplished by supplying a pattern that refers to a datatype . In the example above, because a list of acceptable values is predefined, a parser can check that no poem is defined for which the status attribute does not have one of draft, revised, or published as its value. By contrast, with a definition such as Schema languages vary widely in the extent to which they support validation of attribute values. Some languages predefine a small set of possibilities. Others allow the schema designer to use values from a predefined library of possible datatypes, or to add their own definitions, possibly of great complexity. A datatype might be something fairly general (any positive integer), something very specific or idiosyncratic (any four-character string ending with \"T\"), or somewhere between the two. In the RELAX NG schemas used by the TEI, general patterns have been defined for about half a dozen datatypes (using the W3C Schema Datatype Library , and discussed further in 1.4.2 Datatype Specifications ). In addition to the two possibilities already mentioned—plain text or an explicit list of possible strings—other datatypes likely to be encountered include the following: values must be either true or false values must represent a numeric quantity of some kind values must represent a possible date and time in some calendar Two further datatypes of particular usefulness in managing XML documents are commonly known as ID —for identifier—and URI —for Universal Resource Indicator, or pointer for short. These are discussed in the next section. 5.6.2 Identifiers and Indicators It is often necessary to refer to an occurrence of one textual element from within another, an obvious example being phrases such as see note 6 or as discussed in chapter 5 . When a text is being produced the actual numbers associated with the notes or chapters may not be certain. If we are using descriptive markup, such things as page or chapter numbers, being entirely matters of presentation, will not in any case be present in the marked-up text: they will be assigned by whatever processor is operating on the text (and may indeed differ in different applications). XML therefore predefines an attribute that may be used to provide any element occurrence with a special identifier, a kind of label, which may be used to refer to it from anywhere else: since it is defined in the XML namespace, the name of this attribute is xml:id and it is used throughout the TEI schema. Because it is intended to act as an identifier, its values must be unique within a given document. The cross-reference itself will be supplied by an element bearing an attribute of a specific kind, which must also be declared in the schema. Suppose, for example, we wish to include a reference within the notes on one poem that refers to another poem. We will first need to provide some way of attaching a label to each poem: this is easily done using the xml:id attribute. Note that not every poem need carry an xml:id attribute and the parser may safely ignore the lack of one in those that do not. Only poems to which we intend to refer need use this attribute; for each such poem we should now include in its start-tag some unique identifier, for example: Next we need to define a new element for the cross-reference itself. This will not have any content—it is only a pointer—but it has an attribute, the value of which will be the identifier of the element pointed at. This is achieved by the following definition: The poemRef element has no content, but a single attribute called target. The value of this attribute must be a pointer or web reference of type anyURI ; 19 furthermore, because there is no indication of optionality on the attribute pattern, it must be supplied on each occurrence—a poemRef with no referent is an impossibility. With these declarations in force, we can now encode a reference to the poem whose xml:id attribute specifies that its identifier is Rose as follows: A processor may take any number of actions when it encounters a link encoded in this way: a formatter might construct an exact page and line reference for the location of the poem in the current document and insert it, or just quote the poem's title or first lines. A hypertext style processor might use this element as a signal to activate a link to the poem being referred to, for example by displaying it in a new window. Note, however, that the purpose of the XML markup is simply to indicate that a cross-reference exists: it does not necessarily determine what the processor is to do with it. The target of a URI can be located anywhere: it may not necessarily be part of the same document, nor even located on the same computer system. Equally, it can be a resource of any kind, not necessarily an XML document or document fragment. It is thus a very convenient way of including references to non-XML data such as image files within a document. If, for example, we wished to include an illustration containing a reproduction of Blake's original in our anthology, the most appropriate method would probably be to define a new element called (for the sake of argument) graphic with a target attribute of datatype URI: Attributes form part of the structure of an XML document in the same way as elements, and can therefore be accessed using XPath. For example, to refer to all the poems in our anthology whose status attribute has the value draft, we might use an XPath such as /anthology/poem[@status='draft'] . To find the headings of all such poems, we would use the XPath /anthology/poem[@status='draft']/heading . 5.7 Other Components of an XML Document In addition to the elements and attributes so far discussed, an XML document can contain a few other formally distinct things. An XML document may contain references to predefined strings of data that a validator must resolve before attempting to validate the document's structure; these are called entity references . They may be useful as a means of providing boilerplate text or representing character data which cannot easily be keyboarded. As noted earlier, an XML document may also contain instances of elements taken from some other namespace . And an XML document may also contain arbitrary signals or flags for use when the document is processed in a particular way by some class of processor (a common example in document production is the need to force a formatter to start a new page at some specific point in a document); such flags are called processing instructions . We discuss each of these three cases in the rest of this section. The XML declaration should be supplied at the very beginning of every XML file; while it looks like a processing instruction, it is not, and may not occur anywhere other than at the very beginning of an XML file. For example: 5.7.1 Character References As mentioned above, all XML documents use the same internal character encoding. Since not all computer systems currently support this encoding directly, a special syntax is defined that can be used to represent individual characters from the Unicode character set in a portable way by providing their numeric value, in decimal or hexadecimal notation. For example, the character é is represented within an XML document as the Unicode character with hexadecimal value 00E9 . If such a document is being prepared on (or exported to) a system using a different character set in which this character is not available, it may instead be represented by the character reference &#x00E9; (the x indicating that what follows is a hexadecimal value) or &#0233; (its decimal equivalent). References of this type do not need to be predefined, since the underlying character encoding for XML is always the same. To aid legibility, however, it is also possible to use a mnemonic name (such as eacute ) for such character references, provided that each such name is mapped to the required Unicode value by means of a construct known as an entity declaration . A reference to a named character entity always takes the form of an ampersand, followed by the name, followed by a semicolon. For example an XML document containing the string T&C might be encoded as T&amp;C . There is a small set of such character entity references that do not have to be declared because they form part of the definition of XML. These include the names used for characters such as the ampersand ( amp ) and the open angle bracket or less-than sign ( lt ), which could not easily otherwise be included in an XML document without ambiguity. Other predeclared entity names are those for quotation marks ( quot and apos for double and single respectively), and for completeness the closing angle bracket or greater-than sign ( gt ). For all other named character entities, a set of entity declarations must be provided to an XML processor before the document referring to them can be validated. The declaration itself uses a non-XML syntax inherited from SGML; for example, to define an entity named eacute with the replacement value é, the declaration could have any of the following forms: Entities of this kind are useful also for string substitution purposes, where the same text needs to be repeated uniformly throughout a text. For example, if a declaration such as 5.7.2 Namespaces A valid XML document necessarily specifies the schema in which its constituent elements are defined. However, a well-formed XML document is not required to specify its schema (indeed, it may not even have a schema). It would still be useful to indicate that the element names used in it have some defined provenance. Furthermore, it might be desirable to include in a document elements that are defined (possibly differently) in different schemas. A cabinet-maker's schema might well define an element called table with very different characteristics from those of a documentalist's. The concept of namespace was introduced into the XML language as a means of addressing these and related problems. If the markup of an XML document is thought of as an expression in some language, then a namespace may be thought of as analogous to the lexicon of that language. Just as a document can contain words taken from different languages, so a well-formed XML document can include elements taken from different namespaces. A namespace resembles a schema in that we may say that a given set of elements belongs to a given namespace, or are defined by a given schema. However, a schema is a set of element definitions, whereas a namespace is really only a property of a collection of elements: the only tangible form it takes in an XML document is its distinctive prefix and the identifying name associated with it. Suppose for example that we wish to extend our anthology to include a complex diagram. We might start by considering whether or not to extend our simple schema to include XML markup for such features as arcs, polygons, and other graphical elements. XML can be used to represent any kind of structure, not simply text, and there are clear advantages to having our text and our diagrams all expressed in the same way. Fortunately we do not need to invent a schema for the representation of graphical components such as diagrams; it already exists in the shape of the Scalable Vector Graphics (SVG) language defined by the W3C. 20 SVG is a widely used and rich XML vocabulary for representing all kinds of two-dimensional graphics; it is also well supported by existing software. Using an SVG-aware drawing package, we can easily draw our diagram and save it in XML format for inclusion within our anthology. When we do so, we need to indicate that this part of the document contains elements taken from the SVG namespace, if only to ensure that processing software does not confuse our line element with the SVG line , which means something quite different. An XML document need not specify any namespace: it is then said to use the null namespace. Alternatively, the root element of a document may supply a default namespace, understood to apply to all elements which have no namespace prefix. This is the function of the xmlns attribute which provides a unique name for the default namespace, in the form of a URI: The xmlns attribute can also be used to associate a short prefix name with the namespace it defines. This is very useful if we want to mingle elements from different namespaces within the same document, since the prefix can be attached to any element, overriding the implicit namespace for itself (but not its children): There is no limit on the number of namespaces that a document can use. Provided that each is uniquely identified, an XML processor can identify those that are relevant, and validate them appropriately. To extend our example further, we might decide to add a linguistic analysis to each of the poems, using a set of elements such as aux , adj , etc., derived from some pre-existing XML vocabulary for linguistic analysis. 5.7.2.1 Marked Sections We mentioned above that the syntax of XML requires the encoder to take special action if characters with a syntactic meaning in XML (such as the left angle bracket or ampersand) are to be used in a document to stand for themselves, rather than to signal the start of a tag or an entity reference respectively. The predefined entities &amp; , &lt; , and &gt; provide one method of dealing with this problem, if the number of occurrences of such things is small. Other methods may be considered when the number is large, as in an XML document like the present Guidelines, which contains hundreds of examples of XML markup. One is to label the XML examples as belonging to a different namespace from that of the document itself, which is the approach taken in the present Guidelines. Another and simpler approach is provided by one of the features inherited by XML from its parent SGML: the marked section. A marked section is a block of text within an XML document introduced by the characters <![CDATA[ and terminated by the characters ]]> . Between these rather strange brackets, markup recognition is turned off, and any tags or entity references encountered are therefore treated as if they were plain text. For example, when we come to write the users' manual for our anthology, we may find ourselves often producing text like the following: 5.7.3 Processing Instructions Although one of the aims of using XML is to remove any information specific to the processing of a document from the document itself, it is occasionally very convenient to be able to include such information—if only so that it can be clearly distinguished from the structure of the document. As suggested above, one common example is the need, when processing an XML document for printed output, to include a suggestion that the formatting processor might use to determine where to begin a new page of output. Page-breaking decisions are usually best made by the formatting engine alone, but there will always be occasions when it may be necessary to override these. An XML processing instruction inserted into the document is one very simple and effective way of doing this without interfering with other aspects of the markup. Here is an example XML processing instruction: 5.8 Putting It All Together In this chapter we have discussed most of the components of an XML document and its associated schema. We have described informally how an XML document is represented, and also introduced one way of representing the rules a RELAX NG validator might use to validate it. In a working system, the following issues will also need to be addressed: how does a processor determine the schema (or schemas) that should be used to validate a given XML document instance? if a document contains entity references that must be processed before the document can be validated, where are those entities defined? an XML document instance may be stored in a number of different operating system files; how should they be assembled together? how does a processor determine which stylesheets it should use when processing an XML document, or how to interpret any processing instructions it contains? how does a processor enforce more exact validation than simple datatypes permit (for example of element content)? Different schema languages and different XML processing systems take very different positions on all of these topics, since none of them is explicitly addressed in the XML specification itself. Consequently, the best answer is likely to be specific to a particular software environment and schema language. Since this chapter is concerned with XML considered independently of its processing environment, we only address them in summary detail here. 5.8.1 Associating Entity Definitions with a Document Instance In 5.7.1 Character References we introduced the syntax used for the definition of named character entities such as eacute , which XML inherited from SGML. Different schema languages vary in the ways they make a collection of such definitions available to an XML processor, but fortunately there is one method that all current schema languages support. As well as, and following, the XML declaration ( 5.7.3 Processing Instructions ), an XML document instance may be prefixed with a special DOCTYPE statement. This declarative statement has been inherited by XML from SGML; in its full form it provides a large number of facilities, but we are here concerned only with the small subset of those facilities recognized by all schema languages. Here is an example DOCTYPE statement which we might consider prefixing to the final version of our anthology: 5.8.2 Associating a Document Instance with Its Schema In the past, different schema languages adopted entirely different attitudes to this question, leading to a variety of different methods of associating schemas with document instances. However, a W3C Working Group Note, Associating Schemas with XML documents , ( https://www.w3.org/TR/xml-model/ ) now provides a standardized method of doing this through the use of a processing instruction: A document instance may be valid according to many different schemas, each appropriate to a different processing task. All of these may be expressed in the same way: Any modern XML processing software tool will provide convenient methods of validating documents which are appropriate to the particular schema language chosen. In the interests of maximizing portability of document instances, they should contain as little processing-specific information as possible. 5.8.3 Assembling Multiple Resources into a Single Document As we have already indicated, a single XML document may be made up of several different operating system files that need to be pulled together by a processor before the whole document can be validated. The XML DTD language defines a special kind of entity (a system entity ) that can be used to embed references to whole files into a document for this purpose, in much the same way as the character or string entities discussed in 5.7.1 Character References . Neither RELAX NG nor W3C Schema directly supports this mechanism, however, and we do not discuss it further here. An alternative way of achieving the same effect is to use a special kind of pointer element to refer to the resources that need to be assembled, in exactly the same way as we proposed for the illustration in our anthology. The W3C Recommendation XML Inclusions (XInclude) 22 defines a generic mechanism for this purpose, which is supported by an increasing number of XML processors. 5.8.4 Stylesheet Association and Processing As mentioned above, the processing of an XML document will usually involve the use of one or more stylesheets, often but not exclusively to provide specific details of how the document should be displayed or rendered. In general, there is no reason to associate a document instance with any specific stylesheet and the schema languages we have discussed so far do not therefore make any special provision for such association. The association is made when the stylesheet processor is invoked, and is thus entirely application-specific. However, since one very common application for XML documents is to serve them as browsable documents over the Web, the W3C has defined a procedure and a syntax for associating a document instance with its stylesheet (see https://www.w3.org/TR/xml-stylesheet/ ). This Recommendation allows a document to supply a link to a default stylesheet and also to categorize the stylesheet according to its MIME type , for example to indicate whether the stylesheet is written in CSS or XSLT, using a specialized form of processing instruction. Assuming therefore that we have made a CSS-conformant stylesheet for our anthology and stored it in a file called anthology.css which is available from the same location as the anthology itself, we could make it available over the Web simply by adding a processing instruction like the following to the anthology: Multiple stylesheets can be defined for the same document, and options are available to specify how a web browser should select amongst them. For example, if the document also contained a directive: Most modern web browsers support CSS (although the extent of their implementation varies), and some of them support XSLT. 5.8.4.1 Content Validation As we noted above, most schema languages provide some degree of datatype validation for attribute values ( 5.6.1 Declaring Attributes ). They vary greatly in the validation facilities they offer for the content of elements, other than the syntactic constraints already discussed. Thus, while we may very easily check that our stanza elements contain only line elements, we cannot easily check that line elements contain between five and 500 correctly-spelled English words, should we wish to constrain our poetry in such a way. Also, because attributes and elements are treated differently, it is difficult or impossible to express co-occurrence constraints: for example, if the status of a poem is draft we might wish to permit elements such as editorialQuery within its content, but not otherwise. The XML DTD language offers very little beyond syntactic checking of element content. By contrast, a major impetus behind the design and development of the W3C schema language was the addition of a much more general and powerful constraint language to the existing structural constraints of XML DTDs. In RELAX NG the opposite approach was taken, in that all datatype validation, whether of attributes or element content, is regarded as external to the schema language. For attributes, as we have seen, RELAX NG makes use of the W3C Schema Datatype Library (but permits use of others). Because RELAX NG treats both elements and attributes as special cases of patterns, the same datatype validation facilities are available for element content as for attribute values; it is unlike other schema languages in this respect. In addition, for content validation, a different component of DSDL known as Schematron can be used. Schematron is a pattern matching (rather than a grammar-based) language, which allows us to test the components of a document against templates that express constraints such as those mentioned above. Like other XML processors, Schematron uses XPath to identify parts of an XML document; in addition, it provides elements that describe assertions to be tested and conditions which must be validated, as well as elements to report the results of the test. ","title":"<span class=\"tei-front1 breadcrumb\">Front matter</span> <span class=\"tei-div7 breadcrumb\">5 A Gentle Introduction to XML</span>"}
{"link":"p5.xml?id=CH","tag":"guidelines","content":"6 Languages and Character Sets The documents which users of these Guidelines may wish to encode encompass all kinds of material, potentially expressed in the full range of written and spoken human languages, including the extinct, the non-existent, and the conjectural. Because of this wide scope, special attention has been paid to two particular aspects of the representation of linguistic information often taken for granted: language identification and character encoding. Even within a single document, material in many different languages may be encountered. Human culture, and the texts which embody it, is intrinsically multilingual, and shows no sign of ceasing to be so. Traditional philologists and modern computational linguists alike work in a polyglot world, in which code-switching (in the linguistic sense) and accurate representation of differing language systems constitute the norm, not the exception. The current increased interest in studies of linguistic diversity, most notably in the recording and documentation of endangered languages, is one aspect of this long standing tradition. Because of their historical importance, the needs of endangered and even extinct languages must be taken into account when formulating Guidelines and recommendations such as these. Beyond the sheer number and diversity of human languages, it should be remembered that in their written forms they may deploy a huge variety of scripts or writing systems. These scripts are in turn composed of smaller units, which for simplicity we term here characters. A primary goal when encoding a text should be to capture enough information for subsequent users to correctly identify not only the constituent characters, but also the language and script. In this chapter we address this requirement, and propose recommended mechanisms to indicate the languages, scripts and characters used in a document or a part thereof. Identification of language is dealt with in 6.1 Language Identification . In summary, it recommends the use of pre-defined identifiers for a language where these are available, as they increasingly are, in part as a result of the twin pressures of an increasing demand for language-specific software and an increased interest in language documentation. Where such identifiers are not available or not standardized, these Guidelines recommend a method for documenting language identifiers and their significance, in the same way as other metadata is documented in the TEI header. Standardization of the means available to represent characters and scripts has moved on considerably since the publication of the first version of these Guidelines. At that time, it was essential to explicitly document the characters and encoded character sets used by almost any digital resource if it was to have any chance of being usable across different computer platforms or environments, but this is no longer the case. With the availability of the Unicode standard, more than 128,000 different characters representing almost all of the world's current writing systems are available and usable in any XML processing environment without formality. Nevertheless, however large the number of standardized characters, there will always be a need to encode documents which use non-standard characters and glyphs, particularly but not exclusively in historical material. The second part of this chapter discusses in some detail the concepts and practice underlying this standard, and also introduces the methods available for extending beyond it, which are more fully discussed in 5 Characters, Glyphs, and Writing Modes . 6.1 Language Identification Identification of the language a document or part thereof is written in is a crucial requirement for many envisioned usages of an electronic document. The TEI therefore accommodates this need in the following way: A global attribute xml:lang is defined for all TEI elements. Its value identifies the language and writing system used. The TEI header has a section set aside for the information about the languages used in a document: see further 2.4.2 Language Usage . The value of the attribute xml:lang identifies the language (and, optionally, script) using a coded value. For maximal compatibility with existing processes, the identifier for the language must be constructed as in Best Current Practice 47 1 . This same identifier has to be used to identify the corresponding language element in the TEI header, if one is present. The first part of BCP 47 is called Tags for Identifying Languages , and proposes the following mechanism for constructing an identifier (tag) for languages as administered by the Internet Assigned Numbers Authority (IANA). The tag is assembled from a sequence of subtags separated by the hyphen (-, U+002D) character. It gives the language (possibly further identified with a sublanguage), a script, and a region for the language, each possibly followed by a variant subtag. The authoritative list of registered subtags is maintained by IANA and is available at http://www.iana.org/assignments/language-subtag-registry . For a good general overview of the construction of language tags, see https://www.w3.org/International/articles/language-tags/ , and for a practical step-by-step guide, see https://www.w3.org/International/questions/qa-choosing-language-tags.en.php . In addition to the list of registered subtags, BCP 47 provides extensions that can be employed by private convention. The constructs provided can thus be used to generate identifiers for any language, past and present, in any usage in any area of the world. If such private extensions are used within the context of the TEI, they should be documented within the language element of the TEI header, which might also provide a prose description of the language described by the language tag. While language, region, and script can be adequately identified using this mechanism, there is only very rough provision to express a dimension of time for the language of a document; those codes provided (e.g. grc for Greek, Ancient (to 1453) ) might not reflect the segments appropriate for a text at hand. Text encoders might express the time window of the language used in the document by means of the extension mechanism defined in BCP 47 and relate that to a date element in the corresponding language section of the TEI header. Equivalences to language identifiers by other authorities can be given in the language section as well, but no formal mechanism for doing so has been defined. The scope of the language identification extends to the whole subtree of the document anchored at the element that carries the xml:lang attribute, including all elements and those attributes, if any, where a language might apply. 2 6.2 Characters and Character Sets All document encoding has to do with representing one thing by another in an agreed and systematic way. Applied to the smallest distinctive units in any given writing system, which for the moment we may loosely call characters, such representation raises surprisingly complex and troublesome issues. The reasons are partly historical and partly to do with conceptual unclarities about what is involved in identifying, encoding, processing and rendering the characters of a natural language. 6.2.1 Historical Considerations When the first methods of representing text for storage or transmission by machines were devised, long before the development of computers, the overriding aim was to identify the smallest set of symbols needed to convey the essential semantic content, and to encode that symbol set in the most economical way that the storage or transmission media allowed. The initial outcome were systems that encoded only such content as could be expressed in uppercase letters in the Latin script, plus a few punctuation marks and some control characters needed to regulate the storage and transmission devices. Such encodings, originally developed for telegraphy, strongly influenced the way the pioneers of computing conceived of and implemented the handling of text, with consequences that are with us still. For many years after the invention of computers, the way they represented text continued to be constrained by the imperative to use expensive resources with maximal efficiency. Even when storage and processing costs began their dramatic fall, the Anglo-centric outlook of most hardware designers and software engineers hampered initiatives to devise a more generous and flexible model for text representation. The wish to retain compatibility with legacy data was an additional disincentive. Eventually, tension in East Asia between commitment to technological progress and the inability of existing computers to cope with local writing systems led to decisive developments. Japanese, Korean, and Chinese standards bodies, who long before the advent of computers had been engaged in the specification of character sets, joined with computer manufacturers and software houses to devise ways of mapping those character sets to numeric encodings and processing the resulting text data. Unfortunately, in the early years there was little or no co-ordination among either the national standards bodies or the manufacturers concerned, so that although commercial necessity dictated that these various local standards were all compatible with the representation of US-American English, they were not straightforwardly compatible with one another. Even within Japan itself there emerged a number of mutually incompatible systems, thanks to a mixture of commercial rivalry, disagreements about how best to manage certain intractable problems, and the fact that such pioneering work inevitably involved some false starts, leading to incompatibilities even between successive products of the same bodies. Roughly at the same time, and for similar reasons, multiple and incompatible ways of representing languages that use Cyrillic scripts were devised, along with methods of encoding ancient writing systems which inevitably could not aim for compatibility with other writing systems apart from basic Latin script. Many of the earliest projects that fed into the TEI were shaped in this developmental phase of the computerized representation of texts, and it was also the context in which SGML was devised and finalized. SGML had of necessity to offer ways of coping with multiple writing systems in multiple representations; or rather, it provided a framework within which SGML-compliant applications capable of handling such multiple representations might be developed by those with sufficient financial and personnel resources (such as are seldom found in academia). Earlier editions of these Guidelines offered advice on character set and writing system issues addressed to the condition of those for whom SGML was the only feasible option. That advice is here substantially altered because of two closely-related developments: the availability of the ISO/Unicode character set as an international standard, and the emergence of XML and related technologies which are committed to the theory and practice of character representation which Unicode embodies. 6.2.2 Terminology and Key Concepts Before the significance of Unicode and the implications of the association between XML and Unicode can be adequately explained, it is necessary to clarify some key concepts and attempt to establish an adequately precise terminology for them. The word character will not of itself take us very far towards greater terminological precision. It tends to be used to refer indiscriminately both to the visible symbol on a page and to the letter or ideograph which that symbol represents, two things that it is essential to keep conceptually distinct. The visible symbol obviously has some aspects by which we interpret it as representing one character rather than another; but its appearance may also be significantly determined by features that have no effect on our notion of which character in a writing system it represents. A familiar instance is the lowercase a , which in printed texts may be represented either by a single storey symbol ( cf. figure 1 in the examples from URW Gothic L on the bottom row) or by a two storey version (as in figure 1 in the examples from Umpush, or URW Bookman L Demi Bold). We say that the single and double-storey symbols both represent one and the same the same abstract character a using two different glyphs. Similarly, an uppercase A in a serif typeface has additional strokes that are absent from the same letter when printed using a sans-serif typeface, so that once again we have differing glyphs standing for the same abstract character. The distinction between abstract characters and glyphs is fundamental to all machine processing of documents. In most scholarly encoding projects, the accurate recording of the abstract characters which make up the text is of prime importance, because it is the essential prerequisite of digitizing and processing the document without semantic loss. In many cases (though there are important exceptions, to be touched on shortly) it may not be necessary to encode the specific glyphs used to render those abstract characters in the original document. An encoding that faithfully registers the abstract characters of a document allows us to search and analyse our document's content, language, and structure, and to access its full semantics. That same encoding, however, may not contain sufficient information to allow an exact visual representation of the glyphs in the source text or manuscript to be recreated. The importance of this distinction between information content and its visual representation is not always immediately apparent to people unused to the specific complexities of text handling by machine. Such users tend to ask first what (in order of conceptual priority) should actually be their very last question: how do I get a physical image that looks like character x in my source document to appear on to the screen or the output page? Their first question should in fact be: how can I get an abstract representation of character x into my encoded document in a way that will be universally and unambiguously identifiable, no matter what it happens to look like in printout or on any particular display? And occasionally the response they receive as a result of their misguided initial question is a custom solution that satisfies their immediate rendering wishes at the price of making their underlying document unintelligible to other users (or even to the original user in other times and places) because it encodes the abstract character in an idiosyncratic way. That said, there will certainly be documents or projects where it is a matter of scholarly significance that the compositor or scribe chose to represent a given abstract character using one particular glyph or set of strokes rather than a semantically-equivalent but visually distinct alternative, and in that case the specific appearance of the form will have to be encoded in one way or another. But that encoding need not (and in most cases will not) involve a notation that visually resembles the original, any more than italicized text in an original document will be represented by the use of italic characters in the encoded version. A collection of the abstract characters needed to represent documents in a given writing system is known as a character set , and the character set or character repertoire of a processing or rendering device is the set of abstract characters that it is equipped to recognize and handle appropriately. There is, however, a subtle distinction between these two parallel uses of the same term, involving one more key concept which it is essential to grasp. The character set of a document (or the writing system in which it is recorded) is purely a collection of abstract characters. But the character set of a computing device is a set of abstract characters which have been mapped in a well-defined way to a set of numbers or code points by which the device represents those abstract characters internally. It can therefore be referred to as a coded character set , meaning a set of abstract characters each of which has been assigned a numerical code point (or in some instances a sequence of code points) which unambiguously identifies the character concerned. It is now possible to use this terminology to say what Unicode is: it is a coded character set, devised and actively maintained by an international public body, where each abstract character is identified by a unique name and assigned a distinctive code point. 3 Unicode is distinguished from other coded character sets by its (current and potential) size and scope; its built-in provision for (in practical terms) limitless expansion; the range and quality of linguistic and computational expertise on which it draws; the stability, authority, and accessibility it derives from its status as an international public standard; and, perhaps most importantly, the fact that today it is implemented by almost every provider of hardware and software platforms worldwide. 6.2.3 Abstract Characters, Glyphs, and Encoding Scheme Design The distinction between abstract characters and glyphs can be crucial when devising an encoding scheme. When performing searches, text retrieval, or creating concordances, users of electronic text will expect the system to recognize and treat different glyphs as instances of the same character; but when perusing the text itself they may well expect to see glyph variants preserved and rendered. When encoding a pre-existing text, the encoder should determine whether a particular letter or symbol is a character or a glyphic variant. The Unicode Consortium and an ISO work group (ISO/IEC JTC1 SC2/WG2) have developed a detailed model of the relationship between characters and glyphs. This model, presented in Unicode Technical Report 17: Character Encoding Model , is the underpinning of much standards work since, including the current chapter. The model makes explicit the distinction between two different properties of the components of written language: their content, i.e. its meaning and phonetic value (represented by characters) their graphical appearance (represented by glyphs). When searching for information, a system generally operates on the content aspects of characters, with little or no attention to their appearance. A layout or formatting process, on the other hand, must of necessity be concerned with the exact appearance of characters. Of course, some operations (hyphenation for example) require attention to both kinds of feature, but in general the kind of text encoding described in these Guidelines tends to focus on content rather than appearance (see further 3.3 Highlighting and Quotation ). An encoder wishing to record information about which glyphs are present in a given document may do so at either or both of two levels: the level of character encoding, using an appropriate Unicode code point to represent the glyph concerned the markup level, with the glyph indicated via appropriate elements or attributes The encoding practice adopted may be guided by, among other things, an assessment of the most frequent uses to which the encoded text will be put. For example, if recognition of identical characters represented by a variety of glyphs is the main priority, it may be advisable to represent the glyph variations at markup level, so that the character value can be immediately exposed to the indexing and retrieval software. Plainly, an encoding project will need to consider such issues carefully and document the outcome of their deliberations in their TEI customization file (or other local encoding documentation) to ensure encoding consistency. Using Unicode code points to represent glyph information requires that such choices be documented in the TEI header. Such documentation cannot of itself guarantee proper display of the desired glyph but at least makes the intention of the encoder discoverable. At present the Unicode Standard does not offer detailed specifications for the encoding of glyph variations. These Guidelines do give some recommendations; some discussion of related matters is given in 11 Representation of Primary Sources , and 5 Characters, Glyphs, and Writing Modes offers some features for the definition of variant glyphs. 6.2.4 Entry of Characters The entry of characters was much more complicated before the near-universal adoption of Unicode, for which there are Input Method Editors (IMEs) available in most languages and fonts that provide glyphs for the full range of the Unicode specification. In those rare situations where there is difficulty entering the specific character you want, or some problem representing it on the system you are working in, Numeric Character References (NCRs) should be used. These take the general form &#D; where D is an integer representing the code point of the character in base 10, or &#xH; , where H is the code point in hexadecimal notation. Every XML processor is capable of recognising NCRs and replacing them with the required code point value without needing access to any additional data. The disadvantage of NCRs as a means of entering, representing and proofing character data is that most human beings find them anything but readable and it is all too easy for the wrong character to be entered in error and retained undetected. Where characters are not defined in Unicode, these Guidelines provide advice on the strategies available for handling their representation in Chapter 25 Representation of non-standard Characters and Glyphs . 6.2.5 Output of Characters The rendering of the encoded text is a complicated process that depends largely on the purpose, external requirements, local equipment and so forth, it is thus outside the scope of coverage for these Guidelines. It might however nevertheless be helpful to put some of the terminology used for the rendering process in the context of the discussion of this chapter. As was mentioned above, Unicode encodes abstract characters, not specific glyphs. For any process that makes characters visible, however, concrete, specifically designed glyph shapes have to be used. For a printing process, for example, these shapes describe exactly at which point ink has to be put on the paper and which areas have to be left blank. If we want to print a character from the Latin script, besides the selection of the overall glyph shape, this process also requires that a specific weight of the font has been selected, a specific size and to what degree the shape should be slanted. Beyond individual characters, the overall typesetting process also follows specific rules of how to calculate the distance between characters, how much whitespace occurs between words, at which points line breaks might occur and so forth. If we concern ourselves only with the rendering process of the characters themselves, leaving out all these other parameters, we will realize that of all the information required for this process, only a small amount will be drawn from the encoded text itself. This information is the code point used to encode the character in the document. With this information, the font selected for printing will be queried to provide a glyph shape for this character. Some modern font formats (e.g. OpenType) implement a sophisticated mapping from a code point to the glyph selected, which might take into account surrounding characters (to create ligatures where necessary) and the language or even area this character is printed for to accommodate different typesetting traditions and differences in the usage of glyphs. A TEI document might provide some of the information that is required for this process, for example by identifying the linguistic context with the xml:lang attribute. The selection of fonts and sizes is usually done in a stylesheet, while the actual layout of a page is determined by the typesetting system used. Similarly, if a document is rendered for publication on the Web, information of this kind can be shipped with the document in a stylesheet. 4 6.2.6 Unicode and XML XML was designed with Unicode in mind as its means of representing abstract characters. It is possible to use other character encoding schemes, but in general they are best avoided, as you run the risk of encountering compatibility issues with different XML processors, as well as potential difficulties with rendering their output. We recommend using the UTF-8 encoding, which for the Basic Latin range is identical to ASCII, and which uses a variable-length set of bytes to represent characters. It should be noted that it is not sufficient simply to declare in the XML Declaration that a document is in UTF-8 format. Doing so merely means that processors will treat the content therein as if it were UTF-8, and may fail to process the document if it is not. For further discussion of UTF-8, see the section below on 6.2.8 Issues Arising from the Internal Representations of Unicode . 6.2.7 Special Aspects of Unicode Character Definitions 6.2.7.1 Compatibility Characters The principles of Unicode are judiciously tempered with pragmatism. This means, among other things, that the actual repertoire of characters which the standard encodes, especially those parts dating from its earlier days, include a number of items which on a strict interpretation of the Unicode Consortium's theoretical approach should not have been regarded as abstract characters in their own right. Some of these characters are grouped together into a code-point regions assigned to compatibility characters . Ligatures are a case in point. Ligatures (e.g. the joining of adjacent lowercase letters s and t or f and i in Latin scripts, whether produced by a scribal practice of not lifting the pen between strokes or dictated by the aesthetics of a type design) are representational features with no added semantic value beyond that of the two letters they unite (though for historians of typography their presence and form in a given edition may be of scholarly significance). However, by the time the Unicode standard was first being debated, it had become common practice to include single glyphs representing the more common ligatures in the repertoires of some typesetting devices and high-end printers, and for the coded character sets built into those devices to use a single code point for such glyphs, even though they represent two distinct abstract characters. So as to increase the acceptance of Unicode among the makers and users of such devices, it was agreed that some such pseudo-characters should be incorporated into the standard as compatibility characters. Nevertheless, if a project requires the presence of such ligatured forms to be encoded, this should normally be done via markup, not by the use of a compatibility character. That way, the presence of the ligature can still be identified (and, if desired, rendered visually) where appropriate, but indexing and retrieval software will treat the code points in the document as a simple sequential occurrence of the two constituent characters concerned and so correctly align their semantics with non-ligatured equivalents. Such ligatures should not be confused with digraphs (usually) indicating diphthongs, as in the French word \"cœur\". A digraph is an atomic orthographic unit representing an abstract character in its own right, not purely an amalgamation of glyphs, and indexing and retrieval software will need to treat it as such. Where a digraph occurs in a source text, it should normally be encoded using the appropriate code point for the single abstract character which it represents. 6.2.7.2 Precomposed and Combining Characters and Normalization The treatment of characters with diacritical marks within Unicode shows a similar combination of rigour and pragmatism. It is obvious enough that it would be feasible to represent many characters with diacritical marks in Latin and some other scripts by a sequence of code points, where one code point designated the base character and the remainder represented one or more diacritical marks that were to be combined with the base character to produce an appropriate glyphic rendering of the abstract character concerned. From its earliest phase, the Unicode Consortium espoused this view in theory but was prepared in practice to compromise by assigning single code points to precomposed characters which were already commonly assigned a single distinctive code point in existing encoding schemes. This means, however, that for quite a large number of commonly-occurring abstract characters, Unicode has two different, but logically and semantically equivalent encodings: a precomposed single code point, and a code point sequence of a base character plus one or more combining diacritics. Scripts more recently added to Unicode no longer exhibit this code-point duplication (in current practice no new precomposed characters are defined where the use of combining characters is possible) but this does nothing to remove the problem caused by the duplications from older character sets that have been permanently embodied in Unicode. Together with essentially analogous issues arising from the encoding of certain East Asian ideographs. This duplication gives rise to the need to practice normalization of Unicode documents. Normalization is the process of ensuring that a given abstract character is represented in one way only in a given Unicode document or document collection. The Unicode Consortium provides four standard normalization forms, of which the Normalization Form C (NFC) seems to be most appropriate for text encoding projects. The NFC, as far as possible, defines conversions for all base characters followed by one or more combining characters into the corresponding precomposed characters. The World Wide Web Consortium has produced a document entitled Character Model for the World Wide Web 1.0 5 , which among other things discusses normalization issues and outlines some relevant principles. An authoritative reference is Unicode Standard Annex #15 Unicode Normalization Forms 6 . It is important that every Unicode-based project should agree on, consistently implement, and fully document a comprehensive and coherent normalization practice. As well as ensuring data integrity within a given project, a consistently implemented and properly documented normalization policy is essential for successful document interchange. While different input methods may themselves differ in what normalization form they use, any programming language that implements Unicode will provide mechanisms for converting between normalization forms, so it is easy in practice to ensure that all documents in a project are in a consistent form, even if different methods are used to enter data. 6.2.7.3 Character Semantics In addition to the Universal Character Set itself, the Unicode Consortium maintains a database of additional character semantics 7 . This includes names for each character code point and normative properties for it. Character properties, as given in this database, determine the semantics and thus the intended use of a code point or character. The database also contains information that might be needed for correctly processing this character for different purposes. It is an important reference in determining which Unicode code point to use to encode a certain character. In addition to the printed documentation and lists made available by the Unicode consortium, the information it contains may also be accessed by a number of search systems over the Web (e.g. http://www.eki.ee/letter/ ). Examples of character properties included in the database include case, numeric value, directionality, and, (where applicable) status as a compatibility character 8 . Where a project undertakes local definition of characters with code points in the PUA, it is desirable that any relevant additional information about the characters concerned should be recorded in an analogous way, as further discussed under 5 Characters, Glyphs, and Writing Modes . 6.2.8 Issues Arising from the Internal Representations of Unicode In theory it should not be necessary for encoders to have any knowledge of the various ways in which Unicode code points can be represented internally within a document or in the memory of a processing system, but experience shows that problems frequently arise in this area because of mistaken practice or defective software, and in order to recognize the resulting symptoms and correct their causes an outline knowledge of certain aspects of Unicode internal representation is desirable. There are three encodings of Unicode available for use: UTF-8, which uses 1–4 bytes per character, UTF-16, which uses 2–4, and UTF-32, which uses 4 bytes per character. Current practice for documents to be transmitted via the Web recommends only UTF-8. 9 6.2.8.1 Encoding Errors Related to UTF-8 The code points assigned by Unicode 3.0 and later are notionally 32-bit integers, and the most straightforward way to represent each such integer in computer storage would be to use 4 eight-bit bytes. However, many of the code points for characters most commonly used in Latin scripts can be represented in one byte only and the vast majority of the remainder which are in common use (including those assigned from the most frequently used PUA range) can be expressed in two bytes alone. This accounts for the use of UTF-8 and UTF-16 and their special place in the XML standard. UTF-8 and UTF-16 are ways of representing 32-bit code points in an economical way. UTF-8 is a variable length encoding: the more significant bits there are in the underlying code point (or in everyday terminology the bigger the number used to represent the character), the more bytes UTF-8 uses to encode it. What makes UTF-8 particularly attractive for representing Latin scripts, explaining its status as the default encoding in XML documents, is that all code points that can be expressed in seven or fewer bits (the 127 values in the original ASCII character set) are also encoded as the same seven or fewer bits (and therefore in a single byte) in UTF-8. That is why a document which is actually encoded in pure 7-bit ASCII can be fed to an XML processor without alteration and without its encoding being explicitly declared: the processor will regard it as being in the UTF-8 representation of Unicode and be able to handle it correctly on that basis. However, even within the domain of Latin-based scripts, some projects have documents which use characters from 8 bit extensions to ASCII, e.g. those in the ISO-8859-n series of encodings, and the way characters which under ISO-8859-n use all eight bits are encoded in UTF-8 is significantly different, giving rise to puzzling errors. Abstract characters that have a single byte code point where the highest bit is set (that is, they have a decimal numeric representation between 129 and 255) are encoded in ISO-8859-n as a single byte with the same value as the code point. But in UTF-8 code-point values inside that range are expressed as a two byte sequence. That is to say, the abstract character in question is no longer represented in the file or in memory by the same number as its code-point value: it is transformed (hence the T in UTF) into a sequence of two different numbers. Now as a side-effect of the way such UTF-8 sequences are derived from the underlying code-point value, many of the single-byte eight-bit values employed in ISO-8859-n encodings are illegal in UTF-8. This complicated situation has a simple consequence which can cause great bewilderment. XML processors will effortlessly handle character data in pure 7-bit ASCII without that encoding needing to be declared to the parser, and will similarly accept documents encoded in an undeclared ISO-8859-n encoding if they happen to use no characters outside the strict ASCII subset of the ISO character sets; but the parse will immediately fail if an eight-bit character from an ISO-8859-n set is encountered in the input stream, unless the document's encoding has been explicitly and correctly declared. Explicitly declaring the encoding ought to solve the problem, and if the file is correctly encoded throughout, it will do so. But projects dealing with documents of sufficient age may find that they have to deal with some files encoded in UTF-8 along with others in, say, ISO-8859-1. Such encoding differences may go unnoticed, especially if the proportion of characters where the internal encodings are distinguishable is relatively small (for example in a long English text with a smattering of French words). These types of error may or may not manifest in actual processing errors, and may only become visible as garbage characters in the eventual display of documents. In projects that routinely handle documents in non-Latin scripts, everyone is well aware of the need to ensure correct and consistent encoding, so in such places mixed encoding problems seldom arise, and when they do are readily identified and remedied. Real confusion tends to arise, however, in projects which have a low awareness of the issues because they employ predominantly unaccented Latin characters, with only thinly-distributed instances of accented letters, or other special characters where the internal representation under ISO-8859-n and UTF-8 are different (such as the copyright symbol, or, a frequent troublemaker where eventual HTML output is envisaged, the non-breaking space). Even, or especially, if such projects view themselves as concerned only with English documents, the close relationship between XML and Unicode means they will need to acquire an understanding of these encoding issues and develop procedures which assure consistency and integrity of encoding and its correct declaration, including the use of appropriate software for transcoding and verification. ","title":"<span class=\"tei-front1 breadcrumb\">Front matter</span> <span class=\"tei-div7 breadcrumb\">6 Languages and Character Sets</span>"}
{"link":"p5.xml?id=ST","tag":"guidelines","content":"1 The TEI Infrastructure This chapter describes the infrastructure for the encoding scheme defined by these Guidelines. It introduces the conceptual framework within which the following chapters are to be understood, and the means by which that conceptual framework is implemented. It assumes some familiarity with XML and XML schemas (see chapter 5 A Gentle Introduction to XML ) but is intended to be accessible to any user of these Guidelines. Other chapters supply further technical details, in particular chapter 22 Documentation Elements which describes the XML schema used to express these Guidelines themselves, and chapter 23 Using the TEI which combines a discussion of modification and conformance issues with a description of the intended behaviour of an ODD processor; these chapters should be read by anyone intending to implement a new TEI-based system. The TEI encoding scheme consists of a number of modules , each of which declares particular XML elements and their attributes. Part of an element's declaration includes its assignment to one or more element classes . Another part defines its possible content and attributes with reference to these classes. This indirection gives the TEI system much of its strength and its flexibility. Elements may be combined more or less freely to form a schema appropriate to a particular set of requirements. It is also easy to add new elements which reference existing classes or elements to a schema, as it is to exclude some of the elements provided by any module included in a schema. In principle, a TEI schema may be constructed using any combination of modules. However, certain TEI modules are of particular importance, and should always be included in all but exceptional circumstances: the module tei described in the present chapter is of this kind because it defines classes, macros, and datatypes which are used by all other modules. The core module, defined in chapter 3 Elements Available in All TEI Documents contains declarations for elements and attributes which are likely to be needed in almost any kind of document, and is therefore recommended for global use. The header module defined in chapter 2 The TEI Header provides declarations for the metadata elements and attributes constituting the TEI header, a component which is required for TEI conformance, while the textstructure module defined in chapter 4 Default Text Structure declares basic structural elements needed for the encoding of most book-like objects. Most schemas will therefore need to include these four modules. The specification for a TEI schema is itself a TEI document, using elements from the module described in chapter 22 Documentation Elements : we refer to such a document informally as an ODD document, from the design goal originally formulated for the system: One Document Does it all . Stylesheets for maintaining and processing ODD documents are maintained by the TEI, and these Guidelines are also maintained as such a document. As further discussed in 23.5 Implementation of an ODD System , an ODD document can be processed to generate a schema expressed using any of the three schema languages currently in wide use: the XML DTD language, the ISO RELAX NG language, or the W3C Schema language, as well as to generate documentation such as the Guidelines and their associated web site. The bulk of this chapter describes the TEI infrastructure module itself. Although it may be skipped at a first reading, an understanding of the topics addressed here is essential for anyone planning to take full advantage of the TEI customization techniques described in chapter 23.3 Customization . The chapter begins by briefly characterizing each of the modules available in the TEI scheme. Section 1.2 Defining a TEI Schema describes in general terms the method of constructing a TEI schema in a specific schema language such as XML DTD language, RELAX NG, or W3C Schema. The next and largest part of the chapter introduces the attribute and element classes used to define groups of elements and their characteristics (section 1.3 The TEI Class System ). Finally, section 1.4 Macros introduces the concept of macros , which are used to express some commonly used content models, and lists the datatypes used to constrain the range of legal values for TEI attributes (section 1.4.2 Datatype Specifications ). 1.1 TEI Modules These Guidelines define several hundred elements and attributes for marking up documents of any kind. Each definition has the following components: a prose description a formal declaration, expressed using a special-purpose XML vocabulary defined by these Guidelines in combination with elements taken from the ISO schema language RELAX NG usage examples Each chapter of these Guidelines presents a group of related elements, and also defines a corresponding set of declarations, which we call a module . All the definitions are collected together in the reference sections provided as an appendix. Formal declarations for a given chapter are collected together within the corresponding module. For convenience, each element is assigned to a single module, typically for use in some specific application area, or to support a particular kind of usage. A module is thus simply a convenient way of grouping together a number of associated element declarations. In the simple case, a TEI schema is made by combining together a small number of modules, as further described in section 1.2 Defining a TEI Schema below. The following table lists the modules defined by the current release of these Guidelines: For each module listed above, the corresponding chapter gives a full description of the classes, elements, and macros which it makes available when it is included in a schema. Other chapters of these Guidelines explore other aspects of using the TEI scheme. 1.2 Defining a TEI Schema To determine that an XML document is valid (as opposed to merely well-formed), its structure must be checked against a schema, as discussed in chapter 5 A Gentle Introduction to XML . For a valid TEI document, this schema must be a conformant TEI schema, as further defined in chapter 23.4 Conformance . Local systems may allow their schema to be implicit, but for interchange purposes the schema associated with a document must be made explicit. The method of doing this recommended by these Guidelines is to provide explicitly or by reference a TEI schema specification against which the document may be validated. A TEI-conformant schema is a specific combination of TEI modules, possibly also including additional declarations that modify the element and attribute declarations contained by each module, for example to suppress or rename some elements. The TEI provides an application-independent way of specifying a TEI schema by means of the schemaSpec element defined in chapter 22 Documentation Elements . The same system may also be used to specify a schema which extends the TEI by adding new elements explicitly, or by reference to other XML vocabularies. In either case, the specification may be processed to generate a formal schema, expressed in a variety of specific schema languages, such as XML DTD language, RELAX NG, or W3C Schema. These output schemas can then be used by an XML processor such as a validator or editor to validate or otherwise process documents. Further information about the processing of a TEI formal specification is given in chapter 23 Using the TEI . 1.2.1 A Simple Customization The simplest customization of the TEI scheme combines just the four recommended modules mentioned above. In ODD format, this schema specification takes this form: This schema specification contains references to each of four modules, identified by the key attribute on the moduleRef element. The schema specification itself is also given an identifier ( TEI-minimal ). An ODD processor will generate an appropriate schema from this set of declarations, expressed using the XML DTD language, the ISO RELAX NG language, the W3C Schema language, or in principle any other adequately powerful schema language. The resulting schema may then be associated with the document instance by one of a number of different mechanisms, as further described in chapter 5 A Gentle Introduction to XML . The start point (or root element) of document instances to be validated against the schema is specified by means of the start attribute. Further information about the processing of an ODD specification is given in 23.5 Implementation of an ODD System . 1.2.2 A Larger Customization These Guidelines introduce each of the modules making up the TEI scheme one by one, and therefore, for clarity of exposition, each chapter focusses on elements drawn from a single module. In reality, of course, the markup of a text will draw on elements taken from many different modules, partly because texts are heterogeneous objects, and partly because encoders have different goals. Some examples of this heterogeneity include: a text may be a collection of other texts of different types: for example, an anthology of prose, verse, and drama; a text may contain other smaller, embedded texts: for example, a poem or song included in a prose narrative; some sections of a text may be written in one form, and others in a different form: for example, a novel where some chapters are in prose, others take the form of dictionary entries, and still others the form of scenes in a play; an encoded text may include detailed analytic annotation, for example of rhetorical or linguistic features; an encoded text may combine a literal transcription with a diplomatic edition of the same or different sources; the description of a text may require additional specialized metadata elements, for example when describing manuscript material in detail. The TEI provides mechanisms to support all of these and many other use cases. The architecture permits elements and attributes from any combination of modules to co-exist within a single schema. Within particular modules, elements and attributes are provided to support differing views of the granularity of a text, for example: a definition of a corpus or collection as a series of TEI documents, sharing a common TEI header (see chapter 15 Language Corpora ) a definition of composite texts which combine optional front- and back-matter with a group of collected texts, themselves possibly composite (see section 4.3.1 Grouped Texts ) an element for the representation of embedded texts , where one narrative appears to float within another (see section 4.3.2 Floating Texts ) Subsequent chapters of these Guidelines describe in detail markup constructs appropriate for these and many other possible features of interest. The markup constructs can be combined as needed for any given set of applications or project. For example, a project aiming to produce an ambitious digital edition of a collection of manuscript materials, to include detailed metadata about each source, digital images of the content, along with a detailed transcription of each source, and a supporting biographical and geographical database might need a schema combining several modules, as follows: Alternatively, a simpler schema might be used for a part of such a project: those preparing the transcriptions, for example, might need only elements from the core , textstructure , and transcr modules, and might therefore prefer to use a simpler schema such as that generated by the following: The TEI architecture also supports more detailed customization beyond the simple selection of modules. A schema may suppress elements from a module, suppress some of their attributes, change their names, or even add new elements and attributes. Detailed discussion of the kind of modification possible in this way is provided in 23.3 Customization and conformance rules relating to their application are discussed in 23.4 Conformance . These facilities are available for any schema language (though some features may not be available in all languages). The ODD language also makes it possible to combine TEI and non-TEI modules into a single schema, provided that the non-TEI module is expressed using the RELAX NG schema language (see further 22.8.2 Combining TEI and Non-TEI Modules ). 1.3 The TEI Class System The TEI scheme distinguishes about five hundred different elements. To aid comprehension, modularity, and modification, the majority of these elements are formally classified in some way. Classes are used to express two distinct kinds of commonality among elements. The elements of a class may share some set of attributes, or they may appear in the same locations in a content model. A class is known as an attribute class if its members share attributes, and as a model class if its members appear in the same locations. In either case, an element is said to inherit properties from any classes of which it is a member. Classes (and therefore elements which are members of those classes) may also inherit properties from other classes. For example, supposing that class A is a member (or a subclass ) of class B, any element which is a member of class A will inherit not only the properties defined by class A, but also those defined by class B. In such a situation, we also say that class B is a superclass of class A. The properties of a superclass are inherited by all members of its subclasses. A basic understanding of the classes into which the TEI scheme is organized is strongly recommended and is essential for any successful customization of the system. 1.3.1 Attribute Classes An attribute class groups together elements which share some set of common attributes. Attribute classes are given names composed of the prefix att. , often followed by an adjective. For example, the members of the class att.canonical have in common a key and a ref attribute, both of which are inherited from their membership in the class rather than individually defined for each element. These attributes are said to be defined by (or inherited from) the att.canonical class. If another element were to be added to the TEI scheme for which these attributes were considered useful, the simplest way to provide them would be to make the new element a member of the att.canonical class. Note also that this method ensures that the attributes in question are always defined in the same way, taking the same default values etc., no matter which element they are attached to. Some attribute classes are defined within the tei infrastructural module and are thus globally available. Other attribute classes are specific to particular modules and thus defined in other chapters. Attributes defined by such classes will not be available unless the module concerned is included in a schema. The attributes provided by an attribute class are those specified by the class itself, either directly, or by inheritance from another class. For example, the attribute class att.pointing.group provides attributes domains and targFunc to all of its members. This class is however a subclass of the att.pointing class, from which its members also inherit the attributes target, targetLang and evaluate. Members of the class att.pointing will thus have these three attributes, while members of the class att.pointing.group will have all five. Note that some modules define superclasses of an existing infrastructural class. For example, the global attribute class att.divLike makes attributes org and sample available, while the att.metrical class, which is specific to the verse module, provides attributes met, real, and rhyme. Because att.metrical is defined as a superclass of att.divLike , all five of these attributes are available to elements; the declaration for att.metrical adds its three attributes to the three already defined by att.divLike when the verse module is included in a schema. If, however, this module is not included in a schema, then the att.divLike class supplies only the two attributes first mentioned. Attributes specific to particular modules are documented along with the relevant module rather than in the present chapter. One particular attribute class, known as att.global , is common to all modules, and is therefore described in some detail in the next section. A full list of all attribute classes is given in 2 Attribute Classes below. 1.3.1.1 Global Attributes The following attributes are defined in the infrastructure module for every TEI element. < att.global > provides attributes common to all elements in the TEI encoding scheme. @xml:id provides a unique identifier for the element bearing the attribute. @n gives a number (or other label) for an element, which is not necessarily unique within the document. @xml:lang indicates the language of the element content using a tag generated according to BCP 47 . @xml:base provides a base URI reference with which applications can resolve relative URI references into absolute URI references. @xml:space signals an intention about how white space should be managed by applications. provides a unique identifier for the element bearing the attribute. gives a number (or other label) for an element, which is not necessarily unique within the document. indicates the language of the element content using a tag generated according to BCP 47 . provides a base URI reference with which applications can resolve relative URI references into absolute URI references. signals an intention about how white space should be managed by applications. Some of these attributes (specifically xml:id, n, xml:lang, xml:base and xml:space) are provided by the att.global attribute class itself. The others are provided by one its subclasses att.global.rendition , att.global.responsibility , or att.global.source . Their usage is discussed in the following subsections. Several other globally-available attributes are defined by other subclasses of the att.global class. These are provided by other modules, and are therefore discussed in the chapter discussing that module. A brief summary table is provided in section 1.3.1.1.7 Other Globally Available Attributes below. 1.3.1.1.1 Element Identifiers and Labels The value supplied for the xml:id attribute must be a legal name , as defined in the World Wide Web Consortium's XML Recommendation . This means that it must begin with a letter, or the underscore character ( _ ), and contain no characters other than letters, digits, hyphens, underscores, full stops, and certain combining and extension characters. 1 In XML names (and thus the values of xml:id in an XML TEI document) uppercase and lowercase letters are distinguished, and thus partTime and parttime are two distinctly different names, and could (though perhaps unwisely) be used to denote two different element occurrences. If two elements are given the same identifier, a validating XML parser will signal a syntax error. The following example, therefore, is not valid: For a discussion of methods of providing unique identifiers for elements, see section 3.11.2 Creating New Reference Systems . The n attribute also provides an identifying name or number for an element, but in this case the information need not be a legal xml:id value. Its value may be any string of characters; typically it is a number or other similar enumerator or label. For example, the numbers given to the items of a numbered list may be recorded with the n attribute; this would make it possible to record errors in the numeration of the original, as in this list of chapters, transcribed from a faulty original in which the number 10 is used twice, and 11 is omitted: As noted above there is no requirement to record a value for either the xml:id or the n attribute. Any XML processor can identify the sequential position of one element within another in an XML document without any additional tagging. An encoding in which each line of a long poem is explicitly labelled with its numerical sequence such as the following 1.3.1.1.2 Language Indicators The xml:lang attribute indicates the natural language and writing system applicable to the content of a given element. If it is not specified, the value is inherited from that of the immediately enclosing element. As a rule, therefore, it is simplest to specify the base language of the text on the TEI element, and allow most elements to take the default value for xml:lang; the language of an element then need be explicitly specified only for elements in languages other than the base language. For this reason, it is recommended practice to supply a default value for the xml:lang attribute, either on the TEI root element, or on both the teiHeader and the text element. The latter is appropriate in the not uncommon case where the text element in a TEI document uses a different default language from that of the TEI header attached to it. Other language shifts in the source should be explicitly identified by use of the xml:lang attribute on an element at an appropriate level wherever possible. In the following example schematic, an English language TEI header is attached to an English language text: The same effect would be obtained by specifying the default language for both header and text: The latter approach is necessary in the case where the two differ: for example, where an English language header is applied to a French text: The same principle applies at any hierarchic level. In the following example, the default language of the text is French, but one section of it is in German: Similarly, in the following example the xml:lang attribute on the term element allows us to record the fact that the technical terms used are Latin rather than English; no xml:lang attribute is needed on the q element, by contrast, because it is in the same language as its parent. Note that in cases where it is advisable or necessary to identify the language of the text that is pointed at, the (non-global) attribute targetLang should be used, for example in The values used for the xml:lang and targetLang attributes must be constructed in a particular way, using values from standard lists. See further 6.1 Language Identification . Additional information about a particular language may be supplied in the language element within the header (see section 2.4.2 Language Usage ). 1.3.1.1.3 Rendition Indicators The rend, rendition, and style attributes are all used to give information about the physical presentation of the text in the source. In the following example, rend is used to indicate that both the emphasized word and the proper name are printed in italics: The main difference between rend attribute and style is that the value used for the former may contain one or more tokens from any vocabulary devised by the encoder, separated by space characters, whereas the value used for the latter must be a single string taken from a formally-defined style definition language such as CSS. The rend attribute values are sequence-indeterminate set of whitespace-separated tokens, whereas style values allow whitespace and sequence relationships as part of the formally-defined style definition language. The rendition element defined in 2.3.4 The Tagging Declaration may be used to hold repeatedly-used format descriptions. A rendition element can then be associated with any element, either by default, or by means of the global rendition attribute. For example: The rendition attribute always points to one or more rendition elements, each of which defines some aspect of the rendering or appearance of the text in its original form. These details may most conveniently be described using a formal style definition language, such as CSS ( 1 ) or XSL-FO ( 1 ); in some other formal language developed for a specific project; or even informally in running prose. Although languages such as CSS and XSL-FO are generally used to describe document output to screen or print, they nonetheless provide formal and precise mechanisms for describing the appearance of source documents, especially print documents, but also many aspects of manuscript documents. For example, both CSS and XSL-FO provide mechanisms for describing typefaces, weight, and styles; character and line spacing; and so on. As noted above, the style attribute is provided for encoders wishing to describe the appearance of individual source elements using a language such as CSS directly rather than by reference to a rendition element. Its value may be any expression in the chosen formal style definition language. Formal definition languages such as CSS typically identity a series of properties (such as font-style or margin-left) for which values are specified. A sequence of such property-value pairs makes up a stylesheet. The TEI uses such languages simply to describe the appearance of a source document, rather than to control how it should be formatted. In the TEI scheme, it is possible to supply information about the appearance of elements within a source document in the following distinct ways: One or more properties may be specified as the default for a set of elements (based on an external scheme, by default CSS), using rendition elements and their selector attributes; One or more properties may be specified for individual element occurrences, using the rend attribute with any convenient set of one or more sequence-indeterminate tokens; One or more properties may be specified for individual element occurrences, using the rendition attribute to point to rendition elements; One or more properties may be supplied explicitly for individual element occurrences, using the style attribute. If the same property is specified in more than one of the above ways, the one with the highest number in the list above is understood to be applicable. The resulting properties from each way are then combined to provide the full set of property-value pairs applicable to the given element, and (by default) to all of its children. For simplicity of processing, the same formal style definition should be used throughout; however, the architecture does permit this to be varied, by using the scheme attribute to indicate a different language for one or more rendition elements. Care should be taken to ensure that such values can be meaningfully combined. Similar considerations apply to the use of the rend attribute, if this is used in combination with either rendition or style. Note that these TEI attributes always describe the rendition or appearance of the source document, not intended output renditions, although often the two may be closely related. 1.3.1.1.4 Sources, certainty, and responsibility The source attribute is used to indicate the source of an element and its content, for example by pointing to a bibliographic citation for a quotation to indicate the source from which it derives. The target of the pointer may be an entry in a bibliographic list of some kind, or a pointer to a digital version of the source itself. As with other TEI pointers, the value of this attribute is expressed as any form of URI, for example an absolute URL, a relative URL, or a private scheme URI that is expanded to a relative or absolute URL as documented in a prefixDef . In the following typical example a relative bare name URL value is used to point to a bibl elsewhere in the bibliography of the document which contains a bibliographic source for the quotation itself: Alternatively, the quotation might be directly linked to the online edition of this source using a full URI : The source attribute is also used on schema documentation elements such as schemaSpec or elementRef to indicate the location from which declarations for the components being defined may be obtained by an ODD processor. For example, a customization wishing to include the p element specifically as it was in version 2.0.1 of TEI P5 would indicate the source for this on an elementRef element like the following: The cert attribute provides a method of indicating the encoder's certainty concerning an intervention or interpretation represented by the markup. It is typically used where the encoder wishes to supply one or more possible corrections to a text, indicating the certainty they wish to attach to each, as in the following example: The resp attribute is used to indicate the person or organization considered responsible for some aspects of the information encoded by an element. For example, the preceding example might be revised as follows to indicate the editors responsible for the two corrections: 1.3.1.1.5 Evaluation of Links Several TEI elements carry attributes whose values are defined as anyURI , meaning that such attributes supply a link or pointer, typically expressed as a URL. Like other XML applications, the TEI allows use of a special attribute to set the context within which relative URLs are to be evaluated. The global attribute xml:base is defined as part of the XML specification and belongs to the XML namespace rather than the TEI namespace. We do not describe it in detail here: reference information about xml:base is provided by 1 In essence xml:base is used to set a context for all relative URLs within the scope of the element on which it is specified. For example: The xml:base attribute is intended to enable the stable resolution of relative URIs in a document after that document's context may have changed (for example as a result of being embedded in another document via XInclude). Setting the xml:base simply as a way to allow encoders to write shorter URIs is not recommended. In particular, xml:base may cause ambiguity as to the referent of same-document references in the form #id (where id is an xml:id). RFC 3986 states that URIs of this type should not result in the loading of a different document. The RFC therefore assumes that such references are internal to the document in which they are located. Using xml:base to denote arbitrary external bases while also using same-document references may mean that software agents deal with these links in unexpected and inconsistent ways. Further discussion of this attribute and its effect on TEI linking methods is provided in chapter 16 Linking, Segmentation, and Alignment . 1.3.1.1.6 XML Whitespace The global attribute xml:space provides a mechanism for indicating to systems processing an XML file how they should treat whitespace, that is, any sequences of consecutive tab (#x09), space (#x20), carriage return (#x0D) or linefeed (#x0A) characters. Like xml:id this attribute is defined as part of the XML specification and belongs to the XML namespace rather than the TEI namespace. Complete information about this attribute is provided by section 2.10 of the XML Specification ; here we provide a summary of how its use affects users of the TEI scheme. The xml:space attribute has only two permitted values: preserve and default. The first indicates that whitespace in a text node—every carriage return, every tab, etc.—should be maintained as is when the document is processed. The second (which is implied when the attribute is not supplied), indicates that whitespace should be handled as appropriate. Exactly what is deemed appropriate is left unspecified by the XML Recommendation. These Guidelines assume one of two different ways of processing whitespace will apply in a given case, depending on an element's content model. For an element that can contain only other elements with no intervening non-whitespace characters, whitespace is considered to have no semantic significance, and should therefore be discarded by a processor. For example, in a choice element, such as Similarly, the address element has a content model containing only elements: any punctuation or whitespace required between the lines of an address must therefore be supplied by the processor, as any whitespace present in the input document will be ignored. Elements with content models of this type are comparatively unusual in the TEI: a list of them is provided in the TEI release file stripspace.xsl.model , formatted there for use as an xsl:strip-space command for XSL stylesheets. Most TEI elements permit what is known as mixed-content: that is, they can contain both text and other elements. Here the assumption of these Guidelines is that whitespace will be normalized. This means that all space, carriage return, linefeed, and tab characters are converted into spaces, all consecutive spaces are then deleted and replaced by one space, and then space immediately after a start-tag or immediately before an end-tag is deleted. The result is that this encoding, If the default treatment described above is not appropriate for a mixed content element, the processing required may be described in the encodingDesc element of the TEI header, but generic XML processing tools may not take note of this. Alternatively, the xml:space attribute may be supplied with a value of preserve in order to indicate that every space, tab, carriage return and linefeed character found within that element in the document being processed is significant. Typically, the result of that processing will be to retain the whitespace characters in the output. Thus if the above example began persName xml:space=\"preserve\", the resulting text would most likely be rendered over five lines, indented, and with a blank line following. The xml:space=\"preserve\" attribute is rarely used in TEI documents because such layout features are generally captured with less risk and more precision by using native TEI elements such as lb or space , or by using the renditional attributes described in section 1.3.1.1.3 Rendition Indicators . 1.3.1.1.7 Other Globally Available Attributes The following table lists for convenience other potentially available global attributes. The table specifies the name of the attribute class providing the attributes concerned, the module which must be included in a schema if the attributes are to be made available, and the section of these Guidelines where the class is discussed. 1.3.2 Model Classes As noted above, the members of a given TEI model class share the property that they can all appear in the same location within a document. Wherever possible, the content model of a TEI element is expressed not directly in terms of specific elements, but indirectly in terms of particular model classes. This makes content models simpler and more consistent; it also makes them much easier to understand and to modify. Like attribute classes, model classes may have subclasses or superclasses. Just as elements inherit from a class the ability to appear in certain locations of a document (wherever the class can appear), so all members of a subclass inherit the ability to appear wherever any superclass can appear. To some extent, the class system thus provides a way of reducing the whole TEI galaxy of elements into a tidy hierarchy. This is however not entirely the case. In fact, the nature of a given class of elements can be considered along two dimensions: as noted, it defines a set of places where the class members are permitted within the document hierarchy; it also implies a semantic grouping of some kind. For example, the very large class of elements which can appear within a paragraph comprises a number of other classes, all of which have the same structural property, but which differ in their field of application. Some are related to highlighting, while others relate to names or places, and so on. In some cases, the set of places where class members are permitted is very constrained: it may just be within one specific element, or one class of element, for example. In other cases, elements may be permitted to appear in very many places, or in more than one such set of places. These factors are reflected in the way that model classes are named. If a model class has a name containing part, such as model.divPart or model.biblPart then it is primarily defined in terms of its structural location. For example, those elements (or classes of element) which appear as content of a div constitute the model.divPart class; those which appear as content of a bibl constitute the model.biblPart class. If, however, a model class has a name containing like, such as model.biblLike or model.nameLike , the implication is that its members all have some additional semantic property in common, for example containing a bibliographic description, or containing some form of name, respectively. These semantically-motivated classes often provide a useful way of dividing up large structurally-motivated classes: for example, the very general structural class model.pPart.data (data elements that form part of a paragraph) has four semantically-motivated member classes ( model.addressLike , model.dateLike , model.measureLike , and model.nameLike ), the last of these being itself a superclass with several members. Although most classes are defined by the tei infrastructure module, a class cannot be populated unless some other specific module is included in a schema, since element declarations are contained by modules. Classes are not declared top down, but instead gain their members as a consequence of individual elements' declaration of their membership. The same class may therefore contain different members, depending on which modules are active. Consequently, the content model of a given element (being expressed in terms of model classes) may differ depending on which modules are active. Some classes contain only a single member, even when all modules are loaded. One reason for declaring such a class is to make it easier for a customization to add new member elements in a specific place, particularly in areas where the TEI does not make fully elaborated proposals. For example, the TEI class model.rdgLike , initially empty, is expanded by the textcrit module to include just the TEI rdg element. A project wishing to add an alternative way of structuring text-critical information could do so by defining their own elements and adding it to this class. Another reason for declaring single-member classes is where the class members are not needed in all documents, but appear in the same place as elements which are very frequently required. For example, the specialized element g used to represent a non-Unicode character or glyph is provided as the only member of the model.gLike class when the gaiji module is added to a schema. References to this class are included in almost every content model, since if it is used at all the g must be available wherever text is available; however these references have no effect unless the gaiji module is loaded. At the other end of the scale, a few of the classes predefined by the tei module are subsequently populated with very many members. For example, the class model.pPart.edit groups all the classes of element for simple editorial correction and transcription which can appear within a p or paragraph element. The core module alone adds more than fifty elements to this class; the namesdates module adds another twenty, as does the tagdocs module. Since the p element is one of the basic building blocks of a TEI document it is not surprising that each module will need to add elements to it. The class system here provides a very convenient way of controlling the resulting complexity. Typically, elements are not added directly to these very general classes, but via some intermediate semantically-motivated class. Just as there are a few classes which have a single member, so there are some classes which are used only once in the TEI architecture. These classes, which have no superclass and therefore do not fit into the class hierarchy defined here, are a convenient way of maintaining elements which are highly structured internally, but which appear from the outside to be uniform objects like others at the same level. 2 Members of such classes can only ever appear within one element, or one class of elements. For example, the class model.addrPart is used only to express the content model for the element address ; it references some other classes of elements, which can appear elsewhere, and also some elements which can only appear inside an address. 1.3.2.1 Informal Element Classifications Most TEI elements may also be informally classified as belonging to one of the following groupings: high level, possibly self-nesting, major divisions of texts. These elements populate such classes as model.divLike or model.div1Like , and typically form the largest component units of a text. elements such as paragraphs and other paragraph-level elements, which can appear directly within texts or within divisions of them, but not (usually) within other chunks. These elements populate the class model.divPart , either directly or by means of other classes such as model.pLike (paragraph-like elements), model.entryLike , etc. elements such as highlighted phrases, book titles, or editorial corrections which can occur only within chunks, but not between them (and thus cannot appear directly within a division). These elements populate the class model.phrase . 3 The TEI also identifies two further groupings derived from these three: elements such as lists, notes, quotations, etc. which can appear either between chunks (as children of a div ) or within them; these elements populate the class model.inter . Note that this class is not a superset of the model.phrase and model.divPart classes but rather a distinct grouping of elements which are both chunk-like and phrase-like. However, the classes model.phrase , model.pLike , and model.inter are all disjoint. elements which can appear directly within texts or text divisions; this is a combination of the inter- and chunk- level elements defined above. These elements populate the class model.common , which is defined as a superset of the classes model.divPart , model.inter , and (when the dictionary module is included in a schema) model.entryLike . As noted above, some elements do not belong to any model class, and some model classes are not readily associated with any of the above informal groupings. However, over two-thirds of the 585 elements defined in the present edition of these Guidelines are classified in this way, and future editions of these recommendations will extend and develop this classification scheme. A complete alphabetical list of all model classes is provided in 1 Model Classes . analysis cl phr s span core abbr add addrLine address author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset org orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme This class is used in the content model of elements which reference names of people or organizations. Cette classe est utilisée dans le modèle de contenu des éléments qui référencent des noms de personnes ou d'organisations. Esta clase se utiliza en el modelo de elementos cuyos nombres se refieren a gente o a organizaciones. 当該クラスは，人物や団体の名前を参照する要素の内容モデル中で使用さ れる． analysis cl phr s core abbr add addrLine author biblScope citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled speaker stage street term textLang time title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell header change distributor edition extent geoDecl handNote licence scriptNote linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material musicNotation objectType origDate origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witDetail textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme The principles on which segmentation is carried out, and any special codes or attribute values used, should be defined explicitly in the segmentation element of the encodingDesc within the associated TEI header. Les principes sur lesquels repose la segmentation, ainsi que tout code particulier ou valeur d'attribut utilisée, doivent être définis explicitement dans l'élément segmentation de l'élément encodingDesc situé dans l'En-tête TEI associé. Los principios en los cuales se realiza la segmentación, y cualesquiera sean los códigos o valores de atributo especiales usados, se deben definir explícitamente en el elemento segmentación del encodingDesc dentro del encabezado TEI asociado. どの区分，どのコード，どの属性値を使うかを決める原則は，関連する TEIヘダー内の要素 encodingDesc にある要素 segmentation 中で明示的に宣言されるべきである． analysis cl phr s span core abbr add addrLine author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw line metamark mod restore retrace secl supplied surplus zone verse metSym rhyme analysis cl phr s span core abbr add addrLine author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s core abbr add addrLine author biblScope citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled speaker stage street term textLang time title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell header change distributor edition extent geoDecl handNote licence scriptNote linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material musicNotation objectType origDate origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witDetail textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme analysis cl phr s span core abbr add addrLine author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken recording u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s span core abbr add addrLine author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme core add corr del desc emph head hi item l meeting note orig p q quote ref reg said sic stage title unclear dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron stress subc syll tns usg xr drama camera caption castList epilogue performance prologue set sound tech view figures cell figDesc figure header change handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation spoken u writing textcrit lem rdg witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage metamark mod restore retrace secl supplied surplus verse rhyme analysis cl phr s core abbr add addrLine author biblScope citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled speaker stage street term textLang time title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell header change distributor edition extent geoDecl handNote licence scriptNote linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material musicNotation objectType origDate origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witDetail textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme analysis cl phr s span core abbr add addrLine address author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset org orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s span core abbr add addrLine author biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl pc phr s span w core abbr add addrLine author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl pc phr s w core abbr add addrLine author bibl biblScope citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled speaker stage street term textLang time title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell header change distributor edition extent geoDecl handNote licence scriptNote linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material musicNotation objectType origDate origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witDetail textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme analysis cl phr s core abbr add addrLine author biblScope citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled speaker stage street term textLang time title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell header change distributor edition extent geoDecl handNote licence scriptNote linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material musicNotation objectType origDate origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witDetail textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme analysis cl phr s span core abbr add addrLine author biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspContext creation distributor edition extent funder geoDecl handNote language licence principal publicationStmt rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s core abbr add addrLine author biblScope citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled speaker stage street term textLang time title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell header change distributor edition extent geoDecl handNote licence scriptNote linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material musicNotation objectType origDate origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witDetail textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme analysis cl m phr s span w core abbr add addrLine address author bibl biblScope cit citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi imprint item l label lg list measure mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said series sic soCalled sp speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entry entryFree etym form gen gram gramGrp hom hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castGroup castItem castList epilogue performance prologue role roleDesc set sound spGrp tech view figures cell figure table header authority change classCode distributor edition extent funder geoDecl handNote language licence principal scriptNote sponsor linking ab seg standOff msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material msItem musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns person personGrp persona placeName region residence roleName settlement sex socecStatus surname nets graph spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail textstructure argument back body byline closer dateline div div1 div2 div3 div4 div5 div6 div7 docAuthor docDate docEdition docImprint docTitle epigraph floatingText front group imprimatur opener postscript salute signed text titlePage titlePart trailer transcr damage fw line metamark mod restore retrace secl sourceDoc supplied surface surfaceGrp surplus zone verse metSym rhyme Elements in this class are typically used to hold groups of links or of abstract interpretations, or by provide indications of certainty etc. It may find be convenient to localize all metadata elements, for example to contain them within the same divison as the elements that they relate to; or to locate them all to a division of their own. They may however appear at any point in a TEI text. Les éléments de cette classe sont utilisés pour contenir des groupes de liens ou d'interprétations abstraites, ou pour fournir des indications quant à la certitude, etc. Il peut être commode de situer tous les éléments contenant des métadonnées, par exemple de les rassembler dans la même divison que les éléments auxquels ils sont reliés ; ou de les retrouver tous dans la division qui leur est propre. Ils peuvent cependant apparaître à un point quelconque d'un texte TEI. Los elementos en esta clase se utilizan típicamente para llevar a cabo los grupos de conexiones o de interpretaciones abstractas, o bien para proporcionar indicaciones de la certeza etc. Puede ser conveniente localizar todos los elementos de los metadatos, por ejemplo para contenerlos dentro de la misma división que los elementos con los cuales se relacionan; o para localizarlos todos en la división que les es propia. Sin embargo pueden aparecer en cualquier momento en un texto de TEI. 当該クラスの要素は，リンクや確信度といった抽象的解釈をまとめるため に使われる．これは，ユーザがメタデータを記述する際に便利であろう． 例えば，関連する要素と同じ部分レベル内にあるものまとめたり，関連す る要素を，自身の部分レベル内にまめめたりする場合である． しかし，これらは，TEIデータ中では，どこにでも出現可能である． analysis cl m phr s span w core abbr add addrLine address author bibl biblScope cit citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi imprint item l label lg list measure mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said series sic soCalled sp speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entry entryFree etym form gen gram gramGrp hom hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castGroup castItem castList epilogue performance prologue role roleDesc set sound spGrp tech view figures cell figure table header authority change classCode distributor edition extent funder geoDecl handNote language licence principal scriptNote sponsor linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material msItem musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns person personGrp persona placeName region residence roleName settlement sex socecStatus surname nets graph spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail textstructure argument back body byline closer dateline div div1 div2 div3 div4 div5 div6 div7 docAuthor docDate docEdition docImprint docTitle epigraph floatingText front group imprimatur opener postscript salute signed text titlePage titlePart trailer transcr damage fw line metamark mod restore retrace secl sourceDoc supplied surface surfaceGrp surplus zone verse metSym rhyme core add corr del desc emph head hi item l meeting note orig p q quote ref reg said sic stage title unclear dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron stress subc syll tns usg xr drama camera caption castList epilogue performance prologue set sound tech view figures cell figDesc figure header change handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation spoken u writing textcrit lem rdg witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage metamark mod restore retrace secl supplied surplus verse rhyme analysis cl phr s span core abbr add addrLine author biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s core abbr add addrLine author biblScope citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled speaker stage street term textLang time title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell header change distributor edition extent geoDecl handNote licence scriptNote linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material musicNotation objectType origDate origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witDetail textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme core add corr del desc emph head hi item l meeting note orig p q quote ref reg said sic stage title unclear dictionaries case colloc def dictScrap entry entryFree etym form gen gram gramGrp hom hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama camera caption castList epilogue performance prologue set sound tech view figures cell figDesc figure header change handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg standOff msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout msItem musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation person personGrp persona spoken u writing textcrit lem rdg witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage metamark mod restore retrace secl supplied surplus verse rhyme core lg list drama castList epilogue performance prologue textstructure body div div1 div2 div3 div4 div5 div6 div7 group postscript core add corr del desc emph head hi item l meeting note orig p q quote ref reg said sic stage title unclear dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron stress subc syll tns usg xr drama camera caption castList epilogue performance prologue set sound tech view figures cell figDesc figure header change handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation spoken u writing textcrit lem rdg witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage metamark mod restore retrace secl supplied surplus verse rhyme core add corr del desc emph head hi item l meeting note orig p q quote ref reg said sic stage title unclear dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron stress subc syll tns usg xr drama camera caption castList epilogue performance prologue set sound tech view figures cell figDesc figure header change handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg standOff msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation spoken u writing textcrit lem rdg witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage metamark mod restore retrace secl supplied surplus verse rhyme analysis cl m phr s span w core abbr add addrLine address author bibl biblScope cit citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi imprint item l label lg list measure mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said series sic soCalled sp speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entry entryFree etym form gen gram gramGrp hom hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castGroup castItem castList epilogue performance prologue role roleDesc set sound spGrp tech view figures cell figure table header authority change classCode distributor edition extent funder geoDecl handNote language licence principal scriptNote sponsor linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material msItem musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns person personGrp persona placeName region residence roleName settlement sex socecStatus surname nets graph spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail textstructure argument back body byline closer dateline div div1 div2 div3 div4 div5 div6 div7 docAuthor docDate docEdition docImprint docTitle epigraph floatingText front group imprimatur opener postscript salute signed text titlePage titlePart trailer transcr damage fw line metamark mod restore retrace secl sourceDoc supplied surface surfaceGrp surplus zone verse metSym rhyme core item note q quote said stage drama castList epilogue performance prologue set view figures cell figure header change handNote licence scriptNote msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation tagdocs specGrp textcrit lem rdg textstructure argument body div div1 div2 div3 div4 div5 div6 div7 epigraph postscript transcr metamark core item note q quote said stage drama castList epilogue performance prologue set view figures cell figure header change correspContext handNote licence scriptNote msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation tagdocs specGrp textcrit lem rdg textstructure argument body div div1 div2 div3 div4 div5 div6 div7 epigraph postscript transcr metamark core add corr del desc emph head hi item l meeting note orig p q quote ref reg said sic stage title unclear dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron stress subc syll tns usg xr drama camera caption castList epilogue performance prologue set sound tech view figures cell figDesc figure header change handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation spoken u writing textcrit lem rdg witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage metamark mod restore retrace secl supplied surplus verse rhyme Stage directions are members of class inter : that is, they can appear between or within component-level elements. Les indications scéniques appartiennent à la classe inter : cela signifie qu'elles peuvent apparaître à l'intérieur d'éléments de niveau composant ou bien entre ces éléments. Las direcciones de etapa son miembros de la clase inter : es decir, pueden aparecer entre o dentro de los elementos del componente-nivel. ト書きは，クラス inter のメンバーである．すなわち，構成 要素レベル要素内または間で出現可能である． iso-fs f fvLib if vAlt vDefault vLabel vMerge vNot vRange iso-fs f fvLib if vAlt vDefault vLabel vMerge vNot vRange Members of this class typically contain related parts of a dictionary entry which form a coherent subdivision, for example a particular sense, homonym, etc. Les membres de cette classe contiennent typiquement des parties d'une entrée de dictionnaire liées et formant une subdivision cohérente, par exemple un sens particulier, un homonyme etc. Los miembros de esta clase contienen normalmente partes relativas a entrada de diccionario y que forman una subdivisión coherente, por ejemplo un significado particular, un homónimo, etc. 当該クラスのメンバーは，干渉的下位部分である辞書項目に関連するを持つ． 例えば，特別な意味や，同音同形異義語など． namesdates org person personGrp persona analysis cl m phr s span w core abbr add addrLine address author bibl biblScope cit citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi imprint item l label lg list measure mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said series sic soCalled sp speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entry entryFree etym form gen gram gramGrp hom hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castGroup castItem castList epilogue performance prologue role roleDesc set sound spGrp tech view figures cell figure table header authority change classCode distributor edition extent funder geoDecl handNote language licence principal scriptNote sponsor linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material msItem musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns person personGrp persona placeName region residence roleName settlement sex socecStatus surname nets graph spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail textstructure argument back body byline closer dateline div div1 div2 div3 div4 div5 div6 div7 docAuthor docDate docEdition docImprint docTitle epigraph floatingText front group imprimatur opener postscript salute signed text titlePage titlePart trailer transcr damage fw line metamark mod restore retrace secl sourceDoc supplied surface surfaceGrp surplus zone verse metSym rhyme analysis cl m phr s span w core abbr add addrLine address author bibl biblScope cit citedRange corr date del distinct editor email emph expan foreign gloss head headItem headLabel hi imprint item l label lg list measure mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said series sic soCalled sp speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entry entryFree etym form gen gram gramGrp hom hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castGroup castItem castList epilogue performance prologue role roleDesc set sound spGrp tech view figures cell figure table header authority change classCode distributor edition extent funder geoDecl handNote language licence principal scriptNote sponsor linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material msItem musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns person personGrp persona placeName region residence roleName settlement sex socecStatus surname nets graph spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail textstructure argument back body byline closer dateline div div1 div2 div3 div4 div5 div6 div7 docAuthor docDate docEdition docImprint docTitle epigraph floatingText front group imprimatur opener postscript salute signed text titlePage titlePart trailer transcr damage fw line metamark mod restore retrace secl sourceDoc supplied surface surfaceGrp surplus zone verse metSym rhyme This class groups elements which can appear anywhere within transcribed speech. Cette classe regroupe des éléments pouvant se situer n'importe où dans une transcription de la parole. Esta clase agrupa elementos que pueden aparecer dondequiera dentro del discurso transcrito. 当該クラスは，転記された発話内でどこにでも出現可能な要素をまとめる． drama castList epilogue performance prologue set figures figure textstructure argument body div div1 div2 div3 div4 div5 div6 div7 epigraph postscript Note that this element class does not include members of the model.inter class, which can appear either within or between paragraph-level items. Noter que cette classe d'éléments ne comprend pas les membres de la classe model.inter , qui peuvent apparaître soit à l'intérieur, soit entre des items de niveau paragraphe. Observa que esta clase de elemento no incluye a los miembros de la clase model.inter , que puede aparecer dentro o entre los items del nivel-párrafo. 当該要素クラスは，クラス model.inter の メンバーを含まないことに注意すること． クラス model.inter は，段落レベル項目内 または間にのみ出現可能である． namesdates person personGrp persona These characteristics of an individual are typically a consequence of their own action or that of others. Il s'agit en général des caractéristiques d'un individu résultant de sa propre action ou de celle d'autrui. Estas características de un individuo son típicamente una consecuencia de su propia acción o de la de otros. 当該個人の特性は，自らの行動などによる結果である． analysis cl phr s span core abbr add addrLine address author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset org orgName persName persPronouns place placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s span core abbr add addrLine address author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset org orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme The agency child elements, while not required, are required if one of the detail child elements is to be used. It is not valid to have a detail child element without a preceding agency child element. See also model.publicationStmtPart.detail . A detail child element may not occur unless an agency child element precedes it. See also model.publicationStmtPart.agency . analysis cl phr s core abbr add addrLine author biblScope cit citedRange corr del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg rs rt said sic soCalled sp speaker stage street term textLang title unclear unit dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron stress subc syll tns usg xr drama actor camera caption castList epilogue performance prologue role roleDesc set sound tech view figures cell figDesc figure header change distributor edition extent geoDecl handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit layout material msItem musicNotation objectType origPlace origin provenance rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation birth bloc country death district education faith floruit forename genName gender geogFeat geogName nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg textcrit lem rdg wit witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docAuthor docDate docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse rhyme core add corr del desc emph head hi item l meeting note orig p q quote ref reg said sic stage title unclear dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron stress subc syll tns usg xr drama camera caption castList epilogue performance prologue set sound tech view figures cell figDesc figure header change handNote licence rendition scriptNote tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions collation condition custEvent decoNote filiation foliation layout musicNotation origin provenance signatures source summary support surrogates typeNote namesdates occupation spoken u writing textcrit lem rdg witness textstructure argument body div div1 div2 div3 div4 div5 div6 div7 docEdition epigraph imprimatur postscript salute signed titlePart trailer transcr damage metamark mod restore retrace secl supplied surplus verse rhyme This class allows for variants of the rdg element to be easily created via TEI customizations. Cette classe permet de créer facilement des variantes de l'élément rdg , par le biais de personnalisations de la TEI. Esta clase permite que las variantes del elemento rdg se creen fácilmente mediante las personalizaciones particulares de TEI. 当該クラスは，TEIのカスタマイズ機能により簡単に作られる，各種の要 素 rdg をとる． core bibl msdescription msItem core lg lg list list drama castList epilogue epilogue performance performance prologue prologue figures figure table textstructure body body div div div1 div1 div2 div2 div3 div3 div4 div4 div5 div5 div6 div6 div7 div7 front group group core lg list drama castList epilogue performance prologue textstructure body div div1 div2 div3 div4 div5 div6 div7 group textstructure back front core lg list drama epilogue performance prologue figures figure table textstructure body div div1 div2 div3 div4 div5 div6 div7 front group msdescription msItem core bibl analysis cl phr s span core abbr add addrLine author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s span core abbr add addrLine address author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme A superset of the naming elements that may appear in datelines, addresses, statements of responsibility, etc. Un ensemble de niveau supérieur regroupant les éléments d'appellation qui peuvent apparaître dans les dates, les adresses, les mentions de responsabilité, etc. Un superconjunto de elementos de nombramiento que pueden aparecer en las líneas de fecha, de dirección, de declaración de esponsabilidad,l etc. 日付欄，住所情報，責任表示等に現れる，名前を示す要素の親集合． analysis cl phr s span core abbr add addrLine address author bibl biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode correspAction creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset org orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme analysis cl phr s span core abbr add addrLine author biblScope citedRange corr date del desc distinct editor email emph expan foreign gloss head headItem headLabel hi item l label measure meeting mentioned name note num orig p pubPlace publisher q quote rb ref reg resp rs rt said sic soCalled speaker stage street term textLang time title unclear unit corpus activity channel constitution derivation domain factuality interaction locale preparedness purpose dictionaries case colloc def dictScrap entryFree etym form gen gram gramGrp hyph iType lang lbl mood number orth per pos pron re sense stress subc syll tns usg xr drama actor camera caption castItem role roleDesc sound tech view figures cell figDesc header authority catDesc change classCode creation distributor edition extent funder geoDecl handNote language licence principal rendition scriptNote sponsor tagUsage iso-fs fDescr fsDescr linking ab seg msdescription accMat acquisition additions catchwords collation collection colophon condition custEvent decoNote explicit filiation finalRubric foliation heraldry incipit institution layout material musicNotation objectType origDate origPlace origin provenance repository rubric secFol signatures source stamp summary support surrogates typeNote watermark namesdates addName affiliation age birth bloc country death district education faith floruit forename genName gender geogFeat geogName langKnown nameLink nationality objectName occupation offset orgName persName persPronouns placeName region residence roleName settlement sex socecStatus surname spoken u writing tagdocs eg valDesc textcrit lem rdg wit witDetail witness textstructure byline closer dateline docAuthor docDate docEdition docImprint imprimatur opener salute signed titlePart trailer transcr damage fw metamark mod restore retrace secl supplied surplus verse metSym rhyme drama castList epilogue performance prologue set figures figure textstructure argument body div div1 div2 div3 div4 div5 div6 div7 epigraph postscript This class defines the set of chunk- and inter-level elements; it is used in many content models, including those for textual divisions. Cette classe définit l'ensemble des éléments de niveau fragment et de niveau intermédiaire ; de nombreux modèles de contenu y font appel, y compris ceux qui sont relatifs aux divisions textuelles. Esta clase define el conjunto de los elementos de fragmento e inter-nivel; se utiliza en muchos modelos de contención, incluyendo aquellos para las divisiones textuales. 当該クラスは，塊レベルと挿入レベルの要素集合を定義する．当該クラス は，テキスト部分の要素を含む，多くの内容モデルで使われる． This class of elements can occur within paragraphs, list items, lines of verse, etc. Cette classe d'éléments peut se trouver dans des paragraphes, des entrées de listes, des vers, etc. Esta clase de elementos puede aparecer dentro de párrafos, en los elementos de una lista, en las líneas de verso, etc. 当該要素クラスは，クラス inter にある大きめの要素，すな わち 塊 の中で出現可能である．散文においては，当該要素 は，段落，リスト項目，韻文行などの中で出現可能である． linking standOff 1.4 Macros The infrastructure module defined by this chapter also declares a number of macros , or shortcut names for frequently occurring parts of other declarations. Macros are used in two ways in the TEI scheme: to stand for frequently-encountered content models, or parts of content models ( 1.4.1 Standard Content Models ); and to stand for attribute datatypes ( 1.4.2 Datatype Specifications ). 1.4.1 Standard Content Models As far as possible, the TEI schemas use the following set of frequently-encountered content models to help achieve consistency among different elements. < macro.paraContent > < macro.limitedContent > < macro.phraseSeq > < macro.phraseSeq.limited > < macro.specialPara > < macro.xtext > The present version of the TEI Guidelines includes some 585 different elements. 1 shows, in descending order of frequency, the seven most commonly used content models. 1.4.2 Datatype Specifications The values which attributes may take in a TEI schema are defined, for the most part, by reference to a TEI datatype specification . Each such specification is defined in terms of other primitive datatypes, derived mostly from W3C Schema Datatypes , literal values, or other datatypes. This indirection makes it possible for a TEI application to set constraints either globally or in individual cases, by redefining the datatype definition or the reference to it respectively. In some cases, the TEI datatype includes additional usage constraints which cannot be enforced by existing schema languages, although a TEI-compliant processor should attempt to validate them (see further discussion in chapter 23.4 Conformance ). The following element is used to define a TEI datatype: < dataSpec > documents a datatype. TEI-defined datatypes may be grouped into those which define normalized values for numeric quantities, probabilities, or temporal expressions, those which define various kinds of shorthand codes or keys, and those which define pointers or links. The following datatypes are used for attributes which are intended to hold normalized values of various kinds. First, expressions of quantity or probability: < teidata.certainty > < teidata.probability > < teidata.numeric > < teidata.interval > < teidata.count > Examples of attributes using the teidata.probability datatype include degree on damage or certainty ; examples of teidata.numeric include quantity on members of the att.measurement class or value on numeric ; examples of teidata.count include cols on cell and table . Next, the datatypes used for attributes which are intended to hold normalized dates or times, durations, truth values, and language identifiers: < teidata.duration.w3c > < teidata.temporal.w3c > < teidata.temporal.working > < teidata.truthValue > < teidata.xTruthValue > < teidata.language > Note that in each of these cases the values used are those recommended by existing international standards: ISO 8601 as profiled by XML Schema Part 2: Datatypes Second Edition in the case of durations, times, and date; W3C Schema datatypes in the case of truth values; and BCP 47 in the case of language. The following datatypes have more specialized uses: < teidata.namespace > < teidata.namespaceOrName > < teidata.outputMeasurement > < teidata.pattern > < teidata.point > < teidata.pointer > < teidata.authority > < teidata.version > < teidata.versionNumber > < teidata.replacement > < teidata.xpath > By far the largest number of TEI attributes take values which are coded values or names of some kind. These values may be constrained or defined in a number of different ways, each of which is given a different name, as follows: < teidata.word > < teidata.text > < teidata.name > < teidata.enumerated > < teidata.gender > < teidata.sex > < teidata.xmlName > < teidata.prefix > Attributes of type teidata.word , such as age on person , are used to supply an identifier expressed as any kind of single token or word. The TEI places a few constraints on the characters which may be used for this purpose: only Unicode characters classified as letters, digits, punctuation characters, or symbols can appear in an attribute value of this kind. Note in particular that such values cannot include whitespace characters. Legal values include cholmondeley, été, 1234, e_content, or xml:id, but not grand wazoo. Attributes of this kind are sometimes used to associate (by co-reference) elements of different types. Where identifiers are defined externally, for example as part of a database or file system, the inability to include whitespace or other special characters in a value may be problematic. In other cases, it may also be simply more convenient to supply a short sequence of natural language words including spaces as a single value. For these reasons, we also provide a datatype teidata.text which does permit whitespace and indeed any other Unicode character. Legal values include cholmondeley, été, 1234, e-content, xml:id, and grand wazoo. This datatype should be used with care since XML will not normalize whitespace characters within it: for example the values n=\"a b\" (two spaces) and n=\"a b\" (three spaces) would be considered distinct. This case should be distinguished from that of an attribute permitting multiple values, each of which may be separated by whitespace which will be normalized (see further 22.5.3.1 Datatypes ). Attributes of type teidata.name are similar to those of type teidata.word , but with the additional constraint that they must be legal XML identifiers, as defined by the XML 1.0 specification, or successors. Hence, they may not begin with digits or punctuation characters. Legal identifiers include cholmondeley, été, e_content, or xml:id, but not grand wazoo or 1234. Attributes of this kind are typically used to represent XML element or attribute names. Attributes of type teidata.xmlName are similar to those of type teidata.name , but with the additional constraint that they must not contain a colon character ( : , U+003A). Thus attributes of this kind are used to represent XML element or attribute names that do not have a namespace prefix. Attributes of type teidata.prefix , such as ident of prefixDef , are restricted to strings that form legal URI prefixes. 4 Examples of valid values are http, https, tn3270, xmlrpc.beep, and view-source. Attributes of type teidata.enumerated , such as new on shift or evidence supplied by att.editLike , have the same definition as teidata.word above, with the added constraint that the word supplied is taken from a specific list of possibilities. In each case, the element or class specification which includes the definition for the attribute will also contain a list of possible values, together with a prose description of their intended significance. This list may be open (in which case the list is advisory), or closed (in which case it determines the range of legal values). In this latter case, the datatype will not be teidata.enumerated , but an explicit list of the possible values. An attribute may, of course, take more than one value of a given type, for example a list of pointer values, or a list of words. In the TEI scheme, this information is regarded as a property of the datatype element used to document the attribute in question rather than as a distinct datatype, and is provided by the minOccurs or maxOccurs attribute. See further 22.5.3.1 Datatypes . In a small number of cases, an attribute may take a value of either one datatype or another. These cases are considered as distinct datatypes: < teidata.probCert > < teidata.unboundedInt > < teidata.nullOrName > 1.5 The TEI Infrastructure Module The tei module defined by this chapter is a required component of any TEI schema. It provides declarations for all datatypes, and initial declarations for the attribute classes, model classes, and macros used by other modules in the TEI scheme. Its components are listed below in alphabetical order: TEI Infrastructure Declarations for classes, datatypes, and macros available to all TEI modules The order in which declarations are made within the infrastructure module is critical, since several class declarations refer to others, which must therefore precede them. Other constraints on the order of declarations derive from the way in which the modularity of the TEI scheme is implemented in different schema languages. The XML DTD fragment implementing this TEI module makes extensive use of parameter entities and marked sections to effect a kind of conditional construction; the RELAX NG schema fragment similarly predeclares a number of patterns with null (notAllowed) values. These issues are further discussed in chapter 23.5 Implementation of an ODD System .","title":"<span class=\"tei-div7 breadcrumb\">1 The TEI Infrastructure</span>"}
{"link":"p5.xml?id=HD","tag":"guidelines","content":"2 The TEI Header This chapter addresses the problems of describing an encoded work so that the text itself, its source, its encoding, and its revisions are all thoroughly documented. Such documentation is equally necessary for scholars using the texts, for software processing them, and for cataloguers in libraries and archives. Together these descriptions and declarations provide an electronic analogue to the title page attached to a printed work. They also constitute an equivalent for the content of the code books or introductory manuals customarily accompanying electronic data sets. Every TEI-conformant text must carry such a set of descriptions, prefixed to it and encoded as described in this chapter. The set is known as the TEI header , tagged teiHeader , and has five major parts: a file description , tagged fileDesc , containing a full bibliographical description of the computer file itself, from which a user of the text could derive a proper bibliographic citation, or which a librarian or archivist could use in creating a catalogue entry recording its presence within a library or archive. The term computer file here is to be understood as referring to the whole entity or document described by the header, even when this is stored in several distinct operating system files. The file description also includes information about the source or sources from which the electronic document was derived. The TEI elements used to encode the file description are described in section 2.2 The File Description below. an encoding description , tagged encodingDesc , which describes the relationship between an electronic text and its source or sources. It allows for detailed description of whether (or how) the text was normalized during transcription, how the encoder resolved ambiguities in the source, what levels of encoding or analysis were applied, and similar matters. The TEI elements used to encode the encoding description are described in section 2.3 The Encoding Description below. a text profile , tagged profileDesc , containing classificatory and contextual information about the text, such as its subject matter, the situation in which it was produced, the individuals described by or participating in producing it, and so forth. Such a text profile is of particular use in highly structured composite texts such as corpora or language collections, where it is often highly desirable to enforce a controlled descriptive vocabulary or to perform retrievals from a body of text in terms of text type or origin. The text profile may however be of use in any form of automatic text processing. The TEI elements used to encode the profile description are described in section 2.4 The Profile Description below. a container element, tagged xenoData , which allows easy inclusion of metadata from non-TEI schemes (i.e., other than elements in the TEI namespace). For example, the MARC record for the encoded document might be included using MARCXML or MODS. A simple set of metadata for harvesting might be included encoded in Dublin Core. a revision history , tagged revisionDesc , which allows the encoder to provide a history of changes made during the development of the electronic text. The revision history is important for version control and for resolving questions about the history of a file. The TEI elements used to encode the revision description are described in section 2.6 The Revision Description below. A TEI header can be a very large and complex object, or it may be a very simple one. Some application areas (for example, the construction of language corpora and the transcription of spoken texts) may require more specialized and detailed information than others. The present proposals therefore define both a core set of elements (all of which may be used without formality in any TEI header) and some additional elements which become available within the header as the result of including additional specialized modules within the schema. When the module for language corpora (described in chapter 15 Language Corpora ) is in use, for example, several additional elements are available, as further detailed in that chapter. The next section of the present chapter briefly introduces the overall structure of the header and the kinds of data it may contain. This is followed by a detailed description of all the constituent elements which may be used in the core header. Section 2.7 Minimal and Recommended Headers , at the end of the present chapter, discusses the recommended content of a minimal TEI header and its relation to standard library cataloguing practices. 2.1 Organization of the TEI Header 2.1.1 The TEI Header and Its Components The teiHeader element should be clearly distinguished from the front matter of the text itself (for which see section 4.5 Front Matter ). A composite text, such as a corpus or collection, may contain several headers, as further discussed below. In the general case, however, a TEI-conformant text will contain a single teiHeader element, followed by a single text or facsimile element, or both. The header element has the following description: < teiHeader > supplies descriptive and declarative metadata associated with a digital resource or set of resources. As discussed above, the teiHeader element has five principal components: < fileDesc > contains a full bibliographic description of an electronic file. < encodingDesc > documents the relationship between an electronic text and the source or sources from which it was derived. < profileDesc > provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. < xenoData > provides a container element into which metadata in non-TEI formats may be placed. < revisionDesc > summarizes the revision history for a file. Of these, only the fileDesc element is required in all TEI headers; the others are optional. That is, only one of the five components of the TEI header (the fileDesc ) is mandatory, and it also has some mandatory components, as further discussed in 2.2 The File Description below. The smallest possible valid TEI header thus looks like this: The content of the elements making up a TEI header may be given in any language, not necessarily that of the text to which the header applies, and not necessarily English. As elsewhere, the xml:lang attribute should be used at an appropriate level to specify the language. For example, in the following schematic example, an English text has been given a French header: In the case of language corpora or collections, it may be desirable to record header information either at the level of the individual components in the corpus or collection, or at the level of the corpus or collection itself (more details concerning the tagging of composite texts are given in section 15 Language Corpora , which should be read in conjunction with the current chapter). A corpus may thus take the form: 2.1.2 Types of Content in the TEI Header The elements occurring within the TEI header may contain several types of content; the following list indicates how these types of content are described in the following sections: Most elements contain simple running prose at some level. Many elements may contain either prose (possibly organized into paragraphs) or more specific elements, which themselves contain prose. In this chapter's descriptions of element content, the phrase prose description should be understood to imply a series of paragraphs, each marked as a p element. The word phrase , by contrast, should be understood to imply character data, interspersed as need be with phrase-level elements, but not organized into paragraphs. For more information on paragraphs, highlighted phrases, lists, etc., see section 3.1 Paragraphs . Elements whose names end with the suffix Stmt (e.g. editionStmt , titleStmt ) and the xenoData element enclose a group of specialized elements recording some structured information. In the case of the bibliographic elements, the suffix Stmt is used in names of elements corresponding to the areas of the International Standard Bibliographic Description. 1 In the case of the xenoData element, the specialized elements are not TEI elements, but rather come from some other metadata scheme. In most cases grouping elements may contain prose descriptions as an alternative to the set of specialized elements, thus allowing the encoder to choose whether or not the information concerned should be presented in a structured form or in prose. Elements whose names end with the suffix Decl (e.g. tagsDecl , refsDecl ) enclose information about specific encoding practices applied in the electronic text; often these practices are described in coded form. Typically, such information takes the form of a series of declarations, identifying a code with some more complex structure or description. A declaration which applies to more than one text or division of a text need not be repeated in the header of each such text or subdivision. Instead, the decls attribute of each text (or subdivision of the text) to which the declaration applies may be used to supply a cross-reference to it, as further described in section 15.3 Associating Contextual Information with a Text . Elements whose names end with the suffix Desc (e.g. settingDesc , projectDesc ) contain a prose description, possibly, but not necessarily, organized under some specific headings by suggested sub-elements. 2.1.3 Model Classes in the TEI Header The TEI header provides a very rich collection of metadata categories, but makes no claim to be exhaustive. It is certainly the case that individual projects may wish to record specialized metadata which either does not fit within one of the predefined categories identified by the TEI header or requires a more specialized element structure than is proposed here. To overcome this problem, the encoder may elect to define additional elements using the customization methods discussed in 23.3 Customization . The TEI class system makes such customizations simpler to effect and easier to use in interchange. These classes are specific to parts of the header: < model.applicationLike > < model.availabilityPart > < model.catDescPart > < model.editorialDeclPart > < model.encodingDescPart > < model.profileDescPart > < model.teiHeaderPart > < model.sourceDescPart > < model.textDescPart > 2.2 The File Description This section describes the fileDesc element, which is the first component of the teiHeader element. The bibliographic description of a machine-readable or digital text resembles in structure that of a book, an article, or any other kind of textual object. The file description element of the TEI header has therefore been closely modelled on existing standards in library cataloguing; it should thus provide enough information to allow users to give standard bibliographic references to the electronic text, and to allow cataloguers to catalogue it. Bibliographic citations occurring elsewhere in the header, and also in the text itself, are derived from the same model (on bibliographic citations in general, see further section 3.12 Bibliographic Citations and References ). See further section 2.8 Note for Library Cataloguers . The bibliographic description of an electronic text should be supplied by the mandatory fileDesc element: < fileDesc > contains a full bibliographic description of an electronic file. The fileDesc element contains three mandatory elements and four optional elements, each of which is described in more detail in sections 2.2.1 The Title Statement to 2.2.6 The Notes Statement below. These elements are listed below in the order in which they must be given within the fileDesc element. < titleStmt > groups information about the title of a work and those responsible for its content. < editionStmt > groups information relating to one edition of a text. < extent > describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. < publicationStmt > groups information concerning the publication or distribution of an electronic or other text. < seriesStmt > groups information about the series, if any, to which a publication belongs. < notesStmt > collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. < sourceDesc > describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as \"born digital\" for a text which has no previous existence. A complete file description containing all possible sub-elements might look like this: 2.2.1 The Title Statement The titleStmt element is the first component of the fileDesc element, and is mandatory: < titleStmt > groups information about the title of a work and those responsible for its content. < title > contains a title for any kind of work. < author > in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. < editor > contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. < sponsor > specifies the name of a sponsoring organization or institution. < funder > specifies the name of an individual, institution, or organization responsible for the funding of a project or text. < principal > supplies the name of the principal researcher responsible for the creation of an electronic text. < respStmt > supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. < resp > contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. < name > contains a proper noun or noun phrase. The title element contains the chief name of the electronic work, including any alternative title or subtitles it may have. It may be repeated, if the work has more than one title (perhaps in different languages) and takes whatever form is considered appropriate by its creator. Where the electronic work is derived from an existing source text, it is strongly recommended that the title for the former should be derived from the latter, but clearly distinguishable from it, for example by the addition of a phrase such as : an electronic transcription or a digital edition . This will distinguish the electronic work from the source text in citations and in catalogues which contain descriptions of both types of material. The electronic work will also have an external name (its filename or data set name) or reference number on the computer system where it resides at any time. This name is likely to change frequently, as new copies of the file are made on the computer system. Its form is entirely dependent on the particular computer system in use and thus cannot always easily be transferred from one system to another. Moreover, a given work may be composed of many files. For these reasons, these Guidelines strongly recommend that such names should not be used as the title for any electronic work. Helpful guidance on the formulation of useful descriptive titles in difficult cases may be found in chapter 25 of 1 ) or another national cataloguing code. The elements author , editor , sponsor , funder , and principal , are specializations of the more general respStmt element. These elements are used to provide the statements of responsibility which identify the person(s) responsible for the intellectual or artistic content of an item and any corporate bodies from which it emanates. Any number of such statements may occur within the title statement. At a minimum, identify the author of the text and (where appropriate) the creator of the file. If the bibliographic description is for a corpus, identify the creator of the corpus. Optionally include also names of others involved in the transcription or elaboration of the text, sponsors, and funding agencies. The name of the person responsible for physical data input need not normally be recorded, unless that person is also intellectually responsible for some aspect of the creation of the file. Where the person whose responsibility is to be documented is not an author, sponsor, funding body, or principal researcher, the respStmt element should be used. This has two subcomponents: a name element identifying a responsible individual or organization, and a resp element indicating the nature of the responsibility. No specific recommendations are made at this time as to appropriate content for the resp : it should make clear the nature of the responsibility concerned, as in the examples below. Names given may be personal names or corporate names. Give all names in the form in which the persons or bodies wish to be publicly cited. This would usually be the fullest form of the name, including first names. 2 Examples: 2.2.2 The Edition Statement The editionStmt element is the second component of the fileDesc element. It is optional but recommended. < editionStmt > groups information relating to one edition of a text. < edition > describes the particularities of one edition of a text. < respStmt > supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. < name > contains a proper noun or noun phrase. < resp > contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. For printed texts, the word edition applies to the set of all the identical copies of an item produced from one master copy and issued by a particular publishing agency or a group of such agencies. A change in the identity of the distributing body or bodies does not normally constitute a change of edition, while a change in the master copy does. For electronic texts, the notion of a master copy is not entirely appropriate, since they are far more easily copied and modified than printed ones; nonetheless the term edition may be used for a particular state of a machine-readable text at which substantive changes are made and fixed. Synonymous terms used in these Guidelines are version , level , and release . The words revision and update , by contrast, are used for minor changes to a file which do not amount to a new edition. No simple rule can specify how substantive changes have to be before they are regarded as producing a new edition, rather than a simple update. The general principle proposed here is that the production of a new edition entails a significant change in the intellectual content of the file, rather than its encoding or appearance. The addition of analytic coding to a text would thus constitute a new edition, while automatic conversion from one coded representation to another would not. Changes relating to the character code or physical storage details, corrections of misspellings, simple changes in the arrangement of the contents and changes in the output format do not normally constitute a new edition, whereas the addition of new information (e.g. a linguistic analysis expressed in part-of-speech tagging, sound or graphics, referential links to external data sets) almost always does. Clearly, there will always be borderline cases and the matter is somewhat arbitrary. The simplest rule is: if you think that your file is a new edition, then call it such. An edition statement is optional for the first release of a computer file; it is mandatory for each later release, though this requirement cannot be enforced by the parser. Note that all changes in a file considered significant, whether or not they are regarded as constituting a new edition or simply a new revision, should be independently noted in the revision description section of the file header (see section 2.6 The Revision Description ). The edition element should contain phrases describing the edition or version, including the word edition , version , or equivalent, together with a number or date, or terms indicating difference from other editions such as new edition , revised edition etc. Any dates that occur within the edition statement should be marked with the date element. The n attribute of the edition element may be used as elsewhere to supply any formal identification (such as a version number) for the edition. One or more respStmt elements may also be used to supply statements of responsibility for the edition in question. These may refer to individuals or corporate bodies and can indicate functions such as that of a reviser, or can name the person or body responsible for the provision of supplementary matter, of appendices, etc., in a new edition. For further detail on the respStmt element, see section 3.12 Bibliographic Citations and References . Some examples follow: 2.2.3 Type and Extent of File The extent element is the third component of the fileDesc element. It is optional. < extent > describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. For printed books, information about the carrier, such as the kind of medium used and its size, are of great importance in cataloguing procedures. The print-oriented rules for bibliographic description of an item's medium and extent need some re-interpretation when applied to electronic media. An electronic file exists as a distinct entity quite independently of its carrier and remains the same intellectual object whether it is stored on a magnetic tape, a CD-ROM, a set of floppy disks, or as a file on a mainframe computer. Since, moreover, these Guidelines are specifically aimed at facilitating transparent document storage and interchange, any purely machine-dependent information should be irrelevant as far as the file header is concerned. This is particularly true of information about file-type although library-oriented rules for cataloguing often distinguish two types of computer file: data and programs . This distinction is quite difficult to draw in some cases, for example, hypermedia or texts with built in search and retrieval software. Although it is equally system-dependent, some measure of the size of the computer file may be of use for cataloguing and other practical purposes. Because the measurement and expression of file size is fraught with difficulties, only very general recommendations are possible; the element extent is provided for this purpose. It contains a phrase indicating the size or approximate size of the computer file in one of the following ways: in bytes of a specified length (e.g. 4000 16-bit bytes ) as falling within a range of categories, for example: less than 1 Mb between 1 Mb and 5 Mb between 6 Mb and 10 Mb over 10 Mb less than 1 Mb between 1 Mb and 5 Mb between 6 Mb and 10 Mb over 10 Mb in terms of any convenient logical units (for example, words or sentences, citations, paragraphs) in terms of any convenient physical units (for example, blocks, disks, tapes) The use of standard abbreviations for units of quantity is recommended where applicable, here as elsewhere (see http://physics.nist.gov/cuu/Units/binary.html ). Examples: The measure element and its attributes may be used to supply machine-tractable or normalised versions of the size or sizes given, as in the following example: 2.2.4 Publication, Distribution, Licensing, etc. The publicationStmt element is the fourth component of the fileDesc element and is mandatory. Its function is to name the agency by which a resource is made available (for example, a publisher or distributor) and to supply any additional information about the way in which it is made available such as licensing conditions, identifying numbers, etc. < publicationStmt > groups information concerning the publication or distribution of an electronic or other text. A structured publication statement must begin with one of the following elements: < publisher > provides the name of the organization responsible for the publication or distribution of a bibliographic item. < distributor > supplies the name of a person or other agency responsible for the distribution of a text. < authority > supplies the name of a person or other agency responsible for making a work available, other than a publisher or distributor. The publisher is the person or institution by whose authority a given edition of the file is made public. The distributor is the person or institution from whom copies of the text may be obtained. Where a text is not considered formally published, but is nevertheless made available for circulation by some individual or organization, this person or institution is termed the release authority . Whichever of these elements is chosen, it may be followed by one or more of the following elements, which together form the model.publicationStmtPart.detail class < pubPlace > contains the name of the place where a bibliographic item was published. < address > contains a postal address, for example of a publisher, an organization, or an individual. < idno > supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. < availability > supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. < date > contains a date in any format. < licence > contains information about a licence or other legal agreement applicable to the text. Here is a simple example: The model.publicationStmtPart.detail elements all supply additional information relating to the the publisher, distributor, or release authority immediately preceding them. In the following example, Benson is identified as responsible for distribution of some resource at the date and place cited: A resource may have (for example) both a publisher and a distributor, or more than one publisher each using different identifiers for the same resource, and so on. For this reason, the sequence of at least one model.publicationStmtPart.agency element followed by zero or more model.publicationStmtPart.detail elements may be repeated as often as necessary. The following example shows a resource published by one agency (Sigma Press) at one address and date, which is also distributed by another (Oxford Text Archive), with a specified identifier and a different date: The date element used within publicationStmt always refers to the date of publication, first distribution, or initial release. If the text was created at some other date, this may be recorded using the creation element within the profileDesc element. Other useful dates (such as dates of collection of data) may be given using a note in the notesStmt element. The availability element may be used, as above, to provide a simple prose statement of any restrictions concerning the distribution of the resource. Alternatively, a more formal statement of the licensing conditions applicable may be provided using the licence element: 2.2.5 The Series Statement The seriesStmt element is the fifth component of the fileDesc element and is optional. < seriesStmt > groups information about the series, if any, to which a publication belongs. In bibliographic parlance, a series may be defined in one of the following ways: A group of separate items related to one another by the fact that each item bears, in addition to its own title proper, a collective title applying to the group as a whole. The individual items may or may not be numbered. Each of two or more volumes of essays, lectures, articles, or other items, similar in character and issued in sequence. A separately numbered sequence of volumes within a series or serial. < title > contains a title for any kind of work. < idno > supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. < respStmt > supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. < resp > contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. < name > contains a proper noun or noun phrase. The idno may be used to supply any identifying number associated with the item, including both standard numbers such as an ISSN and particular issue numbers. (Arabic numerals separated by punctuation are recommended for this purpose: 6.19.33, for example, rather than VI/xix:33). Its type attribute is used to categorize the number further, taking the value ISSN for an ISSN for example. Multiple seriesStmt elements may be supplied if the TEI document is associated with more than one series. Examples: 2.2.6 The Notes Statement The notesStmt element is the sixth component of the fileDesc element and is optional. If used, it contains one or more note elements, each containing a single piece of descriptive information of the kind treated as general notes in traditional bibliographic descriptions. < notesStmt > collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. < note > contains a note or annotation. Some information found in the notes area in conventional bibliography has been assigned specific elements in these Guidelines; in particular the following items should be tagged as indicated, rather than as general notes: the nature, scope, artistic form, or purpose of the file; also the genre or other intellectual category to which it may belong: e.g. Text types: newspaper editorials and reportage, science fiction, westerns, and detective stories . These should be formally described within the profileDesc element (section 2.4 The Profile Description ). an abstract or summary of the content of a document which has been supplied by the encoder because no such abstract forms part of the content of the source. This should be supplied in the abstract element within the profileDesc element (section 2.4 The Profile Description ). summary description providing a factual, non-evaluative account of the subject content of the file: e.g. Transcribes interviews on general topics with native speakers of English in 17 cities during the spring and summer of 1963. These should also be formally described within the profileDesc element (section 2.4 The Profile Description ). bibliographic details relating to the source or sources of an electronic text: e.g. Transcribed from the Norton facsimile of the 1623 Folio . These should be formally described in the sourceDesc element (section 2.2.7 The Source Description ). further information relating to publication, distribution, or release of the text, including sources from which the text may be obtained, any restrictions on its use or formal terms on its availability. These should be placed in the appropriate division of the publicationStmt element (section 2.2.4 Publication, Distribution, Licensing, etc. ). publicly documented numbers associated with the file: e.g. ICPSR study number 1803 or Oxford Text Archive text number 1243 . These should be placed in an idno element within the appropriate division of the publicationStmt element. International Standard Serial Numbers (ISSN), International Standard Book Numbers (ISBN), and other internationally agreed upon standard numbers that uniquely identify an item, should be treated in the same way, rather than as specialized bibliographic notes. Nevertheless, the notesStmt element may be used to record potentially significant details about the file and its features, e.g.: dates, when they are relevant to the content or condition of the computer file: e.g. manual dated 1983 , Interview wave I: Apr. 1989; wave II: Jan. 1990 names of persons or bodies connected with the technical production, administration, or consulting functions of the effort which produced the file, if these are not named in statements of responsibility in the title or edition statements of the file description: e.g. Historical commentary provided by Mark Cohen availability of the file in an additional medium or information not already recorded about the availability of documentation: e.g. User manual is loose-leaf in eleven paginated sections language of work and abstract, if not encoded in the langUsage element, e.g. Text in English with summaries in French and German The unique name assigned to a serial by the International Serials Data System (ISDS), if not encoded in an idno lists of related publications, either describing the source itself, or concerned with the creation or use of the electronic work, e.g. Texts used in John Burrows Computation into Criticism: A Study of Jane Austen's Novel and an Experiment in Method Oxford Clarendon Press 1987 1 Each such item of information may be tagged using the general-purpose note element, which is described in section 3.9 Notes, Annotation, and Indexing . Groups of notes are contained within the notesStmt element, as in the following example: 2.2.7 The Source Description The sourceDesc element is the seventh and final component of the fileDesc element. It is a mandatory element and is used to record details of the source or sources from which a computer file is derived. This might be a printed text or manuscript, another computer file, an audio or video recording of some kind, or a combination of these. An electronic file may also have no source, if what is being catalogued is an original text created in electronic form. < sourceDesc > describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as \"born digital\" for a text which has no previous existence. The sourceDesc element may contain little more than a simple prose description, or a brief note stating that the document has no source: Alternatively, it may contain elements drawn from the following three classes: < model.biblLike > < model.sourceDescPart > < model.listLike > These classes make available by default a range of ways of providing bibliographic citations which specify the provenance of the text. For written or printed sources, the source may be described in the same way as any other bibliographic citation, using one of the following elements: < bibl > contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. < biblStruct > contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order. < listBibl > contains a list of bibliographic citations of any kind. When the header describes a text derived from some pre-existing TEI-conformant or other digital document, it may be simpler to use the following element, which is designed specifically for documents derived from texts which were born digital: < biblFull > contains a fully-structured bibliographic citation, in which all components of the TEI file description are present. When the module for manuscript description is included in a schema, this class also makes available the following element: < msDesc > contains a description of a single identifiable manuscript or other text-bearing object such as an early printed book. The model.sourceDescPart class also makes available additional elements when additional modules are included. For example, when the spoken module is included, the sourceDesc element may also include the following special-purpose elements, intended for cases where an electronic text is derived from a spoken text rather than a written one: < scriptStmt > contains a citation giving details of the script used for a spoken text. < recordingStmt > describes a set of recordings used as the basis for transcription of a spoken text. A single electronic text may be derived from multiple source documents, in whole or in part. The sourceDesc may therefore contain a listBibl element grouping together bibl , biblStruct , or msDesc elements for each of the sources concerned. It is also possible to repeat the sourceDesc element in such a case. The decls attribute described in section 15.3 Associating Contextual Information with a Text may be used to associate parts of the encoded text with the bibliographic element from which it derives in either case. The source description may also include lists of names, persons, places, etc. when these are considered to form part of the source for an encoded document. When such information is recorded using the specialized elements discussed in the namesdates module ( 13 Names, Dates, People, and Places ), the class model.listLike makes available the following elements to hold such information: < listNym > contains a list of nyms, that is, standardized names for any thing. < listOrg > contains a list of elements, each of which provides information about an identifiable organization. < listPerson > contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. < listPlace > contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. 2.2.8 Computer Files Derived from Other Computer Files If a computer file (call it B) is derived not from a printed source but from another computer file (call it A) which includes a TEI header, then the source text of computer file B is another computer file, A. The five sections of A's file header will need to be incorporated into the new header for B in slightly differing ways, as listed below: A's file description should be copied into the sourceDesc section of B's file description, enclosed within a biblFull element A's profileDesc should be copied into B's, in principle unchanged; it may however be expanded by project-specific information relating to B. A's encoding practice may or (more likely) may not be the same as B's. Since the object of the encoding description is to define the relationship between the current file and its source, in principle only changes in encoding practice between A and B need be documented in B. The relationship between A and its source(s) is then only recoverable from the original header of A. In practice it may be more convenient to create a new complete encodingDesc for B based on A's. B is a new computer file, with a different source than A's source (namely, A). Thus it is unlikely that metadata from other schemes about A or its source can be copied wholesale to B, although there may be similarities. B is a new computer file, and should therefore have a new revision description. If, however, it is felt useful to include some information from A's revisionDesc , for example dates of major updates or versions, such information must be clearly marked as relating to A rather than to B. 2.3 The Encoding Description The encodingDesc element is the second major subdivision of the TEI header. It specifies the methods and editorial principles which governed the transcription or encoding of the text in hand and may also include sets of coded definitions used by other components of the header. Though not formally required, its use is highly recommended. < encodingDesc > documents the relationship between an electronic text and the source or sources from which it was derived. < projectDesc > describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. < samplingDecl > contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. < editorialDecl > provides details of editorial principles and practices applied during the encoding of a text. < tagsDecl > provides detailed information about the tagging applied to a document. < styleDefDecl > specifies the name of the formal language in which style or renditional information is supplied elsewhere in the document. The specific version of the scheme may also be supplied. < refsDecl > specifies how canonical references are constructed for this text. < classDecl > contains one or more taxonomies defining any classificatory codes used elsewhere in the text. < geoDecl > documents the notation and the datum used for geographic coordinates expressed as content of the geo element elsewhere within the document. < unitDecl > provides information about units of measurement that are not members of the International System of Units. < schemaSpec > generates a TEI-conformant schema and documentation for it. < schemaRef > describes or points to a related customization or schema file 2.3.1 The Project Description The projectDesc element may be used to describe, in prose, the purpose for which a digital resource was created, together with any other relevant information concerning the process by which it was assembled or collected. This is of particular importance for corpora or miscellaneous collections, but may be of use for any text, for example to explain why one kind of encoding practice has been followed rather than another. < projectDesc > describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. For example: 2.3.2 The Sampling Declaration The samplingDecl element may be used to describe, in prose, the rationale and methods used in selecting texts, or parts of text, for inclusion in the resource. < samplingDecl > contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. the size of individual samples the method or methods by which they were selected the underlying population being sampled the object of the sampling procedure used It may also include a simple description of any parts of the source text included or excluded. A sampling declaration which applies to more than one text or division of a text need not be repeated in the header of each such text. Instead, the decls attribute of each text (or subdivision of the text) to which the sampling declaration applies may be used to supply a cross-reference to it, as further described in section 15.3 Associating Contextual Information with a Text . 2.3.3 The Editorial Practices Declaration The editorialDecl element is used to provide details of the editorial practices applied during the encoding of a text. < editorialDecl > provides details of editorial principles and practices applied during the encoding of a text. Some of these policy elements carry attributes to support automated processing of certain well-defined editorial decisions; all of them contain a prose description of the editorial principles adopted with respect to the particular feature concerned. Examples of the kinds of questions which these descriptions are intended to answer are given in the list below. < correction > states how and under what circumstances corrections have been made in the text. Was the text corrected during or after data capture? If so, were corrections made silently or are they marked using the tags described in section 3.5 Simple Editorial Changes ? What principles have been adopted with respect to omissions, truncations, dubious corrections, alternate readings, false starts, repetitions, etc.? < correction > states how and under what circumstances corrections have been made in the text. Was the text corrected during or after data capture? If so, were corrections made silently or are they marked using the tags described in section 3.5 Simple Editorial Changes ? What principles have been adopted with respect to omissions, truncations, dubious corrections, alternate readings, false starts, repetitions, etc.? < normalization > indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. Was the text normalized, for example by regularizing any non-standard spellings, dialect forms, etc.? If so, were normalizations performed silently or are they marked using the tags described in section 3.5 Simple Editorial Changes ? What authority was used for the regularization? Also, what principles were used when normalizing numbers to provide the standard values for the value attribute described in section 3.6.3 Numbers and Measures and what format used for them? < normalization > indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. Was the text normalized, for example by regularizing any non-standard spellings, dialect forms, etc.? If so, were normalizations performed silently or are they marked using the tags described in section 3.5 Simple Editorial Changes ? What authority was used for the regularization? Also, what principles were used when normalizing numbers to provide the standard values for the value attribute described in section 3.6.3 Numbers and Measures and what format used for them? < punctuation > specifies editorial practice adopted with respect to punctuation marks in the original. Are punctuation marks present in the original source retained? Are they identified with the element pc , or implied by markup? If retained, how are they placed with respect to related elements? For example, do commas and periods appear inside or outside elements marking phrases and sentences? < punctuation > specifies editorial practice adopted with respect to punctuation marks in the original. Are punctuation marks present in the original source retained? Are they identified with the element pc , or implied by markup? If retained, how are they placed with respect to related elements? For example, do commas and periods appear inside or outside elements marking phrases and sentences? < quotation > specifies editorial practice adopted with respect to quotation marks in the original. How were quotation marks processed? Are apostrophes and quotation marks distinguished? How? Are quotation marks retained as content in the text or replaced by markup? Are there any special conventions regarding for example the use of single or double quotation marks when nested? Is the file consistent in its practice or has this not been checked? See section 3.3.3 Quotation for discussion of ways in which quotation marks may be encoded. < quotation > specifies editorial practice adopted with respect to quotation marks in the original. How were quotation marks processed? Are apostrophes and quotation marks distinguished? How? Are quotation marks retained as content in the text or replaced by markup? Are there any special conventions regarding for example the use of single or double quotation marks when nested? Is the file consistent in its practice or has this not been checked? See section 3.3.3 Quotation for discussion of ways in which quotation marks may be encoded. < hyphenation > summarizes the way in which hyphenation in a source text has been treated in an encoded version of it. Does the encoding distinguish soft and hard hyphens? What principle has been adopted with respect to end-of-line hyphenation where source lineation has not been retained? Have soft hyphens been silently removed, and if so what is the effect on lineation and pagination? See section 3.2.2 Hyphenation for discussion of ways in which hyphenation may be encoded. < hyphenation > summarizes the way in which hyphenation in a source text has been treated in an encoded version of it. Does the encoding distinguish soft and hard hyphens? What principle has been adopted with respect to end-of-line hyphenation where source lineation has not been retained? Have soft hyphens been silently removed, and if so what is the effect on lineation and pagination? See section 3.2.2 Hyphenation for discussion of ways in which hyphenation may be encoded. < segmentation > describes the principles according to which the text has been segmented, for example into sentences, tone-units, graphemic strata, etc. How is the text segmented? If s or seg segmentation units have been used to divide up the text for analysis, how are they marked and how was the segmentation arrived at? < segmentation > describes the principles according to which the text has been segmented, for example into sentences, tone-units, graphemic strata, etc. How is the text segmented? If s or seg segmentation units have been used to divide up the text for analysis, how are they marked and how was the segmentation arrived at? < stdVals > specifies the format used when standardized date or number values are supplied. In most cases, attributes bearing standardized values (such as the when or when-iso attribute on dates) should conform to a defined W3C or ISO datatype. In cases where this is not appropriate, this element may be used to describe the standardization methods underlying the values supplied. < stdVals > specifies the format used when standardized date or number values are supplied. In most cases, attributes bearing standardized values (such as the when or when-iso attribute on dates) should conform to a defined W3C or ISO datatype. In cases where this is not appropriate, this element may be used to describe the standardization methods underlying the values supplied. < interpretation > describes the scope of any analytic or interpretive information added to the text in addition to the transcription. Has any analytic or interpretive information been provided—that is, information which is felt to be non-obvious, or potentially contentious? If so, how was it generated? How was it encoded? If feature-structure analysis has been used, are fsdDecl elements (section 18.11 Feature System Declaration ) present? < interpretation > describes the scope of any analytic or interpretive information added to the text in addition to the transcription. Has any analytic or interpretive information been provided—that is, information which is felt to be non-obvious, or potentially contentious? If so, how was it generated? How was it encoded? If feature-structure analysis has been used, are fsdDecl elements (section 18.11 Feature System Declaration ) present? Any information about the editorial principles applied not falling under one of the above headings should be recorded in a distinct list of items. Experience shows that a full record should be kept of decisions relating to editorial principles and encoding practice, both for future users of the text and for the project which produced the text in the first instance. Some simple examples follow: An editorial practices declaration which applies to more than one text or division of a text need not be repeated in the header of each such text. Instead, the decls attribute of each text (or subdivision of the text) to which it applies may be used to supply a cross-reference to it, as further described in section 15.3 Associating Contextual Information with a Text . 2.3.4 The Tagging Declaration The tagsDecl element is used to record the following information about the tagging used within a particular document: the namespace to which elements appearing within the transcribed text belong. how often particular elements appear within the text, so that a recipient can validate the integrity of a text during interchange. any comment relating to the usage of particular elements not specified elsewhere in the header. a default rendition applicable to all instances of an element. This information is conveyed by the following elements: < rendition > supplies information about the rendition or appearance of one or more elements in the source text. < att.styleDef > provides attributes to specify the name of a formal definition language used to provide formatting or rendition information. @scheme identifies the language used to describe the rendition. @schemeVersion supplies a version number for the style language provided in scheme. identifies the language used to describe the rendition. supplies a version number for the style language provided in scheme. < namespace > supplies the formal name of the namespace to which the elements documented by its children belong. < tagUsage > documents the usage of a specific element within a specified document. The tagsDecl element is descriptive, rather than prescriptive: if used, it simply documents practice in the TEI document containing it. The elements constituting a TEI customization file (discussed in chapter 22 Documentation Elements ) by contrast document expected practice in a number of documents, and may thus be used prescriptively. If there is an inconsistency between the actual state of a document and what is documented by its tagsDecl , then the latter should be corrected. If there is an inconsistency between a document and what is required by the customization file, or a schema derived from it, then it will usually be the document that requires correction. The tagsDecl element consists of an optional sequence of rendition elements, each of which must bear a unique identifier, followed by an optional sequence of one or more namespace elements, each of which contains a series of tagUsage elements, up to one for each element type from that namespace occurring within the associated text element. Note that these tagUsage elements must be nested within a namespace element, and cannot appear directly within the tagsDecl element. 2.3.4.1 Rendition The rendition element allows the encoder to specify how one or more elements are rendered in the original source in any of the following ways: using an informal prose description using a standard stylesheet language such as CSS or XSL-FO using a project-defined formal language One or more such specifications may be associated with elements of a document in two ways: the selector attribute on any rendition element may be used to select a collection of elements to which it applies the global rendition attribute may be used on any element to indicate its rendition, overriding or complementing any supplied default value The content of a rendition element may describe the appearance of the source material using prose, a project-defined formal language, or any standard languages such as the Cascading Stylesheet Language ( 1 ) or the XML vocabulary for specifying formatting semantics which forms a part of the W3C's Extensible Stylesheet Language ( 1 ). A styleDefDecl element ( 2.3.5 The Default Style Definition Language Declaration ) may be supplied within the encodingDesc to specify which of these applies by default, and it may be overridden for one or more specific rendition elements using the scheme attribute. The recommended way to indicate a default rendition on one or more elements is to use the selector attribute together with the scheme attribute on rendition . For example, suppose that all paragraphs in the front of a text appear in a large font, with significant top and bottom margins, while paragraphs in the main body are in regular font size and have no top and bottom margins. The use of selector together with scheme provides an efficient way to specify the distinct styling for distinct contexts of the paragraph by means of CSS selectors: In the following extended example we consider how to capture the appearance of a typical early 20th century titlepage, such as that in the following figure: Elements for the encoding of the information on a titlepage are presented in 4.6 Title Pages ; here we consider how we might go about encoding some of the visual information as well, using the rendition element and its corresponding attributes. First we define a rendition element for each aspect of the source page rendition that we wish to retain. Details of CSS are given in 1 ; we use it here simply to provide a vocabulary with which to describe such aspects as font size and style, letter and line spacing, colour, etc. Note that the purpose of this encoding is to describe the original, rather than specify how it should be reproduced, although the two are obviously closely linked. The global rendition attribute can now be used to specify on any element which of the above rendition features apply to it. For example, a title page might be encoded as follows: When CSS is used as the style definition language, the scope attribute may be used to specify CSS pseudo-elements. These pseudo-elements are used to specify styling applicable to only a portion of the given text. For example, the first-letter pseudo-element defines styling to be applied to the first letter in the targeted element, while the before and after pseudo-elements can be used often in conjunction with the \"content\" property to add additional characters which need to be added before or after the element content to make it more closely resemble the appearance of the source. For example, assuming that a text has been encoded using the q element to enclose passages in quotation marks, but the quotation marks themselves have been routinely omitted from the encoding, a set of renditions such as the following: 2.3.4.2 Tag Usage As noted above, each namespace element, if present, should contain up to one occurrence of a tagUsage element for each element type from the given namespace that occurs within the outermost text element associated with the teiHeader in which it appears. 3 The tagUsage element may be used to supply a count of the number of occurrences of this element within the text, which is given as the value of its occurs attribute. It may also be used to hold any additional usage information, which is supplied as running prose within the element itself. For example: The withId attribute may optionally be used to specify how many of the occurrences of the element in question bear a value for the global xml:id attribute, as in the following example: The content of the tagUsage element is not susceptible of automatic processing. It should not therefore be used to hold information for which provision is already made by other components of the encoding description. A TEI-conformant document is not required to provide any tagUsage elements or occurs attributes, but if it does, then the counts provided must correspond with the number of such elements present in the associated text . 2.3.5 The Default Style Definition Language Declaration The content of the rendition element, the value of its selector attribute, and the value of the style attribute are expressed using one of a small number of formally defined style definition languages. For ease of processing, it is strongly recommended to use a single such language throughout an encoding project, although the TEI system permits a mixture. The element styleDefDecl , a sibling of the tagsDecl element, is used to supply the name of the default style definition language. The name is supplied as the value of the scheme attribute and may take any of the following values: Informal free text description Cascading Stylesheet Language Extensible Stylesheet Language Formatting Objects A user-defined formal description language When the style attribute is used, its value must always be expressed using whichever default style definition language is in force. If more than one occurrence of the styleDefDecl is provided, there will be more than one default available, and the decls attribute must be used to select which is applicable in a given context, as discussed in section 15.3 Associating Contextual Information with a Text . 2.3.6 The Reference System Declaration The refsDecl element is used to document the way in which any standard referencing scheme built into the encoding works. < refsDecl > specifies how canonical references are constructed for this text. < citeStructure > declares a structure and method for citing the current document. < cRefPattern > specifies an expression and replacement pattern for transforming a canonical reference into a URI. < refState > specifies one component of a canonical reference defined by the milestone method. < att.patternReplacement > provides attributes for regular-expression matching and replacement. @matchPattern specifies a regular expression against which the values of other attributes can be matched. @replacementPattern specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the matchPattern which, once subpattern substitution has been performed, complete the URI. specifies a regular expression against which the values of other attributes can be matched. specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the matchPattern which, once subpattern substitution has been performed, complete the URI. < att.citeStructurePart > provides attributes for selecting particular elements within a document. @use supplies an XPath selection pattern using the syntax defined in 1 . The XPath pattern is relative to the context given in match, which will either be a sibling attribute in the case of citeStructure or on the parent citeStructure in the case of citeData. supplies an XPath selection pattern using the syntax defined in 1 . The XPath pattern is relative to the context given in match, which will either be a sibling attribute in the case of citeStructure or on the parent citeStructure in the case of citeData. A referencing scheme may be described in one of four ways using this element: as a prose description as nested set of citation structure declarations as a series of pairs of regular expressions and XPaths as a concatenation of sequentially organized milestone s More than one refsDecl element can be included in the header if more than one canonical reference scheme is to be used in the same document, but the current proposals do not check for mutual inconsistency. 2.3.6.1 Prose Method The referencing scheme may be specified within the refsDecl by a simple prose description. Such a description should indicate which elements carry identifying information, and whether this information is represented as attribute values or as content. Any special rules about how the information is to be interpreted when reading or generating a reference string should also be specified here. Such a prose description cannot be processed automatically, and this method of specifying the structure of a canonical reference system is therefore not recommended for automatic processing. For example: 2.3.6.2 Search-and-Replace Method This method often requires a significant investment of effort initially, but permits extremely flexible addressing. For details, see section 16.2.5 Canonical References . < cRefPattern > specifies an expression and replacement pattern for transforming a canonical reference into a URI. 2.3.6.3 Milestone Method This method is appropriate when only milestone tags (see section 3.11.3 Milestone Elements ) are available to provide the required referencing information. It does not provide any abilities which cannot be mimicked by the search-and-replace referencing method discussed in the previous section, but in the cases where it applies, it provides a somewhat simpler notation. A reference based on milestone tags concatenates the values specified by one or more such tags. Since each tag marks the point at which a value changes, it may be regarded as specifying the refState of a variable. A reference declaration using this method therefore specifies the individual components of the canonical reference as a sequence of refState elements: < refState > specifies one component of a canonical reference defined by the milestone method. < att.milestoneUnit > provides attributes to indicate the type of section which is changing at a specific milestone. @unit provides a conventional name for the kind of section changing at this milestone. provides a conventional name for the kind of section changing at this milestone. For example, the reference Matthew 12:34 might be thought of as representing the state of three variables: the book variable is in state Matthew ; the chapter variable is in state 12 , and the verse variable is in state 34 . If milestone tagging has been used, there should be a tag marking the point in the text at which each of the above variables changes its state. 4 To find Matthew 12:34 therefore an application must scan left to right through the text, monitoring changes in the state of each of these three variables as it does so. When all three are simultaneously in the required state, the desired point will have been reached. There may of course be several such points. The delim and length attributes are used to specify components of a canonical reference using this method in exactly the same way as for the stepwise method described in the preceding section. The other attributes are used to determine which instances of milestone tags in the text are to be checked for state-changes. A state-change is signalled whenever a new milestone tag is found with unit and, optionally, ed attributes identical to those of the refState element in question. The value for the new state may be given explicitly by the n attribute on the milestone element, or it may be implied, if the n attribute is not specified. For example, for canonical references in the form xx.yyy where the xx represents the page number in the first edition, and yyy the line number within this page, a reference system declaration such as the following would be appropriate: The milestone referencing scheme, though conceptually simple, is not supported by a generic XML parser. Its use places a correspondingly greater burden of verification and accuracy on the encoder. A reference system declaration which applies to more than one text or division of a text need not be repeated in the header of each such text. Instead, the decls attribute of each text (or subdivision of the text) to which the declaration applies may be used to supply a cross-reference to it, as further described in section 15.3 Associating Contextual Information with a Text . 2.3.7 The Classification Declaration The classDecl element is used to group together definitions or sources for any descriptive classification schemes used by other parts of the header or elsewhere in the document. Each such scheme is represented by a taxonomy element, which may contain either a simple bibliographic citation, or a definition of the descriptive typology concerned; the following elements are used in defining a descriptive classification scheme: < classDecl > contains one or more taxonomies defining any classificatory codes used elsewhere in the text. < taxonomy > defines a typology either implicitly, by means of a bibliographic citation, or explicitly by a structured taxonomy. < category > contains an individual descriptive category, possibly nested within a superordinate category, within a user-defined taxonomy. < catDesc > describes some category within a taxonomy or text typology, either in the form of a brief prose description or in terms of the situational parameters used by the TEI formal textDesc . If the category is subdivided, each subdivision is represented by a nested category element, having the same structure. Categories may be nested to an arbitrary depth in order to reflect the hierarchical structure of the taxonomy. Each category element bears a unique xml:id attribute, which is used as the target for catRef elements referring to it. Linkage between a particular text and a category within such a taxonomy is made by means of the catRef element within the textClass element, as described in section 2.4.3 The Text Classification . Where finer-grained analysis is desired, the ana attribute on an element in the text could point to a category, as in the following abbreviated example: Where the taxonomy permits of classification along more than one dimension, more than one category will be referenced by a particular catRef , as in the following example, which identifies a text with the sub-categories Daily , National , and Political within the category Press Reportage as defined above. A single category may contain more than one catDesc child, when for example the category is described in more than one language, as in the following example: 2.3.8 The Geographic Coordinates Declaration The following element is provided to indicate (within the header of a document, or in an external location) that a particular coordinate notation, or a particular datum, has been employed in a text. The default notation is a string containing two real numbers separated by whitespace, of which the first indicates latitude and the second longitude according to the 1984 World Geodetic System (WGS84). < geoDecl > documents the notation and the datum used for geographic coordinates expressed as content of the geo element elsewhere within the document. header encodingDesc analysis c cl interp interpGrp m pc phr s span spanGrp w certainty certainty precision respons core abbr add address binaryObject cb choice cit corr date del distinct ellipsis email emph expan foreign gap gb gloss graphic hi index lb measure measureGrp media mentioned milestone name note noteGrp num orig pb ptr q quote ref reg rs ruby said sic soCalled term time title unclear unit dictionaries lang oRef pRef figures figure formula notatedMusic gaiji g header idno iso-fs fLib fs fvLib linking alt altGrp anchor join joinGrp link linkGrp seg timeline msdescription catchwords depth dim dimensions height heraldry locus locusGrp material objectType origDate origPlace secFol signatures stamp watermark width namesdates addName affiliation bloc climate country district forename genName geo geogFeat geogName location nameLink objectName offset orgName persName persPronouns placeName population region roleName settlement state surname terrain trait spoken incident kinesic pause shift vocal writing tagdocs att code gi ident listRef specDesc specList tag val textcrit app witDetail textstructure floatingText transcr addSpan am damage damageSpan delSpan ex fw handShift listTranspose metamark mod redo restore retrace secl space subst substJoin supplied surplus undo verse caesura rhyme supplies a commonly used code name for the datum employed. 2.3.9 The Unit Declaration When documents feature units of measurement that are not listed in the International System of Units , the unitDecl element may be used in the encoding description to provide definitions and information about their origins and equivalents. < unitDecl > provides information about units of measurement that are not members of the International System of Units. The unitDecl contains one or more unitDef child elements that serve to describe units of measure which may be marked in unit elements within the text . < unitDef > contains descriptive information related to a specific unit of measurement. < unit > contains a symbol, a word or a phrase referring to a unit of measurement in any kind of formal or informal system. < conversion > defines how to calculate one unit of measure in terms of another. < att.formula > provides attributes for defining a mathematical formula. @formula A formula is provided to describe a mathematical calculation such as a conversion between measurement systems. A formula is provided to describe a mathematical calculation such as a conversion between measurement systems. < att.locatable > provides attributes for referencing locations by pointing to entries in a canonical list of places. @where indicates one or more locations by pointing to a place element or other canonical description. indicates one or more locations by pointing to a place element or other canonical description. 2.3.10 The Schema Specification The schemaSpec element contains a schema specification. When this element appears inside encodingDesc , it allows embedding of a TEI ODD customization file inside a TEI header; alternatively, this element may be used in the body of an ODD document. The use of ODD files, and their relationship to schemas, is described in detail in 22 Documentation Elements . A schemaSpec element contains all the information needed to generate schemas for a particular TEI customization, and the ODD documentation elements, by reference to the TEI, are more succinct than the schemas derived from them. Therefore you may find it convenient to make a copy of the schemaSpec from your project's ODD document inside the teiHeader itself, in addition to supplying an external schema and/or ODD file; if the XML file becomes separated from its schema, the schema can be regenerated at any time using the information in the schemaSpec element. For example: Alternatively, it is possible to point to an external ODD customization file or schema through use of the schemaRef element. More than one schemaRef element may be provided for different sources, stages in a workflow, or formats. 2.3.11 The Application Information Element It is sometimes convenient to store information relating to the processing of an encoded resource within its header. Typical uses for such information might be: to allow an application to discover that it has previously opened or edited a file, and what version of itself was used to do that; to show (through a date) which application last edited the file to allow for diagnosis of any problems that might have been caused by that application; to allow users to discover information about an application used to edit the file to allow the application to declare an interest in elements of the file which it has edited, so that other applications or human editors may be more wary of making changes to those sections of the file. The class model.applicationLike provides an element, application , which may be used to record such information within the appInfo element. < appInfo > records information about an application which has edited the TEI file. < application > provides information about an application which has acted upon the document. Each application element identifies the current state of one software application with regard to the current file. This element is a member of the att.datable class, which provides a variety of attributes for associating this state with a date and time, or a temporal range. The ident and version attributes should be used to uniquely identify the application and its major version number (for example, ImageMarkupTool 1.5). It is not intended that an application should add a new application each time it touches the file. The following example shows how these elements might be used to document the fact that version 1.5 of an application called Image Markup Tool has an interest in two parts of a document which was last saved on June 6 2006. The parts concerned are accessible at the URLs given as target for the two ptr elements. 2.3.12 Module-Specific Declarations The elements discussed so far are available to any schema. When the schema in use includes some of the more specialized TEI modules, these make available other more module-specific components of the encoding description. These are discussed fully in the documentation for the module in question, but are also noted briefly here for convenience. The fsdDecl element is available only when the iso-fs module is included in a schema. Its purpose is to document the feature system declaration (as defined in chapter 18.11 Feature System Declaration ) underlying any analytic feature structures (as defined in chapter 18 Feature Structures ) present in the text documented by this header. The metDecl element is available only when the verse module is included in a schema. Its purpose is to document any metrical notation scheme used in the text, as further discussed in section 6.4 Rhyme and Metrical Analysis . It consists either of a prose description or a series of metSym elements. The variantEncoding element is available only when the textcrit module is included in a schema. Its purpose is to document the method used to encode textual variants in the text, as discussed in section 12.2 Linking the Apparatus to the Text . 2.4 The Profile Description The profileDesc element is the third major subdivision of the TEI header. It is an optional element, the purpose of which is to enable information characterizing various descriptive aspects of a text or a corpus to be recorded within a single unified framework. < profileDesc > provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. The profileDesc element contains elements taken from the model.profileDescPart class. The default members of this class are the following : < abstract > contains a summary or formal abstract prefixed to an existing source document by the encoder. < creation > contains information about the creation of a text. < langUsage > describes the languages, sublanguages, registers, dialects, etc. represented within a text. < textClass > groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. < correspDesc > contains a description of the actions related to one act of correspondence. < calendarDesc > contains a description of the calendar system used in any dating expression found in the text. When the corpus module described in chapter 15 Language Corpora is included in a schema, three further elements become available within the profileDesc element: < textDesc > provides a description of a text in terms of its situational parameters. < particDesc > describes the identifiable speakers, voices, or other participants in any kind of text or other persons named or otherwise referred to in a text, edition, or metadata. < settingDesc > describes the setting or settings within which a language interaction takes place, or other places otherwise referred to in a text, edition, or metadata. When the transcr module for the transcription of primary sources described in chapter 11 Representation of Primary Sources is included in a schema, the following elements become available within the profileDesc element: < handNotes > contains one or more handNote elements documenting the different hands identified within the source texts. < listTranspose > supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. The listTranspose element is discussed in detail in section 11.3.4.5 Transpositions . 2.4.1 Creation The creation element contains phrases describing the origin of the text, e.g. the date and place of its composition. < creation > contains information about the creation of a text. 2.4.2 Language Usage The langUsage element is used within the profileDesc element to describe the languages, sublanguages, registers, dialects, etc. represented within a text. It contains one or more language elements, each of which provides information about a single language, notably the quantity of that language present in the text. Note that this element should not be used to supply information about any non-standard characters or glyphs used by this language; such information should be recorded in the charDecl element in the encoding description (see further 5 Characters, Glyphs, and Writing Modes ). < langUsage > describes the languages, sublanguages, registers, dialects, etc. represented within a text. < language > characterizes a single language or sublanguage used within a text. A language element may be supplied for each different language used in a document. If used, its ident attribute should specify an appropriate language identifier, as further discussed in section 6.1 Language Identification . This is particularly important if extended language identifiers have been used as the value of xml:lang attributes elsewhere in the document. Here is an example of the use of this element: 2.4.3 The Text Classification The textClass element is used to classify a text in some way. < textClass > groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. Text classification may be carried out according to one or more of the following methods: by reference to a recognized international classification such as the Dewey Decimal Classification, the Universal Decimal Classification, the Colon Classification, the Library of Congress Classification, or any other system widely used in library and documentation work by providing a set of keywords, as provided for example by British Library or Library of Congress Cataloguing in Publication data by referencing any other taxonomy of text categories recognized in the field concerned, or peculiar to the material in hand; this may include one based on recurring sets of values for the situational parameters defined in section 15.2.1 The Text Description , or the demographic elements described in section 15.2.2 The Participant Description The following elements are provided for this purpose: < keywords > contains a list of keywords or phrases identifying the topic or nature of a text. < classCode > contains the classification code used for this text in some standard classification system. < catRef > specifies one or more defined categories within some taxonomy or text typology. The keywords element simply categorizes an individual text by supplying a list of keywords which may describe its topic or subject matter, its form, date, etc. In some schemes, the order of items in the list is significant, for example, from major topic to minor; in others, the list has an organized substructure of its own. No recommendations are made here as to which method is to be preferred. Wherever possible, such keywords should be taken from a recognized source, such as the British Library/Library of Congress Cataloguing in Publication data in the case of printed books, or a published thesaurus appropriate to the field. The scheme attribute is used to indicate the source of the keywords used, in the case where such a source exists. If the keywords are taken from an externally defined authority which is available online, this attribute should point directly to it, as in the following examples: If the authority file is not available online, but is generally recognized and commonly cited, a bibliographic description for it should be supplied within the taxonomy element described in section 2.3.7 The Classification Declaration ; the scheme attribute may then reference that taxonomy element by means of its identifier in the usual way: If no authority file exists, perhaps because the keywords used were assigned directly by an author, the scheme attribute should be omitted. Alternatively, if the keyword vocabulary itself is locally defined, the scheme attribute will point to the local definition, which will typically be held in a taxonomy element within the classDecl part of the encoding description (see section 2.3.7 The Classification Declaration ). The classCode element also categorizes an individual text, by supplying a numerical or other code rather than descriptive terms. Such codes constitute a recognized classification scheme, such as the Dewey Decimal Classification. On this element, the scheme attribute is required; it indicates the source of the classification scheme in the same way as for keywords: this may be a pointer of any kind, either to a TEI element, possibly in the current document, as in the keywords examples above, or to some canonical source for the scheme, as in the following example: The catRef element categorizes an individual text by pointing to one or more category elements using the target attribute, which it inherits from the att.pointing class. The category element (which is fully described in section 2.3.7 The Classification Declaration ) holds information about a particular classification or category within a given taxonomy. Each such category must have a unique identifier, which may be supplied as the value of the target attribute for catRef elements which are regarded as falling within the category indicated. A text may, of course, fall into more than one category, in which case more than one identifier may be supplied as the value for the target attribute on the catRef element, as in the following example: The scheme attribute may be supplied to specify the taxonomy to which the categories identified by the target attribute belong, if this is not adequately conveyed by the resource pointed to. For example, In general, it is a matter of style whether to use a single catRef with multiple identifiers in the value of target or multiple catRef elements, each with a single identifier in the value of target. However, note that maintenance of a TEI document with a large number of values within a single target can be cumbersome. The distinction between the catRef and classCode elements is that the values used as identifying codes are exhaustively enumerated for the former, typically within the TEI header. In the latter case, however, the values use any externally-defined scheme, and therefore may be taken from a more open-ended descriptive classification system. 2.4.4 Abstracts The main purpose of the abstract element is to supply a brief resume or abstract for an article which was originally published without such a component. An abstract or summary forming part of the document at its creation should usually appear in the front matter ( front ) of the document. Abstracts may be provided in multiple languages, distinguished by the xml:lang attribute: The same element may be used to provide other summary information supplied by the encoder, perhaps grouped together into a list of discrete items: 2.4.5 Calendar Description The calendarDesc element is used within the profileDesc element to document objects referenced by means of either the calendar attribute on date or the datingMethod attribute on any member of the att.datable class. < calendarDesc > contains a description of the calendar system used in any dating expression found in the text. This element may contain one or more calendar elements: < calendar > describes a calendar or dating system used in a dating formula in the text. Each such element contains one or more paragraphs of description for the calendar system concerned, and also supplies an identifying code for it as the value of its xml:id attribute. This identifying code may then be referenced from any element supplying a date expressed using that calendar system: 2.4.6 Correspondence Description The correspDesc element is used within the profileDesc element to provide detailed correspondence-specific metadata, concerning in particular the communicative aspects (sending, receiving, forwarding etc.) associated with an act of correspondence. This information is complementary to the detailed descriptions of physical objects (such as letters) associated with correspondence acts, which are typically provided by the sourceDesc element. < correspDesc > contains a description of the actions related to one act of correspondence. The correspDesc element contains the elements correspAction and correspContext , describing the actions identified and the context in which the correspondence occurs respectively. < correspAction > contains a structured description of the place, the name of a person/organization and the date related to the sending/receiving of a message or any other action related to the correspondence. < correspContext > provides references to preceding or following correspondence related to this piece of correspondence. Acts of correspondence typically do not occur in isolation from each other. The correspContext element is used to group references relevant to the item of correspondence being described, typically to other items such as the item to which it is a reply, or the item which replies to it: Many types of correspondence actions may be distinguished. The type attribute should be used to indicate the type of action being documented, using values such as those suggested above. The following simple example uses correspAction to describe the sending of a letter by Adelbert von Chamisso from Vertus on 29 January 1807 to Louis de La Foye at Caen. The date of reception is unknown: Several senders, recipients, etc. can be specified for a single correspAction if the action is considered to apply to them all acting as a single group. In the following example, two people are considered to have received the piece of correspondence. The subtype attribute may be used to further distinguish types of action. In the following example, an e-mail is sent to two people directly and to a third by carbon copy ( cc ). The same person may be associated with several actions. For example, it will often be the case that the author and sender of a message are identical, and that many individual letters will need to be associated with the same person. The sameAs attribute defined in section 16.6 Identical Elements and Virtual Copies may be used to indicate that the same name applies to many actions. Its value will usually be the identifier of an element defining the person or name concerned, which is supplied elsewhere in the document. It is assumed that each correspondence action applies to a single act of communication. However, it may be the case that the same physical object is involved in several such acts, if for example person A sends a letter to person B, who then annotates it and sends it on to person C, or if persons A and B both use the same document to convey quite different messages. In such situations, multiple correspDesc elements should be supplied, one for each communication. In the following example, the same document contains distinct messages, sent by two different people to the same destination: correspDesc is used for each separately: 2.5 Non-TEI Metadata Projects often maintain metadata about their TEI documents in more than one form or system. For example, a project may have a database of bibliographic information on the set of documents they intend to encode. From this database, both a MARC record and a teiHeader are generated. The document is then encoded, during which process additional information is added to the teiHeader manually. Then, when the document is published on the web, a Dublin Core record is generated for discoverability of the resource. It is sometimes advantageous to store some or all of the non-TEI metadata in the TEI file. Such non-TEI data may be placed anywhere within a TEI file (other than as the root element), as it does not affect TEI conformance. However, it is easier for humans to manage these kinds of data if they are grouped together in a single location. In addition, such grouping makes it easy to avoid accidentally flagging non-TEI data as errors during validation of the file against a TEI schema. The xenoData element, which may appear in the TEI header after the fileDesc but before the optional revisionDesc , is provided for this purpose. < xenoData > provides a container element into which metadata in non-TEI formats may be placed. The xenoData element may contain anything except TEI elements. It may contain one or more elements from outside the TEI 5 or data in some non-XML text format. 6 In the following example, the prefix rdf is bound to the namespace http://www.w3.org/1999/02/22-rdf-syntax-ns# , the prefix dc is bound to the namespace http://purl.org/dc/elements/1.1/ , and the prefix cc is bound to the namespace http://web.resource.org/cc/ . 2.6 The Revision Description The final sub-element of the TEI header, the revisionDesc element, provides a detailed change log in which each change made to a text may be recorded. Its use is optional but highly recommended. It provides essential information for the administration of large numbers of files which are being updated, corrected, or otherwise modified as well as extremely useful documentation for files being passed from researcher to researcher or system to system. Without change logs, it is easy to confuse different versions of a file, or to remain unaware of small but important changes made in the file by some earlier link in the chain of distribution. No significant change should be made in any TEI-conformant file without corresponding entries being made in the change log. < revisionDesc > summarizes the revision history for a file. < listChange > groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text. < change > documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. The main purpose of the revision description is to record changes in the text to which a header is prefixed. However, it is recommended TEI practice to include entries also for significant changes in the header itself (other than the revision description itself, of course). At the very least, an entry should be supplied indicating the date of creation of the header. The log consists of a list of entries, one for each change. Changes may be grouped and organised using either the listChange element described in section 11.7 Identifying Changes and Revisions or the simple list element described in section 3.8 Lists . Alternatively, a simple sequence of change elements may be given. The attributes when and who may be supplied for each change element to indicate its date and the person responsible for it respectively. The description of the change itself can range from a simple phrase to a series of paragraphs. If a number is to be associated with one or more changes (for example, a revision number), the global n attribute may be used to indicate it. It is recommended to give changes in reverse chronological order, most recent first. For example: 2.7 Minimal and Recommended Headers The TEI header allows for the provision of a very large amount of information concerning the text itself, its source, its encodings, and revisions of it, as well as a wealth of descriptive information such as the languages it uses and the situation(s) in which it was produced, together with the setting and identity of participants within it. This diversity and richness reflects the diversity of uses to which it is envisaged that electronic texts conforming to these Guidelines will be put. It is emphatically not intended that all of the elements described above should be present in every TEI header. The amount of encoding in a header will depend both on the nature and the intended use of the text. At one extreme, an encoder may expect that the header will be needed only to provide a bibliographic identification of the text adequate to local needs. At the other, wishing to ensure that their texts can be used for the widest range of applications, encoders will want to document as explicitly as possible both bibliographic and descriptive information, in such a way that no prior or ancillary knowledge about the text is needed in order to process it. The header in such a case will be very full, approximating to the kind of documentation often supplied in the form of a manual. Most texts will lie somewhere between these extremes; textual corpora in particular will tend more to the latter extreme. In the remainder of this section we demonstrate first the minimal, and next a commonly recommended, level of encoding for the bibliographic information held by the TEI header. Supplying only the minimal level of encoding required, the TEI header of a single text might look like the following example: The only mandatory component of the TEI header is the fileDesc element. Within this, titleStmt , publicationStmt , and sourceDesc are all required constituents. Within the title statement, a title is required, and an author should be specified, even if it is unknown , as should some additional statement of responsibility, here given by the respStmt element. Within the publicationStmt , a publisher, distributor, or other agency responsible for the file must be specified. Finally, the source description should contain at the least a loosely structured bibliographic citation identifying the source of the electronic text if (as is usually the case) there is one. We now present the same example header, expanded to include additionally recommended information, adequate to most bibliographic purposes, in particular to allow for the creation of an AACR2 -conformant bibliographic record. We have also added information about the encoding principles used in this (imaginary) encoding, about the text itself (in the form of Library of Congress subject headings), and about the revision of the file. Many other examples of recommended usage for the elements discussed in this chapter are provided here, in the reference index and in the associated tutorials. 2.8 Note for Library Cataloguers A strong motivation in preparing the material in this chapter was to provide in the TEI header a viable chief source of information for cataloguing computer files. The TEI header is not a library catalogue record, and so will not make all of the distinctions essential in standard library work. It also includes much information generally excluded from standard bibliographic descriptions. It is the intention of the developers, however, to ensure that the information required for a catalogue record be retrievable from the TEI file header, and moreover that the mapping from the one to the other be as simple and straightforward as possible. Where the correspondence is not obvious, it may prove useful to consult one of the works which were influential in developing the content of the TEI header. These include: ISBD: International Standard Bibliographic Description is an international standard setting out what information should be recorded in a description of a bibliographical item. Until a consolidated edition published in 2011, there was a general standard called ISBD(G) and separate ISBDs covering different types of material, e.g. ISBD(M) for monographs, ISBD(ER) for electronic resources. These separate ISBDs follow the same general scheme as the main ISBD(G), but provide appropriate interpretations for the specific materials under consideration. The Anglo-American Cataloguing Rules (second edition) were published in 1978, with revisions appearing periodically through 2005. AACR2 provides guidelines for the construction of catalogues in general libraries in the English-speaking world. AACR2 is explicitly based on the general framework of the ISBD(G) and the subsidiary ISBDs: it gives a description of how to describe bibliographic items and how to create access points such as subject or name headings and uniform titles. Other national cataloguing codes exist as well, including the Z44 series of standards from issued by the Association française de normalisation (AFNOR), Regeln für die alphabetische Katalogisierung in wissenschaftlichen Bibliotheken (RAK-WB), Regole italiane di catalogazione per autore (RICA), and Система стандартов по информации, библиотечному и издательскому делу. Библиографическая запись. Библиографическое описание. Общие требования и правила составления (ГОСТ 7.1). The American National Standard for Bibliographic References was an American national standard governing bibliographic references for use in bibliographies, end-of-work lists, references in abstracting and indexing publications, and outputs from computerized bibliographic data bases. A revised version is maintained by the National Information Standards Organization (NISO). The related ISO standard is ISO 690. Other relevant national standards include BS 5605:1990, BS 6371:1983. DIN 1505-2, and ГОСТ 7.0.5. Since the TEI file description elements are based on the ISBD areas, it should be possible to use the content of file description as the basis for a catalog record for a TEI document. However, cataloguers should be aware that the permissive nature of the TEI Guidelines may lead to divergences between practice in using the TEI file description and the comparatively strict recommendations of AACR2 and other national cataloguing codes. Such divergences as the following may preclude automatic generation of catalogue records from TEI headers: The TEI Guidelines do not require that text be transcribed from the chief source of information using normalized capitalization and punctuation . The TEI title statement may not categorize constituent titles in the same way as prescribed by a national cataloguing code. The TEI title statement contains authors, editors, and other responsible parties in separate elements, with names which may not have been normalized; it does not necessarily contain a single statement of responsibility . There is no specific place in a TEI header to specify the main entry or added entries ( name or title headings under which a catalogue record is filed ) for the catalogue record. The TEI header does not require use of a particular vocabulary for subject headings nor require the use of subject headings. 2.9 The TEI Header Module The module described in this chapter makes available the following components: Common Metadata The TEI header The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">2 The TEI Header</span>"}
{"link":"p5.xml?id=CO","tag":"guidelines","content":"3 Elements Available in All TEI Documents This chapter describes elements which may appear in any kind of text and the tags used to mark them in all TEI documents. Most of these elements are freely floating phrases, which can appear at any point within the textual structure, although they should generally be contained by a higher-level element of some kind (such as a paragraph). A few of the elements described in this chapter (for example, bibliographic citations and lists) have a comparatively well-defined internal structure, but most of them have no consistent inner structure of their own. In the general case, they contain only a few words, and are often identifiable in a conventionally printed text by the use of typographic conventions such as shifts of font, use of quotation or other punctuation marks, or other changes in layout. This chapter begins by describing the p tag used to mark paragraphs, the prototypical formal unit for running text in many TEI modules. This is followed, in section 3.2 Treatment of Punctuation , by a discussion of some specific problems associated with the interpretation of conventional punctuation, and the methods proposed by these Guidelines for resolving ambiguities therein. The next section (section 3.3 Highlighting and Quotation ) describes a number of phrase-level elements commonly marked by typographic features (and thus well-represented in conventional markup languages). These include features commonly marked by font shifts (section 3.3.2 Emphasis, Foreign Words, and Unusual Language ) and features commonly marked by quotation marks (section 3.3.3 Quotation ) as well as such features as terms, cited words, and glosses (section 3.4 Terms and Glosses, Ruby Annotations, and Equivalents and Descriptions ). Section 3.5 Simple Editorial Changes introduces some phrase-level elements which may be used to record simple editorial interventions, such as emendation or correction of the encoded text. The elements described here constitute a simple subset of the full mechanisms for encoding such information (described in full in chapter 11 Representation of Primary Sources ), which should be adequate to most commonly encountered situations. The next section (section 3.6 Names, Numbers, Dates, Abbreviations, and Addresses ) describes several phrase-level and inter-level elements which, although often of interest for analysis or processing, are rarely explicitly identified in conventional printing. These include names (section 3.6.1 Referring Strings ), numbers and measures (section 3.6.3 Numbers and Measures ), dates and times (section 3.6.4 Dates and Times ), abbreviations (section 3.6.5 Abbreviations and Their Expansions ), and addresses (section 3.6.2 Addresses ). In the same way, the following section (section 3.7 Simple Links and Cross-References ) presents only a subset of the facilities available for the encoding of cross-references or text-linkage. The full story may be found in chapter 16 Linking, Segmentation, and Alignment ; the tags presented here are intended to be usable for a wide variety of simple applications. Sections 3.8 Lists , and 3.9 Notes, Annotation, and Indexing , describe two kinds of quasi-structural elements: lists and notes. These may appear either within chunk-level elements such as paragraphs, or between them. Several kinds of lists are catered for, of an arbitrary complexity. The section on notes discusses both notes found in the source and simple mechanisms for adding annotations of an interpretive nature during the encoding; again, only a subset of the facilities described in full elsewhere (specifically, in chapter 17 Simple Analytic Mechanisms ) is discussed. Section 3.10 Graphics and Other Non-textual Components introduces some simple ways of representing graphic or other non-textual content found in a text. A fuller discussion of the multimedia facilities supported by these Guidelines may be found in chapters 14 Tables, Formulæ, Graphics, and Notated Music and 16 Linking, Segmentation, and Alignment . Next, section 3.11 Reference Systems , describes methods of encoding within a text the conventional system or systems used when making references to the text. Some reference systems have attained canonical authority and should be recorded to make the text useable in normal work; in other cases, a convenient reference system should be created by the creator or analyst of an electronic text. Like lists and notes, the bibliographic citations discussed in section 3.12 Bibliographic Citations and References , may be regarded as structural elements in their own right. A range of possibilities is presented for the encoding of bibliographic citations or references, which may be treated as simple phrases within a running text, or as highly-structured components suitable for inclusion in a bibliographic database. Additional elements for the encoding of passages of verse or drama (whether prose or verse) are discussed in section 3.13 Passages of Verse or Drama . The chapter concludes with a technical overview of the structure and organization of the module described here. This should be read in conjunction with chapter 1 The TEI Infrastructure , describing the structure of the TEI document type definition. 3.1 Paragraphs The paragraph is the fundamental organizational unit for all prose texts, being the smallest regular unit into which prose can be divided. Prose can appear in all TEI texts, even those that are primarily of another genre (e.g., verse); thus the paragraph is described here, as an element which can appear in any kind of text. Paragraphs can contain any of the other elements described within this chapter, as well as some other elements which are specific to individual text types. We distinguish phrase-level elements, which must be entirely contained within a paragraph or similar structure and cannot appear except within one, from chunks , which can appear between, but not within, paragraphs, and from inter-level elements, which can appear either within a single paragraph or between paragraphs. The class of phrases includes emphasized or quoted phrases, names, dates, etc. The class of inter-level elements includes bibliographic citations, notes, lists, etc. The class of chunks includes the paragraph itself, and other elements which have similar structural properties, notably the ab (anonymous block) element described in 16.3 Blocks, Segments, and Anchors ) which may be used as an alternative to the paragraph in some kinds of texts. Because paragraphs may appear in different base or additional tag sets, their possible contents may differ in different kinds of documents. In particular, additional elements not listed in this chapter may appear in paragraphs in certain kinds of text. However, the elements described in this chapter are always by default available in all kinds of text. The paragraph is marked using the p element: < p > marks paragraphs in prose. If a consistent internal subdivision of paragraphs is desired, the s or seg (segment) elements may be used, as discussed in chapters 16 Linking, Segmentation, and Alignment and 17 Simple Analytic Mechanisms respectively. More usually, however, paragraphs have no firm internal structure, but contain prose encoded as a mix of characters, entity references, phrases marked as described in the rest of this chapter, and embedded elements like lists, figures, or tables. Since paragraphs are usually explicitly marked in Western texts, typically by indentation, the application of the p tag usually presents few problems. In some cases, the body of a text may comprise but a single paragraph: This news story shows typically short journalistic paragraphs: The following extract from a Russian fairy tale demonstrates how other phrase level elements (in this case q elements representing direct speech; see section 3.3.3 Quotation ) may be nested within, but not across, paragraphs: 3.2 Treatment of Punctuation Punctuation marks cause two distinct classes of problem for text markup: the marks may not be available in the character set used, and they may be significantly ambiguous. To some extent, the availability of the Unicode character set addresses the first of these problems, since it provides specific code points for most punctuation marks, and also the second to the extent that it distinguishes glyphs (such as stop, comma, and hyphen) which are used with different functions. Where punctuation itself is the subject of study, the element pc (punctuation character) may be used to mark it explicitly, as further discussed in 17.1.2 Below the Word Level . Where the character used for a punctuation mark is not available in Unicode, the g element and other facilities described in chapter 5 Characters, Glyphs, and Writing Modes may also be used to mark its presence. 3.2.1 Functions of Punctuation Punctuation is itself a form of markup, historically introduced to provide the reader with an indication about how the text should be read. As such, it is unsurprising that encoders will often wish to encode directly the purpose for which punctuation was provided, as well as, or even instead of, the punctuation itself. We discuss some typical cases below. The Full stop (period) may mark (orthographic) sentence boundaries, abbreviations, decimal points, or serve as a visual aid in printing numbers. These usages can be distinguished by tagging S-units, abbreviations, and numbers, as described in sections 16.3 Blocks, Segments, and Anchors , 3.6.5 Abbreviations and Their Expansions , and 3.6.3 Numbers and Measures respectively. However, there are independent reasons for tagging these, whether or not they are marked by full stops, and the polysemy of the full stop itself is perhaps no different from that of any other character in the writing system. The Question mark and exclamation mark usually mark the end of orthographic sentences, but may also be used as a mid-sentence comment by the author ( ! to express surprise or some other strong feeling, ? to query a word or expression or mark a sentence as dubious in linguistic discussion). Such usages may be distinguished by marking S-units, in which case the mid-sentence uses of these punctuation marks may be left unmarked, or tagged using the pc element discussed in 17.1 Linguistic Segment Categories . Dashes are used for a variety of purposes: as a mark of omission, insertion, or interruption; to show where a new speaker takes over (in dialogue); or to introduce a list item. In the latter two cases particularly, it is clearly desirable to mark the function as well as its rendition using the elements q or item , on which see section 3.3.3 Quotation , and section 3.8 Lists , respectively. Quotation marks may be removed from text contained by q or quote elements on editorial grounds, or they may be marked in a variety of ways; see the discussion of quotation and related features in section 3.3.3 Quotation . Apostrophes should be distinguished from single quote marks. As with hyphens, this disambiguation is best performed by selecting the appropriate Unicode character, though it may also be represented by using appropriate XML markup for quotations as suggested above. However, apostrophes have a variety of uses. In English they mark contractions, genitive forms, and (occasionally) plural forms. Full disambiguation of these uses belongs to the level of linguistic analysis and interpretation. Parentheses and other marks of suspension such as dashes or ellipses are often used to signal information about the syntactic structure of a text fragment. Full disambiguation of their uses also belongs to the level of linguistic analysis and interpretation, and will therefore need to use the mechanisms discussed in chapter 17 Simple Analytic Mechanisms . Where punctuation marks are disambiguated by tagging their assumed function in the text (for example, quotation), it may be debated whether they should be excluded or left as part of the text. In the case of quotation marks, it may be more convenient to distinguish opening from closing marks simply by using the appropriate Unicode character than to use the q element, with or without an indication of rendition. Where segmentation of a text is performed automatically, the accuracy of the result may be considerably enhanced by a first pass in which the function of different punctuation characters is explicitly marked. This need not be done for all cases, but only where the structural function of the punctuation markup (for example as a word or phrase delimiter) is ambiguous. Thus, dots indicating abbreviation might be distinguished from dots indicating sentence end, and exclamation or question marks internal to a sentence distinguished from those which terminate one. Furthermore, when encoding historical materials, it may be considered essential to retain the original punctuation, whether by using an appropriate character code, if this is available (or using the g element where it is not) or by an explicit encoding using pc . The particular method adopted will vary depending upon the feature concerned and upon the purpose of the project. 3.2.2 Hyphenation Hyphenation as a phenomenon is generally of most concern when producing formatted text for display in print or on screen: different languages and systems have developed quite sophisticated sets of rules about where hyphens may be introduced and for what reason. These generally do not concern the text encoder, since they belong to the domain of formatting and will generally be handled by the rendition software in use. In this section, we discuss issues arising from the appearance of hyphens in pre-existing formatted texts which are being re-encoded for analysis or other processing. Unicode distinguishes four characters visually similar to the hyphen, including the undifferentiated hyphen-minus (U+002D) which is retained for compatibility reasons. The hard hyphen (U+2010) is distinguished from the minus sign (U+2212) which is for use in mathematical expressions, and also from the soft hyphen (U+00AD) which may appear in born digital documents to indicate places where it is acceptable to insert a hyphen when the document is formatted. Historically, the hard hyphen has been used in printed or manuscript documents for two distinct purposes. In many languages, it is used between words to show that they function as a single syntactic or lexical unit. For example, in French, est-ce que ; in English body-snatcher , tea-party etc. It may also have an important role in disambiguation (for example, by distinguishing say a man-eating fish from a man eating fish ). Such usages, although possibly problematic when a linguistic analysis is undertaken, are not generally of concern to text encoders: the hyphen character is usually retained in the text, because it may be regarded as part of the way a compound or other lexical item is spelled. Deciding whether a compound is to be decomposed into its constituent parts, and if so how, is a different question, involving consideration of many other phenomena in addition to the simple presence of a hyphen. When it appears at the end of a printed or written line however, the hard hyphen generally indicates that—contrary to what might be expected—a word is not yet complete, but continues on the next line (or over the next page or column or other boundary). The hyphen character is not, in this case, part of the word, but just a signal that the word continues over the break. Unfortunately, few languages distinguish these two cases visually, which necessarily poses a problem for text encoders. Suppose, for example, that we wish to investigate a diachronic English corpus for occurrences of tea-pot and teapot , to find evidence for the point at which this compound becomes lexicalized. Any case where the word is hyphenated across a linebreak, like this: As elsewhere, therefore, encoders have a range of choices: They may decide simply to remove any end-of-line hyphenation from the encoded text, on the grounds that its presence is purely a secondary matter of formatting. This will obviously apply also if line endings are themselves regarded as unimportant. Alternatively, they may decide to record the presence of the hyphen, perhaps on the grounds that it provides useful morphological information; perhaps in order to retain information about the visual appearance of the original source. In either case, they need to decide whether to record it explicitly, by including an appropriate punctuation character in the text data, or implicitly by supplying an appropriate symbolic value for one or more of the attributes on the lb or other milestone element used to record the fact of the line division. If the hyphen is included in the character data of the TEI document, it might be marked up using the pc (punctuation character) tag, which allows the encoder to express information about its function as a separator, through the force attribute. For example, the example above could be encoded with a force value of \"inter\" to indicate that the punctuation mark may or may not be a word separator (See also 17.1.2 Below the Word Level ). tea<pc force=\"inter\">-</pc>pot The text data of which XML documents are composed is decomposable into smaller units, here called orthographic tokens , even if those units are not explicitly indicated by the XML markup. The ambiguity of the end-of-line hyphen also causes problems in the way a processor identifies such tokens in the absence of explicit markup. If token boundaries are not explicitly marked (for example using the seg or w elements), for most languages a processor will rely on character class information to determine where they are to be found: some punctuation characters are considered to be word-breaking, while others are not. In XML, the newline character in text data is a kind of whitespace, and is therefore word breaking. However, it is generally unsafe to assume that whitespace adjacent to markup tags will always be preserved, and it is decidedly unsafe to assume that markup tags themselves are equivalent to whitespace. The lb , pb , and cb elements are notable exceptions to this general rule, since their function is precisely to represent (or replace) line, page, or column breaks, which, as noted above, are generally considered to be equivalent to whitespace. These elements provide a more reliable way of preserving the lineation, pagination, etc of a source document, since the encoder should not assume that (untagged) line breaks etc. in an XML source file will necessarily be preserved. To control the intended tokenization, the encoder may use the break attribute on such elements to indicate whether or not the element is to be regarded as equivalent to whitespace. This attribute can take the values yes or no to indicate whether or not the element corresponds with a token boundary. The value maybe is also available, for cases where the encoder does not wish (or is unable) to determine whether the orthographic token concerned is broken by the line ending. As a final complication, it should be noted that in some languages, particularly German and Dutch, the spelling of a word may be altered in the presence of end of line hyphenation. For example, in Dutch, the word opaatje ( granddad ), occurring at the end of a line may be hyphenated as opa-tje , with a single letter a. An encoder wishing to preserve the original form of this orthographic token in a printed text while at the same time facilitating its recognition as the word opaatje will therefore need to rely on a more sophisticated process than simply removing the hyphen. This is however essentially the same as any other form of normalization accompanying the recognition of variations in spelling or morphology: as such it may be encoded using the choice element discussed in 3.5 Simple Editorial Changes , or the more sophisticated mechanisms for linguistic analysis discussed in chapter 17 Simple Analytic Mechanisms . 3.3 Highlighting and Quotation This section deals with a variety of textual features, all of which have in common that they are frequently realized in conventional printing practice by the use of such features as underlining, italic fonts, or quotation marks, collectively referred to here as highlighting . After an initial discussion of this phenomenon and alternate approaches to encoding it, this section describes ways of encoding the following textual features, all of which are conventionally rendered using some kind of highlighting: emphasis, foreign words and other linguistically distinct uses of highlighting representation of speech and thought, quotation, etc. technical terms, glosses, etc. 3.3.1 What Is Highlighting? By highlighting we mean the use of any combination of highlighting typographic features (font, size, hue, etc.) in a printed or written text in order to distinguish some passage of a text from its surroundings. 1 The purpose of highlighting is generally to draw the reader's attention to some feature or characteristic of the passage highlighted; this section describes the elements recommended by these Guidelines for the encoding of such textual features. In conventionally printed modern texts, highlighting is often employed to identify words or phrases which are regarded as being one or more of the following: distinct in some way—as foreign, dialectal, archaic, technical, etc. emphatic, and which would for example be stressed when spoken not part of the body of the text, for example cross-references, titles, headings, labels, etc. identified with a distinct narrative stream, for example an internal monologue or commentary. attributed by the narrator to some other agency, either within the text or outside it: for example, direct speech or quotation. set apart from the text in some other way: for example, proverbial phrases, words mentioned but not used, names of persons and places in older texts, editorial corrections or additions, etc. The textual functions indicated by highlighting may not be rendered consistently in different parts of a text or in different texts. (For example, a foreign word may appear in italics if the surrounding text is in roman, but in roman if the surrounding text is in italics.) For this reason, these Guidelines distinguish between the encoding of rendering itself and the encoding of the underlying feature expressed by it. Highlighting as such may be encoded by using one of the global attributes rend, rendition, or style (see further 1.3.1.1 Global Attributes ). This allows the encoder both to specify the function of a highlighted phrase or word, by selecting the appropriate element described here or elsewhere in these Guidelines, and to further describe the way in which it is highlighted, by means of an attribute. If the encoder wishes to offer no interpretation of the feature underlying the use of highlighting in the source text, then the hi element may be used, which indicates only that the text so tagged was highlighted in some way. < hi > marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. The possible values carried by the rend attribute are not formally defined in this version of the Guidelines. It may be used to document any peculiarity of the way a given segment of text was rendered in the original source text, and may thus express a very large range of typographic or other features, by no means restricted to typeface, type size, etc. The style attribute, by contrast, defines the way the source text was rendered using a formally defined style language, such as the W3C standard Cascading Stylesheet Language ( 1 ). The complementary rendition attribute is used to point to one or more fragments expressed using such a language which have been predefined in the TEI header using the rendition element discussed in section 2.3.4 The Tagging Declaration . Where it is both appropriate and feasible, these Guidelines recommend that the textual feature marked by the highlighting should be encoded, rather than just the simple fact of the highlighting. This is for the following reasons: the same kind of highlighting may be used for different purposes in different contexts the same textual function may be highlighted in different ways in different contexts for analytic purposes, it is in general more useful to know the intended function of a highlighted phrase than simply that it is distinct. In many, if not most, cases the underlying function of a highlighted phrase will be obvious and non-controversial, since the distinctions indicated by a change of highlighting correspond with distinctions discussed elsewhere in these Guidelines. The elements available to record such distinctions are, for the most part, members of the model.emphLike class. This and the model.hiLike class mentioned above constitute the model.highlighted class, which is a phrase level class. Members of this class may appear anywhere within paragraph level elements. The distinction between the two classes is simple, and typified by the two elements hi and emph : the former marks simply that a passage is typographically distinct in some way, while the latter asserts that a passage is linguistically emphasized for some purpose. These two properties, though often combined, are not identical. It should however be recognized, however, that cases do exist in which it is not economically feasible to mark the underlying function (e.g. in the preparation of large text corpora), as well as cases in which it is not intellectually appropriate (as in the transcription of some older materials, or in the preparation of material for the study of typographic practice). In such cases, the hi element or some other element from the model.hiLike class should be used. Elements which are sometimes realized by typographic distinction but which are not discussed in this section include title (discussed in section 3.12 Bibliographic Citations and References ) and name (discussed in section 3.6.1 Referring Strings ). 3.3.2 Emphasis, Foreign Words, and Unusual Language This subsection discusses the following elements: < foreign > identifies a word or phrase as belonging to some language other than that of the surrounding text. < emph > marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. < distinct > identifies any word or phrase which is regarded as linguistically distinct, for example as archaic, technical, dialectal, non-preferred, etc., or as forming part of a sublanguage. 3.3.2.1 Foreign Words or Expressions Words or phrases which are not in the main language of the text should be tagged as such, at least where the fact is indicated in the text. Where the word or phrase concerned is already distinguished from the rest of the text by virtue of its function (for example, because it is a name, a technical term, a quotation, a mentioned word, etc.) then the global xml:lang attribute should be used to specify additionally that its language distinguishes it from the surrounding text. Any element in the TEI scheme may take an xml:lang attribute, which specifies both the writing system and the language used by its content (see sections 1.3.1.1.2 Language Indicators and 6.1 Language Identification for discussion of this attribute and its values respectively). Where there is no other applicable element, the element foreign may be used to provide a peg onto which the xml:lang may be attached. The foreign element should not be used to represent foreign words which are mentioned or glossed within the text: for these use the appropriate element from section 3.4.1 Terms and Glosses below. Compare the following example sentences: Elements which do not explicitly state the language of their content by means of an xml:lang attribute are understood to inherit a value for it from their parent element. In the general case, therefore, it is recommended practice to supply a default value for xml:lang on the root TEI or text element, as further discussed in section 1.3.1.1.2 Language Indicators 3.3.2.2 Emphatic Words and Phrases The emph element is provided to mark words or phrases which are linguistically emphatic or stressed. Text which is only typographically emphasized falls into the class of highlighted text, and may be tagged with the hi element. In printed works, emphasis is generally indicated by devices such as the use of an italic font, a large typeface, or extra wide letter spacing; in manuscripts and typescripts, it is usually indicated by the use of underlining. As the following examples demonstrate, an encoder may choose whether or not to make explicit the particular type of rendition associated with the emphasis. If a source text consistently renders a particular feature (e.g. emphasis or words in foreign languages) in a particular way, the rendering associated with that feature may be described in the TEI header using the rendition element. The rend, rendition, or style attributes may then be used to describe examples which deviate from the norm. For example, assuming that the TEI header has defined a default rendering for the emph element, the following encoding would use it: In cases where the rendition of a source needs to be indicated several times in a document, it may be more convenient to provide a default value using the rendition element in the header. If a small number of distinct values are required, it may also be convenient to define them all by means of a series of rendition elements which can then be referenced from the elements in question by means of the global rendition attribute: The hi element is used to mark words or phrases which are highlighted in some way, but for which identification of the intended distinction is difficult, controversial, or impossible. It enables an encoder simply to record the fact of highlighting, possibly describing it by the use of a rend, style, or rendition attribute, as discussed above, without however taking a position as to the function of the highlighting. This may also be useful if the text is to be processed in two stages: representing simply typographic distinctions during a first pass, and then replacing the hi elements with more specific elements in a second pass. Some simple examples: 3.3.2.3 Other Linguistically Distinct Material For some kinds of analysis, it may be desirable to encode the linguistic distinctiveness of words and phrases with more delicacy than is allowed by the foreign element. The distinct element is provided for this purpose. Its attributes allow for additional information characterizing the nature of the linguistic distinction to be made in two distinct ways: the type attribute simply assigns a user-defined code of some kind to the word or phrase which assigns it to some register, sub-language, etc. No recommendations as to the set of values for this attribute are provided at this time, as little consensus exists in the field. Alternatively, the remaining three attributes may be used in combination to place a word or phrase on a three-dimensional scale sometimes used in descriptive linguistics, as for example in Mattheier et al, 1988 . The time attribute places a word or phrase diachronically , diachronic information for example as archaic, old-fashioned, contemporary, futuristic, etc.; the space attribute places a word or phrase diatopically , diatopic information that is, with respect to a geographical classification, for example as national, regional, international, etc.; the social attribute places a word or phrase diastratically , diastratic information that is, with respect to a social classification, for example as technical, polite, impolite, restricted, etc. Again, no recommendations are made for the values of these attributes at this time; the encoder should provide a description of the scheme used in the appropriate section of the header (see section 2.3 The Encoding Description ). Examples: 3.3.3 Quotation One form of presentational variation found particularly frequently in written and printed texts is the use of quotation marks. As with the typographic variations discussed in the preceding section, it is generally helpful to separate the encoding of the underlying textual feature (for example, a quotation or a piece of direct speech) from the encoding of its rendering (for example, the use of a particular style of quotation marks). This section discusses the following elements, all of which are often rendered by the use of quotation marks: < q > contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. < said > indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. < quote > contains a phrase or passage attributed by the narrator or author to some agency external to the text. < att.global.source > provides attributes used by elements to point to an external source. @source specifies the source from which some aspect of this element is drawn. specifies the source from which some aspect of this element is drawn. < cit > contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. < mentioned > marks words or phrases mentioned, not used. < soCalled > contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. The most common and important use of quotation marks is, of course, to mark quotation , by which we mean simply any part of the text which the author or narrator wishes to attribute to some agency other than the narrative voice. The q element may be used if no further distinction beyond this is judged necessary. If it is felt necessary to distinguish such passages further, for example to indicate whether they are regarded as speech, writing, or thought, either the type attribute or one of the more specialized elements discussed in this section may be used. For example, the element quote may be used for written passages cited from other works, or the element said for words or phrases represented as being spoken or thought by people or characters within the current work. The soCalled element is used for cases where the author or narrator distances him or herself from the words in question without however attributing them to any other voice in particular. The mentioned element is appropriate for a case where a word or phrase is being discussed in the body of a text rather than forming part of the text directly. As noted above, if the distinction among these various reasons why a passage is offset from surrounding text cannot be made reliably, or is not of interest, then any representation of speech, thought, or writing may simply be marked using the q element. Quotation may be indicated in a printed source by changes in type face, by special punctuation marks (single or double or angled quotes, dashes, etc.) and by layout (indented paragraphs, etc.), or it may not be explicitly represented at all. If these characteristics are of interest, one or other of the global rend or rendition attributes discussed in section 1.3.1.1 Global Attributes may be used to record them. Quotation marks themselves may, like other punctuation marks, be felt for some purposes to be worth retaining within a text, quite independently of their description by the rend attribute. This should generally be done using the appropriate Unicode character, or, if this is not possible, a numeric character reference (see 5.7.1 Character References ). If the encoder decides both to retain the quotation marks and to represent their function by means of an explicit tag such as quote , the quotation marks should be included within the element, rather than outside it, as in the first example below: Whatever policy is adopted, the encoder should document the decision in some way, for example by using the quotation element provided in the TEI header (see 2.3.3 The Editorial Practices Declaration ) to indicate that quotation marks have not been retained in the encoding; their presence in the source is implied by the rendition attribute values supplied. Whether or not the quotation marks are suppressed, their presence and nature may be described using some appropriate set of conventions in the rend attribute. These conventions may be entirely idiosyncratic, and hence not necessarily useful for interchange, as in the following example: Such passages might more effectively be encoded without loss of rendering information by using the rendition attribute and its associated rendition element as described in section 2.3.4.1 Rendition . If the rendition of passages tagged as said is generally uniform throughout a text, then the rendition element may used to specify a default rendering, in which case the same section might simply be tagged: As members of the att.ascribed.directed class, elements said and q share the following attributes: < att.ascribed > provides attributes for elements representing speech or action that can be ascribed to a specific individual. @who indicates the person, or group of people, to whom the element content is ascribed. indicates the person, or group of people, to whom the element content is ascribed. < att.ascribed.directed > provides attributes for elements representing speech or action that can be directed at a group or individual. @toWhom indicates the person, or group of people, to whom a speech act or action is directed. indicates the person, or group of people, to whom a speech act or action is directed. It may also be useful to distinguish representations of speech from representations of thought, in modern printed texts often indicated by a change of typeface. The aloud attribute is provided for this purpose, as in this example: Quoted matter may be embedded within quoted matter, as when one speaker reports the speech of another: Direct speech nested in this way is treated in the same way as elsewhere: a change of rendition may occur, but the same element should be used. An encoder may however choose to distinguish between direct speech which contains quotations from extra-textual matter and direct speech itself, as in the following example: Quotations from other works are often accompanied by a reference to their source. The cit element may be used to group together the quotation and its associated bibliographic reference, which should be encoded using the elements for bibliographic references discussed in section 3.12 Bibliographic Citations and References , as in the following example. Unlike most of the other elements discussed in this chapter, direct speech and quotations may frequently contain other high-level elements such as paragraphs or verse lines, as well as being themselves contained by such elements. Three possible solutions exist for this well-known structural problem: the quotation is broken into segments, each of which is entirely contained within a paragraph the quotation is marked up using stand-off markup the quotation boundaries are represented by empty segment boundary delimiter elements Finally, in this section, the element soCalled is provided for all cases in which quotation marks are used to distance the quoted text from the narrator or speaker. Common examples include the scare quotes often found in newspaper headlines and advertising copy, where the effect is to cast doubts on the veracity of an assertion: The same element should be used to mark a variety of special ironic usages. Some further examples follow: 3.4 Terms and Glosses, Ruby Annotations, and Equivalents and Descriptions This section describes a set of textual elements which are used to provide a gloss, alternate identification, or description of something. 3.4.1 Terms and Glosses Technical terms are often italicized or emboldened upon first mention in printed texts; an explanation or gloss is sometimes given in quotation marks. Linguistic analyses conventionally cite words in languages under discussion in italics, providing a gloss immediately following marked with single quotation marks. Other texts in which individual words or phrases are mentioned (for mention vs. use use vs. mention example, as examples) rather than used may mark them either with italics or with quotation marks, and will gloss them less regularly. < term > contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. < gloss > identifies a phrase or word used to provide a gloss or definition for some other word or phrase. A term may appear with or without a gloss, as may a mentioned element. Where the gloss is present, it may be linked to the term it is glossing by means of its target attribute. To establish such a link, the encoder should give an xml:id value to the term or mentioned element and provide that value, prefixed by a sharp sign, as the value of the target attribute on the gloss element. For example: In the absence of a gloss in the source text, a term can also be associated with a gloss or definition by means of its ref attribute, as in this imaginary example: Note that the element term is intended for use with words or phrases identified as terminological in nature; where words or phrases are simply being cited, discussed, or glossed in a text, it will often be more appropriate to use the mentioned element, as in the following example: For technical terminology in particular, and generally in terminological studies, it may be useful to associate an instance of a term within a text with a canonical definition for it, which is stored either elsewhere in the same text (for example in a glossary of terms) or externally, for example in a database, authority file, or published standard. The attributes key and ref discussed in section 3.6.1 Referring Strings below are available on the term element for this purpose. 3.4.1.1 Some Further Examples As a simple example of the elements discussed here and in 3.3 Highlighting and Quotation , consider the following sentence: On the one hand the Nibelungenlied is associated with the new rise of romance of twelfth-century France, the romans d'antiquité , the romances of Chrétien de Troyes, and the German adaptations of these works by Heinrich van Veldeke, Hartmann von Aue, and Wolfram von Eschenbach. A first approximation to the encoding of this sentence might be simply to record the fact that the phrases printed above in italics are highlighted, as follows: In this example, the decision as to which textual features are distinguished by the highlighting is relatively uncontroversial. As a less straightforward example, consider the use of italic font in the following passage: A pretty common case, I believe; in all vehement debatings. She says I am too witty ; Anglicé, too pert ; I, that she is too wise ; that is to say, being likewise put into English, not so young as she has been : in short, she is grown so much into a mother , that she had forgotten she ever was a daughter . ... Clearly, the word vehement is not italicized for the same reason as the phrase not so young as she has been ; the former is emphasized, while the latter is proverbial. It also provides an ironic gloss for the words too wise , in the same way as too pert glosses too witty . The glossed phrases are not, however, technical terms or cited words, but quoted phrases, as if the writer were putting words into her own and her mother's mouths. Finally, the words mother and daughter are apparently italicized simply to oppose them in the sentence; certainly they do not fit into any of the categories so far proposed as reasons for italicizing. Note also that the word Anglicé is not italicized although it is not generally considered an English word. The following sample encoding for the above passage attempts to take into account all the above points: 3.4.2 Ruby Annotations The word ruby (or rubi ) refers to a particular method of glossing runs of text which is common in East Asian scripts. In horizontally-oriented text, ruby annotations typically appear above the text being glossed, while in vertical runs of text they may appear to the left or right, or both, also oriented vertically. An English example of a ruby annotation might look like this: In Japanese, furigana ( 振り仮名 ) ruby annotations are often used to provide pronunciation guidance for readers; characters from the largely phonetic hiragana or katakana syllabaries accompany Chinese characters, like this: Pinyin ruby annotations are also used in Chinese to provide pronunciation guidance, and Zhuyin ( 注音 ) phonetic symbols (commonly known as bopomofo ) are used in Taiwan for the same purpose. The TEI schema provides many different ways of encoding glosses and annotations, from the simple and flexible note element to a native implementation of the Web Annotation Data Model ( 16.11 Annotations ). However, ruby is a particular, distinct, and widely-used form of annotation that appears in script, print, calligraphy, and web pages, and the TEI therefore provides specific elements for it: < ruby > contains a passage of base text along with its associated ruby gloss(es). < rb > contains the base text annotated by a ruby gloss. < rt > contains a ruby text, an annotation closely associated with a passage of the main text. < att.placement > provides attributes for describing where on the source page or object a textual element appears. @place specifies where this item is placed. specifies where this item is placed. In its simplest representation, a glossed form consists of an rb (ruby base) element containing the base form, an rt (ruby text) element containing the gloss, and a ruby element which wraps them together: The same ruby base may be accompanied by more than one gloss. Here, the Japanese word 打球場 (dakyūba, or billiard hall ) is glossed with two different pronunciations: biriādo (its English equivalent) and dakyū , a phonation guide for the first two characters. The rt element is a member of att.written : < att.written > provides attributes to indicate the hand in which the content of an element was written in the source being transcribed. @hand points to a handNote element describing the hand considered responsible for the content of the element concerned. points to a handNote element describing the hand considered responsible for the content of the element concerned. The current support for ruby is rudimentary, and in future releases of the Guidelines we expect to see more development of these features and recommendations. While ruby is included for use with East Asian languages, encoders may find other contexts in which these elements are useful. 3.4.3 Equivalents and Descriptions Another group of elements is used to supply different kinds of names for objects described by the TEI. Examples of this are documentation of elements, attributes, classes (and also attribute values where appropriate), and description of glyphs. < altIdent > supplies the recommended XML name for an element, class, attribute, etc. in some language. < desc > contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented. < equiv > specifies a component which is considered equivalent to the parent element, either by co-reference, or by external link. 3.5 Simple Editorial Changes As in editing a printed text, so in encoding a text in electronic form, it may be necessary to accommodate editorial comment on the text and to render account of any changes made to the text in preparing it. The tags described in this section may be used to record such editorial interventions, whether made by the encoder, by the editor of a printed edition used as a copy text, by earlier editors, or by the copyists of manuscripts. The tags described here handle most common types of editorial intervention and stereotyped comment; where less structured commentary of other types is to be included, it may be marked using the note element described in section 3.9 Notes, Annotation, and Indexing . Systematic interpretive annotation is also possible using the various methods described in chapter 16 Linking, Segmentation, and Alignment . The examples given here illustrate only simple cases of editorial intervention; in particular, they permit economical encoding of a simple set of alternative readings of a short span of text. To encode multiple views of large or heterogeneous spans of text, the mechanisms described in chapter 16 Linking, Segmentation, and Alignment should be used. To encode multiple witnesses of a particular text, a similar mechanism designed specifically for critical editions is described in chapter 12 Critical Apparatus . For most of the elements discussed here, some encoders may wish to indicate both a responsibility , that is, a code indicating the person or agency responsible for making the editorial intervention in question, and also an indication of the degree of certainty which the encoder wishes to associate with the intervention. These requirements are served by the att.global.responsibility class, along with att.global.source and att.dimensions . Any of the elements discussed here thus may potentially carry any of the following optional attributes: < att.global.responsibility > provides attributes indicating the agent responsible for some aspect of the text, the markup or something asserted by the markup, and the degree of certainty associated with it. @cert signifies the degree of certainty associated with the intervention or interpretation. @resp indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. signifies the degree of certainty associated with the intervention or interpretation. indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. < att.global.source > provides attributes used by elements to point to an external source. @source specifies the source from which some aspect of this element is drawn. specifies the source from which some aspect of this element is drawn. < att.editLike > provides attributes describing the nature of an encoded scholarly intervention or interpretation of any kind. @evidence indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. < att.dimensions > provides attributes for describing the size of physical objects. @unit names the unit used for the measurement @quantity specifies the length in the units specified @extent indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. @precision characterizes the precision of the values specified by the other attributes. @scope where the measurement summarizes more than one observation, specifies the applicability of this measurement. names the unit used for the measurement specifies the length in the units specified indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. characterizes the precision of the values specified by the other attributes. where the measurement summarizes more than one observation, specifies the applicability of this measurement. Many of the elements discussed here can be used in two ways. Their primary purpose is to indicate that the text encoded as the element's content represents an editorial intervention (or non-intervention) of a specific kind, indicated by the element itself. However, pairs or other meaningful groupings of such elements can also be supplied, wrapped within a special purpose choice element: < choice > groups a number of alternative encodings for the same point in a text. Elements which can be combined in this way constitute the model.choicePart class. The default members of this class are sic , corr , reg , orig , unclear , supplied , abbr , expan , ex , am and seg ; some of their functions and usage are described further below. Three categories of editorial intervention are discussed in this section: indication or correction of apparent errors indication or regularization of variant, irregular, non-standard, or eccentric forms editorial additions, suppressions, and omissions A more extended treatment of the use of these tags in transcriptional and editorial work is given in chapter 11 Representation of Primary Sources . 3.5.1 Apparent Errors When the copy text is manifestly faulty, an encoder or transcriber may elect simply to correct it without comment, although for scholarly purposes it will often be more generally useful to record both the correction and the original state of the text. The elements described here enable all three approaches, and allows the last to be done in such a way as make it easy for software to present either the original or the correction. < sic > contains text reproduced although apparently incorrect or inaccurate. < corr > contains the correct form of a passage apparently erroneous in the copy text. The following examples show alternative treatment of the same material. The copy text reads: Another property of computer-assisted historical research is that data modelling must permit any one textual feature or part of a textual feature to be a part of more than one information model and to allow the researcher to draw on several such models simultaneously, for example, to select from a machine-readable text those marginal comments which indicate that the date's mentioned in the main body of the text are incorrect. An encoder may choose to correct the typographic error, either silently or with an indication that a correction has been made, as follows: Alternatively, the encoder may simply record the typographic error without correcting it, either without comment or with a sic element to indicate the error is not a transcription error in the encoding: If the encoder elects both to record the original source text and to provide a correction for the sake of word-search and other programs, both sic and corr are used, wrapped in a choice : If it is desired to indicate the person or edition responsible for the emendation, this might be done as follows: Where, as here, the correction takes the form of adding text not otherwise present in the text being encoded, the encoder should use the corr element. Where the correction is present in the text being encoded, and consists of some combination of visible additions and deletions, the elements add or del should be used: see further section 3.5.3 Additions, Deletions, and Omissions below. Where the correction takes the form of addition of material not present in the original because of physical damage or illegibility, the supplied element may be used. Where the correction is simply a matter of expanding an abbreviation the ex element may be used. These and other elements to support the detailed encoding of authorial or scribal interventions of this kind are all provided by the module described in chapter 11 Representation of Primary Sources . 3.5.2 Regularization and Normalization When the source text makes extensive use of variant forms or non-standard spellings, it may be desirable for a number of reasons to regularize it: that is, to provide standard or regularized forms equivalent to the non-standard forms. 5 As with other such changes to the copy text, the changes may be made silently (in which case the TEI header should specify the types of silent changes made) or may be explicitly marked using the following elements: < reg > contains a reading which has been regularized or normalized in some sense. < orig > contains a reading which is marked as following the original, rather than being normalized or corrected. < choice > groups a number of alternative encodings for the same point in a text. Typical applications for these elements include the production of editions intended for student or lay readers, linguistic research in which spelling or usage variation is not the main question at issue, production of spelling dictionaries, etc. Consider this 16th-century text: how godly a dede it is to overthrowe so wicked a race the world may judge: for my part I thinke there canot be a greater sacryfice to God. An encoder may choose to preserve the original spelling of this text, but simply flag it as nonstandard by using the orig element with no attributes specified, as follows: Alternatively, the encoder may simply indicate that certain words have been modernized by using the reg element with no attributes specified, as follows: Alternatively, the encoder may elect to record both old and new spellings, so that (for example) the same electronic text may serve as the basis of an old- or new-spelling edition: As elsewhere, the resp attribute may be used to specify the agency responsible for the regularization. 3.5.3 Additions, Deletions, and Omissions The following elements are used to indicate when words or phrases have been omitted from, added to, or marked for deletion from, a text. Like the other editorial elements, they allow for a wide range of editorial practices: < gap > indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. < ellipsis > indicates a purposeful marking in the source document signalling that content has been omitted, and may also supply or describe the omitted content. < unclear > contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. < add > contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. < del > contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. Encoders may choose to omit parts of the copy text for reasons ranging from illegibility of the source or impossibility of transcribing it, to editorial policy, e.g. a systematic exclusion of poetry or prose from an encoding. The full details of the policy decisions concerned should be documented in the TEI header (see section 2.3 The Encoding Description ). In these situations — where copy text is not transcribed due to editorial policy or because it is impossible to do so — the gap element may be used to indicate the omission. Attributes on the gap element optionally provide further information about the reason for the omission, its extent, and the person or agency responsible for it, as in the following examples: The desc element may be used to supply a description of the material omitted, where that is considered useful: The ellipsis element provides a means to encode the deliberate, marked omission of content in a source document. Within ellipsis , a required metamark is used to represent the characters or markings in the source that indicate the presence of omitted material. Encoders may optionally provide a desc element to describe the omission, as well as a supplied element to record the content omitted from the source at this point. The ellipsis element could be applied to ditto marks when they indicate repetition of the same content, as in this example: The ellipsis element may also apply to literary passages that omit the full names of places or people, leaving their identities to the imagination of the reader, as in the next example. A manuscript of song lyrics provides a more complex example of ellipsis to encode a marked omission that begins in the middle of a verse line. The add and del elements may be used to record where words or phrases have been added or deleted in the copy text. They are not appropriate where longer passages have been added or deleted, which span several elements; for these, the elements addSpan and delSpan described in chapter 11.3.1.4 Additions and Deletions should be used. Additions to a text may be recorded for a number of reasons. Sometimes they are marked in a distinctive way in the source text, for example by brackets or insertion above the line ( supralinear insertion), additions supralinear insertions supralinear supralinear insertions as in the following example, taken from a 19th century manuscript: The add element should not be used to mark editorial changes, such as supplying a word omitted by mistake from the source text or a passage present in another version. In these cases, either the corr or supplied tags should be used, as discussed above in section 3.5.1 Apparent Errors , and in section 11.3.1.3 Correction and Conjecture , respectively. The unclear element is used to mark passages in the original which cannot be read with confidence, or about which the transcriber is uncertain for other reasons, as for example when transcribing a partially inaudible or illegible source. Its reason and resp attributes are used, as with the gap element, to indicate the cause of uncertainty and the person responsible for the conjectured reading. For example: Where the material affected is entirely illegible or inaudible, the gap element discussed above should be used in preference. The del element is used to mark material which is deleted in the source but which can still be read with some degree of confidence, as opposed to material which has been omitted by the encoder or transcriber either because it is entirely illegible or for some other reason. This is of particular importance in transcribing manuscript material, though deletion is also found in printed texts, sometimes for humorous purposes: The rend attribute may be used to distinguish different methods of deletion in manuscript or typescript material, as in this line from the typescript of Eliot's Waste Land : Deletion in manuscript or typescript is often associated with addition: The del element should not be used where the deletion is such that material cannot be read with confidence, or read at all, or where the material has been omitted by the transcriber or editor for some other reason. Where the material deleted cannot be read with confidence, the unclear tag should be used with the reason attribute indicating that the difficulty of transcription is due to deletion. Where material has been omitted by the transcriber or editor, this may be indicated by use of the gap element. A deletion in which some parts may be read but not others may thus be represented by one or more gap elements intermingled with text, all contained by a del element. Text supplied or marked as unneccessary by an editor should be marked with the supplied and surplus elements (discussed in 11.3.1.7 Text Omitted from or Supplied in the Transcription ) rather than add and del . These two sets of elements allow the encoder to distinguish editorial changes from those visible in the source text. 3.6 Names, Numbers, Dates, Abbreviations, and Addresses This section describes a number of textual features which it is often convenient to distinguish from their surrounding text. Names, dates, and numbers are likely to be of particular importance to the scholar treating a text as source for a database; distinguishing such items from the surrounding text is however equally important to the scholar primarily interested in lexis. The treatment of these textual features proposed here is not intended to be exhaustive: fuller treatments for names, numbers, measures, and dates are provided in the names and dates module (see chapter 13 Names, Dates, People, and Places ); more detailed treatment of abbreviations is provided by the transcription module (see section 11.3.1.2 Abbreviation and Expansion ). 3.6.1 Referring Strings A referring string is a phrase which refers to some person, place, object, etc. Two elements are provided to mark such strings: < rs > contains a general purpose name or referring string. < name > contains a proper noun or noun phrase. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed Examples include: As the following example shows, the rs element may be used for any reference to a person, place, etc., not only to references in the form of a proper noun or noun phrase. The name element by contrast is provided for the special case of referencing strings which consist only of proper nouns; it may be used synonymously with the rs element, or nested within it if a referring string contains a mixture of common and proper nouns. The following example shows an alternative way of encoding the short sentence from Pride and Prejudice quoted above: Simply tagging something as a name is generally not enough to enable automatic processing of personal names into the canonical forms usually required for reference purposes. The name as it appears in the text may be inconsistently spelled, partial, or vague. Moreover, name prefixes such as van or de la may or may not be included as part of the reference form of a name, depending on the language and country of origin of the bearer. Two issues arise in this context: firstly, there may be a need to encode a regularized form of a name, distinct from the actual form in the source to hand; secondly, there may be a need to identify the particular person, place, etc. referred to by the name, irrespective of whether the name itself is normalized or not. The element reg , introduced in 3.5.2 Regularization and Normalization is provided for the former purpose; the attributes key or ref for the latter. The key and ref attributes are common to all members of the att.canonical class and are defined as follows: < att.canonical > provides attributes that can be used to associate a representation such as a name or title with canonical information about the object being named or referenced. @key provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind. @ref provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs. provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind. provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs. A very useful application for them is as a means of gathering together all references to the same individual or location scattered throughout a document: The value of the key attribute may be an unexpanded code, as in the examples above, with no particular significance. More usually however, it will be an externally defined code of some kind, as provided by a standard reference source. The standard reference source should be documented, for example using a taxonomy element in the TEI header. The ref attribute can be used to point directly to some other resource providing more information about the entity named by the element, such as an authority record in a database, an encylopaedia entry, another element in the same or a different document etc. This use should be distinguished from the use of a nested reg (regularization) element to provide the standard form of a referring string, as in this example: No particular syntax is proposed for the values of the key attribute, since its form will depend entirely on practice within a given project. For the same reason, this attribute is not recommended in data interchange, since there is no way of ensuring that the values used by one project are distinct from those used by another. In such a situation, a preferable approach for magic tokens which follows standard practice on the Web is to use a ref attribute whose value is a tag URI as defined in RFC 4151 . For example: The choice element discussed in 3.5 Simple Editorial Changes may be used if it is desired to record both a normalized form of a name and the name used in the source being encoded: The index element discussed in 3.9.2 Index Entries may be more appropriate if the function of the regularization is to provide a consistent index: 3.6.2 Addresses These Guidelines propose the following elements to distinguish postal and electronic addresses: < address > contains a postal address, for example of a publisher, an organization, or an individual. < email > contains an email address identifying a location to which email messages can be delivered. These Guidelines provide no particular means for encoding the substructure of an email address (for example, distinguishing the local part from the domain part), nor of distinguishing personal email addresses from generic or fictitious ones. The simplest way of encoding a postal address is to regard it as a series of distinct lines, just as they might be written on an envelope. The following element supports this view: < addrLine > contains one line of a postal address. Alternatively, an address may be encoded as a structure of more semantically rich elements. The class model.addrPart element class identifies a number of such possible components: < street > contains a full street address including any name or number identifying a building as well as the name of the street or route on which it is located. < name > contains a proper noun or noun phrase. < postCode > contains a numerical or alphanumeric code used as part of a postal address to simplify sorting or delivery of mail. < postBox > contains a number or other identifier for some postal delivery point other than a street address. < model.nameLike > < model.persNamePart > < model.placeNamePart > Where code letters are commonly used in addresses (for example, to identify regions or countries) a useful practice is to supply the full name of the region or country as the content of the element, but to supply the abbreviatory code as the value of the global n attribute, so that (for example) an application preparing formatted labels can readily find the required information. Other components of addresses may be represented using the general-purpose name element or (when the additional module for names and dates is included) the more specialized elements provided for that purpose. Using just the elements defined by the core module, the above address could thus be represented as follows: The order of elements within an address is highly culture-specific, and is therefore unconstrained: A telephone number (normally outside of the address element) might be tagged with an addrLine and ref that points to the phone number using the tel URI scheme: For further discussion of ways of regularizing the names of places, see section 3.6 Names, Numbers, Dates, Abbreviations, and Addresses . A full postal address may also include the name of the addressee, tagged as above using the general purpose name element. When a schema includes the names and dates module discussed in chapter 13 Names, Dates, People, and Places , a large number of more specific elements such as country or settlement will be available from the class model.addrPart . The above example might then be encoded as follows: 3.6.3 Numbers and Measures This section describes elements provided for the simple encoding of numbers and measurements and gives some indication of circumstances in which this may usefully be done. The following phrase level elements are provided for this purpose: < num > contains a number, written in any form. < measure > contains a word or phrase referring to some quantity of an object or commodity, usually comprising a number, a unit, and a commodity name. < measureGrp > contains a group of dimensional specifications which relate to the same object, for example the height and width of a manuscript page. Like names or abbreviations, numbers can occur virtually anywhere in a text. Numbers are special in that they can be written with either letters or digits ( twenty-one , xxi , and 21 ) and their presentation is language-dependent (e.g. English 5th becomes Greek 5. ; English 123,456.78 equals French 123.456,78 ). For many kinds of application, e.g. natural-language processing or machine translation, numbers are not regarded as lexical in the same way as other parts of a text. For these and other applications, the num element provides a convenient method of distinguishing numbers from the surrounding text. For other kinds of application, numbers are only useful if normalized: here the num element is useful precisely because it provides a standardized way of representing a numerical value. For example: Sometimes it may be desired to mark something as numerical which cannot be accurately normalized, for example an expression such as dozens ; less frequently the number may be recognisable linguistically as such but may use a notation with which the encoder is unfamiliar. To help in these situations, the num element may also bear either or both of the following attributes from the att.ranging class: < att.ranging > provides attributes for describing numerical ranges. @atLeast gives a minimum estimated value for the approximate measurement. @atMost gives a maximum estimated value for the approximate measurement. gives a minimum estimated value for the approximate measurement. gives a maximum estimated value for the approximate measurement. In its fullest form, a measure consists of a number, a phrase expressing units of measure and a phrase expressing the commodity being measured, though not all of these components need be present in every case. It may be helpful to distinguish measures from surrounding text for two reasons. Firstly, a measure may be expressed using a particular notation or system of abbreviations which the encoder does not wish to regard as lexical. Secondly, a quantitative application may wish to distinguish and normalize the internal components of a measure, in order to perform calculations on them. Consider, as an example of the first case, the following list of Celia's charms, in which the encoder has chosen to make explicit the measurements: In general, normalization of a measure will require specification of one or more of its three parts: the quantity, the units, and possibly also the commodity being measured. This is accomplished by supplying values for the three attributes quantity, unit, and commodity, which are supplied by the att.measurement class: < att.measurement > provides attributes to represent a regularized or normalized measurement. @quantity specifies the number of the specified units that comprise the measurement @unit indicates the units used for the measurement, usually using the standard symbol for the desired units. @commodity indicates the substance that is being measured specifies the number of the specified units that comprise the measurement indicates the units used for the measurement, usually using the standard symbol for the desired units. indicates the substance that is being measured The measureGrp element is provided as a means of grouping several related measurements together, either because the measurement involves several dimensions (for example height and width) or to avoid the need to repeat all the normalizing attributes: The unit element may be applied when units of measurement require more detailed encoding about the system they belong to or the what kind of phenomenon they designate. The unit element may carry the unit attribute to indicate a standard value, as well as other optional attributes for indicating type, language, and other distinguishing characteristics. < unit > contains a symbol, a word or a phrase referring to a unit of measurement in any kind of formal or informal system. < att.measurement > provides attributes to represent a regularized or normalized measurement. @unit indicates the units used for the measurement, usually using the standard symbol for the desired units. indicates the units used for the measurement, usually using the standard symbol for the desired units. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. < att.global > provides attributes common to all elements in the TEI encoding scheme. 3.6.4 Dates and Times Dates and times, like numbers, can appear in widely varying culture- and language-dependent forms, and can pose similar problems in automatic language processing. Such elements constitute the model.dateLike class, of which the default members are: < date > contains a date in any format. < time > contains a phrase defining a time of day in any format. < att.datable.w3c > provides attributes for normalization of elements that contain datable events conforming to the W3C XML Schema Part 2: Datatypes Second Edition . @when supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. < att.datable > provides attributes for normalization of elements that contain dates, times, or datable events. @calendar indicates one or more systems or calendars to which the date represented by the content of this element belongs. indicates one or more systems or calendars to which the date represented by the content of this element belongs. Dates can occur virtually anywhere in a text, but in some contexts (e.g. bibliographic citations) their encoding is recommended or required rather than optional. Times can also appear anywhere but encoding these is more generally optional. Partial dates or times (e.g. 1990 , September 1990 , twelvish ) can be expressed in the when attribute by simply omitting a part of the value supplied. Imprecise dates or times (for example early August , some time after ten and before twelve ) may be expressed as date or time ranges. These mechanisms are useful primarily for fully specified dates or times known with certainty. If component parts of dates or times are to be marked up, or if a more complex analysis of the meaning of a temporal expression is required, the techniques described in chapter 13 Names, Dates, People, and Places should be used in preference to the simple method outlined here. Where the certainty (i.e. reliability) of the date or time is in question, the encoder should record this fact using the mechanisms discussed in chapter 21 Certainty, Precision, and Responsibility . The same chapter also discusses various methods of recording the precision of numerical or temporal assertions. The when attribute is a useful way of normalizing or disambiguating dates and times which can appear in many formats, as the following examples show: The when attribute always supplies a normalized representation of the date given as content of the date element. The format used should be a valid W3C schema datatype. 6 Some typical examples follow: The following examples demonstrate the use of the date element to mark a period of time: The calendar attribute may be used to specify a date in any calendar system; if the when attribute is also supplied, it should specify the equivalent date in the Gregorian calendar. 3.6.5 Abbreviations and Their Expansions It is sometimes desirable to mark abbreviations in the copy text, whether to trigger special processing for them, to provide the full form of the word or phrase abbreviated, or to allow for different possible expansions of the abbreviation. Abbreviations may be transcribed as they stand, or expanded; they may be left unmarked, or marked using these tags: < abbr > contains an abbreviation of any sort. < expan > contains the expansion of an abbreviation. The abbr element is useful as a means of distinguishing semi-lexical items such as acronyms or jargon: The type attribute may be used to distinguish types of abbreviation by their function: Abbreviations such as Dr. M. above may be treated as two abbreviations, as above, or as one: The expan element may be used simply to record that an abbreviation has been silently expanded by the encoder, perhaps for reasons of house style or editorial policy. It should always include the whole of an abbreviated phrase or word. More usually however this will be combined with the abbr element inside a choice element to record both the abbreviation and its expansion: Abbreviation is a particularly important feature of manuscript and other source materials, the transcription of which needs more detailed treatment than is possible using these simple elements. A more detailed set of recommendations is discussed in 11.3.1 Altered, Corrected, and Erroneous Texts , which includes additional elements made available for the purpose by the transcr module. 3.7 Simple Links and Cross-References Cross-references or links between one location in a document and one or more other locations, either in the same or different XML documents, may be encoded using the elements ptr and ref , as discussed in this section. These elements both point from one location in a document, the place that the element itself appears, to another (or to several), specified by means of a target attribute, supplied by the att.pointing class: < att.pointing > provides a set of attributes used by all elements which point to other elements by means of one or more URI references. @target specifies the destination of the reference by supplying one or more URI References specifies the destination of the reference by supplying one or more URI References The value of the target attribute, wherever it appears, provides a way of pointing to some other element using a method standardized by the W3C consortium, and known as the XPointer mechanism. This permits a range of complexity, from the very simple (a reference to the value of the target element's xml:id attribute) to the more complex usage of a full URI with embedded XPointers. For example, the source of the following paragraph looks something like this: For an introduction to the use of links in general, see 16 Linking, Segmentation, and Alignment . The complete XPointer specification is managed by the W3C 7 ; for a discussion of TEI schemes for XPointer, see 16.2.4 TEI XPointer Schemes . < ptr > defines a pointer to another location. < ref > defines a reference to another location, possibly modified by additional text or comment. The elements ptr and ref are the default members of the phrase-level model class model.ptrLike . As members of the classes att.pointing , att.typed , att.cReferencing , and att.internetMedia they also carry the following attributes: < att.pointing > provides a set of attributes used by all elements which point to other elements by means of one or more URI references. @target specifies the destination of the reference by supplying one or more URI References @evaluate specifies the intended meaning when the target of a pointer is itself a pointer. specifies the destination of the reference by supplying one or more URI References specifies the intended meaning when the target of a pointer is itself a pointer. < att.cReferencing > provides attributes that may be used to supply a canonical reference as a means of identifying the target of a pointer. @cRef specifies the destination of the pointer by supplying a canonical reference expressed using the scheme defined in a refsDecl element in the TEI header specifies the destination of the pointer by supplying a canonical reference expressed using the scheme defined in a refsDecl element in the TEI header < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed < att.internetMedia > provides attributes for specifying the type of a computer resource using a standard taxonomy. @mimeType specifies the applicable multimedia internet mail extension (MIME) media type specifies the applicable multimedia internet mail extension (MIME) media type The two elements may be used in the same way; the difference between them is simply that while the ptr element is empty, the ref element may contain phrases specifying, or describing more exactly, the target of a cross-reference, which form the content of the element. Since its content thus serves as a human-readable pointer, in the simplest case a ref element need not identify its target in any other way. For example: More usually, it will be desirable to identify the target of the cross-reference using either the target or the cRef attribute, so that processing software can access it directly, for example to implement a linkage, to generate an appropriate reference, or to give an error message if it cannot be found. Assuming that section 12 in the previous example has been tagged If the cross-reference itself is to be generated according to a fixed pattern, or if no text is to appear in the body of the cross-reference, the ptr element would be used as follows: The cRef attribute may be used to express the target of a cross reference using some canonical referencing scheme, such as those typically used for ancient texts. In this case, the referencing scheme must be defined using the cRefPattern or citeStructure elements discussed below ( 3.11.4 Declaring Reference Systems ); the definition these provide may be used to translate the value of the cRef attribute into a conventional pointer value, such as one that might be supplied by the target attribute. It is an error to supply both cRef and target values. When the target attribute is used, a cross reference may point to any number of locations simultaneously, simply by giving more than one identifier as the value of its target attribute. This may be particularly useful where an analytic index is to be encoded, as in the following example: A similar method may be used to link annotations on a text with the sigla used to encode their points of attachment in a text. For example: The type attribute may be used, as elsewhere, to categorize the cross-reference according to any system of importance to the encoder. If bibliographic references require special processing (e.g. in order to provide a consistent short-form reference), they might be tagged thus: The ptr and ref elements have many applications in addition to the simple cross-referencing facilities illustrated in this section. In conjunction with the analytic tools discussed in chapters 16 Linking, Segmentation, and Alignment , 17 Simple Analytic Mechanisms , and 18 Feature Structures , they may be used to link analyses of a text to their object, to combine corresponding segments of a text, or to align segments of a text with a temporal or other axis or with each other. Where the target attribute of ptr or ref points to an external resource available on the network, the mimeType attribute may be used to specify the mime type of that resource; this may be important for to enable appropriate processing. For example: 3.8 Lists The following elements are provided for the encoding of lists, their constituent items, and the labels or headings associated with them: < list > contains any sequence of items organized as a list. < item > contains one component of a list. < label > contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. < head > contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. < headLabel > contains the heading for the label or term column in a glossary list or similar structured list. < headItem > contains the heading for the item or gloss column in a glossary list or similar structured list. The list element may be used to mark any kind of list : numbered, lettered, bulleted, or unmarked. Lists formatted as such in the copy text should in general be encoded using this element, with an appropriate value for the rend attribute. Suggested values for rend include: bulleted (items preceded by bullets or similar markings) inline (items rendered within continuous prose, with no linebreaks) numbered (items preceded by numbers or letters) simple (items rendered as blocks, but with no bullet or number) Each distinct item in the list should be encoded as a distinct item element. If the numbering or other identification for the items in a list is unremarkable and may be reconstructed by any processing program, no enumerator need be specified. If however an enumerator is retained in the encoded text, it may be supplied either by using the n attribute on the item element, or by using a label element. The following examples are thus equivalent: A list need not necessarily be displayed in list format. For example, the following is a reasonable encoding of a list which (in the original) is simply printed as a single paragraph: A list may be given a heading or title, for which the head element should be used, as in the next example, which also demonstrates simple use of the label element to mark a tabular or glossary list in which each item is associated with a word or phrase rather than a numeric or alphabetic enumerator: In such a list, the individual items have internal structure. In complex cases, where list items contain many components, the list is better treated as a table , tables and lists on which see chapter 14 Tables, Formulæ, Graphics, and Notated Music . A particularly important instance of the simple two-column table is the glossary list, which should be marked by the tag list type=\"gloss\". In such lists, each label element contains a term and each item its gloss; it is a semantic error for a list tagged with type=\"gloss\" not to have labels. For example: In addition to the head element used to supply a title or heading for the whole list, headings for the two columns of a glossary-style list may be specified using the two special elements headLabel and headItem : The elements label , head , headLabel , and headItem may contain only phrase-level elements. The item element however may contain paragraphs or other chunks, including other lists. In this example, a glossary list contains two items, each of which is itself a simple list: Lists of different types may be nested to arbitrary depths in this way. 3.9 Notes, Annotation, and Indexing 3.9.1 Notes and Simple Annotation The following element is provided for the encoding of discursive notes, whether already present in the copy text or supplied by the encoder: < note > contains a note or annotation. A note is any additional comment found in a text, marked in some way as being out of the main textual stream. All notes should be marked using the same tag, note , whether they appear as block notes in the main text area, at the foot of the page, at the end of the chapter or volume, in the margin, or in some other place. Notes may be in a different hand or typeface, may be authorial or editorial, and may have been added later. Attributes may be used to specify these and other characteristics of notes, as detailed below. A note is usually attached to a specific point or span within a text, which we term here its point of attachment . In conventional printed text, the point of attachment is represented by some siglum such as a star or cross, or a superscript digit. When encoding such a text, it is conventional to replace this siglum by the content of the annotation, duly marked up with a note element. This may not always be possible for example with marginal notes, which may not be anchored to an exact location. For ease of processing, it may be adequate to position marginal notes before the relevant paragraph or other element. In printed texts, it is sometimes conventional to group notes together at the foot of the page on which their points of attachment appear. This practice is not generally recommended for TEI-encoded texts, since the pagination of a particular printed text is unlikely to be of structural significance. In some cases, however, it may be desirable to transcribe notes not at their point of attachment to the text but at their point of appearance, typically at the end of the volume, or the end of the chapter. In such cases, the target attribute of the note may be used to indicate the point of attachment. It is also possible to encode the point of attachment itself, using the ptr or ref element, pointing from that to the body of the note placed elsewhere. In cases where the note is applied not to a point but to a span of text, not itself represented as a TEI element, the target attribute may use an appropriate pointer expression, for example using the range() function to specify the span of attachment. For further discussion of pointing to points and spans in the text, see section 3.7 Simple Links and Cross-References . In the following example, the type attribute is used to categorise the note as a gloss: This type of annotation, very common in the early printed texts which Coleridge may be presumed to be imitating in this case, may also be regarded as providing a heading or descriptive label for the passage concerned. The encoder may therefore prefer to use the label element to represent it, as in the following case: In the following example, a note which appears at the foot of the page in the printed source is given at its point of attachment within the text. The global n attribute is used to indicate the note number: In addition to transcribing notes already present in the copy text, researchers may wish to add their own notes or comments to it. The note element may be used for either purpose, but it will usually be advisable to distinguish the two categories. One way might be to use the type attribute shown above, categorizing notes as authorial , editorial , etc. Where notes derive from many sources, or where a more precise attribution is required, the resp attribute may be used to point to a definition of the person or other agency responsible for the content of the note. As a simple example, an edition of the Ancient Mariner might include both Coleridge's original glosses and those of a modern commentator: When annotating the electronic text by means of analytic notes in some structured vocabulary, e.g. to specify the topics or themes of a text, the span and interp elements may be more effective than the free form note element; these elements are available when the module for simple analysis is selected (see section 17.3 Spans and Interpretations ). 3.9.1.1 Encoding Grouped Notes The following element is provided for the grouping of notes: < noteGrp > contains a group of notes A text may have multiple alternative versions of the same note, such as the same annotation expressed in multiple languages, or both an extensive note and a short form for different audiences. In such cases multiple note elements may be grouped within a noteGrp element. Typically, the note elements within a noteGrp would be differentiated by use of attributes such as xml:lang or type, while sharing the same point of attachment. This differentiation can be made either implicitly in case of inline notes, or explicitly via a target attribute, which may be specified on the noteGrp itself. The simple example below demonstrates the grouping of a short and a full version of the same note, where the short version might be intended for use in contexts with space constraints. 3.9.2 Index Entries The indexing of scholarly texts is a skilled activity, involving substantial amounts of human judgment and analysis. It should not therefore be assumed that simple searching and information retrieval software will be able to meet all the needs addressed by a well-crafted manual index, although it may complement them for example by providing free text search. The role of an index is to provide access via keywords and phrases which are not necessarily present in the text itself, but must be added by the skill of the indexer. 3.9.2.1 Pre-existing Indexes When encoding a pre-existing text, therefore, if such an index is present it may be advisable to retain it along with the text, rather than attempt to regenerate it automatically. Elements discussed elsewhere in these Guidelines may be used for this purpose. For example, the div1 element or div element may be used to mark the section of the text containing the index and the list element might be used to mark the index itself, each entry being represented by an item element, possibly containing within it a series of ptr or ref elements, as follows: Note that this simple representation does not capture the nested structure of the first of these index entries. A more accurate representation might entail the use of nested lists like the following: The page references, encoded simply as ref elements above, might also include direct links to the appropriate location in the encoded text, using (for example) a target attribute to supply the identifier of an associated page break element: 3.9.2.2 Auto-generated Indexes It can also be useful, however, to generate a new index from a machine-readable text, whether the text is being written for the first time with the tags here defined, or as an addition to a text transcribed from some other source. Depending on the complexity of the text and its subject matter, such an automatically-generated index may not in itself satisfy all the needs of scholarly users. However it can assist a professional indexer to construct a fully adequate index, which might then be post-edited into the digital text, marked-up along the lines already suggested for preserving pre-existing index material. Indexes generally contain both references to specific pages or sections and references to page ranges or sequences. The same element is used in either case: < index > marks a location to be indexed for whatever purpose. Like the interp element described in 17.3 Spans and Interpretations this element may be used simply to provide descriptive or interpretive label of some kind for any location within a text, to be processed in any way by analytic software, but its main purpose is to facilitate the generation of an index for a printed version of the text. An index element may be placed anywhere within a text, between or within other elements. The headwords to be used when making up this index are given by the term elements within the index element. The location of the generated index might be specified by means of a processing instruction within the text, such as the following (the exact form of the PI is of course dependent on the application software in use): In the simplest case, a single headword is supplied by a term element contained by an index element: The effect of this is to document an index entry for the term Lemmatization, Arabic , which when processed could reference the location of the original index element. If the subject of Arabic lemmatization is treated at length in a text, then the index entry generated may need to reference a sequence of locations (e.g. page numbers). In such a case it will be necessary to identify the end of the relevant span of text as well as its starting point. This is most conveniently done by supplying an empty anchor element (as discussed in chapter 16 Linking, Segmentation, and Alignment ) at the appropriate point and pointing to it from the index element by means of its spanTo attribute, as in this example: This would generate the same index entries as the previous example, but the reference would be to the whole span of text between the location of the index element and the location of the element identified by the code ALAMEND , rather than a single point, and thus might (for example) include a sequence of page numbers. Although the position of the index element in the text provides the target location that will be specified in the generated index entry, no part of the text itself is used to construct that entry. Index terms appearing in the entry come solely from the content of term elements, which consequently may have to repeat words or phrases from the text proper. This need not be done verbatim, thus giving scope for normalization of spelling (as in the example above) or other modifications which may assist generation of an index in a desired form or sequence. Sometimes, for example when index terms are taken from a different language or consist of mathematical formulae or other expressions, even a normalized form of an index term may be insufficient for an application to order it exactly as desired. The sortKey attribute may be used to address this problem, as in the following example: It is common practice to compile more than one index for a given text. A biography of a poet, for example, may offer an index of references to poems by the subject of the study, another index of works by other writers, an index of places or historical personages etc. The indexName attribute is used to assigning index terms and locations to one or more specific indexes: Multi-level indexing is particularly common in scholarly documents. For example, as well as entries such as TEI , or markup , an index may contain structured entries like TEI, markup practices, index terms , where a top level entry TEI is followed by a number of second-level subcategories, any or all of which may have a third-level list attached to them and so on. In order to reflect such a hierarchical index listing, index elements may be nested to the required depth. For example, suppose that we wish to make a structured index entry for lemmatisation with subentries for Arabic , Sanskrit , etc. The example at the start of this section might then be encoded with nested index elements: The index entry from Burton's Anatomy of Melancholy quoted above might be generated in a similar way. To generate such an entry, the body of the text might include, at page 193, an index element such as When processing such index elements, the duplication required to make the structure explicit will normally be removed, so as to produce entries like those quoted above. However, this is not required by the encoding recommended here. As noted above, either a processing instruction or a divGen element may be used to mark the place at which an index generated from index elements should be inserted into the output of a processing program; typically but not necessarily this will be at some point within the back matter of the document. If the divGen element is used, then the type attribute should be used to specify which kind of index is to be generated, and its value should correspond with that of the indexName attribute on the relevant index elements. As this example shows, the global n attribute may also be used to specify a name or identifier for the generated index itself in the usual way. Any additional headings etc. required for the generated index must be specified as content of the divGen element. If a processing instruction is used, then these parameters for the generated index may be supplied in some other way. One final feature frequently found in manually-created indexes to printed works cannot readily be encoded by the means provided here, namely cross-references internal to the index term listing. For example, if all references to the TEI in a text have been indexed using the index term Text Encoding Initiative , it may also be helpful to include an entry under the term TEI containing some text such as see Text Encoding Initiative . Such internal cross-references must be added as part of the post-editing phase for an auto-generated index. 3.10 Graphics and Other Non-textual Components Graphics, such as illustrations or diagrams, appear in many different kinds of text, and often with different purposes. Audio or video clips may also appear. In some cases, such media form an integral part of a text (indeed, some texts—comic books for example—may be almost entirely graphic); in others the graphic or video may be a kind of optional extra. In some cases, the text may be incomprehensible unless the media is included; in others, the presence of the media adds little to the sense of the work. It will therefore be a matter of encoding policy as to whether or how media found in a source text are transferred to a new encoded version of the same. In documents which are born digital, media such as graphics and other non-textual components may be particularly salient, but their inclusion in an archival form of the document concerned remains an editorial decision. Considered as structural components, media may be anchored to a particular point in the text, or they may float either completely freely, or within some defined scope, such as a chapter or section. Time-based media such as audio or video may need to be synchronized with particular parts of a written text. Media of all kinds often contain associated text such as a heading or label. These Guidelines provide the following different elements to indicate their appearance within a text: < figure > groups elements representing or containing graphic information such as an illustration, formula, or figure. < media > indicates the location of any form of external media such as an audio or video clip etc. < graphic > indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. < binaryObject > provides encoded binary data representing an inline graphic, audio, video or other object. Media files may be encoded in a number of different ways: in some non-XML or binary format such as PNG, JPEG, MP3, MP4 etc. in an XML format such as SVG in a TEI XML format such as the notation for graphs and trees described in 19 Graphs, Networks, and Trees The elements graphic , media , and binaryObject are made available as members of the class model.graphicLike when this module is included in a schema. These elements are also members of the class att.media , from which they inherit the following attributes: < att.internetMedia > provides attributes for specifying the type of a computer resource using a standard taxonomy. @mimeType specifies the applicable multimedia internet mail extension (MIME) media type specifies the applicable multimedia internet mail extension (MIME) media type < att.media > provides attributes for specifying display and related properties of external media. @width Where the media are displayed, indicates the display width @height Where the media are displayed, indicates the display height @scale Where the media are displayed, indicates a scale factor to be applied when generating the desired display size Where the media are displayed, indicates the display width Where the media are displayed, indicates the display height Where the media are displayed, indicates a scale factor to be applied when generating the desired display size For example, the following passage indicates that a copy of the image found in the source text may be recovered from the URL zigzag2.png and that this image is in PNG format: The media elements are phrase level elements which may be used anywhere that textual content is permitted, within but not between paragraphs or headings. In the following example, the encoder has decided to treat a specific printer's ornament as a heading: The figure element discussed in 14.4 Specific Elements for Graphic Images provides additional capabilities, for example the ability to combine a number of images into a hierarchically organized structure or a block of images. The figure element carries a type attribute, which can be used to distinguish different kinds of graphic component within a single work, for example, maps as opposed to illustrations. It also provides the ability to associate an image with additional information such as a heading or a description. 3.11 Reference Systems By reference system we mean the system by which names or references are associated with particular passages of a text (e.g. Ps. 23:3 for the third verse of Psalm 23 or Amores 2.10.7 for Ovid's Amores , book 2, poem 10, line 7). Such names make it possible to mark a place within a text and enable other readers to find it again. A reference system may be based on structural units (chapters, paragraphs, sentences; stanza and verse), typographic units (page and line numbers), or divisions created specifically for reference purposes (chapter and verse in Biblical texts). Where one exists, the traditional reference system for a text should be preserved in an electronic transcript of it, if only to make it easier to compare electronic and non-electronic versions of the text. Reference systems may be recorded in TEI-encoded texts in any of the following ways: where a reference system exists, and is based on the same logical structure as that of the text's markup, the reference for a passage may be recorded as the value of the global xml:id or n attribute on an appropriate tag, or may be constructed by combining attribute values from several levels of tags, as described below in section 3.11.1 Using the xml:id and n Attributes . where there is no pre-existing reference system, the global xml:id or n attributes may be used to construct one (e.g. collections and corpora created in electronic form), as described below in section 3.11.2 Creating New Reference Systems . where a reference system exists which is not based on the same logical structure as that of the text's markup (for example, one based on the page and line numbers of particular editions of the text rather than on the structural divisions of it), any of a variety of methods for encoding the logical structure representing the reference system may be employed, as described in chapter 20 Non-hierarchical Structures . where a reference system exists which does not correspond to any particular logical structure, or where the logical structure concerned is of no interest to the encoder except as a means of supporting the referencing system, then references may be encoded by means of milestone elements, which simply mark points in the text at which values in the reference system change, as described below in section 3.11.3 Milestone Elements . When a text has no pre-existing associated reference system of any kind, these Guidelines recommend as a minimum that at least the page boundaries of the source text be marked using one of the methods outlined in this section. Retaining page breaks in the markup is also recommended for texts which have a detailed reference system of their own. Line breaks in prose texts may be, but need not be, tagged. 8 3.11.1 Using the xml:id and n Attributes When traditional reference schemes represent a hierarchical structuring of the text which mirrors that of the marked-up document, the n attribute defined for all elements may be used to indicate the traditional identifier of the relevant structural units. The n attribute may also be used to record the numbering of sections or list items in the copy text if the copy-text numbering is important for some reason, for example because the numbers are out of sequence. For example, a traditional reference to Ovid's Amores might be Amores 2.10.7 —book 2, poem 10, line 7. Book, poem, and line are structural units of the work and will therefore be tagged in any case. (See chapter 6 Verse for a discussion of structural units in verse collections.) In such cases, it is convenient to record traditional reference numbers of the structural units using the n attribute. The relevant tags for our example would be: One may also place the entire standard reference for each portion of the text into the appropriate value for the n attribute, though for obvious reasons this takes more space in the file: If the names used by the traditional reference system can be formulated as identifiers, then the references can be given as values for the xml:id attribute; this requires that the reference be given without internal spaces, begin with a letter or underscore, and contain no characters other than letters, digits, hyphens, underscores, full stops, and the various combining and extender characters, as defined by the XML specification. Unlike values for the n attribute, values for the xml:id attribute must be unique throughout the document. Our example then looks like this: To document the usage and to allow automatic processing of these standard references, it is recommended that the TEI header be used to declare whether standard references are recorded in the n or xml:id attributes and which elements may carry standard references or portions of them. For examples of declarations for the reference systems just shown, see section 3.11.4 Declaring Reference Systems . Using the n attribute one can specify only a single standard referencing system, a limitation not without problems, since some editions may define structural units differently and thus create alternative reference systems. For example, another edition of the Amores considers poem 10 a continuation of poem 9, and therefore would specify the same line as Amores 2.9.31 . In order to record both of these reference systems one could employ any of a variety of methods discussed in chapter 20 Non-hierarchical Structures . 3.11.2 Creating New Reference Systems If a text has no canonical reference system of its own, a new custom reference system may be used. The global attributes n and xml:id may be used to assign reference identifiers to segments of the text. Identifiers specified by either attribute apply to the entire element for which they are given. xml:id attributes must be unique within a single document, and xml:id values must begin with a letter. No such restrictions are made on the values of n attributes. Determining a referencing system for a TEI encoding depends on many factors that may either be derived from textual structure, or influenced by extra-textual contingencies such as project and file management concerns. It is important, therefore, that the attribute used, the elements which can bear standard reference identifiers, and the method for constructing standard reference identifiers, should all be declared in the header as described in section 2.3.6 The Reference System Declaration . The Guidelines do not recommend one specific method for creating new referencing systems; however, the rest of this section lists some possibly useful strategies. 3.11.2.1 Referencing system derived from markup A new referencing system may be derived from the structure of the electronic text, specifically from the markup of the text. As with any reference system intended for long-term use, it is important to see the reference as an established, unchanging point in the text. Should the text be revised or rearranged, the reference-system identifiers associated with any section of text must stay with that section of text, even if it means the reference numbers fall out of sequence. (A new reference system may always be created beside the old one if out-of-sequence numbers must be avoided.) A convenient method of mechanically generating unique values for xml:id or n attributes based on the structure of the document is to construct, for each element, a domain-style address comprising a series of components separated by full stops, with one component for each level of the document hierarchy. Two methods may be used. In the typed path form of identifier, each component in the identifier takes the form of an element identifier, a hyphen, and a number, for example p-2 . The element name specifies what type of element is to be sought, and the number specifies which occurrence of that element type is to be selected. (The hyphen and number may be omitted if there is only one element of the given type.) In the untyped path form of identifier, each component consists of a number, indicating which element in the sequence of nodes at each level is to be selected. To make the resulting identifier a valid XML identifier, it may need to be prefixed with an unchanging alphabetic letter. Identifiers generated with these methods should use the text element as their starting point, rather than the TEI or body elements. The TEI element may be taken as a starting point only if identifiers need to be generated for the teiHeader , which is not usually the case; using the body element as a root would prevent assignment of identifiers for the front and back matter. The component corresponding to the root element can be omitted from identifiers, if no confusion will result. In collections and corpora, the component corresponding to the root may be replaced by the unique identifier assigned to the text or sample. In the following example, each element within the text element has been given a typed-path identifier as its xml:id value, and an untyped-path identifier as its n value; the latter are prefixed with the string AB , which may be imagined to be the general identifier for this text. If the xml:id attribute is used to record the reference identifiers generated, each value should record the entire path. If the n attribute is used, each value may record either the entire path or only the subpath from the parent element. The attribute used, the elements which can bear standard reference identifiers, and the method for constructing standard reference identifiers, should all be declared in the header as described in section 2.3.6 The Reference System Declaration . 3.11.2.2 Referencing systems based on project conventions A reference system may be based on an agreed project-specific convention for xml:id attributes. Every convention will have strengths and weaknesses and it is left to encoders to make a decision that enables them to locate information in their TEI document. Here are some examples of referencing systems that have been used in TEI project: Title-based identifiers: identifiers constructed with a number of characters from the main document title, followed by an incremental number. E.g. HOL001, HOL002, etc. using a fixed number of digits; or without fixed digits: HOL1, HOL2, etc. Based on markup, with prefix: identifiers constructed on the markup itself, as described in the previous section. To facilitate uniqueness in a corpus, each identifier may be prefixed with the identifier of the root TEI element. E.g. RootID-Body-p-1. Opaque identifiers: computed identifiers using either a randomized algorithm or a universally unique identifier (UUID) algorithm. Note that XSLT's function generate-id() only guarantees identifier unique to the document being processed. XML well-formedness requires only that xml:id attributes be unique within a single document. However, it is also worth keeping in mind that for operating with referencing systems across a corpus of TEI files it is helpful (or even necessary in some circumstances) to have unique identifiers across the whole corpus. Values of xml:id may be either populated computationally or manually. In the latter case, it is advisable to put measures in place to avoid human error. Custom data types and Schematron rules may be defined in a customization ODD, and a check digit may be added to prevent unwanted changes. 9 3.11.3 Milestone Elements Where the desired reference system does not correspond to any particular structural hierarchy, or the document combines multiple structural hierarchies (as further discussed in 20 Non-hierarchical Structures ), simpler though less expressive methods may be necessary. In such cases the simplest solution may be just to mark up changes in the reference system where they occur, by using one or more of the following milestone elements: < milestone > marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. < gb > marks the beginning of a new gathering or quire in a transcribed codex. < pb > marks the beginning of a new page in a paginated document. < lb > marks the beginning of a new (typographic) line in some edition or version of a text. < cb > marks the beginning of a new column of a text on a multi-column page. These elements simply mark the points in a text at which some category in a reference system changes. They have no content but subdivide the text into regions, rather in the same way as milestones mark points along a road, thus implicitly dividing it into segments. The elements gb , pb , cb , and lb are specialized types of milestone, marking gathering, page, column, and line boundaries respectively. The global n attribute is used in each case to provide a value for the particular unit associated with this milestone (for example, the page or line number). Since it is not structural, validation of a reference system based on milestone s cannot readily be checked by an XML parser, so it will be the responsibility of the encoder or the application software to ensure that they are given in the correct order. Milestone elements are often used as a simple means of capturing the original appearance of an early printed text, which will rarely coincide exactly with structural units, but they are generally useful wherever a text has two or more competing structures. For example, many English novels were first published as serial works, individual parts of which do not always contain a whole number of chapters. An encoder might decide to represent the chapter-based structure using div1 elements, with milestone elements to mark the points at which individual parts end; or the reverse. Thus, an encoding in which chapters are regarded as more important than parts might encode some work in which chapter three begins in part one and is concluded in part two as follows: Similarly, when tagging dramatic verse one may wish to privilege stanzas and lines over speeches and speakers, particularly where speeches cross line and line group boundaries. One might also wish to mark changes in narrative voice in a prose text. In either case, a milestone tag may be used to indicate change of speaker: Milestone tags also make it possible to record the reference systems used in a number of different editions of the same work. The reference system of any one edition can be recreated from a text in which all are marked by simply ignoring all elements that do not specify that edition on their ed attribute. As a simple example, assuming that edition E1 of some collection of poems regards the first two poems as constituting the first book, while edition E2 regards the first poem as prefatory, a markup scheme like the following might be adopted: In this case no n value is specified, since the numbers rise predictably and the application can keep a count from the start of the document, if desired. The value of the n attribute may but need not include the identifiers used for any larger sections. That is, either of the following styles is legitimate: When using milestone tags, line numbers may be supplied for every line or only periodically (every fifth, every tenth line). The latter may be simpler; the former is more reliable. The style of numbering used in the values of n is unrestricted: for the example above, I.i, I.ii, and I.iii could have been used equally well if preferred. The special value unnumbered should be reserved for marking sections of text which fall outside the normal numbering system (e.g. chapter heads, poem numbers, titles, or speaker attributions in a verse drama). By default, there are no constraints on the values supplied for the ed attribute. If it is felt appropriate to enforce such a restriction, the techniques described in 23.3 Customization may be used, for example to specify that the attribute must specify one of a predefined set of values. See below, section 3.11.4 Declaring Reference Systems , for examples of declarations for the reference systems just shown. Milestone elements may be used to mark any kind of shift in the properties associated with a piece of text, whether or not would normally be considered a reference system. For example, they may be used to mark changes in narrative voice in a prose text, or changes of speaker in a dramatic text, where these are not marked using structural elements such as sp , perhaps in order to avoid a clash of hierarchies. As noted in 3.2.2 Hyphenation above, milestone elements such as lb or pb represent whitespace and are therefore by default assumed to occur between orthographic tokens in the text, where these are not otherwise indicated. By default it is reasonable to assume that words are not broken across page or line boundaries, and that therefore a sequence such as 3.11.4 Declaring Reference Systems Whatever kind of reference system is used in an electronic text, it is recommended that the TEI header contain a description of its construction in the refsDecl element described in section 2.3.6 The Reference System Declaration . As described there, the declaration may consist either of a formal declaration using the cRefPattern or citeStructure elements, or an informal description in prose. One of the former is recommended because unlike prose they can be processed by software. The three examples given in section 3.11.1 Using the xml:id and n Attributes would be declared as follows. The first example encodes the standard references for Ovid's Amores one level at a time, using the n attribute on the div1 , div2 , div3 , and l tags. The header section for such an encoding should look something like this: The second example encodes the same reference system, again using the n attribute on the div1 , div2 , div3 , and l tags, but giving the reference string in full on each tag. If canonical references are made only to lines, the reference system could be declared as follows: In order to handle references to poems as well as to individual lines, the declaration for the reference system must be more complicated: The third example encodes the same reference system, this time giving the entire reference string as the value of the xml:id attribute on the relevant tags. The reference system declaration for such an encoding could be: In cases where a more complete formal declaration of text structure is desirable, for example in systems that will present the contents of a large TEI file in smaller chunks, the citeStructure element may be used. This method permits canonical references to be resolved and also allows them to be extracted, so that, for example, a list of resolvable citations may be generated from the document. The example from the Amores above could be implemented using citeStructure thus: citeStructure also provides a method for attaching informational properties to units of structure, by means of the citeData element. The work, book, and poem divisions above might all have head elements which provide a title for the section. If we wish that information to be extractable, we can use citeData to specify where it is to be found: Reference systems recorded by means of milestone tags can also be declared; the following prose description could be used to declare the example given in section 3.11.3 Milestone Elements . 3.12 Bibliographic Citations and References Bibliographic references (that is, full descriptions of bibliographic items such as books, articles, films, broadcasts, songs, etc.) or pointers to them may appear at various places in a TEI text. They are required at several points within the TEI header's source description, as discussed in section 2.2.7 The Source Description ; they may also appear within the body of a text, either singly (for example within a footnote), or collected together in a list as a distinct part of a text; detailed bibliographic descriptions of manuscript or other source materials may also be required. These Guidelines propose a number of specialized elements to encode such descriptions, which together constitute the model.biblLike class. < model.biblLike > < listBibl > contains a list of bibliographic citations of any kind. In printed texts, the individual constituents of a bibliographic reference are conventionally marked off from each other and from the flow of text by such features as bracketing, italics, special punctuation conventions, underlining, etc. In electronic texts, such distinctions are also important, whether in order to produce acceptably formatted output or to facilitate intelligent retrieval processing, 10 quite apart from the need to distinguish the reference itself as a textual object with particular linguistic properties. It should be emphasized that for references as for other textual features, the primary or sole consideration is not how the text should be formatted when it is printed or displayed. The distinctions permitted by the scheme outlined here may not necessarily be all that particular formatters or bibliographic styles require, although they should prove adequate to the needs of many such commonly used software systems. 11 The features distinguished and described below (in section 3.12.2 Components of Bibliographic References ) constitute a set which has been useful for a wide range of bibliographic purposes and in many applications, and which moreover corresponds to a great extent with existing bibliographic and library cataloguing practice. For a fuller account of that practice as applied to electronic texts see section 2.2.7 The Source Description ; for a brief mention of related library standards see section 2.8 Note for Library Cataloguers . The most commonly used elements in the model.biblLike class are biblStruct and bibl . biblStruct will usually be easier to process mechanically than bibl because its structure is more constrained and predictable. It is suited to situations in which the objective is to represent bibliographic information for machine processing directly by other systems or after conversion to some other bibliographic markup formats such as BibTeXML or MODS. Punctuation delimiting the components of a print citation is not permitted directly within a biblStruct element; instead, the presence and order of child elements must be used to reconstruct the punctuation required by a particular style. By contrast, bibl allows for considerable flexibility in that it can include both delimiting punctuation and unmarked-up text; and its constituents can also be ordered in any way. This makes it suitable for marking up bibliographies in existing documents, where it is considered important to preserve the form of references in the original document, while also distinguishing important pieces of information such as authors, dates, publishers, and so on. bibl may also be useful when encoding born digital documents which require use of a specific style guide when rendering the content; its flexibility makes it easier to provide all the information for a reference in the exact sequence required by the target rendering, including any necessary punctuation and linking words, rather than using an XSLT stylesheet or similar to reorder and punctuate the data. The third element in the model.biblLike class, biblFull , has a content model based on the fileDesc element of the TEI header. Both are based on the International Standard for Bibliographic Description (ISBD), which forms the basis of several national standards for bibliographic citations. The order of child elements in both biblFull and fileDesc corresponds to the order of bibliographic description areas in ISBD with two minor exceptions. First, the extent element, corresponding to the physical description area in ISBD, appears just after the publication, production, distribution, etc. area in ISBD, not before it as in TEI. Second, biblFull and fileDesc use the child element publicationStmt to cover not only the publication, production, distribution, etc. area but also the resource identifier and terms of availability area associated with that publication. Despite these inconsistencies, users encoding citations and attempting to format them according to a standard that closely adheres to ISBD may find that biblFull , used with its child elements and without delimiting punctuation, provides an appropriate granularity of encoding with elements that can easily be rendered for the reader. However, it is important to note that some ISBD-derived citation formats (such as ANSI/NISO Z39.29 and ГОСТ 7.1) are not entirely conformant to ISBD either, since they may begin with a statement of authorship that does not map to the ISBD statement of responsibility. 3.12.1 Methods of Encoding Bibliographic References and Lists of References The members of the model.biblLike class all share a number of possible component sub-elements. For the bibl and biblStruct elements, exactly the same sub-elements are concerned, and they are described together in section 3.12.2 Components of Bibliographic References ; for the biblFull element, the sub-elements concerned are fully described in section 2.2 The File Description . Different levels of specific tagging may be appropriate in different situations. In some cases, it may be felt necessary to mark just the extent of the reference itself, with perhaps a few distinctions being made within it (for example, between the part of the reference which identifies a title or author and the rest). Such references, containing a mixture of text with specialized bibliographic elements, are regarded as bibl elements, and tagged accordingly. For example: Some bibliographic references are extremely elliptical, often only a string of the form Baxter, 1983 . If no further details of Baxter's book are given in the source text and none is supplied by the encoder, then the reference thus given should be tagged as a bibl : In cases where the encoder wishes to impose more structure on the bibliographic information, for example to make sure it conforms to a particular stylesheet or retrieval processor, the biblStruct element should be used. Note that several of the features in this and later examples are explained later in the current section. A more complex and detailed bibliographic structure is provided by the biblFull element defined in the TEI header module. This element is provided as a means of embedding the file description of one existing digital text within that of another (see further section 2.2 The File Description ); however, its use is not confined to digital texts, and it may be used in the same way as any other bibliographic element, as in this example: A list of bibliographic items, of whatever kind, may be treated in the same way as any other list (see section 3.8 Lists ). Alternatively, the specialized listBibl element may be used. The difference between the two is that a list contains item elements, within which bibliographic elements ( bibl , biblStruct , or biblFull ) may appear, as well as other phrase- and paragraph-level elements, whereas the listBibl may contain only bibliographic elements, optionally preceded by a heading and a series of introductory paragraphs. For most purposes, good practice would usually require that a listBibl contain only one kind of bibliographic element, though the following example combines both fully structured biblStruct and informal bibl elements: The listBibl element is most appropriate for a more formal bibliography. The same bibl or biblStruct elements may however be embedded within an ordinary list, thus allowing them to be mixed with running prose or presented informally, as in the following version of the same example: 3.12.2 Components of Bibliographic References This section discusses commonly occurring components of bibliographic references and elements used for encoding them. They fall into four groups: elements for grouping components of the analytic , monographic , and series levels in a structured bibliographic reference titles of various kinds, and statements of intellectual responsibility (authorship, etc.) information relating to the publication, pagination, etc. of an item (most of these constitute the default members of the model.biblPart class) annotation, commentary, and further detail 3.12.2.1 Analytic, Monographic, and Series Levels In common library practice a clear distinction is made between an individual item within a larger collection and a free-standing book, journal, or collection. Similarly a book in a series is distinguished sharply from the series within which it appears. An article forming part of a collection which itself appears in a series thus has a bibliographic description with three quite distinct levels of information: the analytic level, giving the title, author, etc., of the article; the monographic level, giving the title, editor, etc., of the collection; the series level, giving the title of the series, possibly the names of its editors, etc., and the number of the volume within that series. A different identifying number may be supplied for any of these three items, that is, for the analytic item, the monographic item, or the series. Within bibl , these three levels may be distinguished simply by the use of the level attribute on title . They may also be distinguished through the practice of employing nested bibl elements. In this example, for instance, the monograph-level component of the reference is encapsulated in its own bibl within the main bibl for the article: Within biblStruct , the levels are distinguished by the use of the following distinct elements: < analytic > contains bibliographic elements describing an item (e.g. an article or poem) published within a monograph or journal and not as an independent publication. < monogr > contains bibliographic elements describing an item (e.g. a book or journal) published as an independent item (i.e. as a separate physical object). < series > contains information about the series in which a book or other bibliographic item has appeared. For purposes of TEI encoding, journals and anthologies are both treated as monographs; a journal title should thus be tagged as a title level=\"j\" element within a monogr element. Individual articles in the journal or collected texts should be treated at the analytic level. When an article has been printed in more than one journal or collection, the bibliographic reference may have more than one monogr element, each possibly followed by one or more series elements. A series element always relates to the most recently preceding monogr element. (Whether reprints of an article are treated in the same bibliographic reference or a separate one varies among different styles. Library lists typically use a different entry for each publication, while academic footnoting practice typically treats all publications of the same article in a single entry.) The biblScope element is used to supply further information about the location of some part of a bibliographic reference. It specifies where to find the component in which it appears within the immediately preceding component of a different level. In the following example, Schacter's article Iolaos appeared on pages 64 to 70 of a volume entitled Herakles to Poseidon , which was itself the second of a four volumes published together under the title Cults of Boitia ; this last title constituted the 38th volume in the series of Bulletin of the Institute of Classical Studies Supplements : In the following example, the article cited has been published twice, once in a journal (where it appeared in volume 40, on pages 3 -46 of the issue of October 1986) and once as a free-standing item, which appeared as number 11 of a German language series. The practice of analytic vs. monographic citation, as described here, should be distinguished from the practice of including within one citation a reference to another work, which the encoder considers to be related to in some way: see further 3.12.2.7 Related Items below. If an identifier is available for the analytic item, it should be represented by means of an idno element placed within the analytic element, as in the following example where a DOI (Digital Object identifier) is supplied for the article in question. Punctuation must not appear between the elements within a structured bibliographic entry encoded with biblStruct or biblFull , unless it is contained within the elements it delimits. When (as in most of the examples in this chapter) entries are encoded without any inter-element punctuation, they can be usually be processed more easily by rendering systems able to output bibliographic references in any of several styles. Within a bibl however, it is possible and often convenient to include punctuation. 3.12.2.2 Titles, Authors, and Editors Bibliographic references typically include the title of the work being cited and the names of those intellectually responsible for it. For articles in journals or collections, such statements should appear both for the analytic and for the monographic level. The following elements are provided for tagging such elements: < title > contains a title for any kind of work. < author > in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. < editor > contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. < respStmt > supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. < resp > contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. < name > contains a proper noun or noun phrase. < meeting > contains the formalized descriptive title for a meeting or conference, for use in a bibliographic description for an item derived from such a meeting, or as a heading or preamble to publications emanating from it. < sponsor > specifies the name of a sponsoring organization or institution. < funder > specifies the name of an individual, institution, or organization responsible for the funding of a project or text. < distributor > supplies the name of a person or other agency responsible for the distribution of a text. < principal > supplies the name of the principal researcher responsible for the creation of an electronic text. In bibliographic references, all titles should be tagged as such, whether analytic, monographic, or series titles. The single element title is used for all these cases. When it appears directly within an analytic , monogr , or series element, title is interpreted as belonging to the appropriate level. However, it is recommended that the level attribute be used to signal this explicitly. It is a semantic error to give a value for the level attribute which is inconsistent with the context. The level value a implies the analytic level; the values m, j, and u imply the monographic level; the value s implies the series level. Note, however, that the semantic error occurs only if the nested title is directly enclosed by the analytic , monogr , or series element; if it is enclosed only indirectly (i.e., nested more deeply), no semantic error need be present. For example, the analytic title may contain a monographic title, as in the following example: In some bibliographic applications, it may prove useful to distinguish main titles from subordinate titles, parallel titles, etc. The type attribute is provided to allow this distinction to be recorded. The following reference, from a national standard for bibliographic references, illustrates this type of analysis with its distinction between main and subordinate titles. Note that this uses the more flexible bibl , rather than the structured biblStruct element: consequently, there is no requirement to tag all the components of the reference (notably the authors). Slightly more complex is the distinction made below among main, subordinate, and parallel titles, in an example from the same source (p. 63). The punctuation and the bibliographic analysis are those given in ANSI Z39.29-1977; the punctuation is in the style prescribed by the International Standard Bibliographic Description (ISBD). 12 Again, it is only because this example uses bibl rather than biblStruct , that specific punctuation may be included between the component elements of the reference. The elements author and editor have fairly obvious significance for printed books and articles; for other kinds of bibliographic items their proper usage may be less obvious. The author element should be used for the person or agency with primary responsibility for a work's intellectual content, and the element editor for other people or agencies with some responsibility for that content, whether or not they are called editor. An organization such as a radio or television station is usually accounted author of a broadcast, for example, while the author of a government report will usually be the agency which produced it. A translator, illustrator, or compiler, may however be marked by means of the editor element, optionally using the role attribute to specify the nature of their responsibility more exactly. Many bibliographic and Linked Data applications require disambiguation of author names using unique identifiers. Both the author and editor elements may contain one or more idno elements, to supply such identifiers. Alternatively, if only a single identifier is to be recorded, the key or ref attribute may be used, as further discussed in 3.6.1 Referring Strings . For anyone else with responsibility for the work, the respStmt element should be used. The nature of the responsibility is indicated by means of a resp element, and the person, organization, etc. responsible by a name , persName , or orgName element. Strings such as unknown may be encoded using the rs element. A respStmt should comprise either at least one of the four naming elements ( name , persName , orgName , or rs ) followed by one or more resp elements, or at least one resp element followed by one or more of the four naming elements. Examples of secondary responsibility of this kind include the roles of illustrator, translator, encoder, and annotator. The respStmt element may also be used for editors, if it is desired to record the specific terms in which their role is described. Examples of author and editor may be found in sections 3.12.1 Methods of Encoding Bibliographic References and Lists of References , and 3.12.2.1 Analytic, Monographic, and Series Levels ; wherever author and editor may occur, the respStmt element may also occur. When one of these elements precedes or immediately follows a title, it applies to that title; when it follows an edition element or occurs within an edition statement, it applies to the edition in question. In this example, the respStmt elements apply to the work as a whole, not merely to the first edition: This example retains the original punctuation and editorial conventions of the source (ISO 690: 1987) and is therefore encoded using the bibl element. In the following example, by contrast, the respStmt element applies to the edition, and not to the collection per se (Moser and Tervooren were not responsible for the first thirty-five printings). As is permissible within a biblStruct element, the component elements have been reordered from their appearance on the title page of the volume in order to ensure the correct relationship of the collection title, the edition statement, and the statement of responsibility. The party with a particular responsibility for the intellectual content may vary over time. Likewise, a given individal's responsibility or role may change over time. These situations may be recorded with the respStmt element. For example, the following could be used when one proofreader took over for another. Another form of responsibility arises when a work is published as the outcome of a conference, workshop or similar meeting. The meeting element may be used to supply this information, as in the following example: 3.12.2.3 Document Identifiers Many bibliographic references include identifiers for a work to help with precise identification of an appropriate document. For example, a book in the Short Title Catalogue could be referenced with its STC number: However, some bibliographic references actually require identifiers of various types because they do not include a statement of the title and the names of those intellectually responsible for it. The following elements may be used for such purposes: < orgName > contains an organizational name. < idno > supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. < classCode > contains the classification code used for this text in some standard classification system. < date > contains a date in any format. For example, a citation to a patent typically includes a country or organization code (a two-character code identifying a patent authority) and a serial number for the patent (whose structure varies by patent authority). The citation might also contain a kind code (which characterizes a particular publication for the patent and which corresponds to a specific stage in the patent procedure) and the date when the patent was filed with or published by the issuing authority. For bibliographic references to patents, the above elements may be used as follows: orgName , within authority , may be used to contain the code of the patent authority. The type attribute may be used to specify the type of patent authority (such as a national patent office or a supra-national patent organization). idno may be used to contain the serial number assigned by the corresponding patent authority. classCode may be used to contain the kind code of the patent document. date may be used to contain the date of the patent document. The type attribute may be used to specify whether this corresponds to the filing date of a patent application or the publication date of a patent publication. The following reference illustrates an encoding for a patent publication which might be cited in print as United States patent US 6,885,550 B1, issued April 26, 2005 : 3.12.2.4 Imprint, Size of a Document, and Reprint Information By imprint is meant all the information relating to the publication of a work: the person or organization by whose authority and in whose name a bibliographic entity such as a book is made public or distributed (whether a commercial publisher or some other organization), the place and the date of publication. It may also include a full address for the publisher or organization. A full bibliographic references will usually also specify the number of pages in a print publication (or equivalent information for non-print materials), and possibly also the specific location of the material being cited within its containing publication. The following elements are provided to hold this information: < imprint > groups information relating to the publication or distribution of a bibliographic item. < address > contains a postal address, for example of a publisher, an organization, or an individual. < pubPlace > contains the name of the place where a bibliographic item was published. < publisher > provides the name of the organization responsible for the publication or distribution of a bibliographic item. < date > contains a date in any format. < extent > describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. < idno > supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. < model.imprintPart > < model.dateLike > For bibliographic purposes, usually only the place (or places) of publication are required, possibly including the name of the country, rather than a full address; the element pubPlace is provided for this purpose. Where however the full postal address is likely to be of importance in identifying or locating the bibliographic item concerned, it may be supplied and tagged using the address element described in section 3.6.2 Addresses . Alternatively, if desired, the rs or name elements described in section 3.6.1 Referring Strings may be used; this involves no claim that the information given is either a full address or the name of a city. The name of the publisher of an item should be marked using the publisher element even if the item is made public (published) by an organization other than a conventional publisher, as is frequently the case with technical reports: In this second example, the idno element is used to provide the identifier allocated to the thesis by the Argonne National Laboratory. Since it applies to the monographic element, the idno should be provided as a direct child of the monogr element, rather than elsewhere in the biblStruct element. The specialist elements publisher and distributor are provided to cover the most common roles related to the production and distribution of a bibliographical item, but other roles such as printer and bookseller may also need to be encoded, and respStmt is available inside imprint for this purpose. When an item has been reprinted, especially reprinted without change from a specific earlier edition, the reprint may appear in a monogr element with only the imprint and other details of the reprint. In the following example, a microform reprint has been issued without any change in the title or authorship. The series statement here applies only to the second monogr element. This encoding can be extended to the case of patent documents, where the same patent application is published, with or without changes, at different stages of the patenting procedure. In this case, the kind code and, optionally, the publication date characterize different publications of the same patent application during the procedure. For example: The above bibliographic reference discloses different publications of the patent EP1558513 during the patenting procedure. The first publication from 3 August 2005 has the kind code \"A1\" indicating that it is a published patent application comprising the European search report issued after carrying out the search at the European Patent Office, whereas the second publication from 9 September 2009 has the kind code \"B1\" indicating that it was published after the patent application has been granted. An alternative way of handling the above situations would be to use the relatedItem element described in section 3.12.2.7 Related Items below. 3.12.2.5 Scopes and Ranges in Bibliographic Citations Many bibliographic citations contain data limiting the citation to one or more volumes, issues, or pages, or to a name or number of a subdivison of the host work. These come in two varieties: the scope of a bibliographic reference (encoded using biblScope ) the range of a work cited (encoded using citedRange ) A scope of a bibliographic reference defines that the entire work cited may be found in particular volumes, issues, pages, etc. For example: The unit attribute on biblScope is optional: both the following are legal examples: On the other hand, a cited range encodes that the author cited only the portion defined by this range. For example, a footnote following a quotation from page 378 of Historical Editions in the States that includes a full bibliographic reference would be encoded using biblStruct as follows: 3.12.2.6 Series Information Series information may (in bibl elements) or must (in biblStruct elements) be enclosed in a series element or (in a biblFull element) a seriesStmt element. The title of the series may be tagged title level=\"s\", the volume number biblScope unit=\"volume\", and responsibility statements for the series (e.g. the name and affiliation of the editor, as in the example in section 3.12.2.1 Analytic, Monographic, and Series Levels ) may be tagged editor or respStmt . Any identifier associated with the series itself should be marked using the idno element. 3.12.2.7 Related Items In bibliographic parlance, a related item is any bibliographic item which, though related to that being defined, is distinct from it. The distinction between analytic and monographic items made above may be thought of as a special case of this kind of related item. More usually however, the term is applied to such items as translations, continuations, different versions, parts, etc. The element relatedItem is provided as a means of documenting such associated items: < relatedItem > contains or references some other bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. In the following example, the first biblStruct describes a facsimile edition, and the second describes the work of which it is a facsimile. The relation between the facsimile and its source is represented by means of a relatedItem within the first description, which points to the description of the source. The ref element in the above example could be replaced by the referenced biblStruct itself since a relatedItem may contain any form of bibliographic reference. For example, one of the examples quoted above might also be encoded as follows: The type attribute should be used to indicate the relationship between the bibliographic item and any relatedItem it contains or points to. The relationships may be transitive (for example translatedAs or reprintedFrom) or non-transitive (for example otherEdition). The subtype attribute may be used to provide a more detailed classification, where this is appropriate. Some further examples follow: 3.12.2.8 Notes and Statement of Language Explanatory notes about the publication of unusual items, the form of an item (e.g. [Score] or [Microform] ), or its provenance (e.g. translation of ... ) may be tagged using the note element. The same element may be used for any descriptive annotation of a bibliographic entry in a database. < note > contains a note or annotation. For example: The textLang element may be used to record information about the languages used within a bibliographic item. < textLang > describes the languages and writing systems identified within the bibliographic work being described, rather than its description. The mainLang and otherLangs attributes should both provide language identifiers in the same form as used for xml:lang as described at 6.1 Language Identification . Where additional detail is needed correctly to describe a language, or to discuss its deployment in a given text, this should be done using the langUsage element in the TEI header, within which individual language elements document the languages used: see 2.4.2 Language Usage . A description, in French, of a work predominantly in German, but also with some Latin might have a textLang like the following: 3.12.2.9 Order of Components within References The order of elements in bibl elements is not constrained. In biblStruct elements, the analytic element, if it occurs, must come first, followed by one or more monogr and series elements, which may appear intermingled (as long as a monogr element comes first), and then zero or more of the following in any order: note , witDetail , idno , ptr , ref , relatedItem , and citedRange . Within analytic , the title(s), author(s), editor(s), and other statements of responsibility may appear in any order; it is recommended that all forms of the title be given together. Within monogr , the author, editor, and statements of responsibility may either come first or else follow the monographic title(s). Following these, the elements listed below, if present, must appear in the following order: note s on the publication (and meeting elements describing the conference, in the case of a proceedings volume) edition elements, each followed by any related editor or respStmt elements imprint biblScope Finally, within the series information in a biblStruct , the sequence of elements is not constrained. If more detailed structuring of a bibliographic description is required, the biblFull element should be used. This is not further described here, as its contents are essentially equivalent to those of the fileDesc element in the teiHeader , which is fully described in section 2.2 The File Description . 3.12.3 Bibliographic Pointers References which are pointers to bibliographic items, of whatever kind, should be treated in the same way as other cross-references (see section 3.7 Simple Links and Cross-References ). As discussed in that section, cross-referencing within TEI texts is in general represented by means of ptr or ref elements. A target attribute on these elements is used to supply an identifying value for the target of the cross-reference, which should be, in the case of bibliographic elements, a bibliographic reference of some kind. Where the form of the reference itself is unimportant, or may be reconstructed mechanically, or is not to be encoded, the ptr element is used, as in the following example: Where the form of the reference is important, or contains additional qualifying information which is to be kept but distinguished from the surrounding text, the ref element should be used, as in the following example: The ref element may also be used to provide a reference to a copy of the bibliographic item itself, particularly if this is available online, as in the following example: The ptr element may be used as a child element of biblStruct to refer to the online catalog record of this bibliographic item: 3.12.4 Relationship to Other Bibliographic Schemes The bibliographic tagging defined here can capture the distinctions required by most bibliographic encoding systems; for the benefit of users of some commonly used systems, the following lists of equivalences are offered, showing the relationship of the markup defined here to the fields defined for bibliographic records in the Scribe, BibTeX, and ProCite systems. Listed below are the equivalences between the various bibliographic fields defined for use in the Scribe and BibTeX systems of bibliographic databases and the elements defined in this module. 13 Elements and structures available in the module defined here which have no analogues in Scribe and BibTeX are not noted. tag as placeName or address tag as note tag as author tag as title level=\"m\" or title within monogr tag as biblScope unit=\"chap\" used only to record date entry was made in the bibliographic database; not supported tag as edition tag as editor or respStmt tag as multiple editor or respStmt elements use the reg element, possibly inside a choice element, inside either an author or name use the reg element, possibly inside a choice element, inside a name type=\"org\" tag as note , possibly using the form note place=\"inline\" used only for issuer of technical reports; tag as publisher tag as title level=\"j\" or title within monogr used to specify an alternate sort key for the bibliographic item, for use instead of author's or editor's name; not supported tag as meeting or as note use date ; if the date is not in a trivially parseable form, use the when attribute to provide a normalized equivalent in one of the format from XML Schema Part 2: Datatypes Second Edition tag as note tag as biblScope unit=\"issue\" or biblScope unit=\"number\"; for technical report numbers, use idno type=\"docno\" used only for sponsor of conference; use name type=\"org\" within respStmt within meeting element tag as biblScope unit=\"pp\" tag as publisher used only for institutions at which thesis work is done; tag as publisher tag as title level=\"s\" or title within series tag as title in appropriate context or with appropriate level value tag as biblScope unit=\"volume\" tag as date ; if the date is not in a trivially parseable form, use the when attribute to provide an ISO-format equivalent 3.13 Passages of Verse or Drama The following elements are included in the core module for the convenience of those encoding texts which include mixtures of prose, verse and drama. < l > contains a single, possibly incomplete, line of verse. < lg > contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. < sp > contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. < speaker > contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. < stage > contains any kind of stage direction within a dramatic text or fragment. Full details of other, more specialized, elements for the encoding of texts which are predominantly verse or drama are described in the appropriate chapter of part three (for verse, see the verse base described in chapter 6 Verse ; for performance texts, see the drama base described in chapter 7 Performance Texts ). In this section, we describe only the elements listed above, all of which can appear in any text, whichever of the three modes prose, verse, or drama may predominate in it. 3.13.1 Core Tags for Verse Like other written texts, verse texts or poems may be hierarchically subdivided, for example into books or cantos. These structural subdivisions should be encoded using the general purpose div or div1 (etc.) elements described below in chapters 4 Default Text Structure and 6 Verse . The fundamental unit of a verse text is the verse line rather than the paragraph, however. The l element is used to mark up verse lines, that is metrical rather than typographic lines. In some modern or free verse, it may be hard to decide whether the typographic line is to be regarded as a verse line or not, but the distinction is quite clear for verse following regular metrical patterns. Where a metrical line is interrupted by a typographic line break, the encoder may choose to ignore the fact entirely or to use the empty lb (line break) element discussed in 3.11 Reference Systems . By convention, the start of a metrical line implies the start of a typographic line; hence there is no need to introduce an lb tag at the start of every l element, but only at places where a new typographic line starts within a metrical line, as in the following example: The l element should not be used to represent typographic lines in non-verse materials: if the line-breaking points in a prose text are considered important for analysis, they should be marked with the lb element. Alternatively, a neutral segmentation element such as seg or ab may be used; see further discussion of these elements in chapter 16 Linking, Segmentation, and Alignment . The l element is a member of the model.lLike class, which is a subclass of the model.divPart class, along with elements from the model.pLike (paragraph-like) class. In some verse forms, regular groupings of lines are regarded as units of some kind, often identified by a regular verse scheme. In stichic verse and couplets, groups of lines analogous to paragraphs are often indicated by indentation. In other verse forms, lines are grouped into irregular sequences indicated simply by whitespace. The lg or line group element may be used to mark any such grouping of elements from the model.lLike class. As a member of the att.typed class, the lg element bears the following attributes: < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed For some kinds of analysis, it may be useful to identify different kinds of line group within the same piece of verse. Such line groups may self-nest, in much the same way as the un-numbered div element described in chapter 4 Default Text Structure . For example: It is often the case that verse line boundaries conflict with the boundaries of other structural elements. In the following example, the single verse line A Workeman in't... welcome is interrupted by a stage direction: The same technique may be used where verse lines are collected together into units such as verse paragraphs: The part attribute may also be attached to an lg element to indicate that it is incomplete, for example because it forms part of a group that is divided between two speakers, as in the following example: For alternative methods of aligning groups of lines which do not form simple hierarchic groups, or which are discontinuous, see the more detailed discussion in chapter 16 Linking, Segmentation, and Alignment . For discussion of other elements and attributes specific to the encoding of verse, see chapter 6 Verse . 3.13.2 Core Tags for Drama Like other written texts, dramatic and other performance texts such as cinema or TV scripts are often hierarchically organized, for example into acts and scenes. These structural subdivisions should be encoded using the general purpose div or div1 (etc.) elements described below in chapters 4 Default Text Structure and 7 Performance Texts . Within these divisions, the body of a performance text typically consists of speeches , often prefixed by a phrase indicating who is speaking, and occasionally interspersed with stage directions of various kinds. In the following simple example, each speech consists of a single paragraph: In the following example, each speech consists of a sequence of verse lines, some of them being marked as metrically incomplete: In some cases, as here in the First Quarto of Hamlet , the printed speaker attributions need to be supplemented by use of the who attribute; again, the lines are marked as complete or incomplete: By contrast with the preceding examples, the following encodes an early printed edition without making any assumption about which parts are prose or verse: The sp and stage elements should also be used to mark parts of a text otherwise in prose which are presented as if they were dialogue in a play. The following example is taken from a 19th century novel in which passages of narrative and passages of dialogue are mixed within the same chapter: 3.14 Overview of the Core Module All the elements described in this chapter are provided by the core module. Common Core Elements common to all TEI documents The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">3 Elements Available in All TEI Documents</span>"}
{"link":"p5.xml?id=DS","tag":"guidelines","content":"4 Default Text Structure This chapter describes the default high-level structure for TEI documents. A full TEI document combines metadata describing it, represented by a teiHeader element, with the document itself, represented by one or more text elements or other elements taken from the model.resource class. That is, the TEI element is used to group together metadata about an encoded resource (in teiHeader , specified by the header module, which is fully described in chapter 2 The TEI Header ) with an encoded resource. Possible encoded resources are a logical transcription of a source document in a text element; the text element is specified along with its high-level constituents in the textstructure module and described in the remainder of the current chapter a diplomatic transcription of a source document in a sourceDoc element, which is specified in the transcr module and described in chapter 11 Representation of Primary Sources an encoded representation of a text-bearing object as images in a facsimile element, which is also specified in the transcr module and described in chapter 11 Representation of Primary Sources a collection of contextual information or annotations that provides more detail about another encoded resource (whether in the same or a different TEI document) in a standOff element, which is specified in the linking module and described in section 16.10 The standOff Container a feature system declaration which can be used to declare the use of fs elements in the rest of the document, which is specified in the iso-fs module and described in section 18.11 Feature System Declaration In a case in which more than one resource related to the same source document share the same metadata, they may be grouped together in a TEI element following a single teiHeader . Because the TEI can be a child of itself, a set or collection of documents may be represented by an outermost TEI element that contains a teiHeader with metadata that is applicable to the entire set or collection of transcriptions, and then a complete TEI element for each document in the collection or set; each of these TEI elements contains a teiHeader with metadata that is applicable to the individual document, and one or more text or other elements taken from the model.resource class. A variant on this basic form, the teiCorpus , is also defined for the representation of language corpora, or other collections of encoded texts. A teiCorpus consists of its own metadata in a teiHeader , followed by one or more complete TEI elements, each combining a teiHeader with one or more elements from the model.resource class. This permits the encoder to distinguish metadata applicable to the whole collection of encoded texts, which is represented by the outermost teiHeader , from that applicable to each of the individual TEI elements within the corpus. Further information about the organization and encoding of language corpora is given in chapter 15 Language Corpora . Alternatively, the corpus may be represented with a TEI element (perhaps with a type of corpus) in the same manner as a teiCorpus . In summary, when the default structure module is included in a schema, the following elements are available for the representation of the outermost structure of a TEI document: < TEI > contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple TEI elements may be combined within a TEI (or teiCorpus ) element. < teiCorpus > contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more TEI elements, each containing a single text header and a text. < teiHeader > supplies descriptive and declarative metadata associated with a digital resource or set of resources. < text > contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. TEI texts may be regarded either as unitary , that is, forming an organic whole, or as composite, that is, consisting of several components which are in some important sense independent of each other. The distinction is not always entirely obvious: for example a collection of essays might be regarded as a single item in some circumstances, or as a number of distinct items in others. In such borderline cases, the encoder must choose whether to treat the text as unitary or composite; each may have advantages and disadvantages in a given situation. Whether unitary or composite, the text is marked with the text tag and may contain front matter, a text body, and back matter. In unitary texts, the text body is tagged body ; in composite texts, where the text body consists of a series of subordinate texts or groups, it is tagged group . The overall structure of any text, unitary or composite, is thus defined by the following elements: < front > contains any prefatory matter (headers, abstracts, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. < body > contains the whole body of a single unitary text, excluding any front or back matter. < group > contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. < back > contains any appendixes, etc. following the main part of a text. The overall structure of a unitary text is: The overall structure of a composite text made up of two unitary texts is: Finally, a floatingText element is provided for the case where one text is embedded within another, but does not contribute to its hierarchical organization, for example because it interrupts it, or simply quoted within it. This is useful in such common literary contexts as the play within a play or the narrative interrupted by other (often deeply nested) multiple narratives. Each of these elements is further described in the remainder of this chapter. Elements front and back are further discussed in sections 4.5 Front Matter and 4.7 Back Matter . The group and floatingText elements, used for more complex or composite text structures, are further discussed in section 4.3 Grouped and Floating Texts . Other textual elements, such as paragraphs, lists or phrases, which nest within these major structural elements, are discussed in chapter 3 Elements Available in All TEI Documents , in the case of elements which can appear in any kind of document, or elsewhere in the case of elements specific to particular kinds of document. 4.1 Divisions of the Body In some texts, the body consists simply of a sequence of low-level structural items, referred to here as components or component-level elements (see section 1.3 The TEI Class System ). Examples in prose texts include paragraphs or lists; in dramatic texts, speeches and stage directions; in dictionaries, dictionary entries. In other cases sequences of such elements will be grouped together hierarchically into textual divisions and subdivisions, such as chapters or sections. The names used for these structural subdivisions of texts vary with the genre and period of the text, or even at the whim of the author, editor, or publisher. For example, a major subdivision of an epic or of the Bible is generally called a book, that of a report is usually called a part or section, that of a novel a chapter—unless it is an epistolary novel, in which case it may be called a letter. Even texts which are not organized as linear prose narratives, or not as narratives at all, will frequently be subdivided in a similar way: a drama into acts and scenes; a reference book into sections; a diary or day book into entries; a newspaper into issues and sections, and so forth. Because of this variety, these Guidelines propose that all such textual divisions be regarded as occurrences of the same neutrally named elements, with an attribute type used to categorize elements independently of their hierarchic level. Two alternative styles are provided for the marking of these neutral divisions: numbered and un-numbered . Numbered divisions are named div1 , div2 , etc., where the number indicates the depth of this particular division within the hierarchy, the largest such division being div1 , any subdivision within it being div2 , any further sub-sub-division being div3 and so on. Un-numbered divisions are simply named div , and allowed to nest recursively to indicate their hierarchic depth. The two styles must not be combined within a single front , body , or back element. 4.1.1 Un-numbered Divisions The following element is used to identify textual subdivisions in the un-numbered style: < div > contains a subdivision of the front, body, or back of a text. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed Using this style, the body of a text containing two parts, each composed of two chapters, might be represented as follows: 4.1.2 Numbered Divisions The following elements are used to identify textual subdivisions in the numbered style: < div1 > contains a first-level subdivision of the front, body, or back of a text. < div2 > contains a second-level subdivision of the front, body, or back of a text. < div3 > contains a third-level subdivision of the front, body, or back of a text. < div4 > contains a fourth-level subdivision of the front, body, or back of a text. < div5 > contains a fifth-level subdivision of the front, body, or back of a text. < div6 > contains a sixth-level subdivision of the front, body, or back of a text. < div7 > contains the smallest possible subdivision of the front, body or back of a text, larger than a paragraph. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed The largest possible subdivision of the body is div1 element and the smallest possible div7 . If numbered divisions are in use, a division at any one level (say, div3 ), may contain only numbered divisions at the next lowest level (in this case, div4 ). Using this style, the body of a text containing two parts, each composed of two chapters, might be represented as follows: 4.1.3 Numbered or Un-numbered? Within the same front , body , or back element, all hierarchic subdivisions must be marked using either nested div elements, or div1 , div2 etc. elements nested as appropriate; the two styles must not be mixed. The choice between numbered and un-numbered divisions will depend to some extent on the complexity of the material: un-numbered divisions allow for an arbitrary depth of nesting, while numbered divisions limit the depth of the tree which can be constructed. Where divisions at different levels should be processed differently (for example to ensure that chapters, but not sections, begin on a new page), numbered divisions slightly simplify the task of defining the desired processing for each level, though this distinction could also be made by supplying this information on the type attribute of an un-numbered div . Some software may find numbered divisions easier to process, as there is no need to maintain knowledge of the whole document structure in order to know the level at which a division occurs; such software may, however, find it difficult to cope with some other aspects of the TEI scheme. On the other hand, in a collection of many works it may prove difficult or impossible to ensure that the same numbered division always corresponds with the same type of textual feature: a chapter may be at level 1 in one work and level 3 in another. Whichever style is used, the global n and xml:id attributes (section 1.3.1.1 Global Attributes ) may be used to provide reference strings or labels for each division of a text, where appropriate. Such labels should be provided for each section which is regarded as significant for referencing purposes (on reference systems, see further section 3.11 Reference Systems ). As indicated above, the type and subtype attributes provided by the att.typed class may be used to provide a name or description for the division. Typical values might be book, chapter, section, part, or (for verse texts) book, canto, stanza, or (for dramatic texts) act, scene. The following extended example uses numbered divisions to indicate the structure of a novel, and illustrates the use of the attributes discussed above. It also uses some elements discussed in section 4.2 Elements Common to All Divisions and the p element discussed in section 3.1 Paragraphs . As an alternative (or complement) to this use of the type attribute to characterize neutrally named division elements, the modification mechanisms discussed in section 23.3 Customization may be used to define new elements such as chapter , part , etc. To make this simpler, a single member model class is defined for each of the neutrally named division elements: model.divLike (containing div ), model.div1Like (containing div1 ), model.div2Like (containing div2 ), etc. For example, suppose that the body of a text consists of a series of diary entries, each of which is potentially divided into entries for the morning and the afternoon. This might be represented in any of the following ways. First, using the un-numbered style: More information about the customization techniques exemplified here is provided in 23.3 Customization . 4.1.4 Partial and Composite Divisions In most situations, the textual subdivisions marked by div or div1 (etc.) elements will be both complete and identically organized with reference to the original source. For some purposes however, in particular where dealing with unusually large or unusually small texts, encoders may find it convenient to present as textual divisions sequences of text which are incomplete with reference to the original text, or which are in fact an ad hoc agglomeration of tiny texts. Moreover, in some kinds of texts it is difficult or impossible to determine the order in which individual subdivisions should be combined to form the next higher level of subdivision, as noted below. To overcome these problems, the following additional attributes are defined for all elements in the att.divLike class: < att.divLike > provides attributes common to all elements which behave in the same way as divisions. @org specifies how the content of the division is organized. @sample indicates whether this division is a sample of the original source and if so, from which part. specifies how the content of the division is organized. indicates whether this division is a sample of the original source and if so, from which part. < att.fragmentable > provides attributes for representing fragmentation of a structural element, typically as a consequence of some overlapping hierarchy. @part specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers. specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers. For example, an encoder might choose to transcribe only the first two thousand words of each chapter from a novel. In such a case, each chapter might conveniently be regarded as a partial division, and tagged with a div element in the following form: The following example demonstrates how a newspaper column composed of very short unrelated snippets may be encoded using these attributes: The org attribute on the div1 element is used here to indicate that individual stories in this group, marked here as div2 , are really quite independent of each other, although they are all marked as subdivisions of the whole group. They can be read in any order without affecting the sense of the piece; indeed, in some cases, divisions of this nature are printed in such a way as to make it impossible to determine the order in which they are intended to be read. Individual stories can be added or removed without affecting the existing components. This method of encoding composite texts as composite divisions has some limitations compared with the more general and powerful mechanisms discussed in section 4.3.1 Grouped Texts . However, it may be preferable in some circumstances, notably where the individual texts are very small. 4.2 Elements Common to All Divisions The divisions of any kind of text may sometimes begin with a brief heading or descriptive title, with or without a byline, an epigraph or brief quotation, or a salutation such as one finds at the start of a letter. They may also conclude with a brief trailer, byline, postscript, or signature. Many of these (e.g. a byline) may appear either at the start or at the end of a text division proper. To support this heterogeneity, the TEI architecture defines five classes, all of which are populated by this module: < model.divTop > < model.divBottom > < model.divTopPart > < model.divBottomPart > < model.divWrapper > 4.2.1 Headings and Trailers The head element is used to identify a heading prefixed to the start of any textual division, at any level. A given division may contain more than one such element, as in the following example: Unlike some other markup schemes, the TEI scheme does not require that headings attached to textual subdivisions at different hierarchic levels have different identifiers. All kinds of heading are marked identically using the head tag; the type or level of heading intended is implied by the immediate parent of the head element, which may for example be a div1 , div2 , etc., an un-numbered div , or any member of the model.listLike class. However, as with div elements, the encoder may choose to extend the model.headLike class of which head is the sole member to include other such elements if required. In certain kinds of text (notably newspapers), there may be a need to categorize individual headings within the sequence at the start of a division, for example as main headings, or detail headings: this may readily be done using the type or subtype attribute. Specific elements are provided for certain kinds of heading-like features, (notably byline , dateline , and salute ; see further section 4.2.2 Openers and Closers ), but the type or subtype attributes must be used to discriminate among other forms of heading. These attributes are provided, as elsewhere, by the att.typed attribute class of which the head element is a member. In the following example, taken from a British newspaper, the lead story and its associated headlines have been encoded as a div element, with appropriate model.divTop elements attached: In older writings, the headings or incipits may be longer than in modern works. When heading-like material appears in the middle of a text, the encoder must decide whether or not to treat it as the start of a new division. If the phrase in question appears to be more closely connected with what follows than with what precedes it, then it may be regarded as a heading and tagged as the head of a new div element. If it appears to be simply inserted or superimposed—as for example the kind of pull quotes often found in newspapers or magazines, then the quote , q , or cit element may be more appropriate. The trailer element, which can appear at the end of a division only, is used to mark any heading-like feature appearing in this position, as in this example: 4.2.2 Openers and Closers In addition to headings of various kinds, divisions sometimes include more or less formulaic opening or closing passages, typically conveying such information as the name and address of the person to whom the division is addressed, the place or time of its production, a salutation or exhortation to the reader, and so on. Divisions in epistolary form are particularly liable to include such features. Additional elements for the detailed encoding of personal names, dates, and places are provided in chapter 13 Names, Dates, People, and Places . For simple cases, the following elements should be adequate: < byline > contains the primary statement of responsibility given for a work on its title page or at the head or end of the work. < dateline > contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer. < salute > contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. < signed > contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text. The byline and dateline elements are used to encode headings which identify the authorship and provenance of a division. Although the terminology derives from newspaper usage, there is no implication that dateline or byline elements apply only to newspaper texts. The following example illustrates use of the dateline and signed elements at the end of the preface to a novel: Where a sequence of such elements appear together, either at the beginning or end of an element, it may be convenient to group them together using one of the following elements: < opener > groups together dateline, byline, salutation, and similar phrases appearing as a preliminary group at the start of a division, especially of a letter. < closer > groups together salutations, datelines, and similar phrases appearing as a final group at the end of a division, especially of a letter. For further discussion of the encoding of dates and of names of persons and places, see section 3.6.4 Dates and Times and chapter 13 Names, Dates, People, and Places . 4.2.3 Arguments, Epigraphs, and Postscripts The argument element may be used to encode the prefatory list of topics sometimes found at the start of a chapter or other division. It is most conveniently encoded as a list, since this allows each item to be distinguished, but may also simply be presented as a paragraph. The following are thus both equally valid ways of encoding the same argument: An epigraph is a quotation from some other work, a saying, or a motto, appearing on a title page, or at the start of a division. It may be encoded using the special-purpose epigraph element, as in the following example: For discussion of quotations appearing other than as epigraphs refer to section 3.3.3 Quotation . A postscript is a passage added after the signature of a letter or, less frequently, the main portion of the body of a book, article, or essay. In English a postscript is often abbreviated as P.S. or PS , and postscripts are often introduced by labels with one of these abbreviations, as in the following example. 4.2.4 Content of Textual Divisions Other than elements from the model.divWrapper , model.divTop , or model.divBottom classes, every textual division (numbered or un-numbered) consists of a sequence of ungrouped model.common elements (see 1.3 The TEI Class System ). The actual elements available will depend on the modules in use; in all cases, at least the component-level structural elements defined in the core will be available (paragraphs, lists, dramatic speeches, verse lines and line groups etc.). If the drama module has been selected, then other component- or phrase- level items specialized for performance texts (for example, cast lists or camera angles) will be available, as defined in chapter 7 Performance Texts ) will be available. If the dictionary module is in use, then dictionary entries, related entries, etc. (as defined in chapter 9 Dictionaries ) will also be available; if the module for transcribed speech is in use, then utterances, pauses, vocals, kinesics, etc., as defined in chapter 8.3 Elements Unique to Spoken Texts will be available; and so on. Where a text contains low-level elements from more than one module these may appear at any point; there is no requirement that elements from the same module be kept together. 4.3 Grouped and Floating Texts The group element discussed in 4.3.1 Grouped Texts should be used to represent a collection of independent texts which is to be regarded as a single unit for processing or other purposes. The floatingText element discussed in 4.3.2 Floating Texts should be used to represent an independent text which interrupts the text containing it at any point but after which the surrounding text resumes. < group > contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. < floatingText > contains a single text of any kind, whether unitary or composite, which interrupts the text containing it at any point and after which the surrounding text resumes. 4.3.1 Grouped Texts Examples of composite texts which should be represented using the group element include anthologies and other collections. The presence of common front matter referring to the whole collection, possibly in addition to front matter relating to each individual text, is a good indication that a given text might usefully be encoded in this way; this structure may be found useful in other circumstances too. For example, the overall structure of a collection of short stories might be encoded as follows: A text which is a member of a group may itself contain groups. This is quite common in collections of verse, but may happen in any kind of text. As an example, consider the overall structure of a typical collection, such as the Muses Library edition of Crashaw's poetry. Following a critical introduction and table of contents, this work contains the following major sections: Steps to the Temple (a collection of verse as published in 1648) Carmen deo Nostro (a second collection, published in 1652) The Delights of the Muses (a third collection, published in 1648) Posthumous Poems, I (a collection of fragments all taken from a single manuscript) Posthumous Poems, II (a further collection of fragments, taken from a different manuscript) The first three of these collections each has a reasonable claim to be considered as a text in its own right, and may therefore be encoded as such. It is rather more arbitrary as to whether the two posthumous collections should be treated as two groups, following the practice of the Muses Library edition. An encoder might elect to combine the two into a single group or simply to treat each fragment as an ungrouped unitary text. The Muses Library edition reprints the whole of each of the three original collections, including their original front matter (title pages, dedications etc.). These should be encoded using the front element and its constituents (on which see further section 4.5 Front Matter ), while the body of each collection should be encoded as a single group element. Each individual poem within the collections should be encoded as a distinct text element. The beginning of the whole collection would thus appear as follows (for further discussion of the use of the elements div and lg for textual subdivision of verse, see section 3.13.1 Core Tags for Verse and chapter 6 Verse ): The group element may be used in this way to encode any kind of collection of which the constituents are regarded by the encoder as texts in their own right. Examples include anthologies or collections of verse or prose by multiple authors, florilegia, or commonplace books, journals, day books, etc. As a fairly typical example, we consider The Norton Book of Travel , an anthology edited by Paul Fussell and published in 1987 by W. W. Norton. This work comprises the following major sections: Front matter (title page, acknowledgments, introductory essay) The Beginnings The Eighteenth Century and the Grand Tour The Heyday Touristic Tendencies Post Tourism Back matter (permissions list, index) Prefatory essay Five letters by Lady Mary Wortley Montagu An extract from Swift's Gulliver's Travels Two poems by Alexander Pope Two extracts from Boswell's Journal A poem by William Blake The easiest way of encoding such an anthology is to treat each individual extract as a text in its own right. A sequence of texts by a single author, together with the biographical note preceding it, can then be treated as a single group element within the larger group formed by the section. The sequence of single or composite texts making up a single section of the work is likewise treated, together with its prefatory essay, as a single group within the work. Schematically: Note that the editor's introductory essays on each author may be treated as texts in their own right (as the essays on Lady Mary Wortley Montagu and Alexander Pope have been treated above), or as front matter to the embedded text, as the essay on Swift has been. The treatment in the example is intentionally inconsistent, to allow comparison of the two approaches. Consistency can be imposed either by treating the Swift section as a group containing one text by Swift and one by the editor, or by treating the Montagu and Pope sections as text elements containing the editor's essays as front matter. Marked in the second way, the Pope section of the book would look like this: The essays on The Eighteenth Century and the Grand Tour and other larger sections could also be tagged as front matter in the same way, by treating the larger sections as text elements rather than group elements. Where, as in this case, an anthology contains different kinds of text (for example, mixtures of prose and drama, or transcribed speech and dictionary entries, or letters and verse), the elements to be encoded will of course be drawn from more than one module. The elements provided by the core module described in chapter 3 Elements Available in All TEI Documents should however prove adequate for most simple purposes, where prose, drama, and verse are combined in a single collection. For anthologies of short extracts such as commonplace books, it may often be preferable to regard each extract not as a text in its own right but simply as a quotation or cit element. The following component-level elements may be used to encode quotations of this kind: < cit > contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. < quote > contains a phrase or passage attributed by the narrator or author to some agency external to the text. 4.3.2 Floating Texts An important characteristic of the unitary or composite text structures discussed so far is that they can be regarded as forming what is mathematically known as a tesselation covering the whole of the available text (or text division) at each hierarchic level. Just as an XML document has a single root element containing a single tree, each node of which forms a properly nested sub-tree, so it seems natural to think of the internal structure of a text as decomposable hierarchically into subparts, each of which is a properly nested subtree. While this is undoubtedly true of a large number of documents, it is not true of all. In particular, it is not true of texts which are only partly tesselated at a given level. For example, if a text A is contained by text B in such a way that part of B precedes A and part follows it, we cannot tesselate the whole of B. In such a case, we say that text A is a floating text. The floatingText element is a member of the model.divPart class, and can thus appear within any division level element in the same way as a paragraph. For example, texts such as the Decameron or the Arabian Nights might be regarded as containing many floating texts embedded within another single text, the framing narrative, rather than as groups of discrete texts in which the fragments of framing narrative are regarded as front or back matter. As an example, we consider an 18th century text The Lining to the Patch-Work Screen , by Jane Barker (1726). This lengthy narrative contains nearly a hundred distinct tales embedded (as the title suggests) in a single patchwork. The work begins by introducing the central character, Galecia, but within a few pages launches into a distinct narrative, the story of Captain Manly: Following the conclusion of Captain Manly's tale, we are returned to Galecia, and almost immediately after that into two further stories. However, the Galecia narrative returns between each of the texts, which is why we choose to represent them as floatingText s: In other multi-narrative texts, the individual nested tales may have greater significance than the framing narratives, and it may therefore be preferable to treat the fragments of framing narrative as front or back matter associated with each nested tale. This is commonly done, for example, in texts such as Chaucer's Canterbury Tales , where each tale is typically presented with front matter in which the teller of the tale is introduced, and back matter in which the pilgrims comment on it. It is important to distinguish between the uses of floatingText and quote . Whereas the semantics of quote suggest that its content derives from a source external to the current text, floatingText carries no such implication and is simply used whenever the richer content model that it provides is required to support the markup of a part of a text that is presented as a discrete inclusion. In some cases, such inclusions could be considered external (e.g., enclosures, attachments, etc.); often however, as in the examples above, the included text bears no signs of emanating from outside. floatingText and quote may be used in combination. For a text with rich internal structure that is quoted at length, floatingText might be used within quote . Also, like a unitary text, floatingText may include one or more quoted sections, each marked with a quote element. 4.4 Virtual Divisions Where the whole of a division can be automatically generated, for example because it is derived from another part of this or another document, an encoder may prefer not to represent it explicitly but instead simply mark its location by means of a processing instruction, or by using the special purpose divGen element: < divGen > indicates the location at which a textual division generated automatically by a text-processing application is to appear. This element is made available by the model.divGenLike class of which it is the sole element. The divGen element is a member of the att.typed class, from which it inherits the type and subtype attributes. It may appear wherever a div or div1 ( div2 , etc.) element may appear. For example, if the table of contents (toc) for a given work is simply derived by copying the first head element from each div element in a text, it might be more easily encoded as follows: 4.5 Front Matter By front matter we mean distinct sections of a text (usually, but not necessarily, a printed one), prefixed to it by way of introduction or identification as a part of its production. Features such as title pages or prefaces are clear examples; a less definite case might be the prologue attached to a play. The front matter of an encoded text should not be confused with the TEI header described in chapter 2 The TEI Header , which serves as a kind of front matter for the computer file itself, not the text it encodes. An encoder may choose simply to ignore the front matter in a text, if the original presentation of the work is of no interest, or for other reasons; alternatively some or all components of the front matter may be thought worth including with the text as components of the front element. 1 With the exception of the title page, (on which see section 4.6 Title Pages ), front matter should be encoded using the same elements as the rest of a text. As with the divisions of the text body, no other specific tags are proposed here for the various kinds of subdivision which may appear within front matter: instead either numbered or un-numbered div elements may be used. The following suggested values 2 for the type attribute may be used to distinguish various kinds of division characteristic of front matter: A foreword or preface addressed to the reader in which the author or publisher explains the content, purpose, or origin of the text. A formal declaration of acknowledgment by the author in which persons and institutions are thanked for their part in the creation of a text. A formal offering or dedication of a text to one or more persons or institutions by the author. A summary of the content of a text as continuous prose. A table of contents, specifying the structure of a work and listing its constituents. The list element should be used to mark its structure. A pictorial frontispiece, possibly including some text. The following extended example demonstrates how various parts of the front matter of a text may be encoded. The front part begins with a title page, which is presented in section 4.6 Title Pages below. This is followed by a dedication and a preface, each of which is encoded as a distinct div : The front matter concludes with another div element, shown in the next example, this time containing a table of contents, which contains a list element (as described in section 3.8 Lists ). Note the use of the ptr element to provide page-references: the implication here is that the target identifiers supplied (fish1, fish2, etc.) will correspond with identifiers used for the div elements containing chapters of the text itself. (For the ptr element, see 3.7 Simple Links and Cross-References .) The following example uses numbered divisions to mark up the front matter of a medieval text. Note that in this case no title page in the modern sense occurs; the title is simply given as a heading at the start of the front matter. Note also the use of the type attribute on the div elements to indicate document elements comparatively unusual in modern books such as the initial prayer: If, however, the table of contents can be automatically generated from the remainder of the text, it may be preferable simply to mark its presence, either by means of an empty divGen element or by using an appropriate processing instruction. 4.6 Title Pages Detailed analysis of the title page and other preliminaries of older printed books and manuscripts is of major importance in descriptive bibliography and the cataloguing of printed books; such analysis may require a rather more detailed module than that proposed here. The following elements are suggested as a means of encoding the major features of most title pages: < titlePage > contains the title page of a text, appearing within the front or back matter. < docTitle > contains the title of a document, including all its constituents, as given on a title page. < titlePart > contains a subsection or division of the title of a work, as indicated on a title page. < argument > contains a formal list or prose description of the topics addressed by a subdivision of a text. < byline > contains the primary statement of responsibility given for a work on its title page or at the head or end of the work. < docAuthor > contains the name of the author of the document, as given on the title page (often but not always contained in a byline). < epigraph > contains a quotation, anonymous or attributed, appearing at the start or end of a section or on a title page. < imprimatur > contains a formal statement authorizing the publication of a work, sometimes required to appear on a title page or its verso. < docEdition > contains an edition statement as presented on a title page of a document. < docImprint > contains the imprint statement (place and date of publication, publisher name), as given (usually) at the foot of a title page. < docDate > contains the date of a document, as given on a title page or in a dateline. < graphic > indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. Together with the figure element described in chapter 14 Tables, Formulæ, Graphics, and Notated Music , these elements constitute the model.titlepagePart class. Any number of elements from this class can appear grouped together within a titlePage element. The figure element is included so as to enable encoders to record the presence of complex non-textual material on a title page. For simple cases such as printers' ornaments or illustrations the graphic element discussed in section 3.10 Graphics and Other Non-textual Components should be adequate. The elements listed above, together with the head element, also constitute the class model.pLike.front . The elements in this class can appear within a minimal front element without any need to group them together and encode a complete title page. Encoders wishing to add new elements to either class may do so using the methods described in section 23.3 Customization . Two examples of the use of these elements follow. First, the title page of the work discussed earlier in this section: Second, a characteristically verbose 17th century example. Note the use of the lb tag to mark the line breaks of the original where necessary: Where, as here, it is considered important to encode salient features of the way a title page was originally rendered, the techniques exemplified in 2.3.4 The Tagging Declaration may also be useful. Where title pages are encoded, their physical rendition is often of considerable importance. One approach to this requirement would be to use the seg tag, described in chapter 16 Linking, Segmentation, and Alignment , to segment the typographic content of each part of the title page, and then use the global rend attribute to specify its rendition. Another would be to use a module specialized for the description of typographic entities such as pages, lines, rules, etc., bearing special-purpose attributes to describe line-height, leading, degree of kerning, font, etc. Further discussion of these problems is provided in chapter 11 Representation of Primary Sources . 4.7 Back Matter Conventions vary as to which elements are grouped as back matter and which as front. For example, some books place the table of contents at the front, and others at the back. Even title pages may appear at the back of a book as well as at the front. The content model for back and front elements are therefore identical. The following suggested values may be used for the type attribute on all division elements, in order to distinguish various kinds of division characteristic of back matter: An ancillary self-contained section of a work, often providing additional but in some sense extra-canonical text. A list of terms associated with definition texts (glosses): this should be encoded as a list type=\"gloss\" (see section 3.8 Lists ). A section in which textual or other kinds of notes are gathered together. A list of bibliographic citations: this should be encoded as a listBibl (see section 3.12 Bibliographic Citations and References ). Any form of index to the work. A statement appearing at the end of a book describing the conditions of its physical production. No additional elements are proposed for the encoding of back matter at present. Some characteristic examples follow; first, an index (for the case in which a printed index is of sufficient interest to merit transcription): Next, a back-matter division in epistolary form: And finally, a list of corrigenda and addenda with pseudo-epistolary features: 4.8 Module for Default Text Structure The module described by the present chapter has the following components: Default Text Structure Default text structure The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">4 Default Text Structure</span>"}
{"link":"p5.xml?id=WD","tag":"guidelines","content":"5 Characters, Glyphs, and Writing Modes Chapter 6 Languages and Character Sets introduced the fundamental notions of language identification and character representation in an encoded TEI document. In this chapter we discuss some additional issues relating to the way that written language is represented in a TEI document. In sections 5.1 Is Your Journey Really Necessary? and 5.2 Markup Constructs for Representation of Characters and Glyphs we introduce markup which may be used to represent and document non-standard characters, that is, written symbols for which no codepoint exists in Unicode. The same markup may be used to annotate existing characters according to their visual or other properties, and thus process them as distinct glyphs (see section 5.3 Annotating Characters ), or to define new characters or glyphs (section 5.4 Adding New Characters ). We also provide recommendations concerning the Unicode Private Use Area ( 5.5 How to Use Code Points from the Private Use Area . Finally, in section 5.6 Writing Modes we discuss ways of documenting the writing mode used in a source text, that is, the directionality of the script, the orientation of individual characters, and related questions. 5.1 Is Your Journey Really Necessary? Despite the availability of Unicode, text encoders still sometimes find that the published repertoire of available characters is inadequate to their needs. This is particularly the case when dealing with ancient languages, for which encoding standards do not yet exist, or where an encoder wishes to represent variant forms of a character or glyphs . The module defined by this chapter provides a mechanism to satisfy that need, while retaining compatibility with standards. When encoders encounter some graphical unit in a document which is to be represented electronically, the first issue to be resolved should be Is this really a different character? To determine whether a particular graphical unit is a character or not, see 6.2.2 Terminology and Key Concepts . If the unit is indeed determined to be a character, the next question should be Has this character been encoded already? In order to determine whether a character has been encoded, encoders should follow the following steps: Check the Unicode web site at https://www.unicode.org , in particular the page \"Where is my Character?\" , and the associated character code charts. Alternatively, users can check the latest published version of The Unicode Standard ( Unicode Consortium (2006) ), though the web site is often more up to date than the printed version, and should be checked for preference. The pictures (glyphs) in the Unicode code charts are only meant to be representative, not definitive. If a specific form of an already encoded character is required for a project, refer to the guidelines contained below under Annotating Characters . Remember that your encoded document may be rendered on a system which has different fonts from yours: if the specific form of a character is important to you, then you should document it. Check the Unicode web site at https://www.unicode.org , in particular the page \"Where is my Character?\" , and the associated character code charts. Alternatively, users can check the latest published version of The Unicode Standard ( Unicode Consortium (2006) ), though the web site is often more up to date than the printed version, and should be checked for preference. The pictures (glyphs) in the Unicode code charts are only meant to be representative, not definitive. If a specific form of an already encoded character is required for a project, refer to the guidelines contained below under Annotating Characters . Remember that your encoded document may be rendered on a system which has different fonts from yours: if the specific form of a character is important to you, then you should document it. Check the Proposed New Characters web page ( http://unicode.org/alloc/Pipeline.html ) to see whether the character is in line for approval. Ask on the Unicode email list ( https://www.unicode.org/consortium/distlist.html ) to see whether a proposal is pending, or to determine whether this character is considered eligible for addition to the Unicode Standard. Since there are now over 130,000 characters in Unicode, chances are good that what you need is already there, but it might not be easy to find, since it might have a different name in Unicode. Editors working with East Asian writing systems should consult the Unihan Database . Look again, this time at other sites, preferably ones which also provide searches based on scripts and languages. For example https://www.chise.org (for CJK characters) or http://www.eki.ee/letter/ (for non-CJK characters) . Take care, however, that all the properties of what seems to be a relevant character are consistent with those of the character you are looking for. For example, if your character is definitely a digit, but the properties of the best match you can find for it say that it is a letter, you may have a character not yet defined in Unicode. In general, it is advisable to avoid Unicode characters generally described as presentation forms. 1 However, if the character you are looking for is being used in a notation (rather than as part of the orthography of a language) then it is quite acceptable to select characters from the Mathematical Operators block, provided that they have the appropriate properties (i.e. So : Symbol, Other; or Sm : Symbol, Math). An encoded character may be precomposed or it may be formed from base characters and combining diacritical marks. Either will suffice for a character to be \"found\" as an encoded character. If there are several possible Unicode characters to choose amongst, it is good practice to consult other colleagues and practitioners to see whether a consensus has emerged in favour of one or other of them. If, however, no suitable form of your character seems to exist, the next question will be: Does the graphical unit in question represent a variant form of a known character, or does it represent a completely unencoded character? If the character is determined to be missing from the Unicode Standard, it would be helpful to submit the new character for inclusion (see http://unicode.org/pending/proposals.html ). For assistance on writing or submitting a proposal, potential proposers can contact the UC Berkeley Script Encoding Initiative ( http://linguistics.berkeley.edu/sei/ ). These guidelines will help you proceed once you have identified a given graphical unit as either a variant or an unencoded character. Determining this will require knowledge of the contents of the document that you have. The first case will be called annotation of a character, while the second case will be called adding of a new character. How to handle graphical units that represent variants will be discussed below ( 5.3 Annotating Characters ) while the problem of representing new characters will be dealt with in section 5.4 Adding New Characters . While there is some overlap between these requirements, distinct specialized markup constructs have been created for each of these cases. These constructs are presented in section 5.2 Markup Constructs for Representation of Characters and Glyphs below. 5.2 Markup Constructs for Representation of Characters and Glyphs An XML document can, in principle, contain any defined Unicode character. The standard allows these characters to be represented either directly, using an appropriate encoding (UTF-8 by default), or indirectly by means of a numeric character reference (NCR), such as &#196; (A-umlaut). The encoder can also restrict the range of characters which are represented directly in a document (or part of it) by adding a suitable encoding declaration. For example, if a document begins with the declaration <?xml encoding=\"iso-8859-1\"?> any Unicode characters which are not in the ISO-8859-1 character set must be represented by NCRs. The gaiji module defined by this chapter adds a further way of representing specific characters and glyphs in a document. (Gaiji is from Japanese 外字 , meaning external characters .) This allows the encoder to distinguish characters and glyphs which Unicode regards as identical, to add new nonstandard characters or glyphs, and to represent Unicode characters not available in the document encoding by an alternative means. The mechanism provided here consists functionally of two parts: an element g , which serves as a proxy for new characters or glyphs elements char and glyph , providing information about such characters or glyphs; these elements are stored in the charDecl element in the header. When the gaiji module is included in a schema, the charDecl element is added to the model.encodingDescPart class, and the g element is added to the phrase class. These elements and their components are documented in the rest of this section. The Unicode standard defines properties for all the characters it defines in the Unicode Character Database , knowledge of which is usually built into text processing systems. If the character represented by the g element does not exist in Unicode at all, its properties are not available. If the character represented is an existing Unicode character, but is not available in the document character set recognized by a given text processing system, it may also be convenient to have access to its properties in the same way. The char element makes it possible to store properties for use by such applications in a standard way. The list of attributes (properties) for characters is modelled on those in the Unicode Character Database, which distinguishes normative and informative character properties. The Unicode Consortium also maintains a separate set of character properties specific to East Asian characters in the Unihan database which TEI fully supports. Lastly, non-Unicode properties may also be supplied. Since the list of properties will vary with different versions of the Unicode Standard, there may not be an exact correspondence between them and the list of properties defined in these Guidelines. Usage examples for these elements are given below at 5.3 Annotating Characters and 5.4 Adding New Characters . The gaiji module itself is formally defined in section 5.10 Formal Definition below. It declares the following additional elements: < charDecl > provides information about nonstandard characters and glyphs. < g > represents a glyph, or a non-standard character. The following elements may appear within a charDecl element: < desc > contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented. < char > provides descriptive information about a character. < glyph > provides descriptive information about a character glyph. The char and glyph elements have similar contents and are used in similar ways, but their functions are different. The char element is provided to define a character which is not available in the current document character set, for whatever reason, as stated above. The glyph element is used to annotate a character that has already been defined somewhere (either in the document character set, or through a char element) by providing a specific glyph that shows how a character appeared in the original document. This is necessary since Unicode code points refer not to a single, specific glyph shape of a character, but rather to a set of glyphs, any of which may be used to render the code point in question; in some cases they can differ considerably. The glyph element is provided for cases where the encoder wants to specify a specific glyph (or family of glyphs) out of all possible glyphs. Unfortunately, due to the way Unicode has been defined, there are cases where several glyphs that logically belong together have been given separate code points, especially in the blocks defining East Asian characters. In such cases, glyph elements can also be used to express the view that these apparently distinct characters are to be regarded as instances of the same character (see further 5.3 Annotating Characters ). The Unicode Standard recommends naming conventions which should be followed strictly where the intention is to annotate an existing Unicode character, and which may also be used as a model when creating new names for characters or glyphs 2 : Within both char and glyph , the following elements are available: < gloss > identifies a phrase or word used to provide a gloss or definition for some other word or phrase. < unicodeProp > provides a Unicode property for a character (or glyph). < unihanProp > holds the name and value of a normative or informative Unihan character (or glyph) property as part of its attributes. < localProp > provides a locally defined character (or glyph) property. < desc > contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented. < mapping > contains one or more characters which are related to the parent character or glyph in some respect, as specified by the type attribute. < figure > groups elements representing or containing graphic information such as an illustration, formula, or figure. < note > contains a note or annotation. Four of these elements ( gloss , desc , figure , and note ) are defined by other TEI modules, and their usage here is no different from their usage elsewhere. The figure element, however, is used here only to link to an image of the character or glyph under discussion, or to contain a representation of it in SVG. The figure element may contain more than one graphic element, for example to provide images with different resolution, or in different formats, or may itself be repeated. As elsewhere, the mimeType attribute of graphic should be used to specify the format of the image. The mapping element is similar to the standard TEI equiv element. While the latter is used to express correspondence relationships between TEI concepts or elements and those in other systems or ontologies, the former is used to express any kind of relationship between the character or glyph under discussion and characters or glyphs defined elsewhere. It may contain any Unicode character, or a g element linked to some other char or glyph element, if, for example, the intention is to express an association between two non-standard characters. The type of association is indicated by the type attribute, which may take such values as exact for exact equivalences, uppercase for uppercase equivalences, lowercase for lowercase equivalences, standard for standardized forms, and simplified for simplified characters, etc., as in the following example: The mapping element may also be used to represent a mapping of the character or (more likely) glyph under discussion onto a character from the private use area as in this example: A more precise documentation of the properties of any character or glyph may be supplied using one of the three property elements: localProp , unicodeProp , or unihanProp ; these are described in the next section. 5.2.1 Character Properties The Unicode Standard documents ideal characters, defined by reference to a number of properties (or attribute-value pairs) which they are said to possess. For example, a lowercase letter is said to have the value Ll for the property General_Category . The Standard distinguishes between normative properties (i.e. properties which form part of the definition of a given character), and informative or additional properties which are not normative. It also allows for the addition of new properties, and (in some circumstances) alteration of the values currently assigned to certain properties. When making such modifications, great care should be taken not to override standard informative properties for characters which already exist in the Unicode Standard, as documented in Freytag (2006) . The unicodeProp , unihanProp , and localProp elements allow a TEI encoder to record information about a character or glyph: < unicodeProp > provides a Unicode property for a character (or glyph). < unihanProp > holds the name and value of a normative or informative Unihan character (or glyph) property as part of its attributes. < localProp > provides a locally defined character (or glyph) property. Where the information concerned relates to a property which has already been identified in the Unicode Standard, use of the appropriate Unicode property name with unicodeProp is strongly encouraged. The use of available Unihan property names with unihanProp is similarly encouraged. Validation rules for property names according to Unicode conventions are incorporated into the TEI schemas. Where neither of these standards suffices use localProp . The three elements for recording Unicode or locally defined properties belong to the att.gaijiProp class. This class defines two required attributes for record key-value pairs for character properties: < att.gaijiProp > provides attributes for defining the properties of non-standard characters or glyphs. @name provides the name of the character or glyph property being defined. @value provides the value of the character or glyph property being defined. provides the name of the character or glyph property being defined. provides the value of the character or glyph property being defined. For convenience, we list here some of the normative character properties and their values. For full information, refer to chapter 4 of The Unicode Standard , or the online documentation of the Unicode Character Database. The general category (described in the Unicode Standard chapter 4 section 5) is an assignment to some major classes and subclasses of characters. Suggested values for this property are listed here: Lu Letter, uppercase Ll Letter, lowercase Lt Letter, titlecase Lm Letter, modifier Lo Letter, other Mn Mark, nonspacing Mc Mark, spacing combining Me Mark, enclosing Nd Number, decimal digit Nl Number, letter No Number, other Pc Punctuation, connector Pd Punctuation, dash Ps Punctuation, open Pe Punctuation, close Pi Punctuation, initial quote Pf Punctuation, final quote Po Punctuation, other Sm Symbol, math Sc Symbol, currency Sk Symbol, modifier So Symbol, other Zs Separator, space Zl Separator, line Zp Separator, paragraph Cc Other, control Cf Other, format Cs Other, surrogate Co Other, private use Cn Other, not assigned This property applies to all Unicode characters. It governs the application of the algorithm for bi-directional behaviour, as further specified in Unicode Annex 9, The Bidirectional Algorithm . The following 21 different values are currently defined for this property: L Left-to-Right R Right-to-Left AL Right-to-Left Arabic EN European Number ES European Number Separator ET European Number Terminator AN Arabic Number CS Common Number Separator NSM Nonspacing Mark BN Boundary Neutral B Paragraph Separator S Segment Separator WS Whitespace ON Other Neutrals LRE Left-to-Right Embedding LRO Left-to-Right Override RLE Right-to-Left Embedding RLO Right-to-Left Override PDF Pop Directional Format LRI Left-to-Right Isolate RLI Right-to-Left Isolate FSI First Strong Isolate PDI Pop Directional Isolate This property exists for characters that are not used independently, but in combination with other characters, for example the strokes making up CJK (Chinese, Japanese, and Korean) characters. It records a class for these characters, which is used to determine how they interact typographically. The following values are defined in the Unicode Standard: (see Unicode Character Database: Canonical Combining Class Values ); these were taken from version 12.1: 0 Spacing, split, enclosing, reordrant, and Tibetan subjoined 1 Overlays and interior 7 Nuktas 8 Hiragana/Katakana voicing marks 9 Viramas 10 Start of fixed position classes 199 End of fixed position classes 200 Below left attached 202 Below attached 204 Below right attached 208 Left attached (reordrant around single base character) 210 Right attached 212 Above left attached 214 Above attached 216 Above right attached 218 Below left 220 Below 222 Below right 224 Left (reordrant around single base character) 226 Right 228 Above left 230 Above 232 Above right 233 Double below 234 Double above 240 Below (iota subscript) This property is defined for characters, which may be decomposed, for example to a canonical form plus a typographic variation of some kind. For such characters the Unicode standard specifies both a decomposition type and a decomposition mapping (i.e. another Unicode character to which this one may be mapped in the way specified by the decomposition type). The following types of mapping are defined in the Unicode Standard: font A font variant (e.g. a blackletter form) noBreak A no-break version of a space or hyphen initial An initial presentation form (Arabic) medial A medial presentation form (Arabic) final A final presentation form (Arabic) isolated An isolated presentation form (Arabic) circle An encircled form super A superscript form sub A subscript form vertical A vertical layout presentation form wide A wide (or zenkaku) compatibility character narrow A narrow (or hankaku) compatibility character small A small variant form (CNS compatibility) square A CJK squared font variant fraction A vulgar fraction form compat Otherwise-unspecified compatibility character This property applies for any character which expresses any kind of numeric value. Its value is the intended value in decimal notation. The mirrored character property is used to properly render characters such as U+0028, OPENING PARENTHESIS independent of the text direction: it has the value Y (character is mirrored) or N (code is not mirrored). The Unicode Standard also defines a set of informative (but non-normative) properties for Unicode characters. If encoders wish to provide such properties, they should be included using the Unicode name. If a Unicode name exists for a given character this should always be used, however encoders may also supply locally defined names. To tag a Unicode name, use unicodeProp name=\"Name\" (or unihanProp name=\"Name\"). For names specified elsewhere or specified locally use localProp . 5.3 Annotating Characters Annotation of a character becomes necessary when it is desired to distinguish it on the basis of certain aspects (typically, its graphical appearance) only. In a manuscript, for example, where distinctly different forms of the letter r can be recognized, it might be useful to distinguish them for analytic purposes, quite distinct from the need to provide an accurate representation of the page. A digital facsimile, particularly one linked to a transcribed and encoded version of the text, will always provide a superior visual representation (for information on how to link a digital facsimile to a transcribed text see 11.1 Digital Facsimiles ), but cannot be used to support arguments based on the distribution of such different forms. Character annotation as described here provides a solution to this problem. 3 Assuming that we wish to distinguish the variant glyphs from the standard representation for the character concerned, we will need to define distinct glyph elements, one for each of the forms of the letter we wish to distinguish: As can be seen in this example, the glyph element pointed to from the g element will be interpreted as an annotation on the content of the element g . This mechanism can be used to represent common manuscript abbreviations or ligatures, as in the following examples: With this markup in place, it will be possible to write programs to analyze the distribution of the different letters r as well as produce more faithful renderings of the original. It will also be possible to produce normalized versions by simply ignoring the annotation pointed to by the element g . For brevity of encoding, it may be preferred to predefine internal entities such as the following: The same technique may be used to represent particular abbreviation marks as well as to represent other characters or glyphs. For example, if we believe that the r-with-one-funny-stroke is being used as an abbreviation for receipt , this might be represented as follows: Note however that this technique employs markup objects to provide a link between a character in the document and some annotation on that character. Therefore, it cannot be used in places where such markup constructs are not allowed, notably in attribute values. Since the need to use these constructs to annotate or define characters occurs frequently in Chinese, Korean, and Japanese documents, here are some issues that are specific to these documents. There are two slightly different versions of the problem. In the first case, due to the way Unicode is defined, there are occasions when more than one glyph is defined for a character. In such an occasion, one might want to retain the character as used, but add information in a way so that a normalizer (for search or indexing operations) could take advantage of this information. To achieve this, we simply define within a charDecl element a glyph that has two mapping elements, as shown here: A slightly different, but related problem occurs when we have multiple variants, none of which has been defined in Unicode. In this case, we need to define one as a new character using char , and the others as glyphs using glyph . 5.4 Adding New Characters The creation of additional characters for use in text encoding is quite similar to the annotation of existing characters. The same element g is used to provide a link from the character instance in the text to a character definition provided within the charDecl element. This character definition takes the form of a char element. The element g itself will usually be empty, but could contain a code point from the Private Use Area (PUA) of the Unicode Standard, which is an area set aside for the very purpose of privately adding new characters to a document. Recommendations on how to use such PUA characters are given in the following section. In some circumstances, it may be desirable to provide a single precomposed form of a character that is encoded in Unicode only as a sequence of code points. For example, in Medieval Nordic material, a character looking like a lowercase letter Y with a dot and an acute-accent above it may be encountered so frequently that the encoder wishes to treat it as a single precomposed character with one single coded value. In the transcription concerned, the encoder enters this letter as &ydotacute; , which when the transcription is processed can then be expanded in one of three ways, depending on the mapping in force. The entity reference might be translated into the sequence of corresponding Unicode code points or into some locally-defined PUA character (say &#xE0A4; ) for local processing only. Both these options have disadvantages; the former loses the fact that the sequence of composed characters is regarded as a single object; the second is not reliably portable. Therefore, the recommended representation is to use the g element defined by the module defined in this chapter: The composition rules for ideographic characters typically require more complex rules than the &ydotacute; above. For these cases Unicode provides dedicated symbols to capture the composition in Ideographic Description Sequences (IDS). Encoders are strongly encouraged to provide IDS for each variant ideograph in the header component of the gaiji module to faciliated greater human and machine readability of rare or unencoded characters, as in the following example: Under certain circumstances, Chinese Han characters can be written within a circle. Rather than considering this as simply an aspect of the rendering, an encoder may wish to treat such circled characters as entirely distinct derived characters. For a given character (say that represented by the numeric-character reference &#x4EBA; ) the circled variant might conveniently be represented as In this example, the circled ideograph character has been defined with two mappings, and with two properties. The two properties are the Unicode-defined character-decomposition which specifies that this is a circled character, using the appropriate terminology (see 5.2.1 Character Properties above) and a locally defined property known as daikanwa. The two mappings indicate firstly that the standard form of this character is the character &#x4EBA; , and secondly that the character used to represent this character locally is the PUA character &#xE000; . For convenience of local processing this PUA character may in fact appear as content of the g element. In general, however, the g element will be empty. 5.5 How to Use Code Points from the Private Use Area The developers of the Unicode Standard have set aside an area of the codespace for the private use of software vendors, user groups, or individuals. As of this writing (Unicode 12.1), there are around 137,000 code points available in this area, which should be enough for most needs. No code point assignments will be made to this area by standard bodies and only some very basic default properties have been assigned (which may be overridden where necessary by the mechanism outlined in this chapter). Therefore, unlike all other code points defined by the Unicode Standard, PUA code points should not be used directly in documents intended for blind interchange. In the two previous examples, we mentioned that the variant characters concerned might well be assigned specific code points from the PUA. This might, for example, facilitate the use of a particular font which displays the desired character at this code point in the local processing environment. Since however this assignment would be valid only on the local site, documents containing such code points are unsuitable for blind interchange. During the process of preparing such documents for interchange, any PUA code points should be replaced by an appropriate use of the g element, such as g ref=\"#xxxx\", thus associating the character required with the documentation of it provided by the referenced char element. The PUA character used during the preparation of the document might be recorded in the char element, as shown in the example in 5.4 Adding New Characters , or retained as content of the g element. However, since there is no requirement that the same PUA character be used to represent it at the receiving site, and since it may well be the case that this other site has already made an assignment of some other character to the original PUA code point, it is best practice to remove the locally-defined PUA character. It is to be expected that a further translation into the local processing environment at the receiving site will be necessary to handle such characters, during which variant letters can be converted to hitherto unused code points on the basis of the information provided in the char element. This mechanism is rather weak in cases where DOM trees or parsed XML fragments are exchanged, which may increasingly be the case. The best an application can do here is to treat any occurrence of a PUA character only in the context of the local document and use the properties provided through the char element as a handle to the character in other contexts. In the fullness of time, a character may become standardized, and thus assigned a specific code point outside the PUA. Documents which have been encoded using the mechanism must at the least ensure that this changed code point is recorded within the relevant char element; it will however normally be simpler to remove the char element and replace all occurrences of g elements which reference it by occurrences of the newly coded character. 5.6 Writing Modes The scripts used for writing human languages vary not only in the glyphs they use, but also in the way (or ways) that those glyphs are arranged on the writing surface. For the majority of modern languages, writing is arranged as a series of lines which are to be read from top to bottom. Within each line, individual characters are frequently presented from left to right (English, Russian, Greek), but there are also several widely-used scripts which run right-to-left (Arabic, Hebrew). Writing in which the lines of glyphs are presented vertically and read from right to left is also often encountered, notably in East Asian scripts (Sinitic characters, Japanese Kana, Korean Hangul, Vietnamese chữ nôm). In many cases, a language normally uses the same writing mode (we use this term to refer to the orientation of individual glyphs within a line and the order in which glyphs and lines should be read), but there are exceptions in which the same language may appear in different modes, for example either vertically or horizontally. Many East Asian scripts were traditionally written from top to bottom within the line, with their lines sequenced from right to left. Although modern Japanese, Chinese, and Korean are often written horizontally, the traditional vertical writing mode is still widely used. There are also comparatively rare cases of ancient scripts written with lines running left to right, each line being read top to bottom (Ancient Uighur, classical Mongolian and Manchu), or scripts such as Ogham where the writing direction may start from the bottom left and run around the edge of an inscribed object. When different languages are combined, it is possible that different writing modes will be needed: for example, in Hebrew text, running right to left, sequences of Latin digits still run left to right. When different writing modes are available for the same language, it may be that different glyphs will be preferred when the script is used in different modes. For example, when Japanese is written horizontally, the Unicode character U+3001, the ideographic comma, is used in preference to Unicode character U+FE11, the vertical mode comma. This ensures that the comma appears in the correct position relative to the surrounding glyphs. Even for scripts which are usually written in exactly the same way, different writing modes may be encountered in particular contexts; for example when a language using Roman script is embedded within vertically-organized Chinese text, it may sometimes be displayed vertically and sometimes horizontally. The writing mode may also vary in response to layout constraints such as those imposed by a complex table, where column or row labels may be written vertically or diagonally to make the most effective use of available space, just as it may vary in response to the size and shape of the carrier in the case of a monumental inscription. For many, perhaps most, TEI documents there may be no need to encode the writing mode explicitly, even in so-called \"mixed mode\" texts containing passages written in languages which use different writing modes. Modern printed texts in most European languages, for instance, may be expected to use left-to-right/top-to-bottom directionality; while Arabic or Hebrew texts are expected to run right-to-left/top-to-bottom. In a TEI document, language and script are explicitly stated in the markup using the attribute xml:lang; this indication will usually imply a particular default writing mode. Even where this attribute is not used, passages in different scripts will use different Unicode characters, and will thus imply a particular default writing mode. Consider the case of an English text containing a few Arabic words: The Unicode Bidirectional Algorithm ( Unicode Consortium, 2017 ) defines a number of rules enabling software to render sequences of characters which have differing directionality properties in a predictable and reliable way, using only those properties. 4 . It should be remembered however that individual sequences of characters are always stored in a file in the order in which they should be read, irrespective of the order in which the characters making up a sequence should be displayed or rendered. For example, in a RTL language such as Hebrew, the first character in a file will be that which is displayed at the rightmost end of the first line of text. An encoder wishing to document or to control the order in which sequences of characters in a TEI document are displayed will usually do so by segmenting the text into sequences presented in the desired order and specifying an appropriate language code for each. In situations where this approach may result in ambiguity or lack of precision, or if the encoder wishes to record directional information explicitly in their encoding, we recommend using the global @style attribute to supply detail about the writing mode applicable to the content of any element. The style attribute (discussed in 1.3.1.1.3 Rendition Indicators ) permits use of any formatting language; for these purposes however, we recommend use of CSS, which includes a Writing Modes module 5 which permits direct specification of a number of useful properties associated with writing modes, notably direction ( ltr or rtl ); writing-mode ( horizontal-tb , vertical-rl , or vertical-lr ); and text-orientation ( mixed , upright , sideways ...) as well as properties affecting the behaviour of the unicode-bidi (bidirectional) algorithm. We discuss and exemplify how these properties may be used below. The global TEI style attribute applies to the element on which it is specified (and in most cases, its descendants). Rather than specify it on every element, it will often be more efficient to express sets of commonly-used styling rules as rendition elements in the teiHeader and then point to them using the global rendition attribute, as further discussed in 2.3.4.1 Rendition . Although the CSS specifications are mainly used to provide instructions for software when rendering a digital text, they also provide a useful means of describing the visual properties of a pre-existing document in a formal and standardized way. The next section presents some examples of how CSS can be used to describe a variety of writing modes. A full description of the appearance of a document will probably include many other properties of course. 5.7 Examples of Different Writing Modes The CSS recommendations provides several properties which can be used to encode aspects of the \"writing mode\". The most useful of these is the property \"writing-mode\" which may be used to specify a reading-order for both characters within a single line and lines within a single block of text. The property \"text-orientation\" may also used to indicate the orientation of individual characters with respect to the line, and the property \"direction\" to determine the reading order of characters within a line only. We give some examples of each below. 5.7.1 Vertical Writing Modes The writing-mode property is particularly useful for languages which can be written in different writing modes, such as Chinese and Japanese. Its possible values include horizontal-tb , vertical-rl and vertical-lr . Each value has two components: horizontal or vertical specifies the inline writing direction, while the second component specifies the direction in which lines in a block, and blocks in a sequence are arranged: from top to bottom (as in most European languages, in which lines and paragraphs are arranged from top to bottom on a page), from right to left (as in the case of Japanese written vertically), or left-to-right (as in the case of Mongolian). The following example shows three versions of the same poem: first in Japanese, written top to bottom; next in romaji (Japanese in Latin script); and finally in an English translation. We might encode this as follows: For the sake of simplicity, we have not attempted to capture in this encoding such aspects as the indenting of lines in the first Japanese version, or the central alignment of the other two versions, nor any other renditional features such as font weight or size etc. The Japanese transcription has writing-mode: vertical-rl , which is required because Japanese may be written either in this mode or horizontally. The transcription in romaji uses the attribute xml:lang to supply a value of ja-Latn, indicating Japanese written in Latin script. Its style attribute specifies a horizontal writing mode; this may seem superfluous, but vertically-written romaji is not unknown. 5.7.2 Vertical Text with Embedded Horizontal Text When Japanese is written vertically, the glyph orientation remains the same as when it is written horizontally. In other words, glyphs are not rotated (although as noted above some different glyphs may be used for some characters, in particular for punctuation which needs to be positioned differently in vertical and in horizontal text). However, it is very common for languages written vertically to have embedded runs of text from languages which are normally written horizontally. This raises the issue of the orientation of the glyphs from the horizontal language. Are they written upright, as they would normally appear in horizontal text runs, or are they rotated? Consider this fragment from a Japanese article about the Indonesian language, which takes the form of a glossary list: The text-orientation property allows us to indicate whether or not glyphs are rotated. In the following example, we have indicated that the list uses a vertical-rl writing mode, but that the orientation of individual glyphs may vary: The rule text-orientation: mixed specifies that characters from horizontal-only scripts are set sideways, i.e. 90° clockwise from their standard orientation in horizontal text. Characters from vertical scripts are set with their intrinsic orientation ( fantasai 2014 ). Since the default value for text-orientation is mixed , this rule is not strictly required. However, if the Indonesian glyphs (which are roman characters) had been set vertically, like this: then an encoding like the following could be used to make this explicit: The rule text-orientation: upright specifies that characters from horizontal-only scripts are rendered upright, i.e. in their standard horizontal orientation. Characters from vertical scripts are set with their intrinsic orientation and shaped normally ( fantasai 2014 ). 5.7.3 Vertical Orientation in Horizontal Scripts It is not unusual to see text from horizontal languages written vertically even where no vertically-written script is involved. This example is a fragment from a table of information about agricultural development on Vancouver Island, written in 1855: Four of the subheading cells in this fragment contain English text written vertically, bottom-to-top, to conserve space on the page. To describe this sort of phenomenon, we can use the text-orientation property again: text-orientation: mixed | upright | sideways-right | sideways-left | sideways | use-glyph-orientation For full details on this property, we refer the reader to the CSS Writing Modes specification. For the present example, we will make use only of the sideways-left value, which causes text to be set as if in a horizontal layout, but rotated 90° counter-clockwise. We might encode the third of the four cells containing vertical text like this: The writing-mode property captures the fact that the script is written vertically, and its lines are to be read from left to right (so the line containing of is to the right of that containing Cash value ), while the text-orientation value encodes the orientation (rotated 90° counter-clockwise). We might also add text-align: center to the style, to express the fact that the text is centrally-aligned. 5.7.4 Bottom-to-top Writing Of the rather small number of scripts which appear to be written bottom-to-top, perhaps the best-known is Ogham, an alphabet used mainly to write Archaic Irish. Ogham is typically found inscribed along the edge of a standing stone, starting at its base. The CSS Writing Modes specification does not explicitly distinguish between vertical scripts which are written top-to-bottom and those which are written bottom-to-top. Instead, such bottom-to-top scripts are best treated as left-to-right horizontal scripts, oriented vertically because of the constraints of the medium on which they are inscribed. Such scripts are analogous to the vertical English text-runs in the table cells in the example above, and can be handled in exactly the same manner ( writing-mode: vertical-lr; text-orientation: sideways-left ). In cases where writing follows a curved path (such as Ogham running around the edge of a stone), a meticulous encoder might resort to the use of SVG to describe the path, rather than treating the phenomenon as a writing mode. 5.7.5 Mixed Horizontal Directionality Returning to our previous simple example we could use the direction property to make directionality explicit: direction: ltr | rtl The use of the direction property to record the observed directionality of the text is unambiguous, even though it is (as we noted above) superfluous. The use of the unicode-bidi property here may require some explanation. By default this property has the value normal, the effect of which in this context would be to ignore any value supplied for the direction property. The CSS Writing Modes specification stipulates that the direction property has no effect on bidi reordering when specified on inline boxes whose unicode-bidi property’s value is normal, because the element does not open an additional level of embedding with respect to the bidirectional algorithm. Mixed horizontal directionality is very common in languages such as Arabic and Hebrew, particularly when numbers (which are always given LTR) or phrases from LTR languages are embedded. It is not impossible, though quite unusual, for ambiguities to arise in such situations, which may give rise to the parts of a document being displayed in unexpected ways that do not correspond to the natural reading order. A more detailed discussion of this issue from an HTML perspective is provided by a W3C Internationalization Working Group report Inline markup and bidirectional text in HTML . 5.7.6 Summary For most texts, information about text directionality need not be explicitly encoded in a TEI text, either because it follows unambiguously from xml:lang values, or because it can be expected to be handled unequivocally by the Unicode Bidi Algorithm. Where it is considered important to encode such information, properties and values taken from the CSS Writing Modes module may be used by means of the global TEI style attribute (or using the TEI rendition element, linked with the rendition attribute). Most phenomena can be well described in this way; of those which cannot, other approaches based on the CSS Transforms module are presented in the next section. 5.8 Text Rotation In what follows, we examine a range of textual phenomena which in some ways appear very similar to those examined above, and even overlap with them. We can categorize these as text transformation features, and suggest some strategies for encoding them based on the properties detailed in the CSS Transforms (Fraser et al 2013) specification. This CSS module provides a complex array of properties, values and functions which can be used to rotate, skew, translate and otherwise transform textual and graphical objects. We can borrow this vocabulary in order to describe textual phenomena in a precise manner. We begin with a simple example of a rotational transform: Here a block of text has been rotated around its z-axis. This is clearly not a writing mode; the writing mode for this text is horizontal, left to right. Furthermore, even if we wished to treat this as a writing mode, we could not do so, because there is no way to use writing modes properties to describe an text orientation which is angled at 45 degrees; no human languages are consistently written in this orientation. It is more appropriate to treat this as a rotational transformation. We can do this using two properties: transform and transform-origin . (Both of these properties have quite complex value sets, and we will not look at all of them here. See the specification for full details.) The transform property takes as its value one or more of the transform functions, one of which is the function rotateZ() : Any rotation must take place clockwise around an axis positioned relative to the element being rotated, and the transform-origin property can be used to specify the pivot point. By default, the value of transform-origin is 50% 50%, the point at the centre of the element, but these values can be changed to reflect rotation around a different origin point. (The TEI zone element also bears an attribute rotate which can specify rotation in degrees around the z-axis, but it is not available for any other element.) A block of text may also be rotated about either of its other axes. For example, this shows rotation around the Y (vertical) axis: These are obviously trivial examples, but similar features do appear in historical texts. George Herbert's The Temple includes two stanzas headed Easter Wings which are both normally printed in a rotated form so that they represent a pair of wings: This could be encoded thus: We might also argue that this is in fact a vertical writing mode by supplying writing-mode: vertical-rl; text-orientation: sideways-right as the value for the style attribute in the preceding example. Rotation is also useful as a method of handling a true writing mode which is not covered by the CSS Writing Modes: boustrophedon . This is a writing mode common in inscriptions in Latin, Greek and other languages, in which alternate lines run from left to right and from right to left 6 . Right-to-left lines in boustrophedon have another unexpected feature: their glyphs are reversed, so that these lines appear as mirror writing, as in the following ancient Greek inscription: This might be transcribed as follows (ignoring word boundaries for the moment): The 180-degree rotation around the Y (vertical) axis here describes what is happening in the RTL line in boustrophedon; the order of glyphs is reversed, and so is their individual orientation (in fact, we see them from the back, as it were). seg elements have been used here because these are clearly not lines in the sense of poetic lines; the text is continuous prose, and linebreaks are incidental. There are obviously some unsatisfactory aspects of this manner of encoding boustrophedon. In the inscription above, some words run across linebreaks, so if we wished to tag both words and the right-to-left phenomena, one hierarchy would have to be privileged over the other. By using a transform function rather than a writing mode property, we are apparently suggesting that boustrophedon is not in fact a writing mode, whereas it clearly is. But the CSS Writing Modes specification does not provide support for boustrophedon, because it is a rather obscure historical phenomenon; using a rotational transform is one practical alternative. 5.9 Caveat As with other parts of the CSS specification, the intended effect of CSS Transforms properties and values is defined with reference to a specific Visual formatting model ; the language is designed to describe how an HTML document should be formatted. This is not, of course, the case for the TEI, which lacks any explicit processing or formatting model, and attempts to define objects as far as possible without consideration of their visual appearance. As long as the properties and values from the CSS Transforms module are used as a convenient, well-specified descriptive language to capture features of a text, without any expectation of using them directly and reliably for rendering, this is not particularly problematic. CSS provides a useful and well-defined vocabulary to describe many aspects of the appearance of source texts, benefitting particularly from the clarity of definition provided by the specification. However, if there is any expectation of using this information to render a text in a predictable and accurate way, it will be essential to provide enough styling information throughout the document hierarchy to resolve all ambiguities with regard to size, positioning, block status, etc. before any element undergoes a transform operation. 5.10 Formal Definition The gaiji module described in this chapter makes available the following components: Character and Glyph Documentation Character and glyph documentation The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . ","title":"<span class=\"tei-div7 breadcrumb\">5 Characters, Glyphs, and Writing Modes</span>"}
{"link":"p5.xml?id=VE","tag":"guidelines","content":"6 Verse This module is intended for use when encoding texts which are entirely or predominantly in verse, and for which the elements for encoding verse structure already provided by the core module are inadequate. The tags described in section 3.13.1 Core Tags for Verse include elements for the encoding of verse lines and line groups such as stanzas: these are available for any TEI document, irrespective of the module it uses. Like the modules for prose and for drama, the module for verse additionally makes use of the module defined in chapter 4 Default Text Structure to define the basic formal structure of a text, in terms of front , body and back elements and the text-division elements into which these may be subdivided. The module for verse extends the facilities provided by these modules in the following ways: a special purpose caesura element is provided, to allow for segmentation of the verse line (see section 6.2 Components of the Verse Line ) a set of attributes is provided for the encoding of rhyme scheme and metrical information (see sections 6.4 Rhyme and Metrical Analysis and 6.5 Rhyme ) a special purpose rhyme element is provided to support simple analysis of rhyming words (see section 6.5 Rhyme ) 6.1 Structural Divisions of Verse Texts Like other kinds of text, texts written in verse may be of widely differing lengths and structures. A complete poem, no matter how short, may be treated as a free-standing text, and encoded in the same way as a distinct prose text. A group of poems functioning as a single unit may be encoded either as a group or as a text , depending on the encoder's view of the text. For further discussion, including an example encoding for a verse anthology, see chapter 4 Default Text Structure . Many poems consist only of ungrouped lines. This short poem by Emily Dickinson is a simple case: Often, however, lines are grouped, formally or informally, into stanzas, verse paragraphs, etc. The lg element defined in the core tag set (in section 3.13.1 Core Tags for Verse ) may be used for all such groupings. It may thus serve for informal groupings of lines such as those of the following example from Allen Ginsberg: It may also be used to mark the verse paragraphs into which longer poems are often divided, as in the following example from Samuel Taylor Coleridge's Frost at Midnight : Most typically, however, the lg element is used to mark the highly regular line groups which characterize stanzaic and similar verse forms, as in the following example from Chaucer: Like other text-division elements, lg elements may be nested hierarchically. For example, one particularly common English stanzaic form consists of a quatrain or sestet followed by a couplet. The lg element may be used to encode both the stanza and its components, as in the following example from Byron: Note the use of the type attribute to name the type of unit encoded by the lg element; this attribute is common to all members of the att.divLike class (see section 4.1.1 Un-numbered Divisions ). 1 When used on lg , the type attribute is intended solely for conventional names of different classes of text block. For systematic analysis of metrical and rhyme schemes, use the met and rhyme attributes, for which see below, section 6.4 Rhyme and Metrical Analysis . As a further example, consider the Shakespearean sonnet. This may be divided into two parts: a concluding couplet, and a body of twelve lines, itself subdivided into three quatrains: Particularly lengthy poetic texts are often subdivided into units larger than stanzas or paragraphs, which may themselves be subdivided. Spenser's Faery Queene , for example, consists of twelve books each of which contains a prologue followed by twelve cantos. Each prologue and each canto consists of nine-line stanzas, each of which follows the same regular pattern. Other examples in the same tradition are easy to find. Large structures of this kind are most conveniently represented by div or div1 elements, as described in section 4.1 Divisions of the Body . Thus the start of the Faerie Queene might be encoded as follows: One reason for using div rather than lg elements is that the former may contain non-metrical elements, such as epigraphs or dedications and other members of the model.divTop class, whereas lg elements may contain only headings or metrical lines. 6.2 Components of the Verse Line It is often convenient for various kinds of analysis to encode subdivisions of verse lines. The general purpose seg element defined in the tag set for segmentation and alignment (section 16.3 Blocks, Segments, and Anchors ) is provided for this purpose: < seg > represents any segmentation of text below the chunk level. To use this element together with the module for verse, the module for segmentation and alignment must also be enabled as further described in section 1.2 Defining a TEI Schema . In Old and Middle English alliterative verse, individual verse lines are typically split into half lines. The seg element may be used to mark these explicitly, as in the following example from Langland's Piers Plowman : The seg element can be nested hierarchically, in the same way as the lg element, down to whatever level of detailed structure is required. In the following example, the line has been divided into feet , each of which has been further subdivided into syllables. 2 The seg element may be used to identify any subcomponent of a line which has content; its type attribute may characterize such units in any way appropriate to the needs of the encoder. For the specific case of labeling each foot with its formal type ( dactyl , spondee , etc.), and each syllable with its metrical or prosodic status (syllables bearing primary or secondary stress, long syllables, short syllables), however, the specialized attributes met and real are defined, which provide a more systematic framework than the type attribute; see section 6.4 Rhyme and Metrical Analysis below. In classical verse, a hexameter like that above may also be formally divided into two cola or hemistiches. This example provides a typical case, in that the boundary of the first colon falls in the middle of one of the feet (between the syllables no and Tro ). If both kinds of segmentation are required, the part attribute might be used to mark the overlapping structure as follows. Instead of using the part attribute on the seg element, it might be simpler just to mark the point at which the caesura occurs. An additional element is provided for analyses of this kind, in which what is to be marked are points between the words , which have some significance within a verse line: < caesura > marks the point at which a metrical line may be divided. As an example of the caesura element, we refer again to the example from Langland. An encoder might choose simply to record the location of the caesura within each line, rather than encoding each half-line as a segment in its own right, as follows: Logically, the opposite of caesura might be considered to be enjambement . When the verse module is included in a schema, an additional class called att.enjamb is defined as follows: < att.enjamb > provides attributes that may be used to indicate enjambement of the parent element. @enjamb indicates that the end of a verse line is marked by enjambement. indicates that the end of a verse line is marked by enjambement. 6.3 Encoding Textual Structures Across Verses It is possible that certain textual structures may span multiple lines of verse, either by incorporating more than one, or by crossing line hierarchy. This is common, for example, when lines contain reported thought or speech (i.e. said ), or other forms of quotation (i.e. q ). For these cases, it is recommended practice to fragment and reconstruct the elements representing the textual structures. The following example from Margaret Cavendish's Nature's Pictures shows speech encoded across two lines reconstructed by chaining elements with prev and next attributes: Alternatively, the elements may be reconstructed with stand-off markup using the element join : A more general discussion of these and other strategies to deal with fragmentation and reconstruction appears in section 20.3 Fragmentation and Reconstitution of Virtual Elements . 6.4 Rhyme and Metrical Analysis When the module for verse is in use, the following additional attributes are available to record information about rhyme and metrical form: < att.metrical > defines a set of attributes that certain elements may use to represent metrical information. @met contains a user-specified encoding for the conventional metrical structure of the element. @real contains a user-specified encoding for the actual realization of the conventional metrical structure applicable to the element. @rhyme specifies the rhyme scheme applicable to a group of verse lines. contains a user-specified encoding for the conventional metrical structure of the element. contains a user-specified encoding for the actual realization of the conventional metrical structure applicable to the element. specifies the rhyme scheme applicable to a group of verse lines. These attributes may be attached to the lg element, or to the higher-level text-division elements div , div1 , etc. In general, the attributes should be specified at the highest level possible; they may not however be specifiable at the highest level if some of the subdivisions of a text are in prose and others in verse. All these attributes may also be attached to the l and seg elements, but the default notation for the rhyme attribute has no defined meaning when specified on l or seg . The value for these attributes may take any form desired by the encoder, but the nature of the notation used will determine how well the attribute values can be processed by automatic means. The primary function of the metrical attributes is to encode the conventional metrical or rhyming structure within which the poet is working, rather than the actual prosodic realization of each line; the latter can be recorded using the real attribute, as further discussed below. A simple mechanism is also provided for recording the actual realization of a rhyme pattern; see 6.5 Rhyme . 6.4.1 Sample Metrical Analyses As a simple example of the use of these attributes, consider the following lines from Pope's Essay on Criticism : This text is written entirely in heroic couplets ; each line is an iambic pentameter (which, using a common notation, can be described with the formula -+|-+|-+|-+|-+/, each - denoting a metrically unstressed syllable, each + a metrically stressed one, each | a foot boundary, and the / a line-end), and the couplets rhyme (which can be represented with the conventional formula aa). Because both rhyme pattern and metrical form are consistent throughout the poem, they may be conveniently specified on the div element; the values given for the attributes will be inherited by any metrical unit contained within the div elements of this poem, and must be interpreted in the appropriate way. Since the notation used in the met, real, and rhyme attributes is user-defined, no binding description can be given of its details or of how its interpretation must proceed. (A default notation is provided for the rhyme attribute, which however the encoder can replace with another; see section 6.5 Rhyme .) It is expected, however, that software should be able to support these attributes in useful ways; the more intelligent the software is, and the more knowledge of metrics is built into it, the better it will be able to support these attributes. In the extract given above, for example, the met and rhyme attribute values specified on the div element are inherited directly by the lg elements nested within it. Since the met value specifies the metrical form of a single verse line, the structure of the lg as a whole is understood to involve as many repetitions of the pattern as there are lines in the verse paragraph. The same attribute value, when inherited in turn by the l element, must be understood not to repeat. With sufficiently sophisticated software, segments within the line might even be understood as inheriting precisely that portion of the formula which applies to the segment in question; this will, however, be easier to accomplish for some languages than for others. The rhyme attribute in this example uses the default notation to specify a rhyme scheme applicable only to pairs of lines. As elsewhere, the default notation for the rhyme attribute has no meaning for metrical units at the line level or below. In verse forms where line-internal rhyme is structurally significant, e.g. in some skaldic poetry, the default notation is incapable of expressing the required information, since the rhyme pattern may need to be specified for units smaller than the line. In such cases, a user-specified rhyme notation must be substituted for the default notation, or else the rhyme pattern must be described using some alternative method (e.g. by using the link mechanism described below). The precise semantics of the met attribute and the inferences which software is expected or able to draw from it, are implementation-dependent; so are the semantics and processing of the rhyme attribute, when user-specified notations are used. A formal definition of the significance of each component of the pattern given as the value of the met attribute may be provided in the metDecl element within the encodingDesc element in the TEI header (see section 6.6 Metrical Notation Declaration ). The encoder is free to invent any notation appropriate to his or her analytic needs, provided that it is adequately documented in this element. The notation may define metrical components using invented or traditional names (such as iamb or hexameter ) or in terms of basic units such as codes for stressed or unstressed syllables, or a combination of the two. The real (for realization ) attribute may optionally be specified to indicate any deviation from the pattern defined by the met attribute which the encoder wishes to record. By default, the real attribute has the same value as the met attribute on the same element; it is only necessary to provide an explicit value when the realization differs in some way from the abstract metrical pattern. The tension between conventional metrical pattern and its realization may thus be recorded explicitly. For example, many readers of the above passage would stress the word But at the beginning of the third line rather than the word of following it, as the metrical pattern would normally require. This variation might be encoded as follows: Where the real attribute is used to over-ride the default or conventional metrical pattern, it applies only to the element on which it is specified. The default pattern for any subsequent lines is unaffected. As it happens, this particular kind of variation is very common in the English iambic pentameter—it even has a name: trochaic substitution —an encoder might therefore choose to regard this not as an instance of a variant realization, but as an instance of a variant metrical form: In choosing whether to over-ride a metrical specification in this way or by using the real attribute, the encoder is required to determine whether the change is a systematic or conventional one (as in this example) or an occasional variation, perhaps for local effect. In the following example, from Goethe's Auf dem See , the variation is a matter of local realization: 6.4.2 Segment-Level versus Line-level Tagging The examples given so far have encoded information about the realization of metrical conventions at the level of the whole verse-line. This has obvious advantages of simplicity, but the disadvantage that any deviation from metrical convention is not marked at its precise point of occurrence in the text. Greater precision may be achieved, but only at the cost of marking deviant metrical units explicitly. This may be done with the seg element, giving the variant realization as the value of the real attribute on that element. Using this method, the example given immediately above might be encoded as follows: There are circumstances where it may also be useful to use the met attribute of seg . If we wish to identify the exact location of the different types of foot in the first line of Virgil's Aeneid , the text could be encoded as follows (for simplicity's sake the caesura has been omitted): 6.4.3 Metrical Analysis of Stanzaic Verse The method described above may be used to encode quite complex verse forms, for instance various kinds of fixed-form stanzas. Let us take one of Dante's canzoni, in which each stanza except the last has the same combination of eleven-syllable and seven-syllable lines, and the same rhyme scheme: Here the met attribute specifies a metrical pattern for each of the twenty-one lines making up a stanza of the canzone . Each stanza inherits this definition from the parent div element. The rhyme attribute specifies a rhyme scheme for each stanza, in the same way. In the metrical notation used here, the letter E represents a line containing nine syllables which may or may not be metrically prominent, a tenth which is prominent and an optional non-prominent eleventh syllable. The letter S is used to represent a line containing five syllables which may or may not be metrically prominent, a sixth which is prominent and an optional non-prominent seventh syllable. A suitable definition for this notation might be given by a metDecl element like the following: As noted above, the metrical pattern specified on the div applies to each lg (stanza) element contained within the div . In fact however, after seven stanzas of this type, there is a final stanza, known as a commiato or envoi, which follows a different metrical and rhyming scheme. The solution to this problem is simply to specify a new met attribute on the eighth stanza itself, which will override the default value inherited from parent div , as follows: Note that, in the same way as for the real attribute, over-riding of this kind does not affect subsequent elements at the same hierarchic level. Any lg element following the commiato above would be assumed to use the same metrical and rhyming scheme as the one preceding the commiato . Moreover, although it is quite regular (in the sense that the last stanza of each canzone is a commiato ), the over-riding must be specified for each case. 6.5 Rhyme The rhyme attribute is used to specify the rhyme pattern of a verse form. It should not be confused with the rhyme element, which is used to mark the actual rhyming word or words: < rhyme > marks the rhyming part of a metrical line. Like the met attribute, the rhyme attribute can be used with a user-specified notation documented by the metDecl element in the TEI header. Unlike met, however, the rhyme attribute has a default notation; if this default notation is used, no metDecl element need be given. The default notation for rhyme offers the ability to record patterns of rhyming lines, using the traditional notation in which distinct letters stand for rhyming lines. For a work in rhyming couplets, like the Pope example above, the rhyme attribute simply specifies aa, indicating that pairs of adjacent lines rhyme with each other. For a slightly more complex scheme, applicable to groups of four lines, in which lines 1 and 3 rhyme, as do lines 2 and 4, this attribute would have the value abab. The traditional Spenserian stanza has the pattern ababbcbcc, indicating that within each nine line stanza, lines 1 and 3 rhyme with each other, as do lines 2, 4, 5 and 7, and lines 6, 8 and 9. Non-rhyming lines within such a group may be represented using a hyphen or an x, as in the following example: The rhyme element may be used to mark the words (or parts of words) which rhyme according to a predefined pattern: The label attribute is used to specify which parts of a rhyme scheme a given set of rhyming words represent: Within a given scope, all rhyme elements with the same value for their label attribute are assumed to rhyme with each other: thus, in the above example, the two rhymes labelled a in the first stanza rhyme with each other, but not necessarily with those labelled a in the second stanza. The scope is defined by the nearest ancestor element for which the rhyme attribute has been supplied. The rhyme element can appear anywhere within a verse line, and not necessarily around a single word. It can thus be used to mark quite complex internal rhyming schemes, as in the following example: This mechanism, although reasonably simple for simple cases, may not be appropriate for more complex applications. In general, rhyme may be considered as a special form of correspondence, and hence encoded using the mechanisms defined for that purpose in section 16.5 Correspondence and Alignment . Similar considerations apply to other metrical features such as alliteration or assonance. To use the correspondence mechanisms to represent the complex rhyming pattern of the above example, each rhyme element must be given a unique identifier, as follows: For further discussion of the link and linkGrp element, see section 16.5 Correspondence and Alignment . The rhyme and caesura phrase level elements are made available by the model.lPart class when the module defined by this chapter is included in a schema. 6.6 Metrical Notation Declaration When the module defined in this chapter is included in a schema, a specialized element is optionally available in the encodingDesc element of the TEI header to document the metrical notation used in marking up a text. < metDecl > documents the notation employed to represent a metrical pattern when this is specified as the value of a met, real, or rhyme attribute on any structural element of a metrical text (e.g. lg , l , or seg ). < metSym > documents the intended significance of a particular character or character sequence within a metrical notation, either explicitly or in terms of other metSym elements in the same metDecl . As with other components of the header, metrical notation may be specified either formally or informally. In a formal specification, every symbol used in the metrical notation must be documented by a corresponding metSym element; in an informal one, only a brief prose description of the way in which the notation is used need be given. In either case, the optional pattern attribute may be used to supply a regular expression which a processor can use to validate expressions in the intended notation. The following constraints apply: if pattern is supplied, any notation used which does not conform to it should be regarded as invalid if any metSym is defined, then any notation using undefined symbols should be regarded as invalid if both pattern and symbol are defined, then every symbol appearing explicitly within pattern must be defined symbols which are not matched by pattern may be defined within a metDecl element As a simple example, consider the case of the notation in which metrical prominence, metrical feet, and line boundaries are all to be encoded. Legal specifications in this notation may be written for any sequence of metrically prominent or non-prominent features, optionally separated by foot or metrical line boundaries at arbitrary points. Assuming that the symbol 1 is used for metrical prominence, 0 for non-prominence, | for foot boundary and / for line boundary, then the following declaration achieves this objective: The same notation might also be specified less formally, as follows: For more complex cases, it will often be more convenient to define a notation incrementally. The terminal attribute should be used to indicate for a given symbol whether or not it may be re-defined in terms of other symbols used within the same notation. For example, here is a notation for encoding classical metres, in which symbols are provided for the most common types of foot. These symbols are themselves documented within the same notation, in terms of more primitive long and short syllables: Where an encoder wishes to use more than one different pattern for metrical notation, multiple metDecl elements may be included in the encodingDesc , each supplied with an xml:id. The decls attribute may be used in the text of the document to specify which metDecl is in force at a particular point in the text. In this example, two metDecl s are defined in the header, one with an English verse pattern and one with a French pattern. In the body of the document, there are two div elements, one declaring the English pattern and one the French: 6.7 Encoding Procedures for Other Verse Features A number of procedures that may be of particular concern to encoders of verse texts are dealt with elsewhere in these guidelines. Some aspects of layout and physical appearance, especially important in the case of free verse, are dealt with in chapter 11 Representation of Primary Sources . Some initial recommendations for the encoding of phonetic or prosodic transcripts, which may be helpful in the analysis of sound structures in poetry, are to be found in chapter 8 Transcriptions of Speech ; it may also be found convenient to use standard entity names (those proposed for the International Phonetic Alphabet suggest themselves) to mark positions of suprasegmentals such as primary and secondary stress, or other aspects of accentual structure. As already indicated, chapter 16 Linking, Segmentation, and Alignment contains much which will be found useful for the aligning of multiple levels of commentary and structure within verse analysis. Encoders of verse (as of other types of literary text) will frequently wish to attach identifying labels to portions of text that are not part of a system of hierarchical divisions, may overlap with one another, and/or may be discontinuous; for instance passages associated with particular characters, themes, images, allusions, topoi, styles, or modes of narration. Much of the computerized analysis of verse seems likely to require dividing texts up into blocks in this way. The span element discussed in 17.3 Spans and Interpretations provides the means for doing this. Finally, the procedures for the tagging of feature structures, described in chapter 18 Feature Structures , provide a powerful means of encoding a wide variety of aspects of verse literature, including not only the metrical structures discussed above, but also such stylistic and rhetorical features as metaphor. For other features it must for the time being be left to encoders to devise their own terminology. Elements such as metaphor tenor=\"...\" vehicle=\"...\" ... /metaphor might well suggest themselves; but given the problems of definition involved, and the great richness of modern metaphor theory, it is clear that any such format, if predefined by these Guidelines, would have seemed objectionable to some and excessively restrictive to many. Leaving the choice of tagging terminology to individual encoders carries with it one vital corollary, however: the encoder must be utterly explicit, in the TEI header, about the methods of tagging used and the criteria and definitions on which they rest. Where no formal elements are currently proposed, such information may readily be given as simple prose description within the encodingDesc element defined in section 2.3 The Encoding Description . 6.8 Module for Verse The module described in this chapter makes available the following components: Verse Verse structures The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">6 Verse</span>"}
{"link":"p5.xml?id=DR","tag":"guidelines","content":"7 Performance Texts This module is intended for use when encoding printed dramatic texts, screen plays or radio scripts, and written transcriptions of any other form of performance. Section 7.1 Front and Back Matter discusses elements such as cast lists, which can appear only in the front or back matter of printed dramatic texts. Section 7.2 The Body of a Performance Text discusses the structural components of performance texts: these include major structural divisions such as acts and scenes (section 7.2.1 Major Structural Divisions ); individual speeches (section 7.2.2 Speeches and Speakers ); groups of speeches (section 7.2.3 Grouped Speeches ); stage directions (section 7.2.4 Stage Directions ); and the elements making up individual speeches (section 7.2.5 Speech Contents ). Section 7.2.6 Embedded Structures discusses ways of encoding units which cross the simple hierarchic structure so far defined, such as embedded songs or masques. Finally, section 7.3 Other Types of Performance Text discusses a small number of additional elements characteristic of screen plays and radio or television scripts, as well as some elements for representing technical stage directions such as lighting or blocking. The default structure for dramatic texts is similar to that defined by chapter 4 Default Text Structure , as further discussed in section 7.2.1 Major Structural Divisions . Two element classes are used by this module. The model.frontPart.drama class supplies specialized elements which can appear only in the front or back matter of performance texts. The model.stageLike class supplies a set of elements for stage directions and similar items such as camera movements, which can occur between or within speeches. 7.1 Front and Back Matter In dramatic texts, as in all TEI-conformant documents, the header element is followed by a text element, which contains optional front and back matter, and either a body or else a group of nested text elements. For more information on these, see chapter 4 Default Text Structure . The front and back elements are most likely to be of use when encoding preliminary materials in published performance texts. When the module defined by this chapter is included in a schema, the following additional elements not generally found in other forms of text become available as part of the front or back matter: < performance > contains a section of front or back matter describing how a dramatic piece is to be performed in general or how it was performed on some specific occasion. < prologue > contains the prologue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. < epilogue > contains the epilogue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. < set > contains a description of the setting, time, locale, appearance, etc., of the action of a play, typically found in the front matter of a printed performance text (not a stage direction). < castList > contains a single cast list or dramatis personae. Elements for encoding each of these specific kinds of front matter are discussed in the remainder of this section, in the order given above. In addition, the front matter of dramatic texts may include the same elements as that of any other kind of text, notably title pages and various kinds of text division, as discussed in section 4.5 Front Matter . The encoder may choose to ignore the specialized elements discussed in this section and instead use constructions of the type div type=\"performance\" or div1 type=\"set\". Most other material in the front matter of a performance text will be marked with the default text structure elements described in chapter 4 Default Text Structure . For example, the title page, dedication, other commendatory material, preface, etc., in a printed text should be encoded using div or div1 elements, containing headings, paragraphs, and other core tags. 7.1.1 The Set Element A special form of note describing the setting of a dramatic text (that is, the time and place of its action) is sometimes found in the front matter. < set > contains a description of the setting, time, locale, appearance, etc., of the action of a play, typically found in the front matter of a printed performance text (not a stage direction). 7.1.2 Prologues and Epilogues Many plays in the Western tradition include in their front matter a prologue, spoken by an actor, generally not in character. Similar speeches often also occur at the end of the play, as epilogues. The elements prologue and epilogue are provided for the encoding of such features within the front or back matter, where appropriate. < prologue > contains the prologue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. < epilogue > contains the epilogue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. A prologue or epilogue may also be encoded as a speech, using the sp element described in section 3.13.2 Core Tags for Drama . This is particularly appropriate where stage directions, etc., are involved, as in the following example: In cases where the prologue or epilogue is clearly a significant part of the dramatic action, it may be preferable to include it in the body of a text, rather than in the front or back matter. In such cases, the encoder (and theatrical tradition) will determine whether or not to regard it as a new scene or division, or simply the final speech in the play. In the First Folio version of Shakespeare's Tempest , for example, Prospero's final speech is clearly marked off as a distinct textual unit by the headings and layout of the page, and might therefore be encoded as back matter: In many modern editions, the editors have chosen to regard Prospero's speech as a part of the preceding scene: 7.1.3 Records of Performances Performance texts are not only printed in books to be read, they are also performed. It is common practice therefore to include within the front matter of a printed dramatic text some brief account of particular performances, using the following element: < performance > contains a section of front or back matter describing how a dramatic piece is to be performed in general or how it was performed on some specific occasion. Performance information may include complex structures such as cast lists, or paragraphs describing the date and location of a performance, details about the setting portrayed in the performance and so forth. (See the discussion of these specialized structures in section 7.1 Front and Back Matter above.) If information for more than one performance is being recorded, then more than one performance element should be used, wherever possible. Names of persons, places, and dates of particular significance within the performance record may be explicitly marked using the general purpose name , rs type=\"place\" and date elements described in section 3.6.4 Dates and Times . No particular elements for such features as stagehouses, directors, etc., are proposed at this time. For example: 7.1.4 Cast Lists A cast list is a specialized form of list, conventionally found at the start or end of a play, usually listing all the speaking and non-speaking roles in the play, often with additional description ( Cataplasma, a maker of Periwigges and Attires ) or the name of an actor or actress ( Old Lady Squeamish. Mrs Rutter ). Cast lists may be encoded with the general purpose list element described in section 3.8 Lists , but for more detailed work the following specialized elements are provided: < castList > contains a single cast list or dramatis personae. < castGroup > groups one or more individual castItem elements within a cast list. < castItem > contains a single entry within a cast list, describing either a single role or a list of non-speaking roles. A castItem element may contain any mixture of elements taken from the model.castItemPart class, members of which (when this module is included) are: < role > contains the name of a dramatic role, as given in a cast list. < roleDesc > describes a character's role in a drama. < actor > contains the name of an actor appearing within a cast list. Sons of Cato: Portius Marcus Portius Marcus A cast list relating to a specific performance may be accompanied by notes about the time or place of that performance, indicating (for example) the name of the theatre where the play was first presented, the name of the producer or director, and so forth. When the cast list relates to a specific performance, it should be embedded within a performance element (see section 7.1.3 Records of Performances ), as in the following example: In this example, the castItem elements have no substructure. If desired, however, their components may be more finely distinguished using the elements role , roleDesc , and actor . For example, the second cast item above might be encoded as follows: The ref attribute on actor may be used to associate the name with information about the real-world person identified, as further discussed in section ND. In the previous example, we might associate the name of Paul Daneman with his entry in a widely used bibliography as follows : The global xml:id attribute may be used to specify a unique identifier for the role element, where it is desired to link speeches within the text explicitly to the role, using the who attribute, as further discussed in section 7.2.2 Speeches and Speakers below. The occasionally lengthy descriptions of a role sometimes found in written play scripts may be marked using the roleDesc element, as in the following example: When a list of such minor roles is given together, the type attribute of the castItem should indicate that it contains more than one role, by taking a value such as list. The encoder may or may not elect to encode each separate constituent within such a composite castItem . Thus, either of the following is acceptable: A group of cast items forming a distinct subdivision of a cast list may be marked as such by using the special purpose castGroup element. The rend attribute may be used to indicate whether this grouping is indicated in the text by layout alone (i.e. the use of whitespace), by long braces or by some other means. A castGroup may contain an optional heading (represented as usual by a head element) followed by a series of castItem elements: Alternatively, the encoder may prefer to regard the phrase friends of Mathias as a role description, and encode the above example as follows: This version has the advantage that all role descriptions are treated alike, rather than in some cases being treated as headings. On the other hand there are also cases, such as the following, where the role description does function more like a heading: 7.2 The Body of a Performance Text The body of a performance text may be divided into structural units, variously called acts, scenes, stasima, entr'actes, etc. All such formal divisions should be encoded using an appropriate text-division element ( div , div1 , div2 , etc.), as further discussed in section 7.2.1 Major Structural Divisions . Whether divided up into such units or not, all performance texts consist of sequences of speeches (see 7.2.2 Speeches and Speakers ) and stage directions (see 7.2.4 Stage Directions ). In musical performances, it is also common to identify groups of speeches which act as a single unit, sometimes called a number ; such units typically float within the structural hierarchy at the same level as speeches preceding or following them and cannot therefore be treated as text-divisions. (see 7.2.3 Grouped Speeches ). Speeches will generally consist of a sequence of chunk -level items: paragraphs, verse lines, stanzas, or (in case of uncertainty as to whether something is verse or prose) ab elements (see 7.2.5 Speech Contents ). The boundaries of formal units such as verse lines or paragraphs do not always coincide with speech boundaries. Units such as songs may be discontinuous or shared among several speakers. As described below in section 7.2.6 Embedded Structures , such fragmentation may be encoded in a relatively simple fashion using the linkage and aggregation mechanisms defined in chapter 16 Linking, Segmentation, and Alignment . 7.2.1 Major Structural Divisions Large divisions in drama such as acts, scenes, stasima, or entr'actes are indicated by numbered or unnumbered div elements, as described in section 4.1 Divisions of the Body . The type and n attributes may be used to define the type of division being marked, and to provide a name or number for it, as in the following example: Where the largest divisions of a performance text are themselves subdivided, most obviously in the case of plays traditionally divided into acts and scenes, further nested text-division elements may be used, as in this example: In the example above, the div2 element has been used to represent the French scene convention, (where the entrance of each new set of characters is marked as a distinct unit in the text) and the div1 element to represent the acts into which the play is divided. The elements chosen are determined only by the hierarchic position of these units in the text as a whole. If the text had no acts, but only scenes, then the scenes might be represented by div1 elements. Equally, if a play is divided only into acts , with no smaller subdivisions, then the div1 element might be used to represent acts. The type should be used, as above, to make explicit the name associated with a particular category of subdivision. As an alternative to the use of numbered divisions, the encoder may represent all subdivisions with the same element, the unnumbered div . The second act in the above example would then be represented as follows: For further discussion of the use of numbered and unnumbered divisions, see section 4.1 Divisions of the Body . 7.2.2 Speeches and Speakers The following elements are used to identify speeches and speakers in a performance text: < sp > contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. < speaker > contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. As noted above, the structure of many performance texts may be analysed as multiply hierarchic: a scene of a verse play, for example, may be divided into speeches and, at the same time, into verse lines. The end of a line may or may not coincide with the end of a speech, and vice versa. Other structures, such as songs, may be discontinuous or split up over several speeches. For some purposes it will be appropriate to regard the verse-structure as the fundamental organizing principle of the text, and for others the speech structure; in some cases, the choice between the two may be arbitrary. The discussion in the remainder of this chapter assumes that it is the speech-based hierarchy which most prominently determines the structure of performance texts, but the same mechanisms could be employed to encode a view of a performance text in which individual speeches were entirely subordinate to the formal units of prose and verse. For more detailed discussion and examples of various treatments of this fundamental issue, refer to chapter 20 Non-hierarchical Structures . The who attribute and the speaker element are both used to indicate the speaker or speakers of a speech, but in rather different ways. The speaker element is used to encode the word or phrase actually used within the source text to indicate the speaker: it may contain any string or prefix, and may be thought of as a highly specialized form of stage direction. The who attribute however contains one or more pointer values, each of which indicates one or more other XML elements documenting the character to whom the speech is assigned. Typically, this attribute might point to a person element in the TEI header 15.2.2 The Participant Description , to a role element in the cast list 7.1.4 Cast Lists , or even to some external source such as an online handbook of dramatic roles. The most usual case is that the pointer value supplied (prefixed by a sharp sign) corresponds with the value of an xml:id attribute, used elsewhere in the document to identify a particular element, as in the following examples: If present, a speaker element may only appear as the first part of an sp element. The distinction between the speaker element and the who attribute makes it possible to encode uniformly characters whose names are not indicated in a uniform fashion throughout the play, or characters who appear in disguise, as in the following examples: If the speaker attributions are completely regular (and may thus be reconstructed mechanically from the values given for the who attribute), or are of no interest for the encoder of the text (as might be the case with editorially supplied attributions in older texts), then the speaker element need not be used; the former example above then might look like this: More than one identifier may be listed as value for the who attribute if the speech is spoken by more than one person, as in the following example: In the event there is a speech that is assigned to a character that is not listed in the source cast list, a castList may be encoded inside the standOff element to provide an element to which the who of sp may point. The sp and speaker elements are both declared within the core module (see section 3.13 Passages of Verse or Drama ). 7.2.3 Grouped Speeches This module makes available the following additional element for handling groups of speeches: < spGrp > contains a group of speeches or songs in a performance text presented in a source as constituting a single unit or number. The spGrp element is intended for cases where the characters in a performance launch into something which might be regarded almost as a kind of separate structural division, typically associated with its own heading or numbering system, but which floats in the text, at the same hierarchic level as speeches preceding or following it. Such units are often numbered, titled, and visually presented as distinct objects within the text. Here is a typical example from a well-known American musical comedy: 7.2.4 Stage Directions Both between and within the speeches of a written performance text, it is normal practice to include a wide variety of descriptive directions to indicate non-verbal action. The following elements are provided to represent these: < stage > contains any kind of stage direction within a dramatic text or fragment. < move > marks the actual movement of one or more characters. A satisfactory typology of stage directions is difficult to define. Certain basic types such as entrance , exit , setting , delivery , are easily identified. But the list is not a closed one, and it is not uncommon to mix types within a single direction. No closed set of values for the type attribute is therefore proposed at the present time, though some suggested values are indicated in the list below, which also indicates the range of possibilities. The meaning of the values used for the type attribute on stage elements may be defined within the tagUsage element of the TEI header (described in section 2.3.4 The Tagging Declaration ). For example: This approach is purely documentary; in a real project it would generally be more effective to define the range of permitted values explicitly within the project's schema specification, using the techniques described in chapter 23.3 Customization . For example, a specification like the following might be used to produce a schema in which the type attribute of the stage element is permitted to take only the values listed above: The stage element may appear both between and within sp elements. It may contain a mixture of phrase level elements, possibly combined into paragraphs, as in the following example: The stage element may also be used in non-theatrical texts, to mark sound effects or musical effects, etc., as further discussed in section 7.3 Other Types of Performance Text . The move element is intended to help overcome the fact that the stage directions of a printed text may often not provide full information about either the intended or the actual movement of actors on stage. It may be used to keep track of entrances and exits in detail, so as to know which characters are on stage at which time. Its attributes permit a relatively formal specification for movements of characters, using user-defined codes to identify the characters involved (the who attribute), the direction of the movement (type attribute), and optionally which part of the stage is involved (where attribute). For stage-historical purposes, a perf attribute is also provided; this allows the recording of different move elements as taken in different performances of the same text. The move element should be located at the position in the text where the move is presumed to take place. This will often coincide with a stage direction, as in the following simple example: The move element can however appear independently of a stage direction, as in the following example: 7.2.5 Speech Contents The actual speeches of a dramatic text may be composed of running text, which must be formally organized into paragraphs, in the case of prose (see section 3.1 Paragraphs ), verse lines or line groups in that of verse (see section 3.13 Passages of Verse or Drama ), or seg elements, in case of doubt as to whether the material should be treated as verse or prose. The following elements, all of which are defined in the core, are particularly useful when marking units of prose or verse within speeches: < p > marks paragraphs in prose. < lb > marks the beginning of a new (typographic) line in some edition or version of a text. < l > contains a single, possibly incomplete, line of verse. < lg > contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. Like other milestone elements, the element lb additionally bears the attributes ed and edRef, from its membership in the class att.edition : < att.edition > provides attributes identifying the source edition from which some encoded feature derives. @ed supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text. @edRef provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text. supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text. provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text. As a member of the classes att.typed and att.divLike , the lg element also bears the following attributes: < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed < att.divLike > provides attributes common to all elements which behave in the same way as divisions. @org specifies how the content of the division is organized. @sample indicates whether this division is a sample of the original source and if so, from which part. specifies how the content of the division is organized. indicates whether this division is a sample of the original source and if so, from which part. < att.fragmentable > provides attributes for representing fragmentation of a structural element, typically as a consequence of some overlapping hierarchy. @part specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers. specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers. When the verse module is included in a schema, the elements l and lg also gain additional attributes through their membership of the class att.metrical : < att.metrical > defines a set of attributes that certain elements may use to represent metrical information. @met contains a user-specified encoding for the conventional metrical structure of the element. @rhyme specifies the rhyme scheme applicable to a group of verse lines. contains a user-specified encoding for the conventional metrical structure of the element. specifies the rhyme scheme applicable to a group of verse lines. In many texts, prose and verse may be inextricably mingled; particularly in earlier printed texts, prose may be printed as verse or verse as prose, or it may be impossible to distinguish the two. In cases of doubt, an encoder may prefer to tag the dubious material consistently as verse, to tag it all as prose, to follow the typography of the source text, or to use the neutral ab element to contain the speech itself. When this question arises, the tagUsage element in the encodingDesc element of the header may be used to record explicitly what policy has been adopted. Even where they can reliably be distinguished, a single speech may frequently contain a mixture of prose (marked as p ) and verse (marked as l or—if stanzaic— lg ). The part attribute which both l and lg elements inherit from the att.fragmentable class provides one simple way of indicating where the boundaries of a speech and of a verse line or line group do not coincide. The encoder may simply indicate that a line or line group is metrically incomplete by specifying the value Y or N, as in the following example: Alternatively, where the fragments of the line or line group are consecutive in the text (though possibly interrupted by stage directions), the values I (initial), M (medial), and F (final) may be used to indicate how metrical lines are constituted: In dramatic texts, the lg or line group element is most often of use for the encoding of songs and other stanzaic material. Line groups may be fragmented across speakers in the same way as individual lines, and the same set of attributes may be used to record this fact. The element spGrp is provided in order to simplify the situation, very common in performances, where performance of a single entity, such as a song, is shared amongst several performers, as in the following example: This encoding however does not indicate that the three lines of Sir Joseph's song and the two lines following it together constitute a single verse stanza. This can be indicated by using the part attribute, as follows: 7.2.6 Embedded Structures Although primarily composed of speeches, performance texts often contain other structural units such as songs or strophes which are shared among different speakers. More generally, complex nested structures of plays within plays, interpolated masques, or interludes are far from uncommon. In more modern material, comparably complex structural devices such as flashback or nested playback are equally frequent. In all kinds of performance material, it may be necessary to indicate several actions which are happening simultaneously. A number of different devices are available within the TEI scheme to support these complexities in the general case. Texts may be composite or self-nesting (see section 4.3.1 Grouped Texts ) and multiple hierarchies may be defined (see chapter 20 Non-hierarchical Structures ). The TEI encoding scheme provides a variety of linking mechanisms, which may be used to indicate temporal alignment and aggregation of fragmented structures. In this section we provide a few specific examples of the application of these techniques to performance texts: the use of the floatingText element the use of the part attribute on fragmentary lg elements the use of the next and prev attributes on fragments of embedded structures to join them into a larger whole the use of the join element to define a virtual element composed of the fragments indicated When the whole of a song appears within a single speech, it may require no special treatment if it is considered to form a part of the speech: When an embedded structure extends across more than one sp element, each of its constituent parts must be regarded as a distinct fragment; the problem then facing the encoder is to reconstitute the interrupted whole in some way. As already noted above, the spGrp element may be used to group together consecutive speeches which are grouped together in some way, for example constituting a single song. Alternatively the part attribute, typically used to indicate that an l element contains a partial, not a complete, verse line, may also be used on the lg element, to indicate that the line group is partial rather than complete, thus: When the fragments of a song are separated by other intervening dialogue, or even when not, they may be linked together with the next and prev attributes defined in section 16.7 Aggregation . For example, the line groups making up Ophelia's song might be encoded as follows: The next and prev attributes are discussed in section 16.7 Aggregation : they form part of the module for alignment and linking; this module must therefore be included in a schema if they are to be used, as further discussed in section 1.2 Defining a TEI Schema . The fragments of Ophelia's song might also be linked together using the join mechanism described in section 16.7 Aggregation . The join element is specifically intended to encode the fact that several discontiguous elements of the text together form one virtual element. Using this mechanism, the example might be encoded as follows: Like the next and prev attributes, the join element requires the additional module for linking, which is selected as shown above. 7.2.7 Simultaneous Action In printed or written versions of performance texts, a variety of techniques may be used to indicate the temporal alignment of speeches or actions. Speeches may be printed vertically aligned on the page, or braced together; stage directions (e.g. Speaking at the same time ) are also often used. In operatic or musical works in particular, the need to indicate timing and alignment of individual parts of a song may lead to very complex layout. One simple method of indicating the temporal alignment of speeches or actions is to use the spGrp element discussed in section 7.2.3 Grouped Speeches , with a type attribute to specify the reason for grouping, as in the following example: In the original, the stage direction in consternation is printed opposite a brace grouping all four speeches, indicating that all four characters speak at once, and that the stage direction applies to all of them. Rather than attempting to represent the appearance of the source, this example encoding represents its presumed meaning: the stage element is placed arbitrarily after the last relevant speech, and the four speeches with which it is to be associated are grouped by means of the spGrp element. The rend attribute is used to specify the fact that the three speeches were grouped by the brace in the copy text. Producing a readable version of the text which simulates the original printed effect may however require more complex markup and processing. More powerful and more precise mechanisms for temporal alignment are defined in chapter 8 Transcriptions of Speech . These would be appropriate for encodings the focus of which is on the actual performance of a text rather than its structure or formal properties. The module described in that chapter includes a large number of other detailed proposals for the encoding of such features as voice quality, prosody, etc., which might be relevant to such a treatment of performance texts. 7.3 Other Types of Performance Text Most of the elements and structures identified thus far are derived from traditional theatrical texts. Although other performance texts, such as screenplays or radio scripts, have not been discussed specifically, they can be encoded using the elements and structures listed above. Encoders may however find it convenient to use, as well, the additional specialized elements discussed in this section. For scripts containing very detailed technical information, the tech element discussed in section 7.3.1 Technical Information may also be useful. Like other texts, screenplays and television or radio scripts may be divided into text divisions marked with div or div1 , etc. Within units corresponding with the traditional act and scene , further subdivisions or sequences may be identified, composed of individual shots , each associated with a single camera angle and setting. Shots and sequences should be encoded using an appropriate text-division element (i.e., a div3 element if numbered division elements are in use and the next largest unit is a div2 , or a div element if un-numbered divisions are in use) specifying sequence or shot as the value of the type attribute, as appropriate. It is normal practice in screenplays and radio scripts to distinguish directions concerning camera angles, sound effects, etc., from other forms of stage direction. Such texts also generally include far more detailed specifications of what the audience actually sees: descriptions of actions and background, etc. Scripts derived from cinema and television productions may also include texts displayed as captions superimposed on the action. All of these may be encoded using the general purpose stage element discussed in section 7.2.4 Stage Directions , and distinguished by means of its type attribute. Alternatively, or in addition, the following more specific elements may be used, where clear distinctions can be made: < view > describes the visual context of some part of a screen play in terms of what the spectator sees, generally independent of any dialogue. < camera > describes a particular camera angle or viewpoint in a screen play. < caption > contains the text of a caption or other text displayed as part of a film script or screenplay. < sound > describes a sound effect or musical sequence specified within a screen play or radio script. Some examples of the use of these elements follow: Where particular words or phrases within a direction are emphasized (by change of typeface or use of capital letters), an appropriate phrase-level element may be used to indicate the fact, as in the following examples, where certain words in the original are given in small capitals: All of these elements, like other stage directions, can appear both within and between speeches. 7.3.1 Technical Information Traditional stage scripts may contain additional technical information about such production-related factors as lighting, blocking (that is, detailed notes on actors' movements), or props required at particular points. More technical information about intended production effects may also appear in published versions of screenplays or movie scripts. Where these are presented simply as marginal notes, they may be encoded using the general-purpose note element defined in section 3.9 Notes, Annotation, and Indexing . Alternatively, they may be formally distinguished from other stage directions by using the specialized tech element: < tech > describes a special-purpose stage direction that is not meant for the actors. Like stage directions, tech elements can appear anywhere within a speech or between speeches. 7.4 Module for Performance Texts The module described in this chapter makes available the following components: Performance Texts Performance texts The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">7 Performance Texts</span>"}
{"link":"p5.xml?id=TS","tag":"guidelines","content":"8 Transcriptions of Speech The module described in this chapter is intended for use with a wide variety of transcribed spoken material. It should be stressed, however, that the present proposals are not intended to support unmodified every variety of research undertaken upon spoken material now or in the future; some discourse analysts, some phonologists, and doubtless others may wish to extend the scheme presented here to express more precisely the set of distinctions they wish to draw in their transcriptions. Speech regarded as a purely acoustic phenomenon may well require different methods from those outlined here, as may speech regarded solely as a process of social interaction. This chapter begins with a discussion of some of the problems commonly encountered in transcribing spoken language (section 8.1 General Considerations and Overview ). Section 8.2 Documenting the Source of Transcribed Speech documents some additional TEI header elements which may be used to document the recording or other source from which transcribed text is taken. Section 8.3 Elements Unique to Spoken Texts describes the basic structural elements provided by this module. Finally, section 8.4 Elements Defined Elsewhere of this chapter reviews further problems specific to the encoding of spoken language, demonstrating how mechanisms and elements discussed elsewhere in these Guidelines may be applied to them. 8.1 General Considerations and Overview There is great variation in the ways different researchers have chosen to represent speech using the written medium. 1 This reflects the special difficulties which apply to the encoding or transcription of speech. Speech varies according to a large number of dimensions, many of which have no counterpart in writing (for example, tempo, loudness, pitch, etc.). The audibility of speech recorded in natural communication situations is often less than perfect, affecting the accuracy of the transcription. Spoken material may be transcribed in the course of linguistic, acoustic, anthropological, psychological, ethnographic, journalistic, or many other types of research. Even in the same field, the interests and theoretical perspectives of different transcribers may lead them to prefer different levels of detail in the transcript and different styles of visual display. The production and comprehension of speech are intimately bound up with the situation in which speech occurs, far more so than is the case for written texts. A speech transcript must therefore include some contextual features; determining which are relevant is not always simple. Moreover, the ethical problems in recording and making public what was produced in a private setting and intended for a limited audience are more frequently encountered in dealing with spoken texts than with written ones. Speech also poses difficult structural problems. Unlike a written text, a speech event takes place in time. Its beginning and end may be hard to determine and its internal composition difficult to define. Most researchers agree that the utterances or turns of individual speakers form an important structural component in most kinds of speech, but these are rarely as well-behaved (in the structural sense) as paragraphs or other analogous units in written texts: speakers frequently interrupt each other, use gestures as well as words, leave remarks unfinished and so on. Speech itself, though it may be represented as words, frequently contains items such as vocalized pauses which, although only semi-lexical, have immense importance in the analysis of spoken text. Even non-vocal elements such as gestures may be regarded as forming a component of spoken text for some analytic purposes. Below the level of the individual utterance, speech may be segmented into units defined by phonological, prosodic, or syntactic phenomena; no clear agreement exists, however, even as to appropriate names for such segments. Spoken texts transcribed according to the guidelines presented here are organized as follows. The overall structure of a TEI spoken text is identical to that of any other TEI text: the TEI element for a spoken text contains a teiHeader element, followed by a text element. Even texts primarily composed of transcribed speech may also include conventional front and back matter, and may even be organized into divisions like printed texts. We may say, therefore, that these Guidelines regard transcribed speech as being composed of arbitrary high-level units called texts . texts as organizing unit for spoken material A spoken text might typically be a conversation between a small number of people, a lecture, a broadcast TV item, or a similar event. Each such unit has associated with it a teiHeader providing detailed contextual information such as the source of the transcript, the identity of the participants, whether the speech is scripted or spontaneous, the physical and social setting in which the discourse takes place and a range of other aspects. Details of the header in general are provided in chapter 2 The TEI Header ; the particular elements it provides for use with spoken texts are described below ( 8.2 Documenting the Source of Transcribed Speech ). Details concerning additional elements which may be used for the documentation of participant and contextual information are given in 15.2 Contextual Information . Defining the bounds of a spoken text is frequently a matter of arbitrary convention or convenience. In public or semi-public contexts, a text may be regarded as synonymous with, for example, a lecture , a broadcast item , a meeting , etc. In informal or private contexts, a text may be simply a conversation involving a specific group of participants. Alternatively, researchers may elect to define spoken texts solely in terms of their duration in time or length in words. By default, these Guidelines assume of a text only that: it is internally cohesive, it is describable by a single header, and it represents a single stretch of time with no significant discontinuities. Within a text it may be necessary to identify subdivisions of various kinds, if only for convenience of handling. The neutral div element discussed in section 4.1 Divisions of the Body is recommended for this purpose. It may be found useful also for representing subdivisions relating to discourse structure, speech act theory, transactional analysis, etc., provided only that these divisions are hierarchically well-behaved. Where they are not, as is often the case, the mechanisms discussed in chapters 16 Linking, Segmentation, and Alignment and 20 Non-hierarchical Structures may be used. A spoken text may contain any of the following components: utterances pauses vocalized but non-lexical phenomena such as coughs kinesic (non-verbal, non-lexical) phenomena such as gestures entirely non-linguistic incidents occurring during and possibly influencing the course of speech writing, regarded as a special class of incident in that it can be transcribed, for example captions or overheads displayed during a lecture shifts or changes in vocal quality Elements to represent all of these features of spoken language are discussed in section 8.3 Elements Unique to Spoken Texts below. An utterance (tagged u ) may contain lexical items interspersed with pauses and non-lexical vocal sounds; during an utterance, non-linguistic incidents may occur and written materials may be presented. The u element can thus contain any of the other elements listed, interspersed with a transcription of the lexical items of the utterance; the other elements may all appear between utterances or next to each other, but except for writing they do not contain any other elements nor any data. A spoken text itself may be without substructure, that is, it may consist simply of units such as utterances or pauses, not grouped together in any way, or it may be subdivided. If the notion of what constitutes a text in spoken discourse is inevitably rather an arbitrary one, the notion of formal subdivisions within such a text may appear even more debatable. Nevertheless, such divisions may be useful for such types of discourse as debates, broadcasts, etc., where structural subdivisions can easily be identified, or more generally wherever it is desired to aggregate utterances or other parts of a transcript into units smaller than a complete text. Examples might include conversations or discourse fragments , or more narrowly, that part of the conversation where topic x was discussed , provided only that the set of all such divisions is coextensive with the text. Each such division of a spoken text should be represented by the numbered or unnumbered div elements defined in chapter 4 Default Text Structure . For some detailed kinds of analysis a hierarchy of such divisions may be found useful; nested div elements may be used for this purpose, as in the following example showing how a collection made up of transcribed sound bites taken from speeches given by a politician on different occasions might be encoded. Each extract is regarded as a distinct div , nested within a single composite div as follows: As a member of the class att.declaring , the div element may also carry a decls attribute, for use where the divisions of a text do not all share the same set of the contextual declarations specified in the TEI header. (See further section 15.3 Associating Contextual Information with a Text ). 8.2 Documenting the Source of Transcribed Speech Where a computer file is derived from a spoken text rather than a written one, it will usually be desirable to record additional information about the recording or broadcast which constitutes its source. Several additional elements are provided for this purpose within the source description component of the TEI header: < scriptStmt > contains a citation giving details of the script used for a spoken text. < recordingStmt > describes a set of recordings used as the basis for transcription of a spoken text. < recording > provides details of an audio or video recording event used as the source of a spoken text, either directly or from a public broadcast. < transcriptionDesc > describes the set of transcription conventions used, particularly for spoken material. < att.duration.w3c > provides attributes for recording normalized temporal durations. @dur indicates the length of this element in time. indicates the length of this element in time. Note that detailed information about the participants or setting of an interview or other transcript of spoken language should be recorded in the appropriate division of the profile description, discussed in chapter 15 Language Corpora , rather than as part of the source description. The source description is used to hold information only about the source from which the transcribed speech was taken, for example, any script being read and any technical details of how the recording was produced. If the source was a previously-created transcript, it should be treated in the same way as any other source text. The scriptStmt element should be used where it is known that one or more of the participants in a spoken text is speaking from a previously prepared script. The script itself should be documented in the same way as any other written text, using one of the three citation tags mentioned above. Utterances or groups of utterances may be linked to the script concerned by means of the decls attribute, described in section 15.3 Associating Contextual Information with a Text . The recordingStmt is used to group together information relating to the recordings from which the spoken text was transcribed. The element may contain either a prose description or, more helpfully, one or more recording elements, each corresponding with a particular recording. The linkage between utterances or groups of utterances and the relevant recording statement is made by means of the decls attribute, described in section 15.3 Associating Contextual Information with a Text . The recording element should be used to provide a description of how and by whom a recording was made. This information may be provided in the form of a prose description, within which such items as statements of responsibility, names, places, and dates may be identified using the appropriate phrase-level tags. Alternatively, a selection of elements from the model.recordingPart class may be provided. This element class makes available the following elements: < date > contains a date in any format. < time > contains a phrase defining a time of day in any format. < respStmt > supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. < equipment > provides technical details of the equipment and media used for an audio or video recording used as the source for a spoken text. < broadcast > describes a broadcast used as the source of a spoken text. Specialized collections may wish to add further sub-elements to these major components. These elements should be used only for information relating to the recording process itself; information about the setting or participants (for example) is recorded elsewhere: see sections 15.2.3 The Setting Description and 15.2.2 The Participant Description . When a recording has been made from a public broadcast, details of the broadcast itself should be supplied within the recording element, as a nested broadcast element. A broadcast is closely analogous to a publication and the broadcast element should therefore contain one or the other of the bibliographic citation elements bibl , biblStruct , or biblFull . The broadcasting agency responsible for a broadcast is regarded as its author, while other participants (for example interviewers, interviewees, script writers, directors, producers, etc.) should be specified using the respStmt or editor element with an appropriate resp (see further section 3.12 Bibliographic Citations and References ). When a broadcast contains several distinct recordings (for example a compilation), additional recording elements may be further nested within the broadcast element. The transcriptionDesc element can be used to document the particular transcription conventions (use of space, punctuation, special characters etc.) used in making the transcription. A number of sets of such conventions have been defined within particular research communities, or by users of particular transcription tools. The attributes ident and version may be used to refer to such conventions in a machine tractable way, where this is appropriate. 8.3 Elements Unique to Spoken Texts The following elements characterize spoken texts, transcribed according to these Guidelines: < u > contains a stretch of speech usually preceded and followed by silence or by a change of speaker. < pause > marks a pause either between or within utterances. < vocal > marks any vocalized but not necessarily lexical phenomenon, for example voiced pauses, non-lexical backchannels, etc. < kinesic > marks any communicative phenomenon, not necessarily vocalized, for example a gesture, frown, etc. < incident > marks any phenomenon or occurrence, not necessarily vocalized or communicative, for example incidental noises or other events affecting communication. < writing > contains a passage of written text revealed to participants in the course of a spoken text. < shift > marks the point at which some paralinguistic feature of a series of utterances by any one speaker changes. The u element may appear directly within a spoken text, and may contain any of the others; the others may also appear directly (for example, a vocal may appear between two utterances) but cannot contain a u element. In terms of the basic TEI model, therefore, we regard the u element as analogous to a paragraph, and the others as analogous to phrase elements, but with the important difference that they can exist either as siblings or as children of utterances. The class model.divPart.spoken provides the u element; the class model.global.spoken provides the six other elements listed above. As members of the att.ascribed class, all of these elements share the following attributes: < att.ascribed > provides attributes for elements representing speech or action that can be ascribed to a specific individual. @who indicates the person, or group of people, to whom the element content is ascribed. indicates the person, or group of people, to whom the element content is ascribed. < att.ascribed.directed > provides attributes for elements representing speech or action that can be directed at a group or individual. @toWhom indicates the person, or group of people, to whom a speech act or action is directed. indicates the person, or group of people, to whom a speech act or action is directed. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed < att.timed > provides attributes common to those elements which have a duration in time, expressed either absolutely or by reference to an alignment map. @start indicates the location within a temporal alignment at which this element begins. @end indicates the location within a temporal alignment at which this element ends. indicates the location within a temporal alignment at which this element begins. indicates the location within a temporal alignment at which this element ends. < att.duration.w3c > provides attributes for recording normalized temporal durations. @dur indicates the length of this element in time. indicates the length of this element in time. Each of these elements is further discussed and specified in sections 8.3.1 Utterances to 8.3.4 Writing . We can show the relationship between four of these constituents of speech using the features eventive , communicative , anthropophonic (for sounds produced by the human vocal apparatus), and lexical : The following short extract exemplifies several of these elements. It is recoded from a text originally transcribed in the CHILDES format. 2 Each utterance is encoded using a u element (see section 8.3.1 Utterances ). The speakers are defined using the listPerson element discussed in 13.3.2 The Person Element and each is given a unique identifier also used to identify their speech. Pauses marked by the transcriber are indicated using the pause element (see section 8.3.2 Pausing ). Non-verbal vocal effects such as the child's meowing are indicated either with orthographic transcriptions or with the vocal element, and entirely non-linguistic but significant incidents such as the sound of the toy cat are represented by the incident elements (see section 8.3.3 Vocal, Kinesic, Incident ). This example also uses some elements common to all TEI texts, notably the reg tag for editorial regularization. Unusually stressed syllables have been encoded with the emph element. The seg element has also been used to segment the last utterance. Further discussion of all of such options is provided in section 8.4 Elements Defined Elsewhere . Contextual information is of particular importance in spoken texts, and should be provided by the TEI header of a text. In general, all of the information in a header is understood to be relevant to the whole of the associated text. The element u as a member of the att.declaring class, may however specify a different context by means of the decls attribute (see further section 15.3 Associating Contextual Information with a Text ). 8.3.1 Utterances Each distinct utterance in a spoken text is represented by a u element, described as follows: < u > contains a stretch of speech usually preceded and followed by silence or by a change of speaker. Use of the who attribute to associate the utterance with a particular speaker is recommended but not required. Its use implies as a further requirement that all speakers be identified by a person or personGrp element, typically in the TEI header (see section 15.2.2 The Participant Description ), but it may also point to another external source of information about the speaker. Where utterances or other parts of the transcription cannot be attributed with confidence to any particular participant or group of participants, the encoder may choose to create personGrp elements with xml:id attributes such as various or unknown, and perhaps give the root listPerson element an xml:id value of all, then point to those as appropriate using who. The trans attribute is provided as a means of characterizing the transition from one utterance to the next at a simpler level of detail than that provided by the temporal alignment mechanism discussed in section 16.4 Synchronization . The value specified applies to the transition from the preceding utterance into the utterance bearing the attribute. For example: 3 An utterance may contain either running text, or text within which other basic structural elements are nested. Where such nesting occurs, the who attribute is considered to be inherited for the elements pause , vocal , shift and kinesic ; that is, a pause or shift (etc.) within an utterance is regarded as being produced by that speaker only, while a pause between utterances applies to all speakers. Occasionally, an utterance may seem to contain other utterances, for example where one speaker interrupts himself, or when another speaker produces a back-channel while they are still speaking. The present version of these Guidelines does not support nesting of one u element within another. The transcriber must therefore decide whether such interruptions constitute a change of utterance, or whether other elements may be used. In the case of self-interruption, the shift element may be used to show that the speaker has changed the quality of their speech: Often, back-channelling is only semi-lexicalized and may therefore be represented using the vocal element: 8.3.2 Pausing Speakers differ very much in their rhythm and in particular in the amount of time they leave between words. The following element is provided to mark occasions where the transcriber judges that speech has been paused, irrespective of the actual amount of silence: < pause > marks a pause either between or within utterances. 8.3.3 Vocal, Kinesic, Incident The presence of non-transcribed semi-lexical or non-lexical phenomena either between or within utterances may be indicated with the following three elements. < vocal > marks any vocalized but not necessarily lexical phenomenon, for example voiced pauses, non-lexical backchannels, etc. < kinesic > marks any communicative phenomenon, not necessarily vocalized, for example a gesture, frown, etc. < incident > marks any phenomenon or occurrence, not necessarily vocalized or communicative, for example incidental noises or other events affecting communication. The who attribute should be used to specify the person or group responsible for a vocal , kinesic , or incident which is contained within an utterance, if this differs from that of the enclosing utterance. The attribute must be supplied for a vocal , kinesic , or incident which is not contained within an utterance. The iterated attribute may be used to indicate that the vocal, kinesic, or incident is repeated, for example laughter as opposed to laugh. These should both be distinguished from laughing, where what is being encoded is a shift in voice quality. For this last case, the shift element discussed in section 8.3.6 Shifts should be used. A child desc element may be used to supply a conventional representation for the phenomenon, for example: burp, click, cough, exhale, giggle, gulp, inhale, laugh, sneeze, sniff, snort, sob, swallow, throat, yawn ah, aha, aw, eh, ehm, er, erm, hmm, huh, mm, mmhm, oh, ooh, oops, phew, tsk, uh, uh-huh, uh-uh, um, urgh, yup Some typical examples follow: The extent to which encoding of incidents or kinesics is included in a transcription will depend entirely on the purpose for which the transcription was made. As elsewhere, this will depend on the particular research agenda and the extent to which their presence is felt to be significant for the interpretation of spoken interactions. 8.3.4 Writing Written text may also be encountered when speech is transcribed, for example in a television broadcast or cinema performance, or where one participant shows written text to another. The writing element may be used to distinguish such written elements from the spoken text in which they are embedded. < writing > contains a passage of written text revealed to participants in the course of a spoken text. < att.global.source > provides attributes used by elements to point to an external source. If the source of the writing being displayed is known, bibliographic information about it may be stored in a listBibl within the sourceDesc element of the TEI header, and then pointed to using the source attribute. For example, in the following imaginary example, a lecturer displays two different versions of the same passage of text: 8.3.5 Temporal Information As noted above, utterances, vocals, pauses, kinesics, incidents, and writing elements all inherit attributes providing information about their position in time from the classes att.timed and att.duration . These attributes can be used to link parts of the transcription very exactly with points on a timeline, or simply to indicate their duration. Note that if start and end point to when elements whose temporal distance from each other is specified in a timeline, then dur is ignored. The anchor element (see 16.5 Correspondence and Alignment ) may be used as an alternative means of aligning the start and end of timed elements, and is required when the temporal alignment involves points within an element. For further discussion of temporal alignment and synchronization see 8.4.2 Synchronization and Overlap below. 8.3.6 Shifts A common requirement in transcribing spoken language is to mark positions at which a variety of prosodic features change. Many paralinguistic features (pitch, prominence, loudness, etc.) characterize stretches of speech which are not co-extensive with utterances or any of the other units discussed so far. One simple method of encoding such units is simply to mark their boundaries. An empty element called shift is provided for this purpose. < shift > marks the point at which some paralinguistic feature of a series of utterances by any one speaker changes. The values proposed here for the feature attribute are based on those used by the Survey of English Usage (see further Boase 1990 ); this list may be revised or supplemented using the methods outlined in section 23.3 Customization . The new attribute specifies the new state of the feature following the shift. If this attribute has the special value normal, the implication is that the feature concerned ceases to be remarkable at this point. A list of suggested values for each of the features proposed follows: tempo a allegro (fast) aa very fast acc accelerando (getting faster) l lento (slow) ll very slow rall rallentando (getting slower) allegro (fast) very fast accelerando (getting faster) lento (slow) very slow rallentando (getting slower) loud (for loudness): f forte (loud) ff very loud cresc crescendo (getting louder) p piano (soft) pp very soft dimin diminuendo (getting softer) forte (loud) very loud crescendo (getting louder) piano (soft) very soft diminuendo (getting softer) pitch (for pitch range): high high pitch-range low low pitch-range wide wide pitch-range narrow narrow pitch-range asc ascending desc descending monot monotonous scand scandent, each succeeding syllable higher than the last, generally ending in a falling tone high pitch-range low pitch-range wide pitch-range narrow pitch-range ascending descending monotonous scandent, each succeeding syllable higher than the last, generally ending in a falling tone tension: sl slurred lax lax, a little slurred ten tense pr very precise st staccato, every stressed syllable being doubly stressed leg legato, every syllable receiving more or less equal stress slurred lax, a little slurred tense very precise staccato, every stressed syllable being doubly stressed legato, every syllable receiving more or less equal stress rhythm: rh beatable rhythm arrh arrhythmic, particularly halting spr spiky rising, with markedly higher unstressed syllables spf spiky falling, with markedly lower unstressed syllables glr glissando rising, like spiky rising but the unstressed syllables, usually several, also rise in pitch relative to each other glf glissando falling, like spiky falling but with the unstressed syllables also falling in pitch relative to each other beatable rhythm arrhythmic, particularly halting spiky rising, with markedly higher unstressed syllables spiky falling, with markedly lower unstressed syllables glissando rising, like spiky rising but the unstressed syllables, usually several, also rise in pitch relative to each other glissando falling, like spiky falling but with the unstressed syllables also falling in pitch relative to each other voice (for voice quality): whisp whisper breath breathy husk husky creak creaky fals falsetto reson resonant giggle unvoiced laugh or giggle laugh voiced laugh trem tremulous sob sobbing yawn yawning sigh sighing whisper breathy husky creaky falsetto resonant unvoiced laugh or giggle voiced laugh tremulous sobbing yawning sighing A full definition of the sense of the values provided for each feature may be provided either in the encoding description section of the text header (see section 2.3 The Encoding Description ) or as part of a TEI customization, as described in section 23.3 Customization . 8.4 Elements Defined Elsewhere This section describes the following features characteristic of spoken texts for which elements are defined elsewhere in these Guidelines: segmentation below the utterance level synchronization and overlap regularization of orthography 8.4.1 Segmentation For some analytic purposes it may be desirable to subdivide the divisions of a spoken text into units smaller than the individual utterance or turn. Segmentation may be performed for a number of different purposes and in terms of a variety of speech phenomena. Common examples include units defined both prosodically (by intonation, pausing, etc.) and syntactically (clauses, phrases, etc.) The term macrosyntagm has been used by a number of researchers to define units peculiar to speech transcripts. 4 These Guidelines propose that such analyses be performed in terms of neutrally-named segments , represented by the seg element, which is discussed more fully in section 16.3 Blocks, Segments, and Anchors . This element may take a type attribute to specify the kind of segmentation applicable to a particular segment, if more than one is possible in a text. A full definition of the segmentation scheme or schemes used should be provided in the segmentation element of the editorialDecl element in the TEI header (see 2.3.3 The Editorial Practices Declaration ). In the first example below, an utterance has been segmented according to a notion of syntactic completeness not necessarily marked by the speech, although in this case a pause has been recorded between the two sentence-like units. In the second, the segments are defined prosodically (an acute accent has been used to mark the position immediately following the syllable bearing the primary accent or stress), and may be thought of as tone units. When utterances are segmented end-to-end in the same way as the s-units in written texts, the s element discussed in chapter 17 Simple Analytic Mechanisms may be used, either as an alternative or in addition to the more general purpose seg element. The s element is available without formality in all texts, but does not allow segments to nest within each other. Where segments of different kinds are to be distinguished within the same stretch of speech, the type attribute may be used, as in the following example: For some features, it may be more appropriate or convenient to introduce a new element in a custom namespace: This example also uses the core elements gap and del to mark editorial decisions concerning matter completely omitted from the transcript (because of inaudibility), and words which have been transcribed but which the transcriber wishes to exclude from the segment because they are repeated, respectively. See section 3.5 Simple Editorial Changes for a discussion of these and related elements. It is often the case that the desired segmentation does not respect utterance boundaries; for example, syntactic units may cross utterance boundaries. For a detailed discussion of this problem, and the various methods proposed by these Guidelines for handling it, see chapter 20 Non-hierarchical Structures . Methods discussed there include these: milestone tags may be used; the special-purpose shift tag discussed in section 8.3.6 Shifts is an extension of this method where several discontinuous segments are to be grouped together to form a syntactic unit (e.g. a phrasal verb with interposed complement), the join element may be used 8.4.2 Synchronization and Overlap A major difference between spoken and written texts is the importance of the temporal dimension to the former. As a very simple example, consider the following, first as it might be represented in a playscript: For a full discussion of this and related mechanisms, section 16.4.2 Placing Synchronous Events in Time should be consulted. The rest of the present section, which should be read in conjunction with that more detailed discussion, presents a number of ways in which these mechanisms may be applied to the specific problem of representing temporal alignment, synchrony, or overlap in transcribing spoken texts. In the simple example above, the first utterance (that with identifier utt1) contains an anchor element, the function of which is simply to mark a point within it. The synch attribute associated with this anchor point specifies the identifiers of the other two elements which are to be synchronized with it: specifically, the second utterance (utt2) and the kinesic (k1). Note that one of these elements has content and the other is empty. This example demonstrates only a way of indicating a point within one utterance at which it can be synchronized with another utterance and a kinesic. For more complex kinds of alignment, involving possibly multiple synchronization points, an additional element is provided, known as a timeline . This consists of a series of when elements, each representing a point in time, and bearing attributes which indicate its exact temporal position relative to other elements in the same timeline, in addition to the sequencing implied by its position within it. For example: One or more such timelines may be specified within a spoken text, to suit the encoder's convenience. If more than one is supplied, the origin attribute may be used on each to specify which other timeline element it follows. The unit attribute indicates the units used for timings given on when elements contained by the alignment map. Alternatively, to avoid the need to specify times explicitly, the interval attribute may be used to indicate that all the when elements in a time line are a fixed distance apart. Three methods are available for aligning points or elements within a spoken text with the points in time defined by the timeline : The elements to be synchronized may specify the identifier of a when element as the value of one of the start, end, or synch attributes The when element may specify the identifiers of all the elements to be synchronized with it using the synch attribute A free-standing link element may be used to associate the when element and the elements synchronized with it by specifying their identifiers as values for its target attribute. For example, using the timeline given above: The synchronization represented by the preceding examples could equally well be represented as follows: Finally, a linkGrp may be used as an alternative to the synch attribute: As a further example of the three possibilities, consider the following dialogue, represented first as it might appear in a conventional playscript: Where the whole of one or another utterance is to be synchronized, the start and end attributes may be used: If synchronization with specific timing information is required, a timeline must be included: As above, since the whole of Bob's utterance is to be aligned, the start and end attributes may be used as an alternative to the second pair of anchor elements: An alternative approach is to mark the synchronization by pointing from the timeline to the text: Note that in each case, although Bob's utterance follows Tom's sequentially in the text, it is aligned temporally with its middle, without any need to disrupt the normal syntax of the text. As a final example, consider the following exchange, first as it might be represented using a musical-score-like notation, in which points of synchronization are represented by vertical alignment of the text: 8.4.3 Regularization of Word Forms When speech is transcribed using ordinary orthographic notation, as is customary, some compromise must be made between the sounds produced and conventional orthography. Particularly when dealing with informal, dialectal, or other varieties of language, the transcriber will frequently have to decide whether a particular sound is to be treated as a distinct vocabulary item or not. For example, while in a given project kinda may not be worth distinguishing as a vocabulary item from kind of , isn't may clearly be worth distinguishing from is not ; for some purposes, the regional variant isnae might also be worth distinguishing in the same way. One rule of thumb might be to allow such variation only where a generally accepted orthographic form exists, for example, in published dictionaries of the language register being encoded; this has the disadvantage that such dictionaries may not exist. Another is to maintain a controlled (but extensible) set of normalized forms for all such words; this has the advantage of enforcing some degree of consistency among different transcribers. Occasionally, as for example when transcribing abbreviations or acronyms, it may be felt necessary to depart from conventional spelling to distinguish between cases where the abbreviation is spelled out letter by letter (e.g. B B C or V A T ) and where it is pronounced as a single word ( VAT or RADA ). Similar considerations might apply to pronunciation of foreign words (e.g. Monsewer vs. Monsieur ). In general, use of punctuation, capitalization, etc., in spoken transcripts should be carefully controlled. It is important to distinguish the transcriber's intuition as to what the punctuation should be from the marking of prosodic features such as pausing, intonation, etc. Whatever practice is adopted, it is essential that it be clearly and fully documented in the editorial declarations section of the header. It may also be found helpful to include normalized forms of non-conventional spellings within the text, using the elements for simple editorial changes described in section 3.5 Simple Editorial Changes (see further section 8.4.5 Speech Management ). 8.4.4 Prosody In the absence of conventional punctuation, the marking of prosodic features assumes paramount importance, since these structure and organize the spoken message. Indeed, such prosodic features as points of primary or secondary stress may be represented by specialized punctuation marks, or other characters such as those provided by the Unicode Spacing Modifier Letters block. Pauses have already been dealt with in section 8.3.2 Pausing ; while tone units (or intonational phrases) can be indicated by the segmentation tag discussed in section 8.4.1 Segmentation . The shift element discussed in section 8.3.6 Shifts may also be used to encode some prosodic features, for example where all that is required is the ability to record shifts in voice quality. In a more detailed phonological transcript, it is common practice to include a number of conventional signs to mark prosodic features of the surrounding or (more usually) preceding speech. Such signs may be used to record, for example, particular intonation patterns, truncation, vowel quality (long or short) etc. These signs may be preserved in a transcript either by using conventional punctuation or by marking their presence by g elements. Where a transcript includes many phonetic or phonemic aspects, it will generally be more convenient to use the appropriate Unicode characters (see further chapters 6 Languages and Character Sets and 5 Characters, Glyphs, and Writing Modes ). For representation of phonemic information, the use of the International Phonetic Alphabet, which can be represented in Unicode characters, is recommended. In the following example, special characters have been defined as follows within the encodingDesc of the TEI header This example, which is taken from a corpus of bookshop service encounters, also demonstrates the use of the unclear and gap elements discussed in section 3.5 Simple Editorial Changes . Where words are so unclear that only their extent can be recorded, the empty gap element may be used; where the encoder can identify the words but wishes to record a degree of uncertainty about their accuracy, the unclear element may be used. More flexible and detailed methods of indicating uncertainty are discussed in chapter 21 Certainty, Precision, and Responsibility . For more detailed work, involving a detailed phonological transcript including representation of stress and pitch patterns, it is probably best to maintain the prosodic description in parallel with the conventional written transcript, rather than attempt to embed detailed prosodic information within it. The two parallel streams may be aligned with each other and with other streams, for example an acoustic encoding, using the general alignment mechanisms discussed in section 8.3.6 Shifts . 8.4.5 Speech Management Phenomena of speech management include disfluencies such as filled and unfilled pauses, interrupted or repeated words, corrections, and reformulations as well as interactional devices asking for or providing feedback. Depending on the importance attached to such features, transcribers may choose to adopt conventionalized representations for them (as discussed in section 8.4.3 Regularization of Word Forms above), or to transcribe them using IPA or some other transcription system. To simplify analysis of the lexical features of a speech transcript, it may be felt useful to tidy away many of these disfluencies. Where this policy has been adopted, these Guidelines recommend the use of the tags for simple editorial intervention discussed in section 3.5 Simple Editorial Changes , to make explicit the extent of regularization or normalization performed by the transcriber. For example, false starts, repetition, and truncated words might all be included within a transcript, but marked as editorially deleted, in the following way: As previously noted, the gap element may be used to mark points within a transcript where words have been omitted, for example because they are inaudible, as in the following example in which 5 seconds of speech is drowned out by an external event: The unclear element may be used to mark words which have been included although the transcriber is unsure of their accuracy: Where a transcriber is believed to have incorrectly identified a word, the elements corr or sic embedded within a choice element may be used to indicate both the original and a corrected form of it: Finally phenomena such as code-switching , where a speaker switches from one language to another, may easily be represented in a transcript by using the foreign element provided by the core tagset: 8.4.6 Analytic Coding The recommendations made here only concern the establishment of a basic text. Where a more sophisticated analysis is needed, more sophisticated methods of markup will also be appropriate, for example, using stand-off markup to indicate multiple segmentation of the stream of discourse, or complex alignment of several segments within it. Where additional annotations (sometimes called codes or tags) are used to represent such features as linguistic word class (noun, verb, etc.), type of speech act (imperative, concessive, etc.), or information status (theme/rheme, given/new, active/semi-active/new), etc., a selection from the general purpose analytic tools discussed in chapters 16 Linking, Segmentation, and Alignment , 17 Simple Analytic Mechanisms , and 18 Feature Structures may be used to advantage. The general-purpose annotationBlock element may be used to group together a transcription and multiple layers of annotation. It also serves to divide a transcribed text up into meaningful analytic sections. < annotationBlock > groups together various annotations, e.g. for parallel interpretations of a spoken segment. 8.5 Module for Transcribed Speech The module described in this chapter makes available the following components: Transcribed Speech Transcribed Speech The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">8 Transcriptions of Speech</span>"}
{"link":"p5.xml?id=DI","tag":"guidelines","content":"9 Dictionaries This chapter defines a module for encoding lexical resources of all kinds, in particular human-oriented monolingual and multilingual dictionaries, glossaries, and similar documents. The elements described here may also be useful in the encoding of computational lexica and similar resources intended for use by language-processing software; they may also be used to provide a rich encoding for wordlists, lexica, glossaries, etc. included within other documents. Dictionaries are most familiar in their printed form; however, increasing numbers of dictionaries exist also in electronic forms which are independent of any particular printed form, but from which various displays can be produced. Both typographically and structurally, print dictionaries are extremely complex. Such lexical resources are moreover of interest to many communities with different and sometimes conflicting goals. As a result, many general problems of text encoding are particularly pronounced here, and more compromises and alternatives within the encoding scheme may be required in the future. 1 Two problems are particularly prominent. First, because the structure of dictionary entries varies widely both among and within dictionaries, the simplest way for an encoding scheme to accommodate the entire range of structures actually encountered is to allow virtually any element to appear virtually anywhere in a dictionary entry. It is clear, however, that strong and consistent structural principles do govern the vast majority of conventional dictionaries, as well as many or most entries even in more exotic dictionaries; encoding guidelines should include these structural principles. We therefore define two distinct elements for dictionary entries, one ( entry ) which captures the regularities of many conventional dictionary entries, and a second ( entryFree ) which uses the same elements, but allows them to combine much more freely. It is however recommended that entry be used in preference to entryFree wherever possible. These elements and their contents are described in sections 9.2 The Structure of Dictionary Entries , 9.6 Unstructured Entries , and 9.4 Headword and Pronunciation References . Second, since so much of the information in printed dictionaries is implicit or highly compressed, their encoding requires clear thought about whether it is to capture the precise typographic form of the source text or the underlying structure of the information it presents. Since both of these views of the dictionary may be of interest, it proves necessary to develop methods of recording both, and of recording the interrelationship between them as well. Users interested mainly in the printed format of the dictionary will require an encoding to be faithful to an original printed version. However, other users will be interested primarily in capturing the lexical information in a dictionary in a form suitable for further processing, which may demand the expansion or rearrangement of the information contained in the printed form. Further, some users wish to encode both of these views of the data, and retain the links between related elements of the two encodings. Problems of recording these two different views of dictionary data are discussed in section 9.5 Typographic and Lexical Information in Dictionary Data , together with mechanisms for retaining both views when this is desired. To deal with this complexity, and in particular to account for the wide variety of linguistic contexts within which a dictionary may be designed, it can be necessary to customize or change the schema by providing more restriction or possibly alternate content models for the elements defined in this chapter. Section 9.3.2 Grammatical Information illustrates this with the provision of a closed set of values for grammatical descriptors. This chapter contains a large number of examples taken from existing print dictionaries; in each case, the original source is identified. In presenting such examples, we have tried to retain the original typographic appearance of the example as well as presenting a suggested encoding for it. Where this has not been possible (for example in the display of pronunciation) we have adopted the transliteration found in the electronic edition of the Oxford Advanced Learner's Dictionary . Also, the middle dot in quoted entries is rendered with a full stop, while within the sample transcriptions hyphenation and syllabification points are indicated by a vertical bar |, regardless of their appearance in the source text. 9.1 Dictionary Body and Overall Structure Overall, dictionaries have the same structure of front matter, body, and back matter familiar from other texts. In addition, this module defines entry , entryFree , and superEntry as component-level elements which can occur directly within a text division or the text body. The following tags can therefore be used to mark the gross structure of a printed dictionary; the dictionary-specific tags are discussed further in the following section. < text > contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. < front > contains any prefatory matter (headers, abstracts, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. < body > contains the whole body of a single unitary text, excluding any front or back matter. < back > contains any appendixes, etc. following the main part of a text. < div > contains a subdivision of the front, body, or back of a text. < entry > contains a single structured entry in any kind of lexical resource, such as a dictionary or lexicon. < entryFree > contains a single unstructured entry in any kind of lexical resource, such as a dictionary or lexicon. < superEntry > groups a sequence of entries within any kind of lexical resource, such as a dictionary or lexicon which function as a single unit, for example a set of homographs. As members of the classes att.entryLike and att.sortable , entry and entryFree share the following attributes: < att.entryLike > provides attributes used to distinguish different styles of dictionary entries. @type indicates type of entry, in dictionaries with multiple types. indicates type of entry, in dictionaries with multiple types. < att.sortable > provides attributes for elements in lists or groups that are sortable, but whose sorting key cannot be derived mechanically from the element content. @sortKey supplies the sort key for this element in an index, list or group which contains it. supplies the sort key for this element in an index, list or group which contains it. The front and back matter of a dictionary may well contain specialized material such as lists of common and proper nouns, grammatical tables, gazetteers, a guide to the use of the dictionary, etc. These should be tagged using elements defined elsewhere in these Guidelines, chiefly in the core module (chapter 3 Elements Available in All TEI Documents ) together with the specialized dictionary elements defined in this chapter. The body element consists of a set of entries , optionally grouped into one or several div elements. These text divisions might, for example, correspond to sections for different letters of the alphabet, or to sections for different languages in a bilingual dictionary, as in the following example: In a print dictionary, the entries are typically typographically distinct entities, each headed by some morphological form of the lexical item described (the headword ), and sorted in alphabetical order or (especially for non-alphabetic scripts) in some other conventional sequence. Dictionary entries should be encoded as distinct successive items, each marked as an entry or entryFree element. The type attribute may be used to distinguish different types of entries, for example main entries, related entries, run-on entries, or entries for cross-references, etc. Some dictionaries provide distinct entries for homographs, on the basis of etymology, part-of-speech, or both, and typically provide a numeric superscript on the headword identifying the homograph number. In these cases each homograph should be encoded as a separate entry; the superEntry element may optionally be used to group such successive homograph entries. In addition to a series of entry elements, the superEntry may contain a preliminary form group (see section 9.3.1 Information on Written and Spoken Forms ) when information about hyphenation, pronunciation, etc., is given only once for two or more homograph entries. If the homograph number is to be recorded, the global attribute n may be used for this purpose. In some dictionaries, homographs are treated in distinct parts of the same entry; in these cases, they may be separated by use of the hom element, for which see section 9.2.1 Hierarchical Levels . A sort key, given in the sortKey attribute, is often required for superentries and entries, especially in cases where the order of entries does not follow the local character-set collating sequence (as, for example, when an entry for 3D appears at the place where three-D would appear). A dictionary with no internal divisions might thus have a structure like the following; a superEntry is shown grouping two homograph entries. drama castList epilogue performance prologue set figures figure linking standOff textstructure argument body div div1 div2 div3 div4 div5 div6 div7 epigraph postscript indicates type of entry, in dictionaries with multiple types. The global n attribute may be used to encode the homograph numbers attached to entries for homographs. Pour des homographes, l'attribut global npeut être utilisé pour encoder des numéros d'homographes attachés aux entrées. グローバル属性nを使い，同綴異義語の番号としてもよい． 9.2 The Structure of Dictionary Entries A simple dictionary entry may contain information about the form of the word treated, its grammatical characterization, its definition, synonyms, or translation equivalents, its etymology, cross-references to other entries, usage information, and examples. These we refer to as the constituent parts or constituents of the entry; some dictionary constituents possess no internal structure, while others are most naturally viewed as groups of smaller elements, which may be marked in their own right. In some styles of markup, tags will be applied only to the low-level items, leaving the constituent groups which contain them untagged. We distinguish the class of top-level constituents of dictionary entries, which can occur directly within the entry element, from the class of phrase-level constituents, which can normally occur only within top-level constituents. The top-level constituents of dictionary entries are described in section 9.2.2 Groups and Constituents , and documented more fully, together with their phrase-level sub-constituents, in section 9.3 Top-level Constituents of Entries . In addition, however, dictionary entries often have a complex hierarchical structure. For example, an entry may consist of two or more sub-parts, each corresponding to information for a different part-of-speech homograph of the headword. The entry (or part-of-speech homographs, if the entry is split this way) may also consist of senses, each of which may in turn be composed of two or more sub-senses, etc. Each sub-part, homograph entry, sense, or sub-sense we call a level ; at any level in an entry, any or all of the constituent parts of dictionary entries may appear. The hierarchical levels of dictionary entries are documented in section 9.2.1 Hierarchical Levels . 9.2.1 Hierarchical Levels The outermost structural level of an entry is marked with the elements entry or entryFree . The hom element marks the subdivision of entries into homographs differing in their part-of-speech. The sense element marks the subdivision of entries and part-of-speech homographs into senses; this element nests recursively in order to provide for a hierarchy of sub-senses of any depth. It is recommended to use the sense element even for an entry that has only one sense to group together all parts of the definition relating to the word sense since this leads to more consistent encoding across entries. All of these levels may each contain any of the constituent parts of an entry. A special case of hierarchical structure is represented by the re (related entry) element, which is discussed in section 9.3.6 Related Entries . Finally, the element dictScrap may be used at any point in the hierarchy to delimit parts of the dictionary entry which are structurally anomalous, as further discussed in section 9.6 Unstructured Entries . < entry > contains a single structured entry in any kind of lexical resource, such as a dictionary or lexicon. < entryFree > contains a single unstructured entry in any kind of lexical resource, such as a dictionary or lexicon. < hom > groups information relating to one homograph within an entry. < sense > groups together all information relating to one word sense in a dictionary entry, for example definitions, examples, and translation equivalents. < dictScrap > encloses a part of a dictionary entry in which other phrase-level dictionary elements are freely combined. For example, an entry with two senses will have the following structure: An entry with two homographs, the first with two senses and the second with three (one of which has two sub-senses), may have a structure like this: The hierarchic structure of a dictionary entry is enforced by the structures defined in this module. The content model for entry specifies that entries do not nest, that homographs nest within entries, and that senses nest within entries, homographs, or senses, and may be nested to any depth to reflect the embedding of sub-senses. Any of the top-level constituents ( def , usg , form , etc.) can appear at any level (i.e., within entries, homographs, or senses). 9.2.2 Groups and Constituents As noted above, dictionary entries, and subordinate levels within dictionary entries, may comprise several constituent parts, each providing a different type of information about the word treated. The top-level constituents of dictionary entries are: information about the form of the word treated (orthography, pronunciation, hyphenation, etc.) grammatical information (part of speech, grammatical sub-categorization, etc.) definitions or translations into another language etymology examples usage information cross-references to other entries notes entries (often of reduced form) for related words, typically called related entries The following elements are used to encode these top-level constituents: < form > groups all the information on the written and spoken forms of one headword. < gramGrp > groups morpho-syntactic information about a lexical item, e.g. pos , gen , number , case , or iType (inflectional class). < def > contains definition text in a dictionary entry. < cit > contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. < usg > contains usage information in a dictionary entry. < xr > contains a phrase, sentence, or icon referring the reader to some other location in this or another text. < etym > encloses the etymological information in a dictionary entry. < re > contains a dictionary entry for a lexical item related to the headword, such as a compound phrase or derived form, embedded inside a larger entry. < note > contains a note or annotation. In a simple entry with no internal hierarchy, all top-level constituents can appear as children of entry . com.peti.tor /k@m\"petit@(r)/ n person who competes. OALD Any top-level constituent can appear at any level when the hierarchical structure of the entry is more complex. The most obvious examples are def and cit , which appear at the sense level when several senses or translations exist: disproof (dɪsˈpru:f) n 1 facts that disprove something 2 the act of disproving. CED For ease of processing of such entries containing multiple senses along with those containing only a single sense, it is recommended to use sense in all entries to wrap those elements relating to a particular word sense. In the following example, gramGrp is used to distinguish two homographs: bray /breI/ n cry of an ass; sound of a trumpet. ∙ vt [VP2A] make a cry or sound of this kind. OALD Information of the same kind can appear at different levels within the same entry; here, grammatical information occurs both at entry and homograph level. ca.reen /k@\"ri:n/ vt,vi 1 [VP6A] turn (a ship) on one side for cleaning, repairing, etc. 2 [VP6A, 2A] (cause to) tilt, lean over to one side. OALD Alone among the constituent groups, form can appear at the superEntry level as well as at the entry , hom , and sense levels: a.ban.don 1 /@\"band@n/ v [T1] 1 to leave completely and for ever; desert: The sailors abandoned the burning ship. 2 … abandon 2 n [U] the state when one's feelings and actions are uncontrolled; freedom from control... LDOCE 9.3 Top-level Constituents of Entries This section describes the top-level constituents of dictionary entries, together with the phrase-level constituents peculiar to each. the form element, which groups orthographic information and pronunciations, is described in section 9.3.1 Information on Written and Spoken Forms the gramGrp element, which groups elements for the grammatical characterization of the headword, is described in section 9.3.2 Grammatical Information the def element, which describes the meaning of the headword, is described in section 9.3.3 Sense Information the etym element and its special phrase-level elements are documented in section 9.3.4 Etymological Information the cit element and its specific applications are described in section 9.3.3 Sense Information and section 9.3.5 Other Information the usg , lbl , xr , and note elements are described in section 9.3.5 Other Information the re element, which marks nested entries for related words, is described in section 9.3.6 Related Entries 9.3.1 Information on Written and Spoken Forms Dictionary entries most often begin with information about the form of the word to which the entry applies. Typically, the orthographic form of the word, sometimes marked for syllabification or hyphenation, is the first item in an entry. Other information about the word, including variant or alternate forms, inflected forms, pronunciation, etc., is also often given. The following elements should be used to encode this information: the form element groups one or more occurrences of any of them; it can also be recursively nested to reflect more complex sub-grouping of information about word form(s), as shown in the examples. < form > groups all the information on the written and spoken forms of one headword. < orth > gives the orthographic form of a dictionary headword. < pron > contains the pronunciation(s) of the word. < hyph > contains a hyphenated form of a dictionary headword, or hyphenation information in some other form. < syll > contains the syllabification of the headword. < stress > contains the stress pattern for a dictionary headword, if given separately. < lbl > contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. In addition to those listed above, the following elements, which encode morphological details of the form, may also occur within form elements: < gram > within an entry in a dictionary or a terminological data file, contains grammatical information relating to a term, word, or form. < gen > identifies the morphological gender of a lexical item, as given in the dictionary. < number > indicates grammatical number associated with a form, as given in a dictionary. < case > contains grammatical case information given by a dictionary for a given form. < per > contains an indication of the grammatical person (1st, 2nd, 3rd, etc.) associated with a given inflected form in a dictionary. < tns > indicates the grammatical tense associated with a given inflected form in a dictionary. < mood > contains information about the grammatical mood of verbs (e.g. indicative, subjunctive, imperative). < iType > indicates the inflectional class associated with a lexical item. < pos > indicates the part of speech assigned to a dictionary headword such as noun, verb, or adjective. < subc > contains subcategorization information (transitive/intransitive, countable/non-countable, etc.) < colloc > contains any sequence of words that co-occur with the headword with significant frequency. The use of these elements as children of form is deprecated; instead, they should always be children of a gramGrp within form when describing that particular form of the word. Different dictionaries use different means to mark hyphenation, syllabification, and stress, and they often use some unusual glyphs (e.g., the middle dot for hyphenation). All of these glyphs are in the Unicode character set, as discussed in 5.7.1 Character References . When transcribing representations of pronunciation the International Phonetic Alphabet should be used. It may be convenient (as has been done in the text of this chapter) to use a simple transliteration scheme for this; such a scheme should however be properly documented in the header. In the simplest case, nothing is given but the orthography: Often, however, pronunciation is given. soucoupe [sukup] … DNT For a variety of reasons including ease of processing, it may be desired to split into separate elements information which is collapsed into a single element in the source text; orthography and hyphenation may for example be transcribed as separate elements, although given together in the source text. For a discussion of the issues involved, and of methods for retaining both the presentation form and the interpreted form, see section 9.5 Typographic and Lexical Information in Dictionary Data . This example splits orthography and hyphenation, and adds syllabification because it differs from hyphenation: ar.ea … W7 Multiple orthographic forms may be given, e.g. to illustrate a word's inflectional pattern: brag … vb brags, bragging, bragged … CED Explanatory labels may be attached to alternate forms: MTBF abbreviation for mean time between failures CED When multiple orthographic forms are given, a pronunciation may be associated with all of them, as here: biryani or biriani (ˌbɪrɪˈa:nɪ) … CED In other cases, different pronunciations are provided for different orthographic forms; here, the form element is repeated to associate the first orthographic form explicitly with the first pronunciation, and the second orthographic form with the second pronunciation: mackle (ˈmækᵊl) or macule (ˈmækju:l) … CED Recursive nesting of the form element can preserve relations among elements that are implicit in the text. For example, in the CED entry for hospitaller , it is clear that U.S. is associated only with hospitaler , but that the pronunciation applies to both forms. The following encoding preserves these relations: hospitaller or US hospitaler (ˈhɒspɪtələ) … CED 9.3.2 Grammatical Information The gramGrp element groups grammatical information, such as part of speech, subcategorization information (e.g., syntactic patterns for verbs, count/mass distinctions for nouns), etc. It can contain any of the morphological elements defined in section 9.3.1 Information on Written and Spoken Forms for form and can appear as a child of entry , form , sense , cit , or any other element containing content about which there is grammatical information. For example, in the entry pinna (ˈpɪnə) n , pl -nae (-ni:) or -nas CED , the word defined can be either singular or plural; the pl. specification applies only to the inflected forms provided. Compare this with pants (paents) pl. n. , where pl. applies to the headword itself. As noted above in section 9.3.1 Information on Written and Spoken Forms , the elements for morphological information are simply shorthand for the general purpose gram element. Consider this entry for the French word médire : médire v.t. ind. (de) … PLC This entry can be tagged using specialized grammatical elements: Like form , gramGrp can be repeated, recursively nested, or used at the sense level to show relations among elements. isotope adj. et n. m. … DNT 9.3.3 Sense Information Dictionaries may describe the meanings of words in a wide variety of different ways—by means of synonyms, paraphrases, translations into other languages, formal definitions in various highly stylized forms, etc. No attempt is made here to distinguish all the different forms which sense information may take; all of them may be tagged using the def element described in section 9.3.3.1 Definitions . As a special case it is frequently desirable to distinguish the provision of translation equivalents in other languages from other forms of sense information; the use of cit type=\"translation\" (which groups a translation equivalent with related information such as its grammatical description) for this purpose is described in section 9.3.3.2 Translation Equivalents . 9.3.3.1 Definitions Dictionary definitions are those pieces of prose in a dictionary entry that describe the meaning of some lexical item. Most often, definitions describe the headword of the entry; in some cases, they describe translated texts, examples, etc.; see cit type=\"translation\", section 9.3.3.2 Translation Equivalents , and cit type=\"example\", section 9.3.5.1 Examples . The def element directly contains the text of the definition; unlike form and gramGrp , it does not serve solely to group a set of smaller elements. The close analysis of definition text, such as the tagging of hypernyms, typical objects, etc., is not covered by these Guidelines. Definitions may occur directly within an entry; when multiple definitions are given, they are typically identified as belonging to distinct senses, as here: demigod (…) n. 1.a. a being who is part mortal, part god. b. a lesser deity. 2. a godlike person. CP In multilingual dictionaries, it is sometimes possible to distinguish translation equivalents from definitions proper; here a def element is distinguished from the translation information within which it appears. rémoulade [Remulad] nf remoulade, rémoulade ( dressing containing mustard and herbs ). CR 9.3.3.2 Translation Equivalents Multilingual dictionaries contain information about translations of a given word in some source language for one or more target languages. Minimally, the dictionary provides the corresponding translation in the target language; other material, such as morphological information (gender, case), various kinds of usage restrictions, etc., may also be given. If translation equivalents are to be distinguished from other kinds of sense information, they may be encoded using cit type=\"translation\". The global xml:lang attribute should be used to specify the target language. As in monolingual dictionaries, the sense element is used in multilingual dictionaries to group information (forms, grammatical information, usage, translation(s), etc.) about a given sense of a word where necessary. Information about the individual translation equivalents within a sense is grouped using cit type=\"translation\". This information may include the translation text (tagged q or quote ), morphological information ( gen , case , etc.), usage notes ( usg ), translation labels ( lbl ), and definitions ( def ).When bibliographic data is provided, the quote element should be used. < cit > contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. < lbl > contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. Note how in the following example, different translation equivalents are grouped into the same or different senses, following the punctuation of the source and the usage labels: dresser … (a) (Theat) habilleur m, -euse f; (Comm: window ~) étalagiste mf. she's a stylish ~ elle s'habille avec chic; V hair. (b) (tool) (for wood) raboteuse f; (for stone) rabotin m. CR In the following example, a distinction is made between the translation equivalent ( OAS ) and a descriptive phrase providing further information for the user of the dictionary. O.A.S. ... nf (abrév de Organisation de l'Armée secrète ) OAS ( illegal military organization supporting French rule of Algeria ). CR Note that cit type=\"translation\" may also be used in monolingual dictionaries when a translation is given for a foreign word: havdalah or havdoloh Hebrew ( havdaˈla; Yiddish havˈdɔlə) n Judaism the ceremony marking the end of the sabbath or of a festival, including the blessings over wine, candles and spices [literally: separation] CED 9.3.4 Etymological Information The element etym marks a block of etymological information. Etymologies may contain highly structured lists of words in an order indicating their descent from each other, but often also include related words and forms outside the direct line of descent, for comparison. Not infrequently, etymologies include commentary of various sorts, and can grow into short (or long!) essays with prose-like structure. This variation in structure makes it impracticable to define tags which capture the entire intellectual structure of the etymology or record the precise interrelation of all the words mentioned. It is, however, feasible to mark some of the more obvious phrase-level elements frequently found in etymologies, using tags defined in the core module or elsewhere in this chapter. Of particular relevance for the markup of etymologies are: < etym > encloses the etymological information in a dictionary entry. < lang > contains the name of a language mentioned in etymological or other linguistic discussion. < date > contains a date in any format. < mentioned > marks words or phrases mentioned, not used. < gloss > identifies a phrase or word used to provide a gloss or definition for some other word or phrase. < pron > contains the pronunciation(s) of the word. < usg > contains usage information in a dictionary entry. < lbl > contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. As in other prose, individual word forms mentioned in an etymological description are tagged with mentioned elements. Pronunciations, usage labels, and glosses can be tagged using the pron , usg , and gloss elements defined elsewhere in these Guidelines. In addition, the lang element may be used to identify a particular language name where it appears, in addition to using the xml:lang attribute of the mentioned element. Examples: abismo m. (del gr. a priv. y byssos, fondo). Sima, gran profundidad. … 9.3.5 Other Information 9.3.5.1 Examples Dictionaries typically include examples of word use, usually accompanying definitions or translations. In some cases, the examples are quotations from another source, and are occasionally followed by a citation to the author. The cit type=\"example\" element contains usage examples and associated information; the example text itself should be enclosed in a q or quote element. The cit element associates a quotation with a bibliographic reference to its source. < q > contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. < quote > contains a phrase or passage attributed by the narrator or author to some agency external to the text. < cit > contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. Examples frequently abbreviate the headword, and so their transcription will frequently make use of the oRef element described below in section 9.4 Headword and Pronunciation References . Examples: multiplex /…/ adj tech having many parts: the multiplex eye of the fly. LDOCE 9.3.5.2 Usage Information and Other Labels Most dictionaries provide restrictive labels and phrases indicating the usage of given words or particular senses. Other phrases, not necessarily related to usage, may also be attached to forms, translations, cross-references, and examples. The following elements are provided to mark up such labels: < usg > contains usage information in a dictionary entry. < lbl > contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. temporal use (archaic, obsolete, etc.) register (slang, formal, taboo, ironic, facetious, etc.) style (literal, figurative, etc.) connotative effect (e.g. derogatory, offensive) subject field (Astronomy, Philosophy, etc.) national or regional use (Australian, U.S., Midland dialect, etc.) geographic area temporal, historical era ( archaic , old , etc.) domain register style (figurative, literal, etc.) preference level ( chiefly , usually , etc.) acceptability language for foreign words, spellings pronunciations, etc. grammatical usage synonym given to show use hypernym given to show usage collocation given to show usage typical complement typical object typical subject typical verb unclassifiable piece of information to guide sense choice In this entry, one spelling is marked as geographically restricted: colour or US color … CED In the next example, usage labels are used to indicate domains, register, and synonyms associated with different senses: palette [palEt] nf (a) (Peinture: lit, fig) palette. (b) (Boucherie) shoulder. (c) (aube de roue) paddle; (battoir à linge) beetle; (Manutention, Constr) pallet. CR When the usage label is hard to classify, it may be described as a hint : rempaillage […] nm reseating, rebottoming ( with straw ). CR 9.3.5.3 Cross-References to Other Entries Dictionary entries frequently refer to information in other entries, often using extremely dense notations to convey the headword of the entry to be sought, the particular part of the entry being referred to, and the nature of the information to be sought there (synonyms, antonyms, usage notes, etymology, an illustration, etc.) Cross-references may be tagged in dictionaries using the ref and ptr elements defined in the core module (section 3.7 Simple Links and Cross-References ). In addition, the xr element may be used to group all the information relating to a cross-reference. < xr > contains a phrase, sentence, or icon referring the reader to some other location in this or another text. < ref > defines a reference to another location, possibly modified by additional text or comment. < ptr > defines a pointer to another location. < lbl > contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. As in other types of text, the actual pointing element (e.g. ref or ptr ) is used to tag the cross-reference target proper (in dictionaries, usually the headword, possibly accompanied by a homograph number, a sense number, or other further restriction specifying what portion of the target entry is being referred to). The xr element is used to group the target with any accompanying phrases or symbols used to label the cross-reference; the cross-reference label itself may be encoded with lbl or may remain untagged. Both of the following are thus legitimate: glee … Compare madrigal (1) CED The type attribute on the pointing element or on the xr element may be used to indicate what kind of cross-reference is being made, using any convenient typology. Since different dictionaries may label the same kind of cross-reference in different ways, it may be useful to give normalized indications in the type attribute, enabling the encoder to distinguish irregular forms of cross-reference more reliably: rose 2 … vb the past tense of rise CED Cross-references occasionally occur in definition texts, example texts, etc., or may be free-standing within an entry. These may typically be encoded using ref or ptr , without an enclosing xr . For example: entacher … Acte entaché de nullité , contenant un vice de forme ou passé par un incapable*. DNT The asterisk signals a reference to the entry for incapable . 9.3.5.4 Notes within Entries Dictionaries may include extensive explanatory notes about usage, grammar, context, etc. within entries. Very often, such notes appear as a separate section at the end of an entry. The standard note element should be used for such material. < note > contains a note or annotation. For example: neither (ˈnaɪðə, ˈni:ðə) determiner 1a not one nor the other (of two); not either: neither foot is swollen … usage A verb following a compound subject that uses neither … should be in the singular if both subjects are in the singular: neither Jack nor John has done the work CED The formal declaration for note is given in section 3.9 Notes, Annotation, and Indexing . 9.3.6 Related Entries The re element encloses a degenerate entry which appears in the body of another entry for some purpose. Many dictionaries include related entries for direct derivatives or inflected forms of the entry word, or for compound words, phrases, collocations, and idioms containing the entry word. Related entries can be complex, and may in fact include any of the information to be found in a regular entry. Therefore, the re element is defined to contain the same elements as an entry element, with the exception that it may not contain any nested re elements. Examples: bevvy (ˈbɛvɪ) informal n, pl -vies 1 a drink, esp an alcoholic one: we had a few bevvies last night 2 a session of drinking. ▷ vb -vies , -vying , -vied ( intr ) 3 to drink alcohol [probably from Old French bevee , buvee , drinking] > 'bevvied adj CED 9.4 Headword and Pronunciation References Examples, definitions, etymologies, and occasionally other elements such as cross-references, orthographic forms, etc., often contain a shortened or iconic reference to the headword, rather than repeating the headword itself. The references may be to the orthographic form or to the pronunciation, to the form given or to a variant of that form. The following elements are used to encode such iconic references to a headword: < oRef > in a dictionary example, indicates a reference to the orthographic form(s) of the headword. < pRef > in a dictionary example, indicates a reference to the pronunciation(s) of the headword. These elements all inherit the following attributes from the class att.pointing which may optionally be used to resolve any ambiguity about the headword form being referred to. < att.pointing > provides a set of attributes used by all elements which point to other elements by means of one or more URI references. @target specifies the destination of the reference by supplying one or more URI References specifies the destination of the reference by supplying one or more URI References Headword references come in a variety of formats: indicates a reference to the full form of the headword gives a prefix to be affixed to the headword gives a suffix to be affixed to the headword gives the first letter in uppercase, indicating that the headword is capitalized gives a prefix and a suffix to be affixed to the headword gives the initial of the word followed by a full stop, to indicate reference to the full form of the headword refers to a capitalized form of the headword The oRef element should be used for iconic or shortened references to the orthographic form(s) of the headword itself. It is an empty element and replaces, rather than enclosing, the reference. Note that the reference to a headword is not necessarily a simple string replacement. In the example colour 1, (US = color) …~ films; ~ TV; Red, blue and yellow are ~s. OALD , the tilde stands for either headword form ( colour , color ). Examples: colonel … army officer above a lieutenant-~. OALD The following example demonstrates the use of the target attribute to refer to a specific form of the headword: vag- or vago- comb form … : vagus nerve < vag al > < vago tomy > W7 In many cases the reference is not to the orthographic form of the headword, but rather to another form of the headword—usually to an inflected form. In these cases, the element oRef should be used; this element may take as its content the string as it appears in the text. take … < Mr Burton took us for French > NPEG The next example shows a discontinuous reference, using the attributes next and prev, which are defined in the additional module for linking, segmentation, and alignment (see chapter 16 Linking, Segmentation, and Alignment ) and therefore require that that module be selected in addition to that for dictionaries. mix up … < it's easy to mix her up with her sister > NPEG In addition, some dictionaries make reference to the pronunciation of the headword in the pronunciation of related entries, variants, or examples. The pRef element should be used for such references. hors d'oeuvre /,aw'duhv (Fr O:r dœvr)/ n, pl hors d'oeuvres also hors d'oeuvre /'duhv(z) (Fr ~)/ NPEG Because headword and pronunciation references can occur virtually anywhere in an entry, the oRef and pRef elements may appear within any other element defined for dictionary entries. Since existing printed dictionaries use different conventions for headword references (swung dash, first letter abbreviated form, capitalization, or italicization of the word, etc.) the exact method used should be documented in the header. 9.5 Typographic and Lexical Information in Dictionary Data Among the many possible views of dictionaries, it is useful to distinguish at least the following three, which help to clarify some issues raised with particular urgency by dictionaries, on account of the complexity of both their typography and their information structure. (a) the typographic view —the two-dimensional printed page, including information about line and page breaks and other features of layout (b) the editorial view —the one-dimensional sequence of tokens which can be seen as the input to the typesetting process; the wording and punctuation of the text and the sequencing of items are visible in this view, but specifics of the typographic realization are not (c) the lexical view —this view includes the underlying information represented in a dictionary, without concern for its exact textual form For example, a domain indication in a dictionary entry might be broken over a line and therefore hyphenated ( naut- ical ); the typographic view of the dictionary preserves this information. In a purely editorial view, the particular form in which the domain name is given in the particular dictionary (as nautical , rather than naut. , Naut. , etc.) would be preserved, but the fact of the line break would not. Font shifts might plausibly be included in either a strictly typographic or an editorial view. In the lexical view, the only information preserved concerning domain would be some standard symbol or string representing the nautical domain (e.g. naut. ) regardless of the form in which it appears in the printed dictionary. In practice, publishers begin with the lexical view—i.e., lexical data as it might appear in a database—and generate first the editorial view, which reflects editorial choices for a particular dictionary (such as the use of the abbreviation Naut. for nautical , the fonts in which different types of information are to be rendered, etc.), and then the typographic view, which is tied to a specific printed rendering. Computational linguists and philologists often begin with the typographic view and analyse it to obtain the editorial and/or lexical views. Some users may ultimately be concerned with retaining only the lexical view, or they may wish to preserve the typographic or editorial views as a reference text, perhaps as a guard against the loss or misinterpretation of information in the translation process. Some researchers may wish to retain all three views, and study their interrelations, since research questions may well span all three views. In general, an electronic encoding of a text will allow the recovery of at least one view of that text (the one which guided the encoding); if editorial and typographic practices are consistently applied in the production of a printed dictionary, or if exceptions to the rules are consistently recorded in the electronic encoding, then it is in principle possible to recover the editorial view from an encoding of the lexical view, and the typographic view from an encoding of the editorial view. In practice, of course, the severe compression of information in dictionaries, the variety of methods by which this compression is achieved, the complexity of formulating completely explicit rules for editorial and typographic practice, and the relative rarity of complete consistency in the application of such rules, all make the mechanical transformation of information from one view into another something of a vexed question. This section describes some principles which may be useful in capturing one or the other of these views as consistently and completely as possible, and describes some methods of attempting to capture more than one view in a single encoding. Only the editorial and lexical views are explicitly treated here; for methods of recording the physical or typographic details of a text, see chapter 11 Representation of Primary Sources . Other approaches to these problems, such as the use of repetitive encoding and links to show their correspondences, or the use of feature structures to capture the information structure, and of the ana and inst attributes to link feature structures to a transcription of the editorial view of a dictionary, are not discussed here (for feature structures, see chapter 18 Feature Structures . For linkage of textual form and underlying information, see chapter 17 Simple Analytic Mechanisms ). 9.5.1 Editorial View Common practice in encoding texts of all sorts relies on principles such as the following, which can be used successfully to capture the editorial view when encoding a dictionary: All characters of the source text should be retained, with the possible exception of rendition text (for which see further below). Characters appearing in the source text should typically be given as character data content in the document, rather than as the value of an attribute; again, rendition text may optionally be excepted from this rule. Apart from the characters or graphics in the source text, nothing else should appear as content in the document, although it may be given in attribute values. The material in the source text should appear in the encoding in the same order. Complications of the character sequence by footnotes, marginal notes, etc., text wrapping around illustrations, etc., may be dealt with by the usual means (for notes, see section 3.9 Notes, Annotation, and Indexing ). 2 In a very conservative transcription of the editorial view of a text, rendition characters (e.g. the commas, parentheses, etc., used in dictionary entries to signal boundaries among parts of the entry) and rendition text (for example, conjunctions joining alternate headwords, etc.) are typically retained. Removing the tags from such a transcription will leave all and only the characters of the source text, in their original sequence. 3 Consider, for example, the following entry: pinna (ˈpɪnə) n , pl -nae (-ni:) or -nas 1 any leaflet of a pinnate compound leaf 2 zoology a feather, wing, fin, or similarly shaped part 3 another name for auricle (2). [C18: via New Latin from Latin: wing, feather, fin] CED A conservative encoding of the editorial view of this entry, which retains all rendition text, might resemble the following: A somewhat simplified encoding of the editorial view of this entry might exploit the fact that rendition text is often systematically recoverable. For example, parentheses consistently appear around pronunciation in this dictionary, and thus are effectively implied by the start- and end-tags for pron . 4 In such an encoding, removing the tags should exactly reproduce the sequence of characters in the source, minus rendition text. The original character sequence can be recovered fully by replacing tags with any rendition text they imply. Encoding in this way, the example given above might resemble the following. The tagUsage element in the header would be used to record the following patterns of rendition text: parentheses appear around pron elements commas appear before inflected forms the word or appears before alternate forms brackets appear around the etymology full stops appear after pos , inflection information, and sense numbers senses are numbered in sequence unless otherwise specified using the global n attribute When rendition text is omitted, it is recommended that the means to regenerate it be fully documented, using the tagUsage element of the TEI header. If rendition text is used systematically in a dictionary, with only a few mistakes or exceptions, the global attribute rend may be used on any tag to flag exceptions to the normal treatment. The values of the rend attribute are not prescribed, but it can be used with values such as no-comma, no-left-paren, etc. Specific values can be documented using the rendition element in the TEI header. In the following (imaginary) example, no left parenthesis precedes the pronunciation: biryani or biriani %bIrI\"A:nI) any of a variety of Indian dishes … [from Urdu] This irregularity can be recorded thus: 9.5.2 Lexical View If the text to be interchanged retains only the lexical view of the text, there may be no concern for the recoverability of the editorial (not to speak of the typographic) view of the text. However, it is strongly recommended that the TEI header be used to document fully the nature of all alterations to the original data, such as normalization of domain names, expansion of inflected forms, etc. In an encoding of the lexical view of a text, there are degrees of departure from the original data: normalizing inconsistent forms like nautical , naut ., Naut. , etc., to nautical is a relatively slight alteration; expansion of delay -ed -ing to delay, delayed, delaying is a more substantial departure. Still more severe is the rearranging of the order of information in entries; for example: reorganizing the order of elements in an entry to show their relationship, as in clem (klɛm) or clam vb clems, clemming, clemmed or clams, clamming, clammed CED where in a strictly lexical view one might wish to group clem and clam with their respective inflected forms. splitting an entry into two separate entries, as in celi.bacy /\"selIb@sI/ n [U] state of living unmarried, esp as a religious obligation. celi.bate /\"selIb@t/ n [C] unmarried person (esp a priest who has taken a vow not to marry). OALD For some purposes, this entry might usefully be split into an entry for celibacy and a separate entry for celibate . An encoding which captures the lexical view of the example given in the previous section might look something like the following. In this encoding: abbreviated forms have been silently expanded some forms have been moved to allow related forms to be grouped together the part of speech information has been moved to allow all forms to be given together the cross-reference to auricle has been simplified Whether the given dictionary encoding focusses on the lexical view and thus approaches the status of lexical databases, or uses the typographic/editorial view approach and needs to communicate the sometimes informally stated values for the particular descriptive features, the issue of interoperability of the content and of the container objects becomes relevant, in view of the growing tendency to interlink pieces of information across Internet resources. In such cases, it becomes crucial to be able to encode the fact that whether the information on, for instance, the value of the grammatical category of Number is provided as \"sg.\", \"sing.\", \"Singular\", or equivalently \"poj.\" in Polish, or \"Ez.\" in German, etc., what is actually referred to is always the same grammatical value that can be rendered with a plethora of markers, depending on the publisher, language, or lexicographic tradition. In order to signal that this variety of surface markers in fact indicate the same underlying value, it is possible to align them with an external inventory of standardized values. The TEI provides means to align grammatical categories as well as their content with the ISOcat reference, which is a Web implementation of ISO 12620 . In the example below, a fragment of the entry for isotope cited in section 9.3.2 Grammatical Information is adorned by references to ISOcat definitions for \"part of speech\" (dcr:datcat) and \"adjective\" (dcr:valueDatcat). Depending on the status and extent of the dictionary, various strategies may be used to reduce the redundancy of the repeated ISOcat references. 9.5.3 Retaining Both Views It is sometimes desirable to retain both the lexical and the editorial view, in which case a potential conflict exists between the two. When there is a conflict between the encodings for the lexical and editorial views, the principles described in the following sections may be applied. 9.5.3.1 Using Attribute Values to Capture Alternate Views If the order of the data is the same in both views, then both views may be captured by encoding one dominant view in the character data content of the document, and encoding the other using attribute values on the appropriate elements. If all tags were to be removed, the remaining characters would be those of the dominant view of the text. The attribute class att.lexicographic (which includes the attributes norm and org from class att.lexicographic.normalized ) is used to provide attributes for use in encoding multiple views of the same dictionary entry. These attributes are available for use on all elements defined in this chapter when the base module for dictionaries is selected. When the editorial view is dominant, the following attributes may be used to capture the lexical view: < att.lexicographic > provides a set of attributes for specifying standard and normalized values, grammatical functions, alternate or equivalent forms, and information about composite parts. @split gives the list of split values for a merged form gives the list of split values for a merged form When the lexical view is dominant, the following attributes may be used to record the editorial view: < att.lexicographic > provides a set of attributes for specifying standard and normalized values, grammatical functions, alternate or equivalent forms, and information about composite parts. @mergedIn gives a reference to another element, where the original appears as a merged form. gives a reference to another element, where the original appears as a merged form. One attribute is useful in either view: < att.lexicographic > provides a set of attributes for specifying standard and normalized values, grammatical functions, alternate or equivalent forms, and information about composite parts. @opt indicates whether the element is optional or not indicates whether the element is optional or not For example, if the source text had the domain label naut. , it might be encoded as follows. With the editorial view dominant: If the source text gives inflectional information for the verb delay as delay, -ed, -ing , it might usefully be expanded to delayed, delayed, delaying . An encoding of the editorial view might take this form: The lexical view might be encoded thus: A particular problem may be posed by the common practice of presenting two alternate forms of a word in a single string, by marking some parts of the word as optional in some forms. The following entry is for a word which can be spelled either thyrostimuline or thyréostimuline : thyr(é)ostimuline [tiR(e)ostimylin] … With the editorial view dominant, this entry might begin thus: This example might also be encoded using the opt attribute combined with the attributes next and prev defined in chapter 16 Linking, Segmentation, and Alignment . Note that this transcription preserves both the lexical and editorial views in a single encoding. However, it has the disadvantage that the strings corresponding to entire words do not appear in the encoding uninterrupted, and therefore complex processing is required to retrieve them from the encoded text. The use of the opt attribute is recommended, however, when long spans of text are involved, or when the optional part contains embedded tags. For example, the following gives two definitions in one text: picture drawn with coloured chalk made into crayons , and coloured chalk made into crayons : pas.tel /\"pastl US: pa\"stel/ n 1 (picture drawn with) coloured chalk made into crayons. 2… OALD A simple encoding solution would be to leave the definition text unanalysed, but this might be felt inadequate since it does not show that there are two definitions. A possible alternative encoding would be: This transcribes some characters of the source text twice, however, which deviates from the usual practice. The following encoding records both the editorial and lexical views: 9.5.3.2 Recording Original Locations of Transposed Elements The attributes described in the previous section are useful only when the order of material is the same in both the editorial and the lexical view. When the two views impose different orders on the data, the standard linking mechanisms may be used to show the original location of material transposed in an encoding of the lexical view. If the original is only slightly modified, the anchor element may be used to mark the original location of the material, and the location attribute may be used on the lexical encoding of that material to indicate its original location(s). Like those in the preceding section, this attribute is defined for the attribute class att.lexicographic : < att.lexicographic > provides a set of attributes for specifying standard and normalized values, grammatical functions, alternate or equivalent forms, and information about composite parts. @opt indicates whether the element is optional or not indicates whether the element is optional or not For example: pinna (ˈpɪnə) n , pl -nae (-ni:) or -nas CED 9.6 Unstructured Entries The content model for the entry element provides an entry structure suitable for many average dictionaries, as well as many regular entries in more exotic dictionaries. However, the structure of some dictionaries does not allow the restrictions imposed by the content model for entry . To handle these cases, the entryFree and dictScrap elements are provided to support much wider variation in entry structure. The dictScrap element offers less freedom, in that it can only contain phrase level elements, but it can itself appear at any point within a dictionary entry where any of the structural components of a dictionary entry are permitted. As such, it acts as a container for otherwise anomalous parts of an entry. The entryFree element places no constraints at all upon the entry: any element defined in this chapter, as well as all the normal phrase-level and inter-level elements, can appear anywhere within it. With the entryFree element, the encoder is free to use any element anywhere, as well as to use or omit grouping elements such as form , gramGrp , etc. The entryFree element allows the encoding of entries which violate the structure specified for the entry element. For example, in the following entry from a dictionary already in electronic form, it is necessary to include a pron element within a def . This is not permitted in the content model for entry , but it poses no problem in the entryFree element. The entryFree element also makes it possible to transcribe a dictionary using only phrase-level (atomic) elements—that is, using no grouping elements at all. This can be desirable if the encoder wants a completely flat view, with no indication of or commitment to the association of one element with another. The following encoding uses no grouping elements, and keeps all rendition text: biryani or biriani (ˌbɪrɪˈa:nɪ) n any of a variety of Indian dishes … [from Urdu] CED Here is an alternative way of representing the same structure, this time using dictScrap : 9.7 The Dictionary Module The module defined in this chapter makes available the following components: Dictionaries Dictionaries The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">9 Dictionaries</span>"}
{"link":"p5.xml?id=MS","tag":"guidelines","content":"10 Manuscript Description 10.1 Overview The msdescription module 1 defines a special purpose element which can be used to provide detailed descriptive information about handwritten primary sources and other text-bearing objects. Although originally developed to meet the needs of cataloguers and scholars working with medieval manuscripts in the European tradition, the scheme presented here is general enough that it can also be extended to other traditions and materials, and is potentially useful for any kind of text-bearing artefact. Where the textuality of an object is not the primary concern, encoders may wish to use the object element which provides a very similar system of description (see 13.3.5 Objects . The scheme described here is also intended to accommodate the needs of many different classes of encoders. On the one hand, encoders may be engaged in retrospective conversion of existing detailed descriptions and catalogues into machine tractable form; on the other, they may be engaged in cataloguing ex nihilo , that is, creating new detailed descriptions for materials never before catalogued. Some may be primarily concerned to represent accurately the description itself, as opposed to the ideas and interpretations the description represents; others may have entirely opposite priorities. At one extreme, a project may simply wish to capture an existing catalogue in a form that can be displayed on the Web, and which can be searched for literal strings, or for such features such as titles, authors and dates; at the other, a project may wish to create, in highly structured and encoded form, a detailed database of information about the physical characteristics, history, interpretation, etc. of the material, able to support practitioners of quantitative codicology as well as librarians. To cater for this diversity, here as elsewhere, these Guidelines propose a flexible strategy, in which encoders must choose for themselves the approach appropriate to their needs, and are provided with a choice of encoding mechanisms to support those differing degrees. 10.2 The Manuscript Description Element The msDesc element will normally appear within the sourceDesc element of the header of a TEI-conformant document, where the document being encoded is a digital representation of some manuscript original, whether as an encoded transcription, as a collection of digital images (as described in 11.1 Digital Facsimiles ), or as some combination of the two. However, in cases where the document being encoded is essentially a collection of manuscript descriptions, the msDesc element may be used in the same way as the bibliographic elements ( bibl , biblFull , and biblStruct ) making up the TEI element class model.biblLike . These typically appear within the listBibl element. < msDesc > contains a description of a single identifiable manuscript or other text-bearing object such as an early printed book. The msDesc element has the following components, which provide more detailed information under a number of headings. Each of these component elements is further described in the remainder of this chapter. < msIdentifier > contains the information required to identify the manuscript or similar object being described. < head > contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. < msContents > describes the intellectual content of a manuscript, manuscript part, or other object either as a series of paragraphs or as a series of structured manuscript items. < physDesc > contains a full physical description of a manuscript, manuscript part, or other object optionally subdivided using more specialized elements from the model.physDescPart class. < history > groups elements describing the full history of a manuscript, manuscript part, or other object. < additional > groups additional information, combining bibliographic information about a manuscript or other object, or surrogate copies of it, with curatorial or administrative information. < msPart > contains information about an originally distinct manuscript or part of a manuscript, which is now part of a composite manuscript. < msFrag > contains information about a fragment described in relation to a prior context, typically as a description of a virtual reconstruction of a manuscript or other object whose fragments were catalogued separately The first of these components, msIdentifier , is the only one which is mandatory; it is described in more detail in 10.4 The Manuscript Identifier below. It is followed optionally by one or more head elements, each holding a brief heading (see 10.5 The Manuscript Heading ), and then either one or more paragraphs, marked up as a series of p elements, or one or more of the specialized elements msContents ( 10.6 Intellectual Content ), physDesc ( 10.7 Physical Description ), history ( 10.8 History ), and additional ( 10.9 Additional Information ). These elements are all optional, but if used they must appear in the order given here. Finally, in the case of a composite manuscript (a manuscript composed of several codicological units) or a fragmented manuscript (a manuscript whose parts are now dispersed and kept at different places), a full description may also contain one or more msPart ( 10.10 Manuscript Parts ) elements and msFrag ( 10.11 Manuscript Fragments ) elements, respectively. To demonstrate the use of this module, consider the following sample manuscript description, chosen more or less at random from the Bodleian Library's Summary catalogue ( 1 ) The simplest way of digitizing this catalogue entry would simply be to key in the text, tagging the relevant parts of it which make up the mandatory msIdentifier element, as follows: This process could be continued further, restructuring the whole entry so as to take full advantage of many more of the encoding possibilities provided by the module described in this chapter: 10.3 Phrase-level Elements When the msdescription module is in use, several extra elements are added to the phrase level class, and thus become available within paragraphs and elsewhere in the document. These elements are listed below in alphabetical order: < catchwords > describes the system used to ensure correct ordering of the quires or similar making up a codex, incunable, or other object typically by means of annotations at the foot of the page. < dimensions > contains a dimensional specification. < heraldry > contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc. < locus > defines a location within a manuscript, manuscript part, or other object typically as a (possibly discontinuous) sequence of folio references. < locusGrp > groups a number of locations which together form a distinct but discontinuous item within a manuscript, manuscript part, or other object. < material > contains a word or phrase describing the material of which the object being described is composed. < watermark > contains a word or phrase describing a watermark or similar device. < objectType > contains a word or phrase describing the type of object being referred to. < origDate > contains any form of date, used to identify the date of origin for a manuscript, manuscript part, or other object. < origPlace > contains any form of place name, used to identify the place of origin for a manuscript, manuscript part, or other object. < secFol > marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for it. < signatures > contains discussion of the leaf or quire signatures found within a codex or similar object. Within a manuscript description, many other standard TEI phrase level elements are available, notably those described in the Core module ( 3 Elements Available in All TEI Documents ). Additional elements of particular relevance to manuscript description, such as those for names and dates, may also be made available by including the relevant module in one's schema. 10.3.1 Origination The following elements may be used to provide information about the origins of any aspect of a manuscript: < origDate > contains any form of date, used to identify the date of origin for a manuscript, manuscript part, or other object. < origPlace > contains any form of place name, used to identify the place of origin for a manuscript, manuscript part, or other object. The origDate and origPlace elements are specialized forms of the existing date and name elements respectively, used to indicate specifically the date and place of origin of a manuscript or manuscript part. Such information would normally be encoded within the history element, discussed in section 10.8 History . origDate and origPlace can also be used to identify the place or date of origin of any aspect of the manuscript, such as its decoration or binding, when these are not of the same date or from the same location as rest of the manuscript. Both these elements are members of the att.editLike class, from which they inherit many attributes. The origDate element is a member of the att.datable class, and may thus also carry additional attributes giving normalized values for the associated dating. 10.3.2 Material and Object Type The material element can be used to tag any specific term used for the physical material of which a manuscript (or binding, seal, etc.) is composed. The objectType element may be used to tag any term specifying the type of object or manuscript upon with the text is written. < material > contains a word or phrase describing the material of which the object being described is composed. < objectType > contains a word or phrase describing the type of object being referred to. These elements may appear wherever a term regarded as significant by the encoder occurs, as in the following examples: 10.3.3 Watermarks and Stamps Two further elements are provided to mark up other decorative features characteristic of manuscript leaves and bindings: < watermark > contains a word or phrase describing a watermark or similar device. < stamp > contains a word or phrase describing a stamp or similar device. These element may appear wherever a term regarded as significant by the encoder occurs. The watermark element is most likely to be of use within the support element discussed in 10.7.1.1 Support below. We give a simple example here: The stamp element will typically appear when text from the source is being transcribed, for example within a rubric in the following case: It may also appear as part of the detailed description of a binding: If, as here, any text contained by a stamp is included in its description it should be clearly distinguished from that description. The element mentioned may be used for this purpose, as shown above. 10.3.4 Dimensions The dimensions element can be used to specify the size of some aspect of the manuscript, and thus may be thought of as a specialized form of the existing TEI measure element. < dimensions > contains a dimensional specification. The dimensions element will normally occur within the element describing the particular feature or aspect of a manuscript whose dimensions are being given; thus the size of the leaves would be specified within the support or extent element (part of the physDesc element discussed in 10.7.1 Object Description ), while the dimensions of other specific parts of a manuscript, such as accompanying materials, binding, etc., would be given in other parts of the description, as appropriate. The following elements are available within the dimensions element: < height > contains a measurement measured along the axis at a right angle to the bottom of the object. < width > contains a measurement of an object along the axis parallel to its bottom, e.g. perpendicular to the spine of a book or codex. < depth > contains a measurement from the front to the back of an object, perpendicular to the measurement given by the width element. < dim > contains any single measurement forming part of a dimensional specification of some sort. These elements, as well as dimensions itself, are all members of the att.dimensions class, which also inherits attributes from the att.ranging class. They all thus carry the following attributes: < att.dimensions > provides attributes for describing the size of physical objects. @scope where the measurement summarizes more than one observation, specifies the applicability of this measurement. @extent indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. @unit names the unit used for the measurement @quantity specifies the length in the units specified where the measurement summarizes more than one observation, specifies the applicability of this measurement. indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. names the unit used for the measurement specifies the length in the units specified < att.ranging > provides attributes for describing numerical ranges. @atLeast gives a minimum estimated value for the approximate measurement. @atMost gives a maximum estimated value for the approximate measurement. @min where the measurement summarizes more than one observation or a range, supplies the minimum value observed. @max where the measurement summarizes more than one observation or a range, supplies the maximum value observed. gives a minimum estimated value for the approximate measurement. gives a maximum estimated value for the approximate measurement. where the measurement summarizes more than one observation or a range, supplies the minimum value observed. where the measurement summarizes more than one observation or a range, supplies the maximum value observed. Attributes scope, min, and max are used only when the measurement applies to several items, for example the size of all leaves in a manuscript; attributes atLeast and atMost are used when the measurement applies to a single item, for example the size of a specific codex, but has had to be estimated. Attribute quantity is used when the measurement can be given exactly, and applies to a single item; this is the usual situation. In this case, the units in which dimensions are measured may be specified using the unit attribute, the value of which will normally be taken from a closed set of values appropriate to the project, using standard units of measurement wherever possible, such as cm, mm, in, line, char. If however the only data available for the measurement uses some other unit, or it is preferred to normalize it in some other way, then it may be supplied as a string value by means of the extent attribute. In the simplest case, only the extent attribute may be supplied: It is often convenient to supply a measurement which applies to a number of discrete observations: for example, the number of ruled lines on the pages of a manuscript (which may not all be the same), or the diameter of an object like a bell, which will differ depending where it is measured. In such cases, the scope attribute may be used to specify the observations for which this measurement is applicable: The dimensions element may be repeated as often as necessary, with appropriate attribute values to indicate the nature and scope of the measurement concerned. For example, in the following case the leaf size and ruled space of the leaves of the manuscript are specified: The dim element is provided for cases where some measurement other than height, width, or depth is required. Its type attribute is used to indicate the type of measurement involved: The order in which components of the dimensions element may be supplied is not constrained. 10.3.5 References to Locations within a Manuscript The locus and its grouping element locusGrp element are specialized forms of the ref element, used to indicate a location, or sequence of locations, within a manuscript. < locus > defines a location within a manuscript, manuscript part, or other object typically as a (possibly discontinuous) sequence of folio references. < locusGrp > groups a number of locations which together form a distinct but discontinuous item within a manuscript, manuscript part, or other object. The locus element is used to reference a single location within a manuscript, typically to specify the location occupied by the element within which it appears. If, for example, it is used as the first component of an msItem or msItemStruct element, or of any of the more specific elements appearing within one (see further section 10.6 Intellectual Content below) then it is understood to specify the location (or locations) of that item within the manuscript being described. 10.3.5.1 Identifying a Location A locus element can be used to identify any reference to one or more folios within a manuscript, wherever such a reference is appropriate. Locations are conventionally specified as a sequence of folio or page numbers, but may also be a discontinuous list, or a combination of the two. This specification should be given as the content of the locus element, using the conventions appropriate to the individual scholar or holding institution, as in the following example: A normalized form of the location can also be supplied, using special purpose attributes on the locus element, as in the following revision of the above example: When the item concerned occupies a discontinuous sequence of pages, this may simply be indicated in the body of the locus element: Finally, the content of the locus element may be omitted if a formatting application can construct it automatically from the values of the from and to attributes: 10.3.5.2 Linking a Location to a Transcription or an Image The locus attribute can also be used to associate a location within a manuscript with facsimile images of that location, using the facs attribute, or with a transcription of the text occurring at that location. The former association is effected by means of the facs attribute; the latter by means of the target attribute. The facs is available only when the transcr module described in chapter 11 Representation of Primary Sources is included in a schema. It associates a locus element with one or more digitized images, as in the following example: Where a transcription of the relevant pages is available, this may be associated with the locus element using its target attribute, as in the following example: When (as in this example) a sequence of elements is to be supplied as target value, it may be given explicitly as above, or using the xPointer range() syntax defined at 16.2.4.6 range() . Note however that support for this pointer mechanism is not widespread in current XML processing systems. The target attribute should only be used to point to elements that contain or indicate a transcription of the locus being described. To associate a locus element with a page image or other comparable representation, the global facs attribute should be used instead. 10.3.5.3 Using Multiple Location Schemes Where a manuscript contains more than one foliation, the scheme attribute may be used to distinguish them. For example, MS 65 Corpus Christi College, Cambridge contains two fly leaves bearing music. These leaves have modern foliation 135 and 136 respectively, but are also marked with an older foliation. This may be preserved in an encoding such as the following: Where discontinuous sequences are identified within two different foliations, the scheme attribute should be supplied on the locusGrp element in preference, as in the following: 10.3.6 Names of Persons, Places, and Organizations The standard TEI element name may be used to identify names of any kind occurring within a description: < name > contains a proper noun or noun phrase. < att.canonical > provides attributes that can be used to associate a representation such as a name or title with canonical information about the object being named or referenced. @key provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind. @ref provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs. provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind. provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs. Here are some examples of the use of the name element: Note that the name element is defined as providing information about a name, not the person, place, or organization to which that name refers. In the last example above, the ref attribute is used to associate the name with a more detailed description of the person named. This is provided by means of the person element, which becomes available when the namesdates module described in chapter 13 Names, Dates, People, and Places is included in a schema. An element such as the following might then be used to provide detailed information about the person indicated by the name: Alternatively, the key attribute may be used to supply a unique identifying code for the person referenced by the name independently of both the existence of a person element and the use of the standard URI reference mechanism. If, for example, a project maintains as its authority file some non-digital resource, or uses a database which cannot readily be integrated with other digital resources for this purpose, the unique codes used by such offline resources may be used as values for the key attribute. Although such practices clearly reduce the interchangeability of the resulting encoded texts, they may be judged more convenient or practical in certain situations. As explained in 3.6.1 Referring Strings , interchange is improved by use of tag URIs in ref instead of key. All the person elements referenced by a particular document set should be collected together within a listPerson element, located in a standOff element. This functions as a kind of prosopography for all the people referenced by the set of manuscripts being described, in much the same way as a listBibl element may be used to hold bibliographic information for all the works referenced. When the namesdates module described in chapter 13 Names, Dates, People, and Places is included in a schema, similar mechanisms are used to maintain and reference canonical lists of places or organizations, as further discussed in sections 13.2.3 Place Names and 13.2.2 Organizational Names respectively. 10.3.7 Catchwords, Signatures, Secundo Folio The catchwords element is used to describe one method by which correct ordering of the quires of a codex is ensured. Typically, this takes the form of a word or phrase written in the lower margin of the last leaf verso of a gathering, which provides a preview of the first recto leaf of the successive gathering. This may be a simple phrase such as the following: The Signatures element is used, in a similar way, to describe a similar system in which quires or leaves are marked progressively in order to facilitate arrangement during binding. For example: The signatures element can be used for either leaf signatures, or a combination of quire and leaf signatures, whether the marking is alphabetic, alphanumeric, or some ad hoc system, as in the following more complex example: The secFol element (for secundo folio) is used to record an identifying phrase (also called dictio probatoria ) taken from a specific known point in a codex (for example the first few words on the second leaf). Since these words will differ from one copy of a text to another, the practice originated in the middle ages of using them when cataloguing a manuscript in order to distinguish individual copies of a work in a way which its opening words could not. 10.3.8 Heraldry Descriptions of heraldic arms, supporters, devices, and mottos may appear at various points in the description of a manuscript, usually in the context of ownership information, binding descriptions, or detailed accounts of illustrations. A full description may also contain a detailed account of the heraldic components of a manuscript independently considered. Frequently, however, heraldic descriptions will be cited as short phrases within other parts of the record. The phrase level element heraldry is provided to allow such phrases to be marked for further analysis, as in the following examples: 10.4 The Manuscript Identifier The msIdentifier element is intended to provide an unambiguous means of uniquely identifying a particular manuscript. This may be done in a structured way, by providing information about the holding institution and the call number, shelfmark, or other identifier used to indicate its location within that institution. Alternatively, or in addition, a manuscript may be identified simply by a commonly used name. < msIdentifier > contains the information required to identify the manuscript or similar object being described. A manuscript's actual physical location may occasionally be different from its place of ownership; at Cambridge University, for example, manuscripts owned by various colleges are kept in the central University Library. Normally, it is the ownership of the manuscript which should be specified in the manuscript identifier, while additional or more precise information on the physical location of the manuscript can be given within the adminInfo element, discussed in section 10.9.1 Administrative Information below. The following elements are available within msIdentifier to identify the holding institution: < country > contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. < region > contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. < settlement > contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. < institution > contains the name of an organization such as a university or library, with which a manuscript or other object is identified, generally its holding institution. < repository > contains the name of a repository within which manuscripts or other objects are stored, possibly forming part of an institution. These elements are all structurally equivalent to the standard TEI name element with an appropriate value for its type attribute; however the use of this syntactic sugar enables the model for msIdentifier to be constrained rather more tightly than would otherwise be possible. Specifically, only one of each of the elements listed above may appear within the msIdentifier and they must, if present, appear in the order given. Like name , these elements are all also members of the attribute class att.canonical , and thus can use the attributes key or ref to reference a single standardized source of information about the entity named. The following elements are used within msIdentifier to provide different ways of identifying the manuscript within its holding institution: < collection > contains the name of a collection of manuscripts or other objects, not necessarily located within a single repository. < idno > supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. < altIdentifier > contains an alternative or former structured identifier used for a manuscript or other object, such as a former catalogue number. < msName > contains any form of unstructured alternative name used for a manuscript or other object, such as an ocellus nominum, or nickname. Major manuscript repositories will usually have a preferred form of citation for manuscript shelfmarks, including rules about punctuation, spacing, abbreviation, etc., which should be adhered to. Where such a format also contains information which might additionally be supplied as a distinct subcomponent of the msIdentifier , for example a collection name, a decision must be taken as to whether to use the more specific element, or to include such information within the idno element. For example, the manuscript formally identified as El 26 C 9 forms a part of the Ellesmere ( El ) collection. Either of the following encodings is therefore feasible: In the former example, the preferred form of the identifier can be retrieved by prefixing the content of the idno element with that of the collection element, while in the latter it is given explicitly. The advantage of the former is that it simplifies accurate retrieval of all manuscripts from a given collection; the disadvantage is that encoded abbreviations of this kind may not be as immediately comprehensible. Care should be taken to avoid redundancy: for example In some cases the shelfmark may contain no information about the collection; in other cases, the item may be regarded as belonging to more than one collection. The collection element may be added, and repeated as often as necessary to cater for such situations: Note in the latter case the use of the msName element to provide a common name other than the shelfmark by which a manuscript is known. Where a manuscript has several such names, more than one of these elements may be used, as in the following example: In very rare cases a repository may have only one manuscript (or only one of any significance), which will have no shelfmark as such but will be known by a particular name or names. In such circumstances, the idno element may be omitted, and the manuscript identified by the name or names used for it, using one or more msName elements, as in the following example: Where manuscripts have moved from one institution to another, or even within the same institution, they may have identifiers additional to the ones currently used, such as former shelfmarks, which are sometimes retained even after they have been officially superseded. In such cases it may be useful to supply an alternative identifier, with a detailed structure similar to that of the msIdentifier itself. The following example shows a manuscript which had shelfmark II-M-5 in the collection of the Duque de Osuna, but which now has the shelfmark MS 10237 in the National Library in Madrid: Cases of such changed or alternative identifiers should be clearly distinguished from cases of fragmented ( 10.11 Manuscript Fragments ) manuscripts, that is to say manuscripts which although physically disjoint are nevertheless generally treated as single units. As mentioned above, the smallest possible description is one that contains only the element msIdentifier ; good practice in all but exceptional circumstances requires the presence within it of the three sub-elements settlement , repository , and idno , since they provide what is, by common consent, the minimum amount of information necessary to identify a manuscript. 10.5 The Manuscript Heading Historically, the briefest possible meaningful description of a manuscript consists of no more than a title, e.g. Polychronicon . This will often have been enough to identify a manuscript in a small collection because the identity of the author is implicit. Where a title does not imply the author, and is thus insufficient to identify the main text of a manuscript, the author should be stated explicitly (e.g. Augustinus, Sermones or Cicero, Letters ). Many inventories of manuscripts consist of no more than an author and title, with some form of copy-specific identifier, such as a shelfmark or secundo folio reference (e.g. Arch. B. 3. 2: Evangelium Matthei cum glossa , 126. Isidori Originum libri octo , Biblia Hieronimi, 2o fo. opus est ); information on date and place of writing will sometimes also be included. The standard TEI element head element can be used to provide a brief description of this kind. < head > contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. 10.6 Intellectual Content The msContents element is used to describe the intellectual content of a manuscript or manuscript part. It comprises either a series of informal prose paragraphs or a series of msItem or msItemStruct elements, each of which provides a more detailed description of a single item contained within the manuscript. These may be prefaced, if desired, by a summary element, which is especially useful where one wishes to provide an overview of a manuscript's contents and describe only some of the items in detail. < msContents > describes the intellectual content of a manuscript, manuscript part, or other object either as a series of paragraphs or as a series of structured manuscript items. < msItem > describes an individual work or item within the intellectual content of a manuscript, manuscript part, or other object. < msItemStruct > contains a structured description for an individual work or item within the intellectual content of a manuscript, manuscript part, or other object. < summary > contains an overview of the available information concerning some aspect of an item or object (for example, its intellectual content, history, layout, typography etc.) as a complement or alternative to the more detailed information carried by more specific elements. In the simplest case, only a brief description may be provided, as in the following examples: This description may of course be expanded to include any of the TEI elements generally available within a p element, such as title , bibl , or list . More usually, however, each individual work within a manuscript will be given its own description, using the msItem or msItemStruct element described in the next section, as in the following example: The summary element may be used in conjunction with one or more msItem elements if it is desired to provide both a general summary of the contents of a manuscript and more detail about some or all of the individual items within it. It may not however be used within an individual msItem element. 10.6.1 The msItem and msItemStruct Elements Each discrete item in a manuscript or manuscript part can be described within a distinct msItem or msItemStruct element, and may be classified using the class attribute. These are the possible component elements of msItem and msItemStruct . < author > in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. < respStmt > supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. < title > contains a title for any kind of work. < rubric > contains the text of any rubric or heading attached to a particular manuscript item, that is, a string of words through which a manuscript or other object signals the beginning of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, typically in red ink, or by use of different size or type of script, or some other such visual device. < incipit > contains the incipit of a manuscript or similar object item, that is the opening words of the text proper, exclusive of any rubric which might precede it, of sufficient length to identify the work uniquely; such incipits were, in former times, frequently used a means of reference to a work, in place of a title. < quote > contains a phrase or passage attributed by the narrator or author to some agency external to the text. < explicit > contains the explicit of a item, that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it. < finalRubric > contains the string of words that denotes the end of a text division, often with an assertion as to its author and title, usually set off from the text itself by red ink, by a different size or type of script, or by some other such visual device. < colophon > contains the colophon of an item: that is, a statement providing information regarding the date, place, agency, or reason for production of the manuscript or other object. < decoNote > contains a note describing either a decorative component of a manuscript or other object, or a fairly homogenous class of such components. < listBibl > contains a list of bibliographic citations of any kind. < bibl > contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. < filiation > contains information concerning the manuscript or other object's filiation , i.e. its relationship to other surviving manuscripts or other objects of the same text or contents, its protographs , antigraphs and apographs . < note > contains a note or annotation. < textLang > describes the languages and writing systems identified within the bibliographic work being described, rather than its description. In addition, an msItemStruct may contain nested msItemStruct elements, just as an msItem may contain nested msItem elements. The main difference between msItem and msItemStruct is that in the former, the order and number of child elements is not constrained; any element, in other words, may be given in any order, and repeated as often as is judged necessary. In the latter, however, the sub-elements, if used, must be given in the order specified above and only some of them may be repeated; specifically, rubric , finalRubric . incipit , textLang and explicit can appear only once. While neither msItem nor msItemStruct may contain untagged running text, both permit an unstructured description to be provided in the form of one or more paragraphs of text. They differ in this respect also: if paragraphs are supplied as the content of an msItem , then none of the other component elements listed above is permitted; in the msItemStruct case, however, paragraphs may appear anywhere as an alternative to any of the component elements listed above. As noted above, both msItem and msItemStruct elements may also nest, where a number of separate items in a manuscript are grouped under a single title or rubric, as is the case, for example, with a work like The Canterbury Tales . The elements msContents , msItem , msItemStruct , incipit , and explicit are all members of the class att.msExcerpt from which they inherit the defective attribute. < att.msExcerpt > provides attributes used to describe excerpts from a manuscript placed in a description thereof. @defective indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage. indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage. The elements ex , am , and expan used in the above example are further discussed in section 11.3.1.2 Abbreviation and Expansion ; they are available only when the transcr module defined by that chapter is selected. Similarly, the g element used in this example to represent the abbreviation mark is defined by the gaiji module documented in chapter 5 Characters, Glyphs, and Writing Modes . 10.6.2 Authors and Titles When used within a manuscript description, the title element should be used to supply a regularized form of the item's title, as distinct from any rubric quoted from the manuscript. If the item concerned has a standardized distinctive title, e.g. Roman de la Rose , then this should be the form given as content of the title element, with the value of the type attribute given as uniform . If no uniform title exists for an item, or none has been yet identified, or if one wishes to provide a general designation of the contents, then a supplied title can be given, e.g. missal , in which case the type attribute on the title should be given the value supplied . Similarly, if used within a manuscript description, the author element should always contain the normalized form of an author's name, irrespective of how (or whether) this form of the name is cited in the manuscript. If it is desired to retain the form of the author's name as given in the manuscript, this may be tagged as a distinct name element, within the text at the point where it occurs. Note that the key attribute can also be used, as on names in general, to specify the identifier of a person element carrying full details of the person concerned (see further 10.3.6 Names of Persons, Places, and Organizations ). The respStmt element can be used to supply the name and role of a person other than the author who is responsible for some aspect of the intellectual content of the manuscript: The respStmt element can also be used where there is a discrepancy between the author of an item as given in the manuscript and the accepted scholarly view, as in the following example: 10.6.3 Rubrics, Incipits, Explicits, and Other Quotations from the Text It is customary in a manuscript description to record the opening and closing words of a text as well as any headings or colophons it might have, and the specialized elements rubric , incipit , explicit , finalRubric , and colophon are available within msItem for doing so, along with the more general quote , for recording other bits of the text not covered by these elements. Each of these elements has the same substructure, containing a mixture of phrase-level elements and plain text. A locus element can be included within each, in order to specify the location of the component, as in the following example: In the following example, standard TEI elements for the transcription of primary sources have been used to mark the expansion of abbreviations and other features present in the original: The xml:lang attribute for colophon , explicit , incipit , quote , and rubric may always be used to identify the language of the text quoted, if this is different from the default language specified by the mainLang attribute on textLang . 10.6.4 Filiation The filiation element can be used to provide information on the relationship between the manuscript and other surviving manuscripts of the same text, either specifically or in a general way, as in the following example: 10.6.5 Text Classification One or more text classification or text-type codes may be specified, either for the whole of the msContents element, or for one or more of its constituent msItem elements, using the class attribute as specified above: 10.6.6 Languages and Writing Systems The textLang element should be used to provide information about the languages used within a manuscript item. It may take the form of a simple note, as in the following example: Where, for validation and indexing purposes, it is thought convenient to add keywords identifying the particular languages used, the mainLang attribute may be used. This attribute takes the same range of values as the global xml:lang attribute, on which see further 6.1 Language Identification . In the following example a manuscript written chiefly in Old Church Slavonic is described: A manuscript item will sometimes contain material in more than one language. The mainLang attribute should be used only for the chief language. Other languages used may be specified using the otherLangs attribute as in the following example: Since Old Church Slavonic may be written in either Cyrillic or Glagolitic scripts, and even occasionally in both within the same manuscript, it might be preferable to use a more explicit identifier: The form and scope of language identifiers recommended by these Guidelines is based on the IANA standard described at 6.1 Language Identification and should be followed throughout. Where additional detail is needed correctly to describe a language, or to discuss its deployment in a given text, this should be done using the langUsage element in the TEI header, within which individual language elements document the languages used: see 2.4.2 Language Usage . Note that the language element defines a particular combination of human language and writing system. Only one language element may be supplied for each such combination. Standard TEI practice also allows this element to be referenced by any element using the global xml:lang attribute in order to specify the language applicable to the content of that element. For example, assuming that language elements have been defined with the identifiers fr (for French), la (for Latin), and de (for German), a manuscript description written in French which specifies that a particular manuscript contains predominantly German but also some Latin material, might have a textLang element like the following: 10.7 Physical Description Under the general heading physical description we subsume a large number of different aspects generally regarded as useful in the description of a given manuscript. These include: aspects of the form, support, extent, and quire structure of the manuscript object and of the way in which the text is laid out on the page ( 10.7.1 Object Description ); the styles of writing, such as the way it is laid out on the page, the styles of writing, decorative features, any musical notation employed and any annotations or marginalia ( 10.7.2 Writing, Decoration, and Other Notations ); and discussion of its binding, seals, and any accompanying material ( 10.7.3 Bindings, Seals, and Additional Material ). Most manuscript descriptions touch on several of these categories of information though few include them all, and not all distinguish them as clearly as we propose here. In particular, it is often the case that an existing description will include information for which we propose distinct elements within a single paragraph, or even sentence. The encoder must then decide whether to rewrite the description using the structure proposed here, or to retain the existing prose, marked up simply as a series of p elements, directly within the physDesc element. The physDesc element may thus be used in either of two distinct ways. It may contain a series of paragraphs addressing topics listed above and similar ones. Alternatively, it may act as a container for any choice of the more specialized elements described in the remainder of this section, each of which itself contains a series of paragraphs, and may also have more specific attributes. In general, it is not recommended to combine unstructured prose description with usage of the more specialized elements, as such an approach complicates processing, and may lead to inconsistency within a single manuscript description. A single physDesc element will normally contain either a series of model.pLike elements, or a sequence of specialized elements from the model.physDescPart class. There are however circumstances in which this is not feasible, for example: the description already exists in a prose form where some of the specialized topics are treated together in paragraphs of prose, but others are treated distinctly; although all parts of the description are clearly distinguished, some of them cannot be mapped to a pre-existing specialized element. In such situations, both specialized and generic ( model.pLike ) elements may be combined in a single physDesc . Note however that all generic elements given must precede the first specialized element in the description. Thus the following is valid: 10.7.1 Object Description The objectDesc element is used to group together those parts of the physical description which relate specifically to the text-bearing object, its format, constitution, layout, etc. The objectDesc element is used for grouping elements relating to the physicality of a text-bearing object as part of a manuscript description. If a full description of an object (text-bearing or not) is desired, the more general object element may be preferred. The form attribute is used to indicate the specific type of writing vehicle being described, for example, as a codex, roll, tablet, etc. If used it must appear first in the sequence of specialized elements. The objectDesc element has two parts: a description of the support , i.e. the physical carrier on which the text is inscribed; and a description of the layout , i.e. the way text is organized on the carrier. Taking these in turn, the description of the support is tagged using the following elements, each of which is discussed in more detail below: < supportDesc > groups elements describing the physical support for the written part of a manuscript or other object. < support > contains a description of the materials etc. which make up the physical support for the written part of a manuscript or other object. < extent > describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. < collation > contains a description of how the leaves, bifolia, or similar objects are physically arranged. < foliation > describes the numbering system or systems used to count the leaves or pages in a codex or similar object. < condition > contains a description of the physical condition of the manuscript or object. Each of these elements contains paragraphs relating to the topic concerned. Within these paragraphs, phrase-level elements (in particular those discussed above at 10.3 Phrase-level Elements ), may be used to tag specific terms of interest if so desired. This example combines information which might alternatively be more precisely tagged using the more specific elements described in the following subsections. 10.7.1.1 Support The support element groups together information about the physical carrier. Typically, for western manuscripts, this will entail discussion of the material (parchment, paper, or a combination of the two) written on. For paper, a discussion of any watermarks present may also be useful. If this discussion makes reference to standard catalogues of such items, these may be tagged using the standard ref element as in the following example: 10.7.1.2 Extent The extent element, defined in the TEI header, may also be used in a manuscript description to specify the number of leaves a manuscript contains, as in the following example: Alternatively, the generic measure element might be used within extent , as in the following example: 10.7.1.3 Collation The collation element should be used to provide a description of a book's current and original structure, that is, the arrangement of its leaves and quires. This information may be conveyed using informal prose, or any appropriate notational convention. Although no specific notation is defined here, an appropriate element to enclose such an expression would be the formula element, which is provided when the figures module is included in a schema. Here are some examples of different ways of treating collation: 10.7.1.4 Foliation The foliation element may be used to indicate the scheme, medium or location of folio, page, column, or line numbers written in the manuscript, frequently including a statement about when and, if known, by whom, the numbering was done. Where a manuscript contains traces of more than one foliation, each should be recorded as a distinct foliation element and optionally given a distinct value for its xml:id attribute. The locus element discussed in 10.3.5 References to Locations within a Manuscript can then indicate which foliation scheme is being cited by means of its scheme attribute, which points to this identifier: 10.7.1.5 Condition The condition element is used to summarize the overall physical state of a manuscript, in particular where such information is not recorded elsewhere in the description. It should not, however, be used to describe changes or repairs to a manuscript, as these are more appropriately described as a part of its custodial history (see 10.9.1.2 Availability and Custodial History ). It should be supplied within the supportDesc element, if it discusses the condition of the physical support of the manuscript; within the bindingDesc or binding elements ( 10.7.3.1 Binding Descriptions ) if it discusses only the condition of the binding or bindings concerned; or within the sealDesc element if it discusses the condition of any seal attached to the manuscript. 10.7.1.6 Layout Description The second part of the objectDesc element is the layoutDesc element, which is used to describe and document the mise-en-page of the manuscript, that is the way in which text and illumination are arranged on the page, specifying for example the number of written, ruled, or pricked lines and columns per page, size of margins, distinct textual streams such as glosses, commentaries, etc. This may be given as a simple series of paragraphs. Alternatively, one or more different layouts may be identified within a single manuscript, each described by its own layout element. < layoutDesc > collects the set of layout descriptions applicable to a manuscript or other object. < layout > describes how text is laid out on the page or surface of the object, including information about any ruling, pricking, or other evidence of page-preparation techniques. Where the layout element is used, the layout will often be sufficiently regular for the attributes on this element to convey all that is necessary; more usually however a more detailed treatment will be required. The attributes are provided as a convenient shorthand for commonly occurring cases, and should not be used except where the layout is regular. The value NA (not-applicable) should be used for cases where the layout is either very irregular, or where it cannot be characterized simply in terms of lines and columns, for example, where blocks of commentary and text are arranged in a regular but complex pattern on each page The following examples indicate the range of possibilities: Where multiple layout elements are supplied, the scope for each specification can be indicated by means of locus elements within the content of the element, as in the following example: 10.7.2 Writing, Decoration, and Other Notations The second group of elements within a structured physical description concerns aspects of the writing, illumination, or other notation (notably, music) found in a manuscript, including additions made in later hands—the text, as it were, as opposed to the carrier. < handDesc > contains a description of all the different hands used in a manuscript or other object. < handNote > describes a particular style or hand distinguished within a manuscript. < scriptDesc > contains a description of the scripts used in a manuscript or other object. < scriptNote > describes a particular script distinguished within the description of a manuscript or similar resource. < typeDesc > contains a description of the typefaces or other aspects of the printing of an incunable or other printed source. < typeNote > describes a particular font or other significant typographic feature distinguished within the description of a printed resource. < decoDesc > contains a description of the decoration of a manuscript or other object, either as in paragraphs, or as one or more decoNote elements. < decoNote > contains a note describing either a decorative component of a manuscript or other object, or a fairly homogenous class of such components. < musicNotation > contains description of type of musical notation. < additions > contains a description of any significant additions found within a manuscript or other object, such as marginalia or other annotations. 10.7.2.1 Writing The handDesc element can contain a short description of the general characteristics of the writing observed in a manuscript, as in the following example: Note the use of the term element to mark specific technical terms within the context of the handDesc element. Where several distinct hands have been identified, this fact can be registered by using the hands attribute, as in the following example: Alternatively, or in addition, where more specific information about one or more of the hands identified is to be recorded, the handNote element should be used, as in the following example: When a full or partial transcription of a manuscript is available in addition to the manuscript description, the handShift element described in 11.3.2.1 Document Hands can be used to link the relevant parts of the transcription to the appropriate handNote element in the description: for example, at the point in the transcript where the second hand listed above starts (i.e. at folio 72v:4), we might insert handShift new=\"#Eirsp-2\"/. Additions, notes, drawings etc. (e.g. add , note and figure ) made by other hands in the text, can be linked to the corresponding handNote element using the hand attribute. The elements typeDesc , and typeNote are used to provide information about the printing of a source, in exactly the same way as the handDesc or handNote elements provide information about its writing. They are provided for the convenience of those using this module to provide information about early printed sources and incunables. The typeDesc element can simply provide a summary description: Where detailed information about individual typefaces is to be recorded, this may be done using the typeNote element: Where information is required about both typography and written script, for example where a printed book contains extensive handwritten annotation, both handDesc and typeDesc elements should be supplied. Similarly, in the following example, the source text is a typescript with extensive handwritten annotation: The elements scriptNote and scriptDesc may be used in exactly the same way to document a script used in this and other manuscripts, for example to record that this script was used mainly for the production of books or for charters; or that it is characteristic of some geographical area or scriptorium or date. Such information as the letter forms characteristic of this script may also be recorded. By contrast, the handNote element would be used to document the way that a particular scribe uses a script, for example with long or short descenders, or using a pen which is cut in a different way, or an ink of a given colour, and so forth. As with typeNote , the scriptNote element can be used in combination with handNote . 10.7.2.2 Decoration It can be difficult to draw a clear distinction between aspects of a manuscript which are purely physical and those which form part of its intellectual content. This is particularly true of illuminations and other forms of decoration in a manuscript. We propose the following elements for the purpose of delimiting discussion of these aspects within a manuscript description, and for convenience locate them all within the physical description, despite the fact that the illustrative features of a manuscript will in many cases also be seen as constituting part of its intellectual content. The decoDesc element may contain simply one or more paragraphs summarizing the overall nature of the decorative features of the manuscript, as in the following example: Where more exact indexing of the decorative content of a manuscript is required, the standard TEI elements term or index may be used within the prose description to supply or delimit appropriate iconographic terms, as in the following example: 10.7.2.3 Musical Notation Where a manuscript contains music, the musicNotation element may be used to describe the form of notation employed, as in the following examples: If a manuscript employs more than one notation, they must both be described within the same musicNotation element, for example as different list items. 10.7.2.4 Additions and Marginalia The additions element can be used to list or describe any additions to the manuscript, such as marginalia, scribblings, doodles, etc., which are considered to be of interest or importance. Such topics may also be discussed or referenced elsewhere in a description, for example in the history element, in cases where the marginalia provide evidence of ownership. Note that this element may not be repeated within a single manuscript description. If several different kinds of additional matter are discussed, the content may be structured as a labelled list or a series of paragraphs. Some examples follow: 10.7.3 Bindings, Seals, and Additional Material The third major component of the physical description relates to supporting but distinct physical components, such as bindings, seals and accompanying material. These may be described using the following specialist elements: < bindingDesc > describes the present and former bindings of a manuscript or other object, either as a series of paragraphs or as a series of distinct binding elements, one for each binding of the manuscript. < binding > contains a description of one binding, i.e. type of covering, boards, etc. applied to a manuscript or other object. < sealDesc > describes the seals or similar items related to the object described, either as a series of paragraphs or as a series of seal elements. < seal > contains a description of one seal or similar applied to the object described < accMat > contains details of any significant additional material which may be closely associated with the manuscript or object being described, such as non-contemporaneous documents or fragments bound in with it at some earlier historical period. 10.7.3.1 Binding Descriptions The bindingDesc element contains a description of the state of the present and former bindings of a manuscript, including information about its material, any distinctive marks, and provenance information. This may be given as a series of paragraphs if only one binding is being described, or as a series of distinct binding elements, each describing a distinct binding where these are separately described. For example: Within a binding description, the elements decoNote and condition are available, as alternatives to p , for paragraphs dealing exclusively with information about decorative features of a binding, or about its condition, respectively. As noted above, ( 10.7.1.5 Condition ) the element condition may also be used as an alternative to p for paragraphs concerned exclusively with the condition of a binding, where this has not been supplied as part of the physical description. 10.7.3.2 Seals The sealDesc element supplies information about the seal(s) attached to documents to guarantee their integrity, or to show authentication of the issuer or consent of the participants. It may contain one or more paragraphs summarizing the overall nature of the seals, or may contain one or more seal elements. 10.7.3.3 Accompanying Material The circumstance may arise where material not originally part of a manuscript is bound into or otherwise kept with a manuscript. In some cases this material would best be treated in a separate msPart element (see 10.10 Manuscript Parts below). There are, however, cases where the additional matter is not self-evidently a distinct manuscript: it might, for example, be a set of notes by a later scholar, or a file of correspondence relating to the manuscript. The accMat element is provided as a holder for this kind of information. < accMat > contains details of any significant additional material which may be closely associated with the manuscript or object being described, such as non-contemporaneous documents or fragments bound in with it at some earlier historical period. Here is an example of the use of this element, describing a note by the Icelandic manuscript collector Árni Magnússon which has been bound with the manuscript: 10.8 History The following elements are used to record information about the history of a manuscript: < history > groups elements describing the full history of a manuscript, manuscript part, or other object. < origin > contains any descriptive or other information concerning the origin of a manuscript, manuscript part, or other object. < provenance > contains any descriptive or other information concerning a single identifiable episode during the history of a manuscript, manuscript part, or other object after its creation but before its acquisition. < acquisition > contains any descriptive or other information concerning the process by which a manuscript or manuscript part or other object entered the holding institution. The three components of the history element all have the same substructure, consisting of one or more paragraphs marked as p elements. Each of these three elements is also a member of the att.datable attribute class, itself a member of the att.datable.w3c class, and thus also carries the following optional attributes: < att.datable.w3c > provides attributes for normalization of elements that contain datable events conforming to the W3C XML Schema Part 2: Datatypes Second Edition . @notBefore specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. @notAfter specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. Information about the origins of the manuscript, its place and date of writing, should be given as one or more paragraphs contained by a single origin element; following this, any available information on distinct stages in the history of the manuscript before its acquisition by its current holding institution should be included as paragraphs within one or more provenance elements. Finally, any information specific to the means by which the manuscript was acquired by its present owners should be given as paragraphs within the acquisition element. Here is a fairly simple example of the use of this element: Here is a fuller example, demonstrating the use of multiple provenance elements where distinct periods of ownership for the manuscript have been identified: 10.9 Additional Information Three categories of additional information are provided for by the scheme described here, grouped together within the additional element described in this section. < additional > groups additional information, combining bibliographic information about a manuscript or other object, or surrogate copies of it, with curatorial or administrative information. < adminInfo > contains information about the present custody and availability of the manuscript or other object, and also about the record description itself. < surrogates > contains information about any representations of the manuscript or other object being described which may exist in the holding institution or elsewhere. < listBibl > contains a list of bibliographic citations of any kind. None of the constituent elements of additional is required. If any is supplied, it may appear once only; furthermore, the order in which elements are supplied should be as specified above. 10.9.1 Administrative Information The adminInfo element is used to hold information relating to the curation and management of a manuscript. This may be supplied as a note using the global note element. Alternatively, different aspects of this information may be presented grouped within one of the following specialized elements: < recordHist > provides information about the source and revision status of the parent manuscript or object description itself. < availability > supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. < custodialHist > contains a description of a manuscript or other object's custodial history, either as running prose or as a series of dated custodial events. 10.9.1.1 Record History The recordHist element may contain simply a series of paragraphs. Alternatively it may contain a source element, followed by an optional series of change elements. < source > describes the original source for the information contained with a manuscript or object description. < change > documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. The source element is used to document the primary source of information for the record containing it, in a similar way to the standard TEI sourceDesc element within a TEI Header. If the record is a new one, made without reference to anything other than the manuscript itself, then it may simply contain a p element, as in the following example: Frequently, however, the record will be derived from some previously existing description, which may be specified using the standard TEI bibl element, as in the following example: If, as is likely, a full bibliographic description of the source from which cataloguing information was taken is included within the listBibl element contained by the current additional element, or elsewhere in the current document, then it need not be repeated here. Instead, it should be referenced using the standard TEI ref element, as in the following example: The change element may also appear within the revisionDesc element of the standard TEI header; its use here is intended to signal the similarity of function between the two container elements. Where the TEI header should be used to document the revision history of the whole electronic file to which it is prefixed, the recordHist element may be used to document changes at a lower level, relating to the individual description, as in the following example: 10.9.1.2 Availability and Custodial History The availability element is another element also available in the TEI header, which should be used here to supply any information concerning access to the current manuscript, such as its physical location (where this is not implicit in its identifier), any restrictions on access, information about copyright, etc. The custodialHist record is used to describe the custodial history of a manuscript, recording any significant events noted during the period that it has been located within its holding institution. It may contain either a series of p elements, or a series of custEvent elements, each describing a distinct incident or event, further specified by a type attribute, and carrying dating information by virtue of its membership in the att.datable class, as noted above. < custEvent > describes a single event during the custodial history of a manuscript or other object. Here is an example of the use of this element: 10.9.2 Surrogates The surrogates element is used to provide information about representations such as photographs or other representations of the manuscript which may exist within the holding institution or elsewhere. < surrogates > contains information about any representations of the manuscript or other object being described which may exist in the holding institution or elsewhere. The surrogates element should not be used to repeat information about representations of the manuscript available within published works; this should normally be documented within the listBibl element within the additional element. However, it is often also convenient to record information such as negative numbers or digital identifiers for unpublished collections of manuscript images maintained within the holding institution, as well as to provide more detailed descriptive information about the surrogate itself. Such information may be provided as prose paragraphs, within which identifying information about particular surrogates may be presented using the standard TEI bibl element, as in the following example: At a later revision, the content of the surrogates element is likely to be expanded to include elements more specifically intended to provide detailed information such as technical details of the process by which a digital or photographic image was made. For information about the inclusion of digital facsimile images within a TEI document, refer also to 11.1 Digital Facsimiles . 10.10 Manuscript Parts The msPart element may be used in cases where manuscripts or parts of manuscripts that were originally physically separate have been bound together and/or share the same call number. < msPart > contains information about an originally distinct manuscript or part of a manuscript, which is now part of a composite manuscript. Since each component of such a composite manuscript will in all likelihood have its own content, physical description, history, and so on, the structure of msPart is in the main identical to that of msDesc , allowing one to retain the top level of identity ( msIdentifier ), but to branch out thereafter into as many parts, or even subparts, as necessary. 10.11 Manuscript Fragments The msFrag element may be used inside msDesc when encoding one or more fragments of a scattered or fragmented manuscript. The fragment(s) described in a single msDesc element may be held either at several institutions or at a single institution, so different call numbers may be attached to the fragments. Inside the msFrag element, information about the single fragment or each dispersed part is provided: e.g. the current shelfmark or call number, the labels of the range of folios concerned if the fragment currently forms part of a larger manuscript, dimensions, extent, title, author, annotations, illuminations and so on. < msFrag > contains information about a fragment described in relation to a prior context, typically as a description of a virtual reconstruction of a manuscript or other object whose fragments were catalogued separately One well-known example of fragmentation is the Old Church Slavonic manuscript known as Codex Suprasliensis , substantial parts of which are to be found in three separate repositories, in Ljubljana, Warsaw, and St. Petersburg. This manuscript should be represented using one single msDesc element in which msName is used to identify the fragmented manuscript, along with three distinct msFrag elements, each of which contains the current identifier of one of the fragments, a physical description, and other related information: 10.12 Module for Manuscript Description The module described in this chapter makes available the following components: Manuscript Description Manuscript Description The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">10 Manuscript Description</span>"}
{"link":"p5.xml?id=PH","tag":"guidelines","content":"11 Representation of Primary Sources This chapter describes elements that may be used to represent primary source materials, such as manuscripts, printed books, ephemera, or other textual documents. Some of these specialized elements, particularly at phrase-level, add to the other elements available within text to deal with textual phenomena more specific to primary source transcription. Other structural and block-level elements described here can be used to represent primary source materials by prioritizing the encoding of their spatial features over their logical textual structure (that is, the elements described in chapter 4 Default Text Structure ). These elements, facsimile , sourceDoc , and their children, may be used in parallel and in combination with an encoding of logical text structures with text , or as standalone representations. The element sourceDoc in particular provides a way of combining facsimile and transcriptions by embedding transcribed text. This approach focuses on physical and textual features that can be primarily described spatially, such as the sequence of pages in a manuscript, or the layout of a printed page. This is not meant to be the only way of transcribing primary sources in TEI, or even a preferred way; which approach is more appropriate will depend on the specific needs of your project. Although this chapter discusses manuscript materials more frequently than other forms of written text, most of the recommendations presented are equally applicable to facsimiles of a wide variety of media, including printed matter, monumental inscriptions, and art. Each medium has its own vocabulary of agents. In the following examples, terms such as scribe, author, editor, annotator or corrector may be re-interpreted in terms more appropriate to the medium being transcribed. In printed material, for example, the compositor plays a role analogous to the scribe, while in an authorial manuscript, the author and the scribe are the same person. This module may be used in conjunction with other modules. These recommendations are not intended to meet every transcriptional circumstance likely to be faced by any scholar. They are intended rather as a base to enable encoding of the most common phenomena found in the course of scholarly transcription of primary source materials. These guidelines do not address the encoding of physical description of textual witnesses: the materials of the carrier, the medium of the inscribing implement, the organisation of the carrier materials themselves (such as quiring, collation), authorial instructions or scribal markup, etc., except insofar as these are involved in the broader question of manuscript description, as addressed by the msdescription module described in chapter 10 Manuscript Description . This chapter begins by describing elements for handling digitally-encoded images of primary source materials for the purpose of creating digital facsimiles using the facsimile element ( 11.1 Digital Facsimiles ). The next section ( 11.2 Combining Transcription with Facsimile ) describes two ways of combining a facsimile images with a transcription; either by referencing a parallel transcription in text , or by providing an embedded transcription that prioritizes the encoding of a resource’s spatial features via the sourceDoc element and a number of transcriptional elements. Section 11.3 Scope of Transcriptions documents elements that support scholars in recording information about specific features of the text written on its physical carrier, such as 11.3.1 Altered, Corrected, and Erroneous Texts and 11.3.2 Hands and Responsibility Section 11.4 Aspects of Layout describes how complex page layouts may be represented. Section 11.6 Headers, Footers, and Similar Matter introduces the element fw ( forme work ) for encoding material repeated from page to page that falls outside the stream of the text. Section 11.7 Identifying Changes and Revisions describes how to document changes made during the production or revision of a primary source. The chapter concludes with a technical overview of the structure and organization of the module described here. Some elements from other chapters are recontexualized for situations involving the transcription of primary source materials, whether within text or sourceDoc . Therefore, this overview should be read in conjunction with chapters 3 Elements Available in All TEI Documents and 5 Characters, Glyphs, and Writing Modes . 11.1 Digital Facsimiles A common approach in the TEI to representing pre-existing sources involves transcribing or otherwise converting sources into character form before marking them up. However, it is also a common practice to make a different form of digital text that is instead composed of digital images of the original source, typically one per page, or other written surface. We call such a resource a digital facsimile . A digital facsimile may, in the simplest case, just consist of a collection of images, with some metadata to identify them and the source materials portrayed. It may sometimes contain a variety of images of the same source pages, perhaps of different resolutions, or of different kinds. Such a collection may form part of any kind of document, for example a commentary of a codicological or paleographic nature, where there is a need to align explanatory text with image data. It may also be complemented by a transcribed or encoded version of the original source, which may be linked to the page images or embedded as discussed in 11.2 Combining Transcription with Facsimile . In this section we present elements designed to support these various possibilities and discuss the associated mechanisms provided by these Guidelines. When this module is included in a schema, the class att.global is extended to include two new pointer attributes, facs and change: < att.global.facs > provides attributes used to express correspondence between an element and all or part of a facsimile image or surface. @facs points to one or more images, portions of an image, or surfaces which correspond to the current element. points to one or more images, portions of an image, or surfaces which correspond to the current element. < att.global.change > provides attributes allowing its member elements to specify one or more states or revision campaigns with which they are associated. @change points to one or more change elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder. points to one or more change elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder. In the simple case where a digital text is composed of page images, the facs attribute on the pb element may be used to associate each image with an appropriate point in the text: The recommended approach to encoding facsimiles is instead to use the facs attribute in conjunction with the elements facsimile or sourceDoc , and the elements surface , surfaceGrp , and zone , which are also provided by this module. These elements make it possible to accommodate multiple images of each page, as well as to record the position and relative size of elements identified on any kind of written surface and to link such elements with digital facsimile images of them. Typical applications include the provision of full text search in digital facsimile editions, and ways of annotating graphics, for example so as to identify individuals appearing in group portraits and link them to data about the people represented. The following elements are available to represent components of a digital facsimile: < facsimile > contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. < sourceDoc > contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. < surface > defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. < surfaceGrp > defines any kind of useful grouping of written surfaces, for example the recto and verso of a single leaf, which the encoder wishes to treat as a single unit. < zone > defines any two-dimensional area within a surface element. < path > defines any line passing through two or more points within a surface element. Either of the facsimile or sourceDoc elements may be used to represent a digital facsimile. Either may appear within a TEI document along with, or instead of, the text element introduced in section 4 Default Text Structure . The sourceDoc element is used when a digital facsimile contains a transcription that prioritizes the encoding of the spatial features and layout of a text document over the text’s logical textual structure; the text element should be used when it contains a textual transcription focused on its logical features. When the digital facsimile contains only images, however, only facsimile elements should be used. In this section, we first discuss the simpler case, returning to the use of the sourceDoc element in section 11.2 Combining Transcription with Facsimile below. When this module is selected therefore, a legal TEI document may thus comprise any of the following: a TEI header and a text element a TEI header and a facsimile element a TEI header and a sourceDoc element a TEI header, a facsimile element, and a text element a TEI header, one or more sourceDoc or facsimile elements, and a text element Like the text element, a facsimile element may also contain an optional front or back element, used in the same way as described in sections 4.5 Front Matter and 4.7 Back Matter . In the simplest case, a facsimile just contains a series of graphic elements, each of which identifies an image file: In this simple case, the four page images are understood to represent the complete facsimile, and are to be read in the sequence given. Suppose, however, that the second page of this particular work is available both as an ordinary photograph and as an infra-red image, or in two different resolutions. The surface element may be used to group the two image files, since these correspond with the same area of the work: The surface element provides a way of indicating that the two images of page2 represent the same surface within the source material. A surface might be one side of a piece of paper or parchment, an opening in a codex treated as a single surface by the writer, a face of a monument, a billboard, a membrane of a scroll, or indeed any two-dimensional surface, of any size. The surfaceGrp element may be used to indicate that two (or more) surfaces are associated in some way, for example because they represent the recto and verso of the same leaf, as in this example: Simply grouping related graphics is not however the main purpose of the surface element: rather it is to help identify the location and size of the various two-dimensional spaces constituting the digital facsimile. Note that the actual dimensions of the object represented are not provided by the surface element ; rather, the surface element defines an abstract coordinate space which may be used to address parts of the image. Four attributes supplied by the att.coordinated class are used to define this space. < att.coordinated > provides attributes that can be used to position their parent element within a two dimensional coordinate system. @ulx gives the x coordinate value for the upper left corner of a rectangular space. @uly gives the y coordinate value for the upper left corner of a rectangular space. @lrx gives the x coordinate value for the lower right corner of a rectangular space. @lry gives the y coordinate value for the lower right corner of a rectangular space. gives the x coordinate value for the upper left corner of a rectangular space. gives the y coordinate value for the upper left corner of a rectangular space. gives the x coordinate value for the lower right corner of a rectangular space. gives the y coordinate value for the lower right corner of a rectangular space. By default, the same coordinate space is used for a surface and for all of its child elements. 1 It may be most convenient to derive a coordinate space from a digital image of the surface in question such that each pixel in the image corresponds with a whole number of units (typically 1) in the coordinate space. In other cases it may be more convenient to use units such as millimetres. Neither practice implies any specific mapping between the coordinate system used and the actual dimensions of the physical object represented. A surface element can contain one or more zone elements, each of which represents a region or bounding box defined in terms of the same coordinate space as that of its parent surface element. A zone may be rectangular or non-rectangular: a rectangular zone is defined by a sequence of four coordinates in the same way as a surface; a non-rectangular zone is defined using the attribute points, which provides a sequence of coordinates, each of which specifies a point on the perimeter of the zone. 2 A zone may be used to define any region of interest, such as a detail or illustration, or some part of the surface which is to be aligned with a particular text element, or otherwise distinguished from the rest of the surface. A surface establishes a coordinate system which may be used to address parts or the whole of some digital representation of a written surface. A zone, by contrast, defines any arbitrary area of interest relative to that surface, using the same coordinate system. It might be bigger or smaller than its parent surface, or might overlap its boundaries. The only constraint is that it must be defined using the same coordinate system. When an image of some kind is supplied within either a zone or a surface, the implication is that the image represents the whole of the zone or surface concerned. In the simple case therefore, we might imagine a surface defining a page, within which there is a graphic representing the whole of that page, and a number of zones defining parts of the page, each with its own graphic, each representing a part of the page. If however one of those graphics actually represents an area larger than the page (for example to include a binding or the surface of a desk on which the page rests), then it will be enclosed by a zone with coordinates larger than those of the parent surface. For example, consider the following figure: We therefore define a surface element corresponding with the area of the image which represents the whole of the two page spread and embed the graphic within it: If desired, the binaryObject element described in 3.10 Graphics and Other Non-textual Components (or any other element from the model.graphicLike class) may be used instead of a graphic element. Since the image in this example is of a two page opening, we will probably wish to define at least two nested zones, one for each page: As this example shows, in addition to acting as a container for graphic elements, zone elements may be used to identify parts of a surface for analytical purposes. The relationship between zone and surface can be quite complex: for example, it may be appropriate to treat the whole of a two page spread as a single written surface, perhaps because particular written zones span both pages. A zone may contain a nested surface, if for example a page has an additional scrap of paper attached to it. A zone may be of any shape, not simply rectangular. Discussion of these and other cases are provided in section 11.2.2.1 Advanced Uses of surface and zone below. In the following extended example, we discuss a hypothetical digital edition of an early 16th century French work, Charles de Bovelles' Géometrie Pratique . 4 In this edition, each page has been digitized as a separate file: for example, recto page 49 is stored in a file called Bovelles-49r.png . In the facsimile element used to contain the whole set of pages, we define a surface element for this page, which we situate within a coordinate scale running from 0 to 200 in the x (horizontal) axis, and 0 to 300 in the y (vertical) axis. The surface element contains a graphic element which represents the whole of this surface: A non rectangular-zone, for example that containing the word cloche. at bottom left of the page, could also be defined, using the points attribute: In the examples above a single graphic element has been associated directly with the surface of the page rather than nesting it within a zone. However, it is also possible to include multiple zone elements which contain a graphic element, if for example a detailed image is available. Since all zone elements use the same coordinate system (that defined by their parent surface ), there is no need to demonstrate enclosure of one zone within another by means of nesting. To continue the current example, supposing that we have an additional image called Bovelles49r-detail.png containing an additional image of the figure in the third zone above, we might encode that zone as follows: Within a surface or zone , individual lines can be identified using the path element, which also carries the points attribute: 11.2 Combining Transcription with Facsimile A digitized source document may contain nothing more than page images and a small amount of metadata. It may also contain an encoded transcription of the pages represented, which may either be embedded within a sourceDoc element, or supplied in parallel with a facsimile as defined above. If the transcription is regarded as a text in its own right, organized and structured independently of its physical realization in the document or documents represented by the facsimile, then the recommended practice is to use the text element to contain such a structured representation, and to present it in parallel. The text element is a sibling of the facsimile and sourceDoc elements. This approach is illustrated in section 11.2.1 Parallel Transcription below. Alternatively, if the transcription is intended not to prioritize representation of the final text so much as the process by which the document came to take its present form, or the physical disposition of its component parts, it can be presented as an embedded transcription, as further described in section 11.2.2 Embedded Transcription below. 11.2.1 Parallel Transcription Suppose now that we wish to align a transcription of the page discussed in the preceding section with particular zones. We begin by giving each relevant part of the facsimile an identifier: It is also possible to point in the other direction, from a surface or zone to the corresponding text. This is the function of the start attribute, which supplies the identifier of the element containing at least the start of the transcribed text found within the surface or zone concerned. Thus, another way of linking this page with its transcription would be simply 11.2.2 Embedded Transcription An embedded transcription is one in which words and other written traces are encoded as subcomponents of elements representing the physical surfaces carrying them rather than independently of them. The following elements are available for this purpose: < sourceDoc > contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. < surface > defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. < zone > defines any two-dimensional area within a surface element. < line > contains the transcription of a topographic line in the source document < seg > represents any segmentation of text below the chunk level. The elements surface , surfaceGrp , and zone were introduced above in section 11.1 Digital Facsimiles . When supplied within a sourceDoc element, these elements may contain transcriptions of the written content of a source in addition to or as an alternative to digital images of them. Such transcription may be placed directly within the zone element, or within one or more line elements, for cases where the writing is linear, in the sense that it is composed of discrete tokens organized physically into groups, typically organized in a sequence corresponding with the way they are intended to be read. Depending on the directionality of the writing system used, this might be any combination of top-down and left to right, or vice versa. The element line may be used to hold a complete group of such tokens. Where, however, the lineation is not considered significant, any group of tokens may be indicated using the zone element. The seg element described in section 16.3 Blocks, Segments, and Anchors may also be used to indicate smaller sequences of tokens within zone , or line as appropriate. Returning to the preceding example, we might transcribe the content of the zone to which we gave the identifier B49rPara2 within a sourceDoc element as follows: As mentioned above, some or all of the written surfaces being transcribed may be composed of physically distinct scraps. In the following example, taken from the Walt Whitman Archive, two pieces of newsprint have been glued to a piece of blue paper on which a poem is being drafted: Using these elements, the Whitman draft above might be encoded as follows: The metamark element used in this example is further discussed below ( 11.3.4.2 Metamarks ) Note that in this example we have not included any graphic element corresponding with the zone or surface elements identified in the transcription. The encoder may choose to complement a transcription with graphic representations of its source at whatever level is considered effective, or not at all. Equally, the encoder may choose to provide only graphics without any transcription, to provide only a structured (non-embedded) transcription, or to provide any combination of the three. This example also lacks any coordinate information to specify either the size of the two newspaper fragments or whereabouts on the parent surface element they are to be found, other than the reading order implicit in their sequence. Such information could be added if desired by specifying a coordinate system on the outermost surface element, and then indicating values within that system for each of the two fragments, as was discussed above. We discuss this in further detail in section 11.2.2.1 Advanced Uses of surface and zone below. 11.2.2.1 Advanced Uses of surface and zone As a child of sourceDoc , the surface element both identifies a specific area containing writing and provides a two dimensional set of coordinates which can be used to position and define dimensions for sub-parts of it. Furthermore, surfaces may nest within other surfaces, as in the case of patches or other written materials attached to the main writing surface. In the general case, the position and dimensions of such nested surfaces will be defined using the same coordinate system as that supplied by the parent surface element. It is also possible, however, that a different coordinate system is required for such a nested surface, perhaps because it requires a more complex granularity. We consider both possibilities. In the earlier examples showing nested examples we did not provide any coordinate information, for simplicity of presentation. Suppose however, that we wish to indicate the position and sizes of the newspaper scraps in 1 Single leaf of notes possibly related to the poem eventually titled Sleepers. From the Walt Whitman Archive (Duke 258). above, relative to the whole page. As previously noted, the four attributes ulx, uly, lrx and lry when given on the surface element define the coordinate scheme, rather than specifying the location of that surface. We must therefore introduce an additional zone element, as in the following revised encoding for this example Now suppose that we wish to define a finer scale grid for the newspaper patch, perhaps because we wish to localize zones within it with greater accuracy. To do this we will need to specify the position of the nested surface as in the previous example, but also to define the new coordinate system. We accomplish this as follows: All of the examples so far given have involved rectangular zones, for clarity of exposition. As noted above, the points attribute may be used to define non-rectangular zones as a series of points. For example, in the last of the Whitman examples discussed in section 11.3.4.2 Metamarks above, we might wish to record the exact shape of the zone containing the metamark Entered . Since this is not a rectangular zone, we use the points attribute to indicate the points defining a polygon which contains it. The values used are expressed in terms of a coordinate space running from 0 to 229 in the X dimension, and 0 to 160 in the Y dimension. In exactly the same way, we may wish to identify the curved zone in the following image containing the word Northamptonshire : Finally, it should be noted that a zone does not need to be entirely contained within the two-dimensional space defined by its parent surface. For example, we might wish to encode the example in 1 Badische Landesbibliothek, Manuscript Durlach 1, Fols. 95v-96r above not as a surface representing the whole of the two page spread, but as a surface representing only the written part of this opening. The written part appears 50 units from the left of the image and 20 units from the top, while the bottom right corner of the written part appears 400 units from the left of the image, and 280 units from the top. We therefore define the written surface within this image as follows: 11.3 Scope of Transcriptions When transcribing a primary source, whether using text or sourceDoc , scholars may wish to record information concerning individual readings of letters, words, or larger units.They may also wish to include other editorial material, such as comments on the status or possible origin of particular readings, corrections, or text supplied to fill lacunae. Such elements may also be used for digital transcriptions in which the object is not to represent a finished text, but rather to represent the creative process, as evidenced by different layers or traces of writing in one or more documents. Transcriptions of this kind are closely focussed on the physical appearance of specific documents, needing to distinguish the traces of different writing activities on them, such as additions and deletions but also other indications of how the writing is to be read, such as indications of transposition, re-affirmation of writing which has been deleted, and so on. Such distinctions are considered of particular importance when dealing with authorial manuscripts, but are also relevant in the case of historical sources such as charters or other legal documents. In either case, it is customary in transcriptions to register certain features of the source, such as ornamentation, underlining, deletion, areas of damage and lacunae. This chapter provides ways of encoding such information: methods of recording editorial or other alterations to the text, such as expansion of abbreviations, corrections, conjectures, etc. (section 11.3.1 Altered, Corrected, and Erroneous Texts ) methods of describing important extra-linguistic phenomena in the source: unusual spaces, lines, page and line breaks, changes of manuscript hand, etc. (section 11.3.2 Hands and Responsibility ) methods of representing aspects of layout such as spacing or lines 11.4 Aspects of Layout methods of representing material such as running heads, catch-words, and the like (section 11.6 Headers, Footers, and Similar Matter ) The remainder of this chapter describes a model for encoding such transcriptions, in which elements such as mod , del , etc. are used to mark writing traces and their functions within the document. Each such element can be assigned to one or more editorially-defined modification groups, termed a change , by means of a global change attribute, which references a definition for the modification group concerned, typically provided within the TEI header creation element; see further 11.7 Identifying Changes and Revisions . The transcription itself may be embedded within the elements surface and zone described in section 11.1 Digital Facsimiles , or provided in parallel within a text element. Within a zone , the transcription may be organized topographically in terms of lines of writing, using the line element, or in terms of further nested zones, or as a combination of the two ( 11.2.2 Embedded Transcription ). These recommendations are not intended to meet every transcriptional circumstance likely to be faced by any scholar. Rather, they should be regarded as a base which can be elaborated if necessary by different scholars in different disciplines As a rule, all elements which may be used in the course of a transcription of a single witness may also be used in a critical apparatus, i.e. within the elements proposed in chapter 12 Critical Apparatus . This can generally be achieved by nesting a particular reading containing tagged elements from a particular witness within the rdg element in an app structure. Just as a critical apparatus may contain transcriptional elements within its record of variant readings in various witnesses, one may record variant readings in an individual witness by use of the apparatus mechanisms app and rdg . This is discussed in section 12.3 Using Apparatus Elements in Transcriptions . 11.3.1 Altered, Corrected, and Erroneous Texts In the detailed transcription of any source, it may prove necessary to record various types of actual or potential alteration of the text: expansion of abbreviations, correction of the text (either by author, scribe, or later hand, or by previous or current editors or scholars), addition, deletion, or substitution of material, and similar matters. The sections below describe how such phenomena may be encoded using either elements defined in the core module (defined in chapter 3 Elements Available in All TEI Documents ) or specialized elements available only when the module described in this chapter is available. 11.3.1.1 Core Elements for Transcriptional Work In transcribing individual sources of any type, encoders may record corrections, normalizations, additions, and omissions using the elements described in section 3.5 Simple Editorial Changes . Representation of abbreviations and their expansions may also involve use of elements described in section 3.6 Names, Numbers, Dates, Abbreviations, and Addresses . Elements particularly relevant to this chapter include: < abbr > contains an abbreviation of any sort. < add > contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. < choice > groups a number of alternative encodings for the same point in a text. < corr > contains the correct form of a passage apparently erroneous in the copy text. < del > contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. < expan > contains the expansion of an abbreviation. < gap > indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. < sic > contains text reproduced although apparently incorrect or inaccurate. All of these elements bear additional attributes for specifying who is responsible for the interpretation represented by the markup, and the associated certainty. In addition, some of them bear an attribute allowing the markup to be categorized by type and source. < att.editLike > provides attributes describing the nature of an encoded scholarly intervention or interpretation of any kind. @evidence indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. < att.global.source > provides attributes used by elements to point to an external source. @source specifies the source from which some aspect of this element is drawn. specifies the source from which some aspect of this element is drawn. < att.global.responsibility > provides attributes indicating the agent responsible for some aspect of the text, the markup or something asserted by the markup, and the degree of certainty associated with it. @cert signifies the degree of certainty associated with the intervention or interpretation. @resp indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. signifies the degree of certainty associated with the intervention or interpretation. indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed The following sections describe how the core elements just named may be used in the transcription of primary source materials. 11.3.1.2 Abbreviation and Expansion The writing of manuscripts by hand lends itself to the use of abbreviation to shorten scribal labour. Commonly occurring letters, groups of letters, words, or even whole phrases, may be represented by significant marks. This phenomenon of manuscript abbreviation is so widespread and so various that no taxonomy of it is here attempted. Instead, methods are shown which allow abbreviations to be encoded using the core elements mentioned above. A manuscript abbreviation may be viewed in two ways. One may transcribe it as a particular sequence of letters or marks upon the page: thus, a p with a bar through the descender , a superscript hook , a macron . One may also interpret the abbreviation in terms of the letter or letters it is seen as standing for: thus, per , re , n . Both of these views are supported by these Guidelines. In many cases the glyph found in the manuscript source also exists in the Unicode character set: for example the common Latin brevigraph ⁊, standing for et and often known as the Tironian et can be directly represented in any XML document as the Unicode character with code point U+204A (see further 5.7.1 Character References and 6.1 Language Identification ). In cases where it does not, these Guidelines recommend use of the g element provided by the gaiji module described in chapter 5 Characters, Glyphs, and Writing Modes . This module allows the encoder great flexibility both in processing and in documenting non-standard characters or glyphs, including the ability to provide detailed documentation and images for them. These two methods of coding abbreviation may also be combined. An encoder may record, for any abbreviation, both the sequence of letters or marks which constitutes it, and its sense, that is, the letter or letters for which it is believed to stand. For example, in the following fragment the phrase euery persone is represented by a sequence of abbreviated characters: The transcriber may also wish to indicate that, because of the presence of these particular characters, the two words are actually abbreviations, by using the abbr element: When abbreviated forms such as these are expanded, two processes are carried out: some characters not present in the abbreviation are added (always), and some characters or glyphs present in the abbreviation are omitted or replaced (often). For example, when the abbreviation Dr. is expanded to Doctor , the dot in the abbreviation is removed, and the letters octo are added. Where detailed markup of abbreviated words is required, these two aspects may be marked up explicitly, using the following elements: < ex > contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. < am > contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. As implied in the preceding discussion, making decisions about which of these various methods of representing abbreviation to use will form an important part of an encoder's practice. As a rule, the abbr and am elements should be preferred where it is wished to signify that the content of the element is an abbreviation, without necessarily indicating what the abbreviation may stand for. The ex and expan elements should be used where it is wished to signify that the content of the element is not present in the source but has been supplied by the transcriber, without necessarily indicating the abbreviation used in the original. The decision as to which course of action is appropriate may vary from abbreviation to abbreviation; there is no requirement that the same system be used throughout a transcription, although doing so will generally simplify processing. The choice is likely to be a matter of editorial policy. If the highest priority is to transcribe the text literatim (letter by letter), while indicating the presence of abbreviations, the choice will be to use abbr or am throughout. If the highest priority is to present a reading transcription, while indicating that some letters or words are not actually present in the original, the choice will be to use ex or expan throughout. Further information may be attached to instances of these elements by the note element, on which see section 3.9 Notes, Annotation, and Indexing , and by use of the resp and cert attributes. In this instance from the English Brut , a note is attached to an editorial expansion of the tail on the final d of good to goode : The choice element may be used to indicate that the proposed expansion is one way of encoding what might equally well be represented as an abbreviation, represented by the hooked D, as follows: If more than one expansion for the same abbreviation is to be recorded, multiple notes may be supplied. It may also be appropriate to use the markup for critical apparatus; an example is given in section 12.3 Using Apparatus Elements in Transcriptions . 11.3.1.3 Correction and Conjecture The sic , corr , and choice elements, defined in the core module should be used to indicate passages deemed in need of correction, or actually corrected, during the transcription of a source. For example, in the manuscript of William James's A Pluralistic Universe as edited by Fredson Bowers (Cambridge: Harvard University Press, 1977), a sentence first written One must have lived longer with this system, to appreciate its advantages. has been modified by James to begin But One must ... , without the initial capital O having been reduced to lowercase. This non-standard orthography could be recorded thus: Similarly, in this example from Albertus Magnus, both a manuscript error angues and its correction augens are registered within a choice element: Note that the corr element is used to provide a corrected form which is not present in the source; in the case of a correction made in the source itself, whether scribal, authorial, or by some other hand, the add , del , and subst elements described in 11.3.1.4 Additions and Deletions should be used. The sic element is used to mark passages considered by the transcriber to be erroneous; in such cases, the corr element indicates the transcriber's correction of them. Where the transcriber considers that one or more words have been erroneously omitted in the original source and corrects this omission, the supplied element discussed in 11.3.1.7 Text Omitted from or Supplied in the Transcription should be used in preference to corr . Thus, in the following example, from George Moore's draft of additional materials for Memoirs of My Dead Life , the transcriber supplies the word we omitted by the author: As with expan and abbr , the choice as to whether to record simply that there is an apparent error, or simply that a correction has been applied, or to record both possible readings within a choice element is left to the encoder. The decision is likely to be a matter of editorial policy, which might be applied consistently throughout or decided case by case. If the highest priority is to present an uncorrected transcription while noting perceived errors in the original, the choice will typically be to use only sic throughout. If the highest priority is to present a reading transcription, while indicating that perceived errors in the original have been corrected, the choice will be to use only corr throughout. Further information may be attached to instances of these elements by the note element and resp and cert attributes. Instances of these elements may also be classified according to any convenient typology using the type attribute. For example, consider the following encoding of an emendation in the Hengwrt manuscript proposed by E. Talbot Donaldson: The attribute cert may be used to indicate the degree of confidence ascribed by the encoder to the proposed emendation on a broad scale: high, medium, or low. The attribute resp is used to indicate who is responsible for the proposed emendation. Its value is a pointer, which will typically indicate a respStmt or name element in the header of the transcribed document, but can point anywhere, for example to some online authority file. Using these two attributes, the corr element presented above might usefully be enhanced as follows: As remarked above, where the same annotation applies to several corrections, this may be represented by supplying multiple pointers on the note. Consider for example such corrections as the following, in Dudo of S. Quentin. Parkes cites two cases in this manuscript of the same phenomenon: The target attribute on the note element indicates the choice elements which exemplify this kind of scribal error. This necessitates the addition of an identifier to each choice element. However, if the number of corrections is large and the number of notes is small, it may well be both more practical and more appropriate to regard the collection of annotations as constituting a typology and then use the type attribute. Suppose that the note given above is one of half a dozen possible kinds of corrected phenomena identified in a given text; others might include, say, repetition of a word from the preceding line , etc. The type attribute on the corr element can be used to specify an arbitrary code for the particular kind of correction (or other editorial intervention) identified within it. This code can be chosen freely and is not treated as a pointer. For a given project, it may well be desirable to limit the possible values for the type or subtype attributes automatically. This is easily done but requires customization of the TEI system using techniques described in 23.3 Customization , in particular 23.3.1.3 Modification of Attribute and Attribute Value Lists , which should be consulted for further information on this topic. When making a correction in a source which forms part of a textual tradition attested by many witnesses, a textual editor will sometimes use a reading from one witness to correct the reading of the source text. In the general case, such encoding is best achieved with the mechanisms provided by the module for textual criticism described in chapter 12 Critical Apparatus . However, for simple cases, the source attribute of the corr element may suffice. In the passage from Chaucer's Wife of Bath's Tale mentioned above, Parkes proposes to emend the problematic word wight to wyf which is the reading found in the Cambridge manuscript Gg.1. 27. This may be simply represented as follows: The app element described in chapter 12 Critical Apparatus provides a more powerful way of representing all three possible readings in parallel: This encoding simply records the three readings found in the various traditions, and gives (by means of the wit attribute) an indication of the witnesses supporting each. If the resp attribute were supplied on the rdg element, it would indicate the person responsible for asserting that the manuscript indicated has this reading, who is not necessarily the same as the person responsible for asserting that this reading should be used to correct the others. Editorial intervention elements such as corr can however be nested within a rdg to provide this additional information: Like the resp attribute, the cert attribute may be used with both corr and rdg elements. When used on the rdg element, these attributes indicate confidence in and responsibility for identifying the reading within the sources specified; when used on the corr element they indicate confidence in and responsibility for the use of the reading to correct the base text. If no other source is indicated (either by the source attribute, or by the wit attribute of a parent rdg ), the reading supplied within a corr has been provided by the person indicated by the resp attribute. If it is desired to express certainty of or responsibility for some other aspect of the use of these elements, then the mechanisms discussed in chapter 21 Certainty, Precision, and Responsibility may be found useful. See also 11.3.2.2 Hand, Responsibility, and Certainty Attributes for further discussion of the issues of certainty and responsibility in the context of transcription. 11.3.1.4 Additions and Deletions Additions and deletions observed in a source text may be described using the following elements: < add > contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. < addSpan > marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also add ). < del > contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. < delSpan > marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. < att.spanning > provides attributes for elements which delimit a span of text by pointing mechanisms rather than by enclosing it. @spanTo indicates the end of a span initiated by the element bearing this attribute. indicates the end of a span initiated by the element bearing this attribute. Further characteristics of each addition and deletion, such as the hand used, its effect (complete or incomplete, for example), or its position in a sequence of such operations may conveniently be recorded as attributes of these elements, all of which are members of the att.transcriptional class: < att.transcriptional > provides attributes specific to elements encoding authorial or scribal intervention in a text when transcribing manuscript or similar sources. @seq assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred. @status indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present. assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred. indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present. As described in section 3.5 Simple Editorial Changes , the add element is used to record any manuscript addition observed in the text, whether it is considered to be authorial or scribal. In the autograph manuscript of Max Beerbohm's The Golden Drugget , the author's addition of do ever may be recorded as follows, with the hand attribute indicating that the addition was Beerbohm's by referencing a handNote element defined elsewhere in the document (see further 11.3.2.1 Document Hands ): The del element is used to record manuscript deletions in a similar way. In the autograph manuscript of D. H. Lawrence's Eloi, Eloi, lama sabachthani the author's deletion of my may be recorded as follows. In this case, the hand attribute indicating that the deletion was Lawrence's is complemented by a rend attribute indicating that the deletion was by strike-through: If deletions are classified systematically, the type attribute may be useful to indicate the classification; when they are classified by the manner in which they were effected, or by their appearance, however, this will lead to a certain arbitrariness in deciding whether to use the type or the rend attribute to hold the information. In general, it is recommended that the rend attribute be used for description of the appearance or method of deletion, and that the type attribute be reserved for higher level or more abstract classifications. The place attribute is also available to indicate the location of an addition. For example, consider the following passage from a draft letter by Robert Graves: An encoder may also wish to indicate that an addition replaces a specific deletion, that is to encode a substitution as a single intervention in the text. This may be achieved by grouping the addition and deletion together within a subst element. At the end of the passage illustrated above, Graves first writes It is the expressed... , then deletes It is , and substitutes an uppercase T at the start of the . The add and del elements defined in the core module suffice only for the description of additions and deletions which fit within the structure of the text being transcribed, that is, which each deletion or addition is completely contained by the structural element (paragraph, line, division) within which it occurs. Where this is not the case, for example because an individual addition or deletion involves several distinct structural subdivisions, such as poems or prose items, or otherwise crosses a structural boundary in the text being encoded, special treatment is needed. The addSpan and delSpan elements are provided by this module for that purpose. (For a general discussion of the issue see further 20 Non-hierarchical Structures ). In this example of the use of addSpan , the insertion by Helgi Ólafsson of a gathering containing four neo-Eddic poems into Lbs 1562 4to is recorded as follows. A handNote element is first declared, within the header of the document, to associate the identifier heol with Helgi. Each of the added poems is encoded as a distinct div element. In the body of the text, an addSpan element is placed to mark the beginning of the span of added text, and an anchor is used to mark its end. The hand attribute on the addSpan element ascribes responsibility for the addition to the manuscript to Helgi, and the spanTo attribute points to the end of the added text: The delSpan element is used in the same way. An authorial manuscript will often contain several occasions where sequences of whole lines are marked for deletion, either by boxes or by being struck out. If the encoder is marking up individual verse lines with the l element, such deletions are problematic: deletion of two consecutive lines should be regarded as a single deletion, but the del element must be properly nested within a single l element. The delSpan element solves this problem: It is also often the case that deletions and additions may themselves contain other deletions and additions. For example, in Thomas Moore's autograph of the second version of Lalla Rookh two lines are marked for omission by vertical strike-through. Within the first of the two lines, the word upon has also been struck out, and the word over has been added: The text deleted must be at least partially legible, in order for the encoder to be able to transcribe it. If all of part of it is not legible, the gap element should be used to indicate where text has not been transcribed, because it could not be. The unclear element described in section 11.3.3.1 Damage, Illegibility, and Supplied Text may be used to indicate areas of text which cannot be read with confidence. See further section 11.3.1.7 Text Omitted from or Supplied in the Transcription and section 11.3.3.1 Damage, Illegibility, and Supplied Text . 11.3.1.5 Substitutions Substitution of one word or phrase for another is perhaps the most common of all phenomena requiring special treatment in transcription of primary textual sources. It may be simply one word written over the top of another, or deletion of one word and its replacement by another written above it by the same hand on the same occasion; the deletion and replacement may be done by different hands at different times; there may be a long chain of substitutions on the same stretch of text, with uncertainty as to the order of substitution and as to which of many possible readings should be preferred. As we have shown, the simplest method of recording a substitution is simply to record both the addition and the deletion. However, when the module defined by this chapter is in use, additional elements are available to indicate that the encoder believes the addition and the deletion to be part of the same intervention: a substitution. < subst > groups one or more deletions (or surplus text) with one or more additions when the combination is to be regarded as a single intervention in the text. < substJoin > identifies a series of possibly fragmented additions, deletions, or other revisions on a manuscript that combine to make up a single intervention in the text For example, returning to the example from William James, in a passage first written out by James as One must have lived longer with this system, to appreciate its advantages , the word this is first replaced by such a and this is then replaced by a . 5 This may be encoded as follows, representing the two changes as a sequence of additions and deletions: A special case of a substitution may consist of a superfluous word or phrase that is silently replaced by some addition. E.g. a scribe abandons a word (without indicating it should be deleted), and then writes a replacement word immediately after. Here the encoder may interpret this as an unmarked deletion which can then be combined with a corresponding addition to a substitution. The case of a single substitution or scribal correction that involves non-contiguous addition and deletion can be handled by using the substJoin element to make an explicit connection between one or more add and del elements. In the following example from Thomas Moore's Lalla Rookh, the deletion and addition are not contiguous: they are separated by the word thus , which is not part of the scribal intervention being marked. Because of this intervening text, it would be inappropriate to use subst to group this add and del . substJoin allows the encoder to indicate that additions and deletions separated in this way are part of a single scribal intervention: As a more complex example, consider the following passage: the authorial slip ( amongt for amongst ) is retained without comment. the other two authorial corrections are marked as substitutions, each combining a deletion and an addition. the false start fif in the last line is simply marked as a deletion; The app element presented in chapter 12 Critical Apparatus provides similar facilities, by treating each state of the text as a distinct reading. The rdg element has a varSeq attribute which may be used in the same way as the seq attribute to indicate the preferred sequence. The James example above might thus be represented as follows: 11.3.1.6 Cancellation of Deletions and Other Markings An author or scribe may mark a word or phrase in some way, and then on reflection decide to cancel the marking. For example, text may be marked for deletion and the deletion then cancelled, thus restoring the deleted text. Such cancellation may be indicated by the restore element: < restore > indicates restoration of text to an earlier state by cancellation of an editorial or authorial marking or instruction. This element bears the same attributes as the other transcriptional elements. These may be used to supply further information such as the hand in which the restoration is carried out, the type of restoration, and the person responsible for identifying the restoration as such, in the same way as elsewhere. Presume that Lawrence decided to restore my to the phrase of Eloi, Eloi, lama sabachthani first written For I hate this my body , with the my first deleted then restored by writing stet in the margin. This may be encoded: Another feature commonly encountered in manuscripts is the use of circles, lines, or arrows to indicate transposition of material from one point in the text to another. No specific markup for this phenomenon is proposed at this time. Such cases are most simply encoded as additions at the point of insertion and deletions at the point of encirclement or other marking. 11.3.1.7 Text Omitted from or Supplied in the Transcription Where text is not transcribed, whether because of damage to the original, or because it is illegible, or for some other reason such as editorial policy, the gap core element may be used to register the omission; where such text is transcribed, but the editor wishes to indicate that they consider it to be superfluous, for example because it is an inadvertent scribal repetition or an interpolation from another source, the surplus element may be used in preference. Where the editor believes text to be interpolated but genuine, the secl element may be used instead. Where text not present in the source is supplied (whether conjecturally or from other witnesses) to fill an apparent gap in the text, the supplied element may be used. < gap > indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. < surplus > marks text present in the source which the editor believes to be superfluous or redundant. < secl > Secluded. Marks text present in the source which the editor believes to be genuine but out of its original place (which is unknown). < supplied > signifies text supplied by the transcriber or editor for any reason; for example because the original cannot be read due to physical damage, or because of an obvious omission by the author or scribe. By its nature, the gap element has no content. It marks a point in the text where nothing at all can be read, whether because of authorial or scribal erasure, physical damage, or any other form of illegibility. Its attributes allow the encoder to specify the amount of text which is illegible in this way at this point, using any convenient units, where this can be determined. For example, in the Beerbohm manuscript of The Golden Drugget cited above, the author has erased a passage amounting about 10 cm in length by inking over it completely: In an autograph letter of Sydney Smith now in the Pierpont Morgan library three words in the signature are quite illegible: As noted above, the gap element should only be used where text has not been transcribed. If partially legible text has been transcribed, one of the elements damage and unclear should be used instead (these elements are described in section 11.3.3.1 Damage, Illegibility, and Supplied Text ); if the text is legible and has been transcribed, but the editor wishes to indicate that they regard it is superfluous or redundant, then the element surplus may be used in preference to the core element sic used to indicate text regarded as erroneous. Amongst the many examples cited in Hans Krummrey & Silvio Panciera's classic text on the editing of epigraphic inscriptions is the following. In a late classical inscription, the form dedikararunt is encountered. The editor may choose any of the following three possibilities: mark this as an erroneous form <sic>dedikararunt</sic> bibliography additionally supply a corrected form <choice><sic>dedikararunt</sic> <corr>dedikarunt</corr> </choice> bibliography indicate that the erroneous form contains surplus characters which the editor wishes to suppress dedika<surplus>ra</surplus>runt bibliography The surplus element may also be used to mark up interpolations, as in the following example taken from a 13th century Italian source: In the case of an interpolation which the editor regards as genuine (i.e. written by the author in question), but out of its original place, the secl element should be used instead of surplus . For example: If some part of the source text is completely illegible or missing, an encoder may sometimes wish to supply new (conjectural) material to replace it. This conjectural reading is analogous to a correction in that it contains text provided by the encoder and not attested in the source. This is not however a correction, since no error is necessarily present in the original; for that reason a different element supplied should be used. If another (imaginary) copy of the letter above preserved the signature as reading I am dear Sir your very humble Servt Sydney Smith , the text illegible in the autograph might be supplied in the transcription: 11.3.2 Hands and Responsibility This section discusses in more detail the representation of aspects of responsibility perceived or to be recorded for the writing of a primary source. These include points at which one scribe takes over from another, or at which ink, pen, or other characteristics of the writing change. A discussion of the usage of the hand, resp, and cert attributes is also included. 11.3.2.1 Document Hands For many text-critical purposes it is important to signal the person responsible (the hand ) for the writing of a whole document, a stretch of text within a document, or a particular feature within the document. A hand, as the name suggests, need not necessarily be identified with a particular known (or unknown) scribe or author; it may simply indicate a particular combination of writing features recognized within one or more documents. The examples given above of the use of the hand attribute with coding of additions and deletions illustrate this. The handNote element is used to provide information about each hand distinguished within the encoded document. < handNote > describes a particular style or hand distinguished within a manuscript. A handNote element, with an identifier given by its xml:id attribute, may appear in either of two places in the TEI header, depending on which modules are included in a schema. When the transcr module defined by the present chapter is used, the element handNotes is available, within the profileDesc element of the TEI header, to hold one or more handNote elements. When the msdescription module defined in chapter 10 Manuscript Description is included, the handDesc element described in 10.7.2 Writing, Decoration, and Other Notations also becomes available as part of a structured manuscript description. The encoder may choose to place handNote elements identifying individual hands in either location without affecting their accessibility since the element is always addressed by means of its xml:id attribute. The handDesc element may be more appropriate when a full cataloguing of each manuscript is required; the handNotes element if only a brief characterization of each hand is needed. It is also possible to use the two elements together if, for example, the handDesc element contains a single summary describing all the hands discursively, while the handNotes element gives specific details of each. The choice will depend on individual encoders' priorities. As shown above, the hand attribute is available on several elements to indicate the hand in which the content of the element (usually a deletion or addition) is carried out. The handShift element may also be used within the body of a transcription to indicate where a change of hand is detected for whatever reason. < handShift > marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. Both handShift and handNote are members of the att.handFeatures class, and thus share the following attributes: < att.handFeatures > provides attributes describing aspects of the hand in which a manuscript is written. @scribe gives a name or other identifier for the scribe believed to be responsible for this hand. @script characterizes the particular script or writing style used by this hand, for example secretary , copperplate , Chancery , Italian , etc. @scribeRef points to a full description of the scribe concerned, typically supplied by a person element elsewhere in the description. @scriptRef points to a full description of the script or writing style used by this hand, typically supplied by a scriptNote element elsewhere in the description. @medium describes the tint or type of ink, e.g. brown , or other writing medium, e.g. pencil @scope specifies how widely this hand is used in the manuscript. gives a name or other identifier for the scribe believed to be responsible for this hand. characterizes the particular script or writing style used by this hand, for example secretary , copperplate , Chancery , Italian , etc. points to a full description of the scribe concerned, typically supplied by a person element elsewhere in the description. points to a full description of the script or writing style used by this hand, typically supplied by a scriptNote element elsewhere in the description. describes the tint or type of ink, e.g. brown , or other writing medium, e.g. pencil specifies how widely this hand is used in the manuscript. A single hand may employ different writing styles and inks within a document, or may change character. For example, the writing style might shift from anglicana to secretary , or the ink from blue to brown, or the character of the hand may change. Simple changes of this kind may be indicated by assigning a new value to the appropriate attribute within the handShift element. It is for the encoder to decide whether a change in these properties of the writing style is so marked as to require treatment as a distinct hand. Where such a change is to be identified, the new attribute indicates the hand applicable to the material following the handShift . The sequence of such handShift elements will often, but not necessarily, correspond with the order in which the material was originally written. Where this is not the case, the facilities described in section 11.7 Identifying Changes and Revisions may be found helpful. As might be expected, a single hand may also vary renditions within the same writing style, for example medieval scribes often indicate a structural division by emboldening all the words within a line. Such changes should be indicated by use of the rend attribute, in the same manner as underlining, emboldening, font shifts, etc. are represented in transcription of a printed text, rather than by introducing a new handShift element. In the following example there is a change of ink within a single hand. This is simply indicated by a new value for the medium attribute on the handShift element: In the following example, the encoder has identified two distinct hands within the document and given them identifiers h1 and h2, by means of the following declarations included in the document's TEI header: Then the change of hand is indicated in the text: When a more precise or nuanced discussion of the writing in a manuscript is required, the handNote and scriptNote elements discussed in 10.7.2 Writing, Decoration, and Other Notations should be used. Either element may serve as the target for a handShift . 11.3.2.2 Hand, Responsibility, and Certainty Attributes The hand and resp attributes have similar, but not identical, meanings. Observe their distinctive uses in the following encoding of the William James passage mentioned above in section 11.3.1.3 Correction and Conjecture . In this example, the But inserted by James is tagged as an add , and the consequent editorial correction of One to one treated separately: The resp attribute, by contrast, indicates the person responsible for deciding to mark up this part of the text with this particular element. In the case of the add element, for example, the resp attribute will indicate the responsibility for identifying that the addition is indeed an addition, and also (if the hand attribute is supplied) to which hand it should be attributed. In this case, Bowers is credited with identifying the hand as that of William James. In the case of the corr element, the resp attribute indicates who is responsible for supplying the intellectual content of the correction reported in the transcription: here, Bowers' correction of One to one . In the case of a deletion, the resp attribute will similarly indicate who bears responsibility for identifying or categorizing the deletion itself, while other attributes (hand most obviously) attribute responsibility for the deletion itself. It should be noted that the source attribute may be used in a simiilar fashion to indicate, for example, when an encoding decision is based on the work of a previous editor or on an article. In that case, the source would point to a bibl in the bibliography. In cases where both the resp and cert attributes are defined for a particular element, the two attributes refer to the same aspect of the markup. The one indicates who is intellectually responsible for some item of information, the other indicates the degree of confidence in the information. Thus, for a correction, the resp attribute signifies the person responsible for supplying the correction, while the cert attribute signifies the degree of editorial confidence felt in that correction. For the expansion of an abbreviation, the resp attribute signifies the person responsible for supplying the expansion and the cert attribute signifies the degree of editorial confidence felt in the expansion. This close definition of the use of the resp and cert attributes with each element is intended to provide for the most frequent circumstances in which encoders might wish to make unambiguous statements regarding the responsibility for and certainty of aspects of their encoding. The resp and cert attributes, as so defined, give a convenient mechanism for this. However, there will be cases where it is desirable to state responsibility for and certainty concerning other aspects of the encoding. For example, one may wish in the case of an apparent addition to state the responsibility for the use of the add element, rather than the responsibility for identifying the hand of the addition. It may also be that one editor may make an electronic transcription of another editor's printed transcription of a manuscript text—here, one will wish to assign layers of responsibility, so as to allow the reader to determine exactly what in the final transcription was the responsibility of each editor. In these complex cases of divided editorial responsibility for and certainty concerning the content, attributes, and application of a particular element, the more general mechanisms for representing certainty and responsibility described in chapter 21 Certainty, Precision, and Responsibility should be used. It should be noted that the certainty and responsibility mechanisms described in chapter 21 Certainty, Precision, and Responsibility replicate all the functions of the resp and cert attributes on particular elements. For example, the encoding of Donaldson's conjectured emendation of wight to wright in line 117 of Chaucer's Wife of Bath's Prologue (see 11.3.1.3 Correction and Conjecture ) may be encoded as follows using the resp and cert attributes on the corr element: The above discussion supposes that in each case an encoder is able to specify exactly what it is that one wishes to state responsibility for and certainty about. Situations may arise when an encoder wishes to make a statement concerning certainty or responsibility but is unable or unwilling to specify so precisely the domain of the certainty or responsibility. In these cases, the note element may be used with the type attribute set to cert or resp and the content of the note giving a prose description of the state of affairs. 11.3.3 Damage and Conjecture The carrier medium of a primary source may often sustain physical damage which makes parts of it hard or impossible to read. In this section we discuss elements which may be used to represent such situations and give recommendations about how these should be used in conjunction with the other related elements introduced previously in this chapter. 11.3.3.1 Damage, Illegibility, and Supplied Text The gap and supplied elements described above (section 11.3.1.7 Text Omitted from or Supplied in the Transcription ) should be used with appropriate attributes where the degree of damage or illegibility in a text is such that nothing can be read and the text must be either omitted or supplied conjecturally or from one or more other sources. In many cases, however, despite damage or illegibility, the text may yet be read with reasonable confidence. In these cases, the following elements should be used: < damage > contains an area of damage to the text witness. < damageSpan > marks the beginning of a longer sequence of text which is damaged in some way but still legible. < att.damaged > provides attributes describing the nature of any physical damage affecting a reading. @agent categorizes the cause of the damage, if it can be identified. @degree provides a coded representation of the degree of damage, either as a number between 0 (undamaged) and 1 (very extensively damaged), or as one of the codes high, medium, low, or unknown. The damage element with the degree attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as supplied . @group assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon. categorizes the cause of the damage, if it can be identified. provides a coded representation of the degree of damage, either as a number between 0 (undamaged) and 1 (very extensively damaged), or as one of the codes high, medium, low, or unknown. The damage element with the degree attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as supplied . assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon. < att.dimensions > provides attributes for describing the size of physical objects. @extent indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. @unit names the unit used for the measurement @quantity specifies the length in the units specified indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. names the unit used for the measurement specifies the length in the units specified < att.ranging > provides attributes for describing numerical ranges. @min where the measurement summarizes more than one observation or a range, supplies the minimum value observed. @max where the measurement summarizes more than one observation or a range, supplies the maximum value observed. @atLeast gives a minimum estimated value for the approximate measurement. @atMost gives a maximum estimated value for the approximate measurement. where the measurement summarizes more than one observation or a range, supplies the minimum value observed. where the measurement summarizes more than one observation or a range, supplies the maximum value observed. gives a minimum estimated value for the approximate measurement. gives a maximum estimated value for the approximate measurement. < att.spanning > provides attributes for elements which delimit a span of text by pointing mechanisms rather than by enclosing it. @spanTo indicates the end of a span initiated by the element bearing this attribute. indicates the end of a span initiated by the element bearing this attribute. The following examples all refer to the recto of folio 5 of the unique manuscript of the Elder Edda. Here, the manuscript of Vóluspá has been damaged through irregular rubbing so that letters in various places are obscured and in some cases cannot be read at all. In the first line of this leaf, the transcriber may believe that the last three letters of daga can be read clearly despite the damage: If, as is often the case, the damage crosses structural divisions, so that the damage element cannot be nested properly within the containing div elements, the damageSpan element may be used, in the same way as the delSpan and addSpan elements discussed in section 11.3.1.4 Additions and Deletions . If, as is also likely, the damage affects several disjoint parts of the text, each such part must be marked with a separate damage or damageSpan element. To indicate that each of these is to be regarded as forming part of the same damaged area, the group attribute may be used as in the following example. In this (imaginary) text of Fitzgerald's translation from Omar Khayam, water damage has affected an area covering parts of several lines: A more general solution to this problem is provided by the join element discussed in 16.7 Aggregation which may be used to link together arbitrary elements of any kind in the transcription. Here, several phenomena of illegibility and conjecture all result from a single cause: an area of damage to the text caused by rubbing at various points. The damage is not continuous, and affects the text at irregular points. In cases such as this, the join element may be used to indicate which tagged features are part of the same physical phenomenon. If the damage has been so severe as to render parts of the text only imperfectly legible, the unclear element should be used to mark the fact. Returning to the Eddic example above, an encoder less confident in the daga reading might indicate this as follows: If it is desired to supply more information about the kind of damage, it is also possible to nest an unclear element within the damage element: Alternatively, the transcriber may not feel able to read the last three letters of daga but may wish to supply them by conjecture. Note the use of the resp attribute to assign the conjecture to Finnur Jónsson: Contrast the use of gap in the next line, where the transcriber believes that four letters cannot be read at all because of the damage: Where elements are nested in this way, information about agency, etc. is by default inherited. In the following imaginary example, there is a smoke-damaged part within which two stretches can be read with some difficulty, and a third stretch which cannot be read at all: The above examples record imperfect legibility due to damage. When imperfect legibility is due to some other reason (typically because the handwriting is ill-formed), the unclear element should be used without any enclosing damage element. In Robert Southey's autograph of The Life of Cowper the final six letters of attention are difficult to read because of the haste of the writing, though reasonably certain from the context. 11.3.3.2 Use of the gap , del , damage , unclear , and supplied Elements in Combination The gap , damage , unclear , supplied , and del elements may be closely allied in their use. For example, an area of damage in a primary source might be encoded with any one of the first four of these elements, depending on how far the damage has affected the readability of the text. Further, certain of the elements may nest within one another. The examples given in the last sections illustrate something of how these elements are to be distinguished in use. This may be formulated as follows: where the text has been rendered completely illegible by deletion or damage and no text is supplied by the editor in place of what is lost: place an empty gap element at the point of deletion or damage. Note that the gap could be wrapped in a del or damage element. Use the reason attribute to state the cause (damage, deletion, etc.) of the loss of text. where the text has been rendered completely illegible by deletion or damage and text is supplied by the editor in place of what is lost: surround the text supplied at the point of deletion or damage with the supplied element. Use the reason attribute to state the cause (damage, deletion, etc.) of the loss of text leading to the need to supply the text. where the text has been rendered partly illegible by deletion or damage so that the text can be read but without perfect confidence: transcribe the text and surround it with the unclear element. Use the reason attribute to state the cause (damage, deletion, etc.) of the uncertainty in transcription and the cert attribute to indicate the confidence in the transcription. where there is deletion or damage but at least some of the text can be read with perfect confidence: transcribe the text and surround it with the del element (for deletion) or the damage element (for damage). Use appropriate attribute values to indicate the cause and type of deletion or damage. Observe that the degree attribute on the damage element permits the encoding to show that a letter, word, or phrase is not perfectly preserved, though it may be read with confidence. where there is an area of deletion or damage and parts of the text within that area can be read with perfect confidence, other parts with less confidence, other parts not at all: in transcription, surround the whole area with the del element (for deletion; or the delSpan element where it crosses a structural boundary); or the damage element (for damage). Text within the damaged area which can be read with perfect confidence needs no further tagging. Text within the damaged area which cannot be read with perfect confidence may be surrounded with the unclear element. Places within the damaged area where the text has been rendered completely illegible and no text is supplied by the editor may be marked with the gap element. For each element, one may use appropriate attribute values to indicate the cause and type of deletion or damage and the certainty of the reading. The rules for combinations of the add and del elements, and for the interpretation of such combinations, are similar: if one add element (with identifier ADD1 ) contains another (with identifier ADD2 ), then the addition ADD1 was first made to the text, and later a second addition ( ADD2 ) was made within that added text: This is the text <add xml:id=\"ADD1\">with some added <add xml:id=\"ADD2\">(interlinear!)</add> material</add> as written. bibliography if one del element contains another, and the seq attribute does not indicate otherwise, it should be assumed that the inner deletion was made before the enclosing one. In the following example, the word redundant was deleted before a second deletion removed the entire passage: <del>This sentence contains some <del>redundant</del> unnecessary verbiage.</del> bibliography if a del element contains an add element, the normal interpretation will be that an addition was made within a passage which was later deleted in its entirety: <del>This sentence was deleted <add>originally</add> from the text.</del> bibliography if an add element contains a del element, the normal interpretation will be that a deletion was made from a passage which had earlier been added: <add>This sentence was added <del>eventually</del> to the text.</add> bibliography When some text has been blackened out so thoroughly that can no longer be read, the encoding should be: runs out the door in <gap extent=\"1 word\"/> shirt bibliography For consistency, one might prefer to encode the deletion as such, using del , and containing a gap , as in the following example: runs out the door in <del><gap extent=\"1 word\"/></del> shirt bibliography This is something that would be necessary if one wanted to encode a subst including an illegible deletion: sum<subst><del><gap extent=\"2 characters\"/></del><add place=\"inline\">mo</add></subst>ns bibliography If some parts of the deleted text are readable, and other parts unreadable, it should be encoded as in the following example: Billy in The <del><gap extent=\"1 character\"/>ng<gap extent=\"2 characters\"/></del> Silver Dollar.. bibliography 11.3.4 Marking up the Writing Process Modifications of various kinds (correction, addition, deletion, etc.) are frequently found within a single document, and may also be inferred when different documents are compared, although it may be an open question as to whether inter-document discrepancies should be regarded in the same way as intra-document alterations. When two witnesses are collated, we may observe that a word present in one is missing from the other: this does not necessarily imply that the word was added to the first witness, nor that it was deleted from the other. In this section we discuss a number of elements which may be useful when attempting to record traces of the writing process within a document. 11.3.4.1 Generic Modification Most, if not all, transcriptional elements imply a certain level of semantic interpretation. For instance, using the add element to encode a word or phrase that occupies interlinear space involves a decision that it has been deliberately inserted as an addition rather than an alternative, and indeed a judgment that it was written after, rather than before, the other lines. Where it is felt desirable to keep the recording of what is on the page entirely separate from what is the editor’s interpretation, the generic mod element may be preferred. < mod > represents any kind of modification identified within a single document. The distinction between an example such as that above and the simple use of hi to mark the visual salience of the underlining (apart from the use of the spanTo attribute) is that hi does not imply that the visual effect being recorded is understood to represent some kind of modification. 11.3.4.2 Metamarks By metamark we mean marks such as numbers, arrows, crosses, or other symbols introduced by the writer into a document expressly for the purpose of indicating how the text is to be read. Such marks thus constitute a kind of markup of the document, rather than forming part of the text. < metamark > contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. Unlike marginal notes or other additions to the text, metamarks are used by the writer to indicate a deliberate alteration of the writing itself, such as move this passage over there . An addition or annotation by contrast would typically concern some property of the passage other than its intended location or status within the text flow. A metamark may contain text, or some other graphic which the encoder wishes to represent, or it may simply consist of arrows, dots, lines etc. which the encoder simply describes. The metamark element carries a function attribute which specifies the function of the metamark, using values such as reorder, flag, delete, insert or used. The passage to which the metamark applies may be indicated in either of two ways: the target attribute may be used to point to the element or elements containing the passage concerned, or the spanTo element may be used to point to a position in the document at which the passage concerned finishes. In the latter case, the metamark itself must be supplied at the position in the document where the passage concerned begins; in the former case it may be supplied at any convenient point. Both attributes should not be supplied. The following example is taken from an 15th century legal book from the city of Göttingen, containing regulations of everyday life issued by the city council In the second paragraph, the word lege (\"read\") was written in the left hand margin, next to the sentence beginning Ock en schullen de bruwere... . It is thought to function as a metamark, indicating that this sentence forms part of the regulations. A further sentence was then added, while at some later stage the text and also the metamark were deleted. We might encode this as follows as an embedded transcription (keeping in mind that the elements described here can also be used within text ): The change attribute used here to indicate the sequencing of these various interventions is discussed below, in section 11.7 Identifying Changes and Revisions . The elements addSpan and delSpan are discussed in section 11.3.1.4 Additions and Deletions . The metamark element may also be used to encode the symbols etc. often found in marked-up proofs such as the following, taken from the Walt Whitman archive: In this example, the whole of what was originally the 14th section of the poem has been marked for deletion, both by horizontal and vertical lines, and by the proofreading mark resembling the deleatur or dele deletion symbol to left and right of the section. The deletion itself might be encoded by using the normal del or delSpan element, and the metamarks by the metamark element. This is quite a different case from that of the next example, in which the writer does not intend to suppress the content, but only to mark that it has been copied to another manuscript or reused. This page contains internal deletions, additions, and retracings but these are semantically quite different from the apparent deletion signalled by the larger of the two single vertical lines, which shows that the written material has been transferred or re-used, not deleted. In this embedded transcription example, we class as metamarks both the long vertical line and the annotation Entered - yes . Both metamarks are assumed to indicate that the whole of the written zone with identifier X2 is marked as having been used. metamark can be similarly used within text to encode the same phenomenon as part of a transcription that privileges logical over physical and layout structures. 11.3.4.3 Fixation and Clarification A writer may sometimes rewrite material a second time without significant change and in the same place. We consider this a distinct activity from addition as usually defined because no new textual material results; instead the status of existing material is reaffirmed. We may distinguish two variants of this: fixation where the first version was a tentative draft which is subsequently reaffirmed, for example by inking it over; and clarification , where the first version was badly written and has been rewritten for clarity. The element retrace is provided for both cases; its cause attribute may be used to distinguish these or other cases. < retrace > contains a sequence of writing which has been retraced, for example by over-inking, to clarify or fix it. In this simple example, taken from the papers of Henrik Ibsen, the writer wrote the word skuldren hastily, and then returned to it to make the letter l larger and clearer: A single rewrite may not be sufficient, and it may be that the document becomes almost unreadable as a result of repeated clarification. In the following example, we can distinguish at least three attempts to write the letters er in the word bægerklang : The retrace element is used only for cases where text has been written multiple times. When metamarks and other markup-like strokes have been rewritten multiple times, the redo element described in the next section should be used in preference. 11.3.4.4 Confirmation, Cancellation, and Reinstatement of Modifications A writer may indicate that an alteration is itself to be altered: for example, a struck-through passage may be restored via a dotted underlining, or the underlining of a passage may be deleted by a wavy line. The following elements are provided to represent these situations: < redo > indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. < undo > indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. The element restore ( 11.3.1.6 Cancellation of Deletions and Other Markings ) is provided for the comparatively simple case where a simple deletion is marked as having been subsequently cancelled. The undo element discussed here is more widely applicable and may be used for any kind of cancellation. It points to the element or elements which are being cancelled. These components need not be contiguous, provided that the cancellation is clearly a single act; each distinct act of cancellation requires a distinct undo element, however. Either of the attributes target or spanTo may be used to indicate the passages concerned. Consider the following imaginary example: This is just some sample text, we need a real example. This is not a real example. This is just some text, not a real example. This sequence of events might be encoded as follows: Alternatively, we might more economically use the generic seg element to delimit the two sequences whose deletion is being reverted, and then use the target attribute on a single undo element: 11.3.4.5 Transpositions A transposition occurs when metamarks are found in a document indicating that passages should be moved to a different position. Typically this may be done using arrows, asterisks or numbers, or other means. By definition the result of a transposition is not present in the document, and should not therefore be encoded, if the intention is to represent the actual appearance of the document. Instead, the following elements may be used to indicate the intended reordering: < listTranspose > supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. < transpose > describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined. Consider for example, the following extract from an Ibsen manuscript Note the use of the generic seg element to identify the sections of text being transposed. The following example uses an embedded transcription approach, which typically identifies lines of writing with the line element. This makes it trivial to refer to the transposed line, but when encoding transposition within text the encoder will need to find a way to identify the line with another element, such as seg . One or more listTranspose elements may be supplied either embedded within the text, in the profileDesc of the header, or in a standOff depending on local preference. Each listTranspose can contain one or more transpose elements, each of which defines a single transposition. 11.3.4.6 Alternative Readings The element alt provided by the linking module gives a simple way of encoding the state of this manuscript, as follows: The mode attribute here indicates that the two possible readings indicated by the target attribute are mutually exclusive. The weights attribute indicates the relative importance or preference to be attached to the two readings on a scale running from zero (most improbable) to one (most probable). In this case, we have a very strong preference for the second reading because this is the one that appears in the published version of the poem. The alt element is further discussed in section 16.8 Alternation . 11.3.4.7 Instant Corrections The use of elements such as del and add necessarily implies that the modifications they indicate were made at some time after the original writing. An exception to this is where a false start or instant correction has been identified: the author starts to write, and then immediately corrects what has been written. The instant attribute defined by this module may be used on any element which is a member of the att.editLike class to modify this default assumption. When the value of instant is set to true, the addition or deletion is considered to belong to the same change as its parent element, while false means some change later than that of its parent. An example of false start or instant correction can be seen in the following line: The letter T is written and then immediately deleted The word The is written, deleted, and replaced by the word His The added word His is then deleted The initial letter i of the words iron necklace is overwritten with a capital I 11.4 Aspects of Layout The following methods are available to capture general aspects of the layout of material on a page where this is considered important. Within the sourceDoc element, as already indicated, the element surface and surfaceGrp enable the encoder to represent directly the structure of a codex as gatherings or quires, leaves, and surfaces, as in the following example: In some cases, it may be preferable to define surface s corresponding with each two page opening, for example where it is clear that the writer regarded each such opening as a single writing surface, with written zones or other features crossing the page divide. An example is shown here: The coloured lines added to this image indicate a number of zones of writing, colour coded to indicate the order in which they were written (purple, then green, then red). For example, the zone marked in red on the left contains a note referring to the purple zone on the right. This approach assumes that the transcription will primarily be organized in the same way as the physical layout of the source, using embedded transcription elements. Alternatively, where the a non-embedded transcription has been provided, using the text element, it is still possible to record gathering breaks, page breaks, column breaks, line breaks etc in the source, using the elements described in section 3.11 Reference Systems . Detailed metadata about the physical make-up of a source will usually be summarized by the physDesc component of an msDesc element discussed in 10.7 Physical Description . 11.4.1 Space The author or scribe may have left space for a word, or for an initial capital, and for some reason the word or capital was never supplied and the space left empty. The presence of significant space in the text being transcribed may be indicated by the space element. < space > indicates the location of a significant space in the text. In line 694 of Chaucer's Wife of Bath's Prologue in the Holkham manuscript the scribe has left a space for a word where other manuscripts read preestes : 11.4.2 Lines One of the more common forms of modification encountered in written documents of any kind is the presence of lines written under, beside, or through the text. Such lines may be of various types: they may be solid, dashed or dotted, doubled or tripled, wavy or straight, or a combination of these and other renderings. The line may be used for emphasis, or to mark a foreign or technical term, or to signal a quotation or a title, etc.: the elements emph , foreign , term , mentioned , or title may be used for these. Where the line has a clear paratextual function the metamark element may be considered more appropriate. Frequently, a scholar may judge that a line is used to delete text: the del element is available to indicate this. In all these cases, the rend attribute may be used to supply further details concerning the style of the line. Thus, Lawrence's deletion by strike-through of my in the autograph of Eloi, Eloi, lama sabachthani may be encoded: There will be instances, however, where a scholar wishes only to register the occurrence of lines in the text, without making any judgement as to what the lines signify. In these cases the hi element may be used, with the rend attribute to mark the style of line. In the manuscript of a letter by Robert Browning to George Moulton-Barrett the underlining of the phrase had obtained all the letters to Mr Boyd may be marked-up as follows: The above examples presume the common case where a single word or phrase is marked by a line, with no doubt as to where the marking begins or ends and with no overlapping of the area of text with other marked areas of text. Where there is doubt, the certainty element may be used to record the doubt. In the Browning example cited above the underlining actually begins half-way under who , and this uncertainty could be remarked as follows: Where the area of text marked overlaps other areas of text, for example crossing a structural division, one of the spanning mechanisms mentioned above must be used; for example where the line is thought to mark a deletion, the delSpan element may be used. Where it is desired simply to record the marking of a span of text in circumstances where it is not possible to surround the text with a hi element, the span element may be used with the rend or type attribute indicating the style of line-marking. More work needs to be done on clarifying the treatment of other textual features marked by lines which might so overlap or nest. For example, in many Middle English manuscripts (e.g. the Jesus and Digby verse collections), marginal sidebars may indicate metrical structure: couplets may be linked in pairs, with the pairs themselves linked into stanzas. Or, marginal sidebars may indicate emphasis, or may point out a region of text on which there is some annotation: in many manuscripts of Chaucer's Wife of Bath's Prologue lines 655–8 are marked with nesting parentheses against which the scribe has written nota . Such features could be captured by use of the note element, containing a prose description of the manuscript at this point, enhanced by a link to a visual representation (or facsimile) of the feature in question. For example, in the Chaucer example just cited, one may wish to record that the nota is written in the Hengwrt manuscript in the right margin against a single large left parenthesis bracketing the four lines, with two right parentheses in the right margin bracketing two overlapping pairs of lines: the first and third, the second and fourth. The note element allows us to record that the scribe wrote nota , but is not well-adapted to show that the nota points both at all four lines and at two pairs of lines within the four lines. The metamark element discussed in section 11.3.4.2 Metamarks above provides better facilities for this kind of complex annotation. 11.5 Transcription and Ruby These Guidelines also provide special elements to support the encoding of ruby annotations, which are common in East Asian textual traditions. These elements provide a method of capturing a specific type of annotation, in addition to the generic methods like the note or interp elements. Both the specific and general methods should integrate well with the transcriptional elements described above, allowing authorial and scribal features to be captured in conjunction with ruby base text and annotations. See 3.4.2 Ruby Annotations for more information about these elements. 11.6 Headers, Footers, and Similar Matter Such information as page numbers, signatures, or catchwords may be recorded in a specialized fw element provided for that purpose. Although the name derives from the term forme work , used in description of early printed documents (the forme being the block used to hold movable type), the fw element may be used for such features of any document, written or printed. Note that the purpose of this element is to record page numbers etc. actually present in the document being encoded, not necessarily to provide a complete or accurate pagination of it. Information about pagination etc. may also be provided using the n attribute of the pb or gb elements, or by other appropriate milestone elements, as further discussed in section 3.11 Reference Systems : since this information is usually provided by the encoder, it is not subject to the constraint that it should be present only if textually present in the source being encoded. In text-critical situations it may be useful to provide both a normalized version of the pagination and a representation of the catch-word or numbering, especially when the latter presents a variant reading, or is significant for compositor identification. < fw > contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. running heads (whether repeated or changing on every page, or alternating pages) running footers page numbers catch-words other material repeated from page to page, which falls outside the stream of the text For example: 11.7 Identifying Changes and Revisions A major purpose of genetic editing is the identification of revision campaigns or, more generally, changes . An editor may wish to regard a particular set of alterations (deletions, additions, substitutions, transpositions, etc.) or any other act of writing as a single object for which we use the general term change , to indicate both that one or more of such phenomena preceded or followed another and also to indicate that they are related in some way, for example that one is a consequence of the other. They might also wish to group together certain revisions, regardless of when they might have occurred, based on a variety of other shared characteristics (e.g., corrections of factual errors or revisions that incorporate suggestions made by a given reader). To document this we need: a system to assign phenomena to a particular change as defined above a way to characterize each such change, in itself and in relation to others. The element creation (within the TEI header profile description) contains all information relating to the genesis or production of a text. It may contain a listChange element which contains a number of change elements, one for each set of alterations identified: < listChange > groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text. < change > documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. In the following example an editor has identified four distinct sets of alterations: The listChange element carries an attribute ordered, which can take the values true or false (the default). The attribute specifies whether the order of child elements signifies a temporal order for the revision campaigns which they document. In the example above, the editor has asserted that the four sets distinguished are ordered chronologically according to the order of the change elements. If necessary, listChange elements can be nested hierarchically. This may be helpful in two cases. Firstly one can build up hypotheses about related revisions step-by-step, starting with change elements of smaller coverage, whose members are certainly related, and then in a subsequent pass grouping these in turn, thereby extending their reach. A nested listChange element is also useful to indicate a partial ordering of change elements. In addition to the possibility of being ordered by their sequence within a listChange element, change elements may carry a number of attributes from the att.datable class (period, when, notBefore, notAfter, from, and to) which allow each element to be dated as exactly or inexactly as necessary, in the same way as is currently possible for the TEI date element. Each change element, apart from declaring a distinct moment or phase in the creation of the document, may also contain references to other annotations contained within the teiHeader or in the document (as shown in the previous example). Such references, along with the textual content, are purely documentary. The association between a textual component and a change element is always made explicitly, either by using the target attribute on the change element to point to one or more textual elements, or by pointing from the element or elements concerned to the change element by means of their change attribute. If a change element is associated with some element, it is also associated with all of that element's children, unless otherwise indicated, for example by a new value for the change attribute. In the following simple example, the text at one stage read This is a mouse , and at the next This is a house mouse : In this example, however, the text originally read This is a house , and subsequently This is a mouse : Elements such as add and del and the like carry an implied semantics concerning the order in which events in the writing of a document was carried out: something which is deleted must have been written before it was deleted; something which is added must have been added at a later stage of the writing. Even when a combination of such elements is used, the chronology can usually be inferred (see further 11.3.3.2 Use of the gap, del, damage, unclear, and supplied Elements in Combination ). Explicit indication of the set of alterations to which some modification belongs is mostly useful in situations where all the alterations identified in a document are to be grouped, for example chronologically. The interpretation of change elements with respect to a particular text passage is based on a number of implicit assumptions and constraints which have the effect of minimizing the amount of tagging necessary. The system is also flexible enough to support an explicit distinction between acts of writing and textual alterations, since either of these can be associated with changes described in the encoding. The following example shows an encoding in which the same passage is transcribed twice, once from a documentary perspective, and once from a textual one: The documentary transcription stresses the writing process, while the textual transcription emphasizes textual alterations. In either case, the change of writing activity associated with a particular feature in the transcript is explicitly indicated. From the documentary perspective, by assigning particular modifications to a specific change element, we describe the writing process, in that they specify which segment has been written when . From the textual perspective, the markup concentrates simply on the existence of textual alterations and makes no explicit claims about the order of writing. 11.8 Other Primary Source Features not Covered in these Guidelines We repeat the advice given at the beginning of this chapter, that these recommendations are not intended to meet every transcriptional circumstance ever likely to be faced by any scholar. They are intended rather as a base to enable encoding of the most common phenomena found in the course of scholarly transcription of primary source materials. These guidelines particularly do not address the encoding of physical description of textual witnesses: the materials of the carrier, the medium of the inscribing implement, the organisation of the carrier materials themselves (as quiring, collation, etc.), and authorial instructions or scribal markup, except insofar as these are involved in the broader question of manuscript description, as addressed by the msdescription module described in chapter 10 Manuscript Description . 11.9 Module for Transcription of Primary Sources The module described in this chapter makes available the following components: Transcription of Primary Sources Transcription of primary sources The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">11 Representation of Primary Sources</span>"}
{"link":"p5.xml?id=TC","tag":"guidelines","content":"12 Critical Apparatus Scholarly editions of texts, especially texts of great antiquity or importance, often record some or all of the known variations among different witnesses to the text. Witnesses to a text may include authorial or other manuscripts, printed editions of the work, early translations, or quotations of a work in other texts. Information concerning variant readings of a text may be accumulated in highly structured form in a critical apparatus of variants. This chapter defines a module for use in encoding such an apparatus of variants, which may be used in conjunction with any of the modules defined in these Guidelines. It also defines an element class which provides extra attributes for some elements of the core tag set when this module is selected. In printed critical editions, the apparatus takes the form of highly-compressed notes at the bottom of each page. TEI’s critical apparatus module allows variation to be encoded so that such notes may be generated, but it also models the variation so that, for example, interactive editions in which readers can choose which witness readings to display are possible. Information about variant readings (whether or not represented by a critical apparatus in the source text) may be recorded in a series of apparatus entries , each entry documenting one variation , or set of readings, in the text. Elements for the apparatus entry and readings, and for the documentation of the witnesses whose readings are included in the apparatus, are described in section 12.1 The Apparatus Entry, Readings, and Witnesses . Special tags for fragmentary witnesses are described in section 12.1.5 Fragmentary Witnesses . The available methods for embedding the apparatus in the rest of the text, or for linking an external apparatus to the text of the edition, are described in section 12.2 Linking the Apparatus to the Text . Finally, several extra attributes for some tags of the core tag set, made available when the additional tag set for text criticism is selected, are documented in section 11.3.1.1 Core Elements for Transcriptional Work . Scholarly practice in representing critical editions differs widely across disciplines, time periods, and languages. The TEI does not make any recommendations as to which text-critical methods are best suited to any given text. Editors will wish to consider questions such as: What source documents will be used? Are there many witnesses, few, or one? Are the sources relatively close copies or not? Will there be a single base text? Or will witnesses be separately transcribed? If a single base text will be used, will it be that of a particular witness, or will the editor attempt to reconstruct an ideal or original text? Will each reading in an apparatus entry record every attestation (a positive apparatus), or merely witnesses that deviate from the base text (a negative apparatus)? Will the readings of most or all witnesses be represented in the apparatus, or only a selection the editor deems relevant? What level of variation will require distinguishing one witness reading from another? For example, will the editor consider an abbreviated word in a witness as agreeing with the base text, or not? Will conjectures (variant readings suggested by an editor) be treated differently than readings found in witnesses? Will there be a need to distinguish different types of variation, for example orthographic vs. morphological or lexical variants? Different editorial methodologies will produce different answers to these questions, and those answers may influence choices of markup used in the edition. For example, if there will be multiple witness transcriptions and a single apparatus, then the double end-point attachment method may be the best choice of apparatus linking style. The parallel segmentation method may present several advantages to editors producing an edition with a single base text. Editors of single-source editions may care to note material aspects of the text (such as damage or unclear text). On the other hand, editors attempting to synthesize an ideal or original text from many witnesses may feel little need to represent the material aspects of individual witnesses. Editors wishing to distinguish witness readings from conjectures by modern editors may wish to use wit to indicate the former and source for the latter. Differences in types of variation might be marked using type or ana on the rdg element. Many examples given in this chapter refer to the following texts of the opening (usually just line 1) of Chaucer's Wife of Bath's Prologue , as it appears in each of the four different manuscripts Ellesmere, Huntingdon Library 26.C.9 ( El ) Hengwrt, National Library of Wales, Aberystwyth, Peniarth 392D ( Hg ) British Library Lansdowne 851 ( La ) Bodleian Library Rawlinson Poetic 149 ( Ra2 ) 12.1 The Apparatus Entry, Readings, and Witnesses This section introduces the fundamental markup methods used to encode textual variations: the app element for entries in the critical apparatus: see section 12.1.1 The Apparatus Entry . elements for identifying individual readings: see section 12.1.2 Readings . ways of grouping readings together: see section 12.1.3 Indicating Subvariation in Apparatus Entries . methods of identifying which witnesses support a particular reading, and for describing the witnesses included in the apparatus: see section 12.1.4 Witness Information . elements for indicating which portions of a text are covered by fragmentary witnesses: see section 12.1.5 Fragmentary Witnesses . The app element is in one sense a more sophisticated and complex version of the choice element introduced in 3.5.1 Apparent Errors as a way of marking points where the encoding of a passage in a single source may be carried out in more than one way. Unlike choice , however, the app element allows for the representation of many different versions of the same passage taken from different sources. 12.1.1 The Apparatus Entry Individual textual variations are encoded using the app element, which groups together all the readings constituting the variation. The identification of discrete textual variations or apparatus entries is not a purely mechanical process; different editors will group readings differently. No rules are given here as to how to collect readings into apparatus entries. The individual apparatus entry is encoded with the app element: < app > contains one entry in a critical apparatus, with an optional lemma and usually one or more readings or notes on the relevant passage. The attributes loc, from, and to, are used to link the apparatus entry to the base text, if present. In such cases, several methods may be used for such linkage, each involving a slightly different usage for these attributes. Linkage between text and apparatus is described below in section 12.2 Linking the Apparatus to the Text . For the use of the app element without a base text, see 12.2.3 The Parallel Segmentation Method . Each app element usually comprises one or more readings, which in turn are encoded using the rdg or other elements, as described in the next section. A very simple partial apparatus for the first line of the Wife of Bath's Prologue might take a form something like this: 12.1.2 Readings Individual readings are the crucial elements in any critical apparatus of variants. The following elements should be used to tag individual readings within an apparatus entry: < lem > contains the lemma, or base text, of a textual variation. < rdg > contains a single reading within a textual variation. In recording readings within an apparatus entry, the rdg element should always be used; each app usually contains at least one rdg , though it may contain only note s. The lem element may also be used to record the base text of the source edition, to mark the readings of a base witness, to indicate the preference of an editor or encoder for a particular reading, or (e.g. in the case of an external apparatus) to indicate precisely to which portion of the main text the variation applies. Those who prefer to work without the notion of a base text or who are not using the parallel segmentation method may prefer not to use it at all. How it is used depends in part on the method chosen for linking the apparatus to the text; for more information, see section 12.2 Linking the Apparatus to the Text . Readings may be encoded individually, or grouped for clarity using the rdgGrp element described in section 12.1.3 Indicating Subvariation in Apparatus Entries . As members of the attribute class att.textCritical , both of these elements inherit the following attributes: < att.textCritical > defines a set of attributes common to all elements representing variant readings in text critical work. @type classifies the reading according to some useful typology. @cause classifies the cause for the variant reading, according to any appropriate typology of possible origins. @varSeq provides a number indicating the position of this reading in a sequence, when there is reason to presume a sequence to the variants. classifies the reading according to some useful typology. classifies the cause for the variant reading, according to any appropriate typology of possible origins. provides a number indicating the position of this reading in a sequence, when there is reason to presume a sequence to the variants. < att.witnessed > provides attributes used to identify the witnesses supporting a particular reading in a critical apparatus. @wit contains a space-delimited list of one or more pointers indicating the witnesses which attest to a given reading. contains a space-delimited list of one or more pointers indicating the witnesses which attest to a given reading. < att.global.responsibility > provides attributes indicating the agent responsible for some aspect of the text, the markup or something asserted by the markup, and the degree of certainty associated with it. @resp indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. @cert signifies the degree of certainty associated with the intervention or interpretation. indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. signifies the degree of certainty associated with the intervention or interpretation. The wit attribute identifies the witnesses which have the reading in question. It is required if the apparatus gathers together readings from different witnesses, but may be omitted in an apparatus recording the readings of only one witness, e.g. substitutions, divergent opinions on what is in the witness or on how to expand abbreviations, etc. Even in such a one-witness apparatus, however, the wit attribute may still be useful when it is desired to record the occurrence of a particular reading in some other witness. For other methods of identifying the witnesses to a reading, see section 12.1.4 Witness Information . The type attribute allows the encoder to classify readings in any convenient way, for example as substantive variants of the lemma: The varSeq and cause attributes may be used to convey information on the sequence and cause of variation. In the following apparatus fragment, the reading Eryment is tagged as sequential to (derived from) the reading Experiment , and the cause is given as loss of the abbreviation for per . If a manuscript is written in several hands, and it is desired to report which hand wrote a particular reading, the hand attribute should be used. For example, in the Munich manuscript containing the Carmina Burana , the word alle has been changed to allen : Similarly, if a witness is hard to decipher, it may be desired to indicate responsibility for the claim that a particular reading is supported by a particular witness. In line 2212a of Beowulf , for example, the manuscript is read in different ways by different scholars; the editor Klaeber prints one text, using parentheses to indicate his expansion, and records in the apparatus two different accounts of the manuscript reading, by Zupitza and Chambers: 1 Because the hand attribute indicates a particular manuscript hand, it is intelligible only on a reading from a single witness. If an encoder wishes to indicate that a particular reading from a list in wit is in a particular hand, the witDetail element should be used; see section 12.1.4 Witness Information . Where there is a greater weight of editorial discussion and interpretation than can conveniently be expressed through the attributes provided on these elements (for example where the editor wishes to discuss how a section of text might be punctuated) this information can be attached to the apparatus in a note. The note element may also be used to record the specific wording of notes in the apparatus of the source edition, as here in a transcription of Friedrich Klaeber's note on Beowulf 2207a: Encoders should be aware of the distinct fields of use of the attribute values wit, hand, and source. Broadly, wit identifies the physical entity in which the reading is found (manuscript, clay tablet, papyrus, printed edition); hand refers to the agent responsible for inscribing that reading in that physical entity (scribe, author, inscriber, hand 1, hand 2); source indicates the scholar responsible for asserting the existence of that reading in that physical entity. In some cases, the categories may blur: a scholar may produce an edition introducing readings for which he or she is responsible; that edition may itself become a witness in a later critical apparatus. Thus, readings introduced as corrections in the earlier edition will be seen in the later apparatus as witnessed by the earlier edition. As observed in the discussion concerning the discrimination of hand and resp in transcription of primary sources in section 11.3.2.2 Hand, Responsibility, and Certainty Attributes , the division of layers of responsibility through various scholars for particular aspects of a particular reading may require the more complex mechanisms for assigning responsibility described in chapter 21 Certainty, Precision, and Responsibility . 12.1.3 Indicating Subvariation in Apparatus Entries The rdgGrp element may be used to group readings, either because they have identical values on one or more attributes, or because they are seen as forming a self-contained variant sequence, or for some other reason. This grouping of readings is entirely optional: no such grouping of readings is required. < rdgGrp > within a textual variation, groups two or more readings perceived to have a genetic relationship or other affinity. The rdgGrp element is a member of class att.textCritical and therefore can carry the type, cause, varSeq, hand, and resp attributes described in the preceding section. When values for any of these attributes are given on a rdgGrp element, the values given are inherited by the rdg or lem elements nested within the reading group, unless overridden by a new specification on the individual reading element. To indicate that both Hg and La vary only orthographically from the lemma, one might tag both readings rdg type='orthographic', as shown in the preceding section. This fact can be expressed more perspicuously, however, by grouping their readings into a rdgGrp , thus: Similarly, rdgGrp may be used to organize the substantive variants of an apparatus entry. Editors may need to indicate that each of a group of witnesses may be taken as all supporting a particular reading, even though there may be variation concerning the exact form of that reading in, or the degree of support offered by, those witnesses. For example: one may identify three substantive variants on the first word of Chaucer's Wife of Bath's Prologue in the manuscripts: these might be expressed in regularized spelling as Experience , Experiment , and Eriment . In fact, the manuscripts display many different spellings of these words, and a scholar may wish both to show that the manuscripts have all these variant spellings and that these variant spellings actually support only the three regularized spelling forms. One may term these variant spellings as subvariants of the regularized spelling forms. This subvariation can be expressed within an app element by gathering the readings into three groups according to the normalized form of their reading. All the readings within each group may be accounted subvariants of the main reading for the group, which may be indicated by tagging it as a lem element or as rdg type='groupBase'. In this example, the different subvariants on Experience , Experiment , and Eriment are held within three rdgGrp elements nested within the enclosing app element: Reading groups may nest recursively, so that variants can be classified to any desired depth. Because apparatus entries may also nest, the app element might also be used to group readings in the same way. The example above is substantially identical to the following, which uses app instead of rdgGrp : Reading groups may also be used to bring together variants which form an apparent developmental sequence, and to make clear that other readings are not part of that sequence, as in the following example, which makes clear that the variant sequence experiment to eriment says nothing about the relative priority of experiment and experience : 12.1.4 Witness Information A given reading is associated with the set of witnesses attesting it by listing the witnesses in the wit attribute on the rdg or lem element. Special mechanisms, described in the following sections, are needed to associate annotation on a reading with one specific witness among several (section 12.1.4.1 Witness Detail Information ), to transcribe witness information verbatim from a source edition (section 12.1.4.2 Witness Information in the Source ), and to identify the formal lists of witnesses typically provided in the front matter of critical editions (section 12.1.4.3 The Witness List ). 12.1.4.1 Witness Detail Information When it is desired to give additional information about the reading of a particular witness or witnesses, such as noting that it appears in the margin or was corrected for the reading, that information may be given in a witDetail element. This is a specialized note, which can be linked to both a reading and to one or more of the witnesses for that reading. The link to the reading may be inferred from witDetail 's position or made explicit by the target attribute which witDetail inherits from the attribute class att.pointing ; the link to the witness, by the wit attribute. < att.pointing > provides a set of attributes used by all elements which point to other elements by means of one or more URI references. @target specifies the destination of the reference by supplying one or more URI References specifies the destination of the reference by supplying one or more URI References < witDetail > gives further information about a particular witness, or witnesses, to a particular reading. Because it annotates an attribute value, witDetail cannot be included in the text at the point of attachment; without a target attribute, it refers to the closest preceding lem or rdg . But if there is any ambiguity or if the witDetail refers to multiple readings, target must be used to point to the reading(s) being annotated. To indicate that the Ellesmere manuscript has an ornamental capital in the word Experience , for example, one might write: Like note , witDetail may be used to record the specific wording of information in the source text, even when the information itself is captured in some more formal way elsewhere. The example from the Carmina Burana above (section 12.1.2 Readings ), for example, might be extended thus, to record the wording of the note explaining that the variant reading adds n to the original in a second hand: Feature structures containing information about the text in a witness (whether retroversion, regularization, or other) can also be linked to specific lem and rdg instances. See chapter 18 Feature Structures . 12.1.4.2 Witness Information in the Source Although witDetail provides a good way to annotate witness references in wit, lists of sigla 2 may be complex enough that it is impractical to use the combination of wit and witDetail . Moreover, in the transcription of printed critical editions, it may be desirable to retain for future reference the exact form in which the source edition records the witnesses to a particular reading; this is particularly important in cases of ambiguity in the information, or uncertainty as to the correct interpretation. The wit element may be used to transcribe such lists of witnesses to a particular reading. < wit > contains a list of one or more sigla of witnesses attesting a given reading, in a textual variation. 12.1.4.3 The Witness List A list of all identified witnesses should normally be supplied in the front matter of the edition, or in the sourceDesc element of its header. This may be given either as a simple bibliographic list, using the listBibl element described in 3.12 Bibliographic Citations and References , or as a listWit element, which contains a series of witness elements. Each witness element may contain a brief characterization of the witness, given as one or more prose paragraphs. If more detailed information about a manuscript witness is available, it should be represented using the msDesc element provided by the msdescription module; an msDesc may appear within a listBibl . Whether information about a particular witness is supplied by means of a bibl , msDesc , or witness element, a unique siglum for this source should always be supplied, using the global xml:id attribute. This identifier can then be used elsewhere to refer to this particular witness. < listWit > lists definitions for all the witnesses referred to by a critical apparatus, optionally grouped hierarchically. < witness > contains either a description of a single witness referred to within the critical apparatus, or a list of witnesses which is to be referred to by a single sigil. < msDesc > contains a description of a single identifiable manuscript or other text-bearing object such as an early printed book. < bibl > contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. < listBibl > contains a list of bibliographic citations of any kind. The minimal information provided by a witness list is thus the set of sigla for all the witnesses named in the apparatus. For example, the witnesses referenced by the examples of this chapter might simply be listed thus: It is more helpful, however, for witness lists to be somewhat more informative: each witness element should contain at least a brief prose description of the witness, perhaps including a bibliographic citation, as in the following examples: It would however generally be preferable to represent such detailed information using an appropriately structured msDesc element, as discussed in chapter 10 Manuscript Description . Note also that if the witnesses being recorded are not manuscripts but printed works, it may be preferable to document them using the standard bibl or biblStruct elements described in 3.12 Bibliographic Citations and References , as in this example: In text-critical work it is customary to refer to frequently occurring groups of witnesses by means of a single common siglum. Such sigla may be documented as pseudo-witnesses in their own right by including a nested witness list within the witness list, which uses the siglum for the group as its identifier, and supplies a fuller name for the group in its optional child head element, before listing the other witnesses contained by the group. For example, the Constant Group C of manuscripts comprising witnesses Cp, La, and S12, might be represented as follows: The more elaborate example below shows both multiple levels of nesting and a strategy for mapping the the xml:id of the witness to the siglum which will be displayed to the reader of a derived visualisation: Situations commonly arise where there are many more or less fragmentary witnesses, such that there may be quite distinct groups of witnesses for different parts of a text or collection of texts. One may treat this with distinct listWit elements for each different part. Alternatively, one may have a single listWit element at the beginning of the file or in its header listing all the witnesses, partial and complete, for the text, with the attestation of fragmentary witnesses indicated within the apparatus by use of the witStart and witEnd elements described in section 12.1.5 Fragmentary Witnesses . If a witness list is provided, it may be unnecessary to give, in each apparatus entry, an exhaustive list of the witnesses which agree with the base text. An application program can—in principle—compare the witnesses given for each variant found with those given in the full list of witnesses, subtracting from this list all the witnesses not active at this point (perhaps because of lacuna, or because they contain a variation on a different, overlapping lemma) and thence calculate all the manuscripts agreeing with the base text. In practice, encoders may find it less error-prone to list all witnesses explicitly in each apparatus entry. 12.1.5 Fragmentary Witnesses If a witness is incomplete (whether a single fragment, a series of fragments, or a relatively complete text with one or more lacunae), it is usually desirable to record explicitly where its preserved portions begin and end. The following empty tags, which may occur within any lem or rdg element, indicate the beginning or end of a fragmentary witness or of a lacuna within a witness: < witStart > indicates the beginning, or resumption, of the text of a fragmentary witness. < witEnd > indicates the end, or suspension, of the text of a fragmentary witness. < lacunaStart > indicates the beginning of a lacuna in the text of a mostly complete textual witness. < lacunaEnd > indicates the end of a lacuna in a mostly complete textual witness. Suppose a fragment of a manuscript X of the Wife of Bath's Prologue has a physical lacuna, and the text of the manuscript begins with auctorite . In an apparatus this might appear thus, distinguished from the reading of other manuscripts by the presence of the lacunaEnd element: 12.2 Linking the Apparatus to the Text Three different methods may be used to link a critical apparatus to the text: the location-referenced method, the double-end-point-attached method, and the parallel segmentation method. Both the location-referenced and the double end-point methods may be used with either in-line or external apparatus, the former dispersed within the base text, the latter held in some separate location, within or outside the document containing the base text. The parallel segmentation method may only be used for in-line apparatus. Where an external apparatus is used, the listApp element provides a useful means of grouping together a series of app elements of a specific type, or from a particular source: < listApp > contains a list of apparatus entries. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed Any document containing app elements requires a variantEncoding declaration in the encodingDesc element of its TEI header, thus: < variantEncoding > declares the method used to encode text-critical variants. 12.2.1 The Location-referenced Method The location-referenced method of encoding apparatus provides a convenient method for encoding printed apparatus; in this method as in most printed editions, the apparatus is linked to the base text by indicating explicitly only the block of text on which there is a variant (noted usually by a canonical reference scheme, or by line number in the edition, such as A 137 or Page 15 line 1 ). If the location-referenced method is used for an apparatus stored externally to the base text, the TEI header must have the declaration: In the body of the document, the base text (here El) will appear: Elsewhere in the document, or in a separate file, the apparatus will appear. On each app element, the loc attribute should be specified to indicate where the variant occurs in the base text. If the same text is encoded using in-line storage, the apparatus is dispersed through the base text block to which it refers. In this case, the location of the variant can be read from the line in which it occurs. Since the location is not required to be exact, the apparatus for a line might also appear at the end of the line: When the apparatus is linked to the text by means of location references, as shown here, it is not possible to find automatically the precise portion of text varied by the readings. In order to show explicitly what portion of the base text is replaced by the variant readings, the lem element may be used: Where it is intended that the apparatus be complete enough to allow the reconstruction of the witnesses (or at least of their non-orthographic variations), simple location-reference methods are unlikely to be as successful as the other two methods, which allow the unambiguous reconstruction of the lemma from the encoding. 12.2.2 The Double End-Point Attachment Method In the double end-point attachment method, the beginning and end of the lemma in the base text are both explicitly indicated. It thus differs from the location-referenced method, in which only the larger span of text containing the lemma is indicated. Double end-point attachment permits unambiguous matching of each variant reading against its lemma. It or the parallel-segmentation method should be used in all cases where this is desired, for example where the apparatus is intended to enable full reconstruction of the text, or of the substantives, of every witness. When the double end-point attachment method is used, the from and to attributes of the app element are used to indicate the beginning and ending points of the reading in the base text: their values are identifiers which occur at the locations in question. If no other markup is present there, the beginning and ending points should be marked using the anchor element defined in chapter 16 Linking, Segmentation, and Alignment . In cases where it is not possible to insert anchors within the base text (e.g. where the text is on a read-only medium) the beginning and end of the lemma may be indicated by using the indirect pointing mechanisms discussed in chapter 16 Linking, Segmentation, and Alignment . Explicit anchors are more likely to be reliable, and are therefore to be preferred. The double end-point attachment method may be used with in-line or external apparatus. In the latter case, the base text (here El) will appear with anchor elements inserted at every place where a variant begins or ends (unless some element with an identifier already begins or ends at that point): When the apparatus is encoded in-line, it is dispersed through the base text. Only the beginning of the lemma need be marked with an anchor , since the app is inserted at the end of the lemma, and itself therefore marks the end of the lemma. The lemma need not be repeated within the app element in this method, as it may be extracted reliably from the base text. If an exhaustive list of witnesses is available, it will also not be necessary to specify just which manuscripts agree with the base text to enable reconstruction of witnesses. An application will be able to determine the manuscripts that witness the base reading, by noting which witnesses are attested as having a variant reading, and inferring the base text reading for all others after adjusting for fragmentary witnesses and for witnesses carrying overlapping variant readings. Alternatively, if it is desired to make an explicit record of the attestation of the base text, the lem element may be embedded within app , carrying the witnesses to the base. Thus This method is designed to cope with overlapping lemmata. For example, at line 117 of the Wife of Bath's Prologue, the manuscripts Hg (Hengwrt), El (Ellesmere), and Ha4 (British Library Harleian 7334) read: And of so parfit wys a wight ywroght And for what profit was a wight ywroght And in what wise was a wight ywroght In this case, one might wish to record in what wise was in Ha4 as a single variant for of so parfit wys in Hg, and was a wight in El and Ha4 as a variant on wys a wight in Hg. This method can readily cope with such difficult situations, typically found in large and complex traditions: Because creation and interpretation of double end-point attachment apparatus will be lengthy and difficult it is likely that they will usually be created and examined by scholars only with mechanical assistance. 12.2.3 The Parallel Segmentation Method This method differs from the double end-point attachment method in that all variants at any point of the text are expressed as variants on one another. In this method, no two variations can overlap, although they may nest. The texts compared are divided into matching segments all synchronized with one another. This permits direct comparison of any span of text in any witness with that in any other witness. With a positive apparatus, it is straightforward for an application to extract the full text of any one witness from the apparatus. 3 This method will (by definition) always be satisfactory when there are just two texts for comparison (assuming they are in the same language and script). It will however be less convenient for textual traditions where establishing a base text with variations from it is not a satisfactory goal for the edition, or in some cases where every detail of variation needs to be modeled. In the parallel segmentation method, each segment of text on which there is variation is marked by an app element. If there is a preferred (or base) reading it is tagged with lem ; each reading is given in a rdg element: This method cannot be used with external apparatus: it must be used in-line. Note that apparatus encoded with this method may be translated into the double end-point attachment method and back without loss of information. Where double-end-point-attachment encodings have no overlapping lemmata, translation of these to the parallel segmentation encoding and back will also be possible without loss of information. As noted, apparatus entries may nest in this method: if an imaginary fifth manuscript of the text read Auctoritee, though none experience , the variation on the individual words of the line would nest within that for the line as a whole: Parallel segmentation cannot, however, deal very gracefully with variants which overlap without nesting: such variants must be broken up into pieces in order to keep all witnesses synchronized. 12.2.4 Other Linking Methods When an apparatus is provided it does not need to be given at the location in the transcription where the variation, emendation, attribution, or other apparatus observation occurs. Instead it may be stored in a separate place in the same file, or indeed in another file, and point to the location at which it is meant to be used. Storing apparatus entries separately can be beneficial when encoding multiple competing, potentially overlapping, interpretations of the same point in the source texts. The location-referenced method can be used to point a position in a text using the loc attribute and a canonical reference that is understood and documented in the context of the file where it is used. Where possible it is recommended that other methods use the from attribute to point to an xml:id attribute on an anchor or other element at the location where the apparatus observation takes place. The contents of an element pointed to are understood to be equivalent to a lem if none exists in the app , and if a lem does exist this should replace any content. The from attribute is a teidata.pointer datatype and thus contains a URI as a value. This means that it can point directly to an xml:id, an xml:id in another local file, or indeed a file identified by any URL or URN. In addition, URLs can contain XPointer schemes including xpath(), range(), and string-range() which can be used in providing the location of an app that is stored separately from the text to which it applies. Both from and to can be used, as in the double end-point attachment method, to identify the starting and ending location for an apparatus using XPointer schemes described in 16.2.4 TEI XPointer Schemes section to more precisely identify this location where beneficial. If only the from attribute is provided then it should be understood that this supplies the location of the textual variance that the apparatus documents. If the from attribute contains an XPointer scheme that identifies a range of text (or elements) then this is understood to record the starting and ending of the range as in the double end-point attachment method. In such a case a @to attribute is unnecessary. 12.3 Using Apparatus Elements in Transcriptions It is often desirable to record different transcriptions of one stretch of text. These variant transcriptions may be grouped within a single app element. An application may then construct different views of the transcription by extraction of the appropriate variant readings from the apparatus elements embedded in the transcription. For example, alternative expansions can be recorded in several different expan elements, all grouped within an app element. Consider, for example, the three different transcriptions given below of line 105 of the Hengwrt manuscript of Chaucer's The Wife of Bath's Prologue . The last word of the line Virginite is grete perfection is written perfectio followed by two minims over which a bar has been drawn, which has been read in different ways by different scholars. The first transcription, by Elizabeth Solopova, represents the two minims with bar above as a special composite character using the g element. This transcription notes this as a mark of abbreviation but gives no expansion for it. A second transcriber, F. J. Furnivall, regards the bar as an abbreviation of u , and therefore reads the two minims as an n . A third transcriber, P. G. Ruggiers, regards the bar as an abbreviation of n , reading the minims as u . This information may be held within an app structure, as follows: Editorial notes may also be attached to app structures within transcriptions. Here, editorial preference for Ruggiers' expansion and an explanation of that preference is given: In most cases, elements used to indicate features of a primary textual source may be represented within an app structure simply by nesting them within its readings, just as the am and ex elements are nested within the rdg elements in the example just given. However, in cases where the tagged feature extends across a span of text which might itself contain variant readings which it is desired to represent by app structures, some adaptation of the tagging may be necessary. For example, a span of text may be marked in the transcription of the primary source as a single deletion but it may be desirable to represent just a few words from this source as individual deletions within the context of a critical apparatus drawing together readings from this and several other witnesses. In this case, the tagging of the span of words as one deletion may need to be decomposed into a series of one-word deletions for encoding within the apparatus. If it is important to record the fact that all were deleted by the same act, the markup may use the join element or the next and prev attributes defined by chapter 16 Linking, Segmentation, and Alignment . 12.4 Strategies for Encoding Variation Textual variation may manifest itself in many ways. Variation most frequently occurs at the phrase level, but is also common at higher structural levels, such as the verse line, paragraph, or chapter. When these structures are involved, some care must be taken in their encoding to ensure that TEI's Abstract Model is not being broken. It would be an error, for example, to have a div in the lem , but a p in a rdg inside the same apparatus entry, because these structures cannot occur at the same level. Similarly, it is an error if the contents of an apparatus entry place a p inside another p or an l inside an l . Phenomena such as omissions and transpositions in witnesses will require some encoding strategies that differ from those in the examples above. An editor wishing to signal an omission in one witness should encode the omission using an empty rdg , thus: Transpositions are harder to encode, because they involve variation that occurs in different locations. A single app will therefore not be sufficient, and the variants must be linked. For example, in his edition of Propertius 1.16, Housman printed lines 25-6 after line 32, Heyworth prints them in place. We might encode Heyworth's edition, which records Housman's conjecture despite disagreeing with it, as follows: Apparatus entries may nest when there is variation at both higher and lower structural levels, e.g.: 12.5 Module for Critical Apparatus The module described in this chapter makes available the following components: Text Criticism Critical Apparatus The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">12 Critical Apparatus</span>"}
{"link":"p5.xml?id=ND","tag":"guidelines","content":"13 Names, Dates, People, and Places This chapter describes a module which may be used for the encoding of names and other phrases descriptive of persons, places, or organizations, in a manner more detailed than that possible using the elements already provided for these purposes in the Core module. In section 3.6 Names, Numbers, Dates, Abbreviations, and Addresses it was noted that the elements provided in the core module allow an encoder to specify that a given text segment is a proper noun, or a referring string , and to specify the kind of object named or referred to only by supplying a value for the type attribute. The elements provided by the present module allow the encoder to supply a detailed sub-structure for such referring strings, and to distinguish explicitly between names of persons, places, and organizations. This module also provides elements for the representation of information about the person, place, or organization to which a given name is understood to refer and to represent the name itself, independently of its application. In simple terms, where the core module allows one simply to represent that a given piece of text is a name , this module allows one further to represent a personal name , to represent the person being named, and to represent the canonical name being used. A similar range is provided for names of places and organizations. The main intended applications for this module are in biographical, historical, or geographical data systems such as gazetteers and biographical databases, where these are to be integrated with encoded texts. The chapter begins by discussing attributes common to many of the elements discussed in the remaining parts of the chapter ( 13.1 Attribute Classes Defined by This Module ) before discussing specifically the elements provided for the encoding of component parts of personal names (section 13.2.1 Personal Names ), place names (section 13.2.3 Place Names ) and organizational names (section 13.2.2 Organizational Names ). Elements for encoding personal and organizational data are discussed in section 13.3 Biographical and Prosopographical Data . Elements for the encoding of geographical data are discussed in section 13.3.4 Places . Finally, elements for encoding onomastic data are discussed in 13.3.6 Names and Nyms , and the detailed encoding of dates and times is described in section 13.4 Dates . 13.1 Attribute Classes Defined by This Module Most of the elements made available by this chapter share some important characteristics which are expressed by their membership in specific attribute classes. Members of the class att.naming have specialized attributes which support linkage of a naming element with the entity (person, place, organization) being named; members of the class att.datable have specialized attributes which support a number of ways of normalizing the date or time of the data encoded by the element concerned. 13.1.1 Linking Names and Their Referents The class att.naming is a subclass of the class att.canonical , from which it inherits the following attributes: < att.canonical > provides attributes that can be used to associate a representation such as a name or title with canonical information about the object being named or referenced. @key provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind. @ref provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs. provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind. provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs. < att.naming > provides attributes common to elements which refer to named persons, places, organizations etc. @role may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place. @nymRef provides a means of locating the canonical form ( nym ) of the names associated with the object named by the element bearing it. may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place. provides a means of locating the canonical form ( nym ) of the names associated with the object named by the element bearing it. The key attribute is provided for cases where no such direct link is required: for example because resolution of the reference is carried out by some local convention, or because the encoder judges that no such resolution is necessary. As an example of the first case, a project might maintain its own local database system containing canonical information about persons and places, each entry in which is accessed by means of some system-specific identifier constructed in a project-specific way from the value supplied for the key attribute. 1 As an example of the second case, consider the use of well-established codifications such as country or airport codes, which it is probably unnecessary for an encoder to expand further: However, as explained in 3.6.1 Referring Strings , interchange is improved by use of tag URIs in ref instead of key. The nymRef attribute has a more specialized use, where it is the name itself which is of interest rather than the person, place, or organization being named. See section 13.3.6 Names and Nyms for further discussion. All members of the att.naming class inherit the following attributes from the att.global.responsibility class: < att.global.responsibility > provides attributes indicating the agent responsible for some aspect of the text, the markup or something asserted by the markup, and the degree of certainty associated with it. @resp indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. @cert signifies the degree of certainty associated with the intervention or interpretation. indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. signifies the degree of certainty associated with the intervention or interpretation. 13.1.2 Dating Attributes Members of the att.datable class share the following attributes: < att.datable > provides attributes for normalization of elements that contain dates, times, or datable events. @period supplies pointers to one or more definitions of named periods of time (typically category s or calendar s) within which the datable item is understood to have occurred. supplies pointers to one or more definitions of named periods of time (typically category s or calendar s) within which the datable item is understood to have occurred. < att.datable.w3c > provides attributes for normalization of elements that contain datable events conforming to the W3C XML Schema Part 2: Datatypes Second Edition . @when supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. @notBefore specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. @notAfter specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. @from indicates the starting point of the period in standard form, e.g. yyyy-mm-dd. @to indicates the ending point of the period in standard form, e.g. yyyy-mm-dd. supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. indicates the starting point of the period in standard form, e.g. yyyy-mm-dd. indicates the ending point of the period in standard form, e.g. yyyy-mm-dd. The when attribute is used to specify a normalized form for any temporal expression, independently of how it is represented in the text, as in the following example: The period attribute provides a convenient way of associating an event or date with a named period. Its value is a pointer which should indicate some other element where the period concerned is more precisely defined. A convenient location for such definitions is the taxonomy element in the classDecl (classification declaration) in the encodingDesc of a TEI header. A taxonomy may contain simply a bibliographic reference to an external definition for it. More usefully, it may also contain a series of category elements, each with an identifier and a description. The identifier can then be used as the target for a period attribute. For example, a taxonomy of named periods might be defined as follows: With these definitions in place, any datable element may be associated with a specific period: The other dating attributes provided by this class support a wide range of methods of specifying temporal information in a normalized form. The from and to attributes may be used to express the begining and ending of a period of time, for example: The notBefore and notAfter attributes may be used to express a range of possibilities for a particular date (or time). For example the following element, extracted from an imaginary prosopographic entry for Anne Calthorpe, indicates that although the exact date of her death is not known, it can be narrowed down to a particular range: from 22 August 1579 to 28 March 1582, inclusive. Ostensibly the encoder has evidence that Anne Calthorpe was alive on the 22nd of August 1579 and evidence that she was already dead on the 28th of March 1582. Since when is used for a particular date or time, from and to for a duration, and notBefore and notAfter for a date or time within a range, it makes no sense to use when in combination with one or more of the others. Thus these Guidelines at present recommend against the use of when in combination with any of from, to, notBefore, or notAfter. The from or to attributes imply that the temporal expression to which they are attached signifies a duration, so the use of either with notBefore or notAfter means a duration is indicated. Some further self-explanatory examples follow: Normalization of date and time values permits the efficient processing of data (for example, to determine whether one event precedes or follows another). These examples all use the W3C standard format for representation of dates and times. Further examples, and discussion of some alternative approaches to normalization are given in section 13.4.3 More Expressive Normalizations below. 13.2 Names 13.2.1 Personal Names The core rs and name elements can distinguish names in a text but are insufficiently powerful to mark their internal components or structure. To conduct nominal record linkage or even to create an alphabetically sorted list of personal names, it is important to distinguish between a family name, a forename and an honorary title. Similarly, when confronted with a string such as John, by the grace of God, king of England, lord of Ireland, duke of Normandy and Aquitaine, and count of Anjou , the analyst will often wish to distinguish amongst the various constituent elements present, since they provide additional information about the status, occupation, or residence of the person to whom the name belongs. The following elements are provided for these and related purposes: < persName > contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. < surname > contains a family (inherited) name, as opposed to a given, baptismal, or nick name. < forename > contains a forename, given or baptismal name. < roleName > contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank. < addName > contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name. < nameLink > contains a connecting phrase or link used within a name but not regarded as part of it, such as van der or of . < genName > contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named. In addition to the att.naming attributes mentioned above, all of the above elements are members of the class att.personal , and thus share the following attributes: < att.personal > common attributes for those elements which form part of a name usually, but not necessarily, a personal name. @full indicates whether the name component is given in full, as an abbreviation or simply as an initial. @sort specifies the sort order of the name component in relation to others within the name. indicates whether the name component is given in full, as an abbreviation or simply as an initial. specifies the sort order of the name component in relation to others within the name. The persName element may be used in preference to the general name element irrespective of whether or not the components of the personal name are also to be marked. The element persName is synonymous with the element name type=\"person\", except that its type attribute allows for further subcategorization of the personal name itself, for example as a married, birth, pen, pseudo, or religious name. Consequently the following examples are equivalent: The persName element is more powerful than the rs and name elements because distinctive name components occurring within it can be marked as such. Many cultures distinguish between a family or inherited surname and additional personal names, often known as given names . These should be tagged using the surname and forename elements respectively and may occur in any order: The type attribute may be used with both forename and surname elements to provide further culture- or project-specific detail about the name component, for example: The value complex was suggested above for the not uncommon case where the whole of a surname is composed of several other surname elements. These nested surnames may be individually tagged as well, together with appropriate type values: The full attribute may be used to indicate whether a name is an abbreviation, initials, or given in full: These elements may be applied as the encoder considers appropriate, including cases where phrases or expressions are used to stand for surnames or forenames, as in the following: Similarly, patronymics may be treated as forenames, thus: This example also demonstrates the use of the sort attribute common to all members of the model.persNamePart class; its effect is to state the sequence in which forename and surname elements should be combined when constructing a sort key for the name. Some names include generational or dynastic information, such as a number, or phrases such as Junior , or the Elder ; these qualifications may also be used to distinguish similarly named but unrelated people. In either case, the genName element may be used to distinguish such labels from other parts of the name, as in the following examples: It is also often convenient to distinguish phrases (historically similar to the generational labels mentioned above) used to link parts of a name together, such as von , of , de etc. It is often a matter of arbitrary choice whether such components are regarded as part of the surname or not; the nameLink element is provided as a means of making clear what the correct usage should be in a given case, as in the following examples: Finally, the addName and roleName elements are used to mark all name components other than those already listed. The distinction between them is that a roleName encloses an associated name component such as an aristocratic or official title which exists in some sense independently of its bearer. The distinction is not always a clear one. As elsewhere, the type attribute may be used with either element to supply culture- or application- specific distinctions. Some typical values for this attribute for names in the Western European tradition follow: An inherited or life-time title of nobility such as Lord , Viscount , Baron , etc. An academic or other honorific prefixed to a name e.g. Doctor , Professor , Mrs. , etc. Membership of some elected or appointed organization such as President , Governor , etc. Military rank such as Colonel . A traditional descriptive phrase or nick-name such as The Hammer , The Great , etc. Here are some further examples of the usage of these elements: A name may have any combination of the above elements: Although highly flexible, these mechanisms for marking personal name components will not cater for every personal name, nor for every processing need. Where the internal structure of personal names is highly complex or where name components are particularly ambiguous, feature structures are recommended as the most appropriate mechanism to mark and analyze them, as further discussed in chapter 18 Feature Structures . White space is allowed and therefore significant between elements within name , persName , orgName , and placeName . Therefore 13.2.2 Organizational Names In these Guidelines, we use the term organization for any named collection of people regarded as a single unit. Typical examples include institutions such as Harvard College or the BBC and businesses such as Apple or Google but also racial or ethnic groupings or political factions where these are regarded as forming a single agency such as the Scythians or the Militant Tendency. Giving a loosely-defined group of individuals a name often serves a particular political or social agenda and an analysis of the way such phrases are constructed and used may therefore be of considerable importance to the social historian, even where the objective existence of an organization in this sense is harder to demonstrate than that of (say) a named person. In the case of businesses or other formally constituted institutions, the component parts of an organizational name may help to characterize the organization in terms of its perceived geographical location, ownership, likely number of employees, management structure, etc. Like names of persons or places, organizational names can be marked up as referring strings or as proper names with the rs or name elements respectively. The element orgName is provided for use where it is desired to distinguish organizational names more explicitly. < orgName > contains an organizational name. The orgName element may be used to mark up any form of organizational name: The components of an organization's name may include place names as well as personal names: As indicated above, organizational names may also be specified hierarchically particularly where the named organization is itself a department or a branch of a larger organizational entity. The Department of Modern History, Glasgow University is an example: 13.2.3 Place Names Like other proper nouns or noun phrases used as names, place names can simply be marked up with the rs element, or with the name element. For cartographers and historical geographers, however, the component parts of a place name provide important information about the relation between the name and some spot in space and time. They also provide important evidence in historical linguistics. These Guidelines distinguish three ways of referring to places. A place name (represented using the placeName element) may consist of one or more names for hierarchically-organized geo-political or administrative units (see section 13.2.3.1 Geo-political Place Names ). A place named simply in terms of geographical features such as mountains or rivers is represented using the geogName element (see section 13.2.3.2 Geographic Names ). Finally, an expression consisting of phrases expressing spatial or other kinds of relationship between other kinds of named place may itself be regarded as a way of referring to a place, and hence as a kind of named place (see section 13.2.3.3 Relative Place Names ). < placeName > contains an absolute or relative place name. < geogName > identifies a name associated with some geographical feature such as Windrush Valley or Mount Sinai. As members of the att.naming class, all of these elements bear the attributes key, ref, and nymRef mentioned above. These attributes are primarily useful as a means of linking a place name with information about a specific place. Recommendations for the encoding of information about a place, as distinct from its name, are provided in 13.3.4 Places below. Like the persName element discussed in section 13.2.1 Personal Names , the placeName element may be regarded simply as an abbreviation for the elements name type=\"place\" or rs type=\"place\". The following encodings are thus equivalent: 2 13.2.3.1 Geo-political Place Names A place name may contain text with no indication of its internal structure: < district > contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit. < settlement > contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. < region > contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. < country > contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. < bloc > contains the name of a geo-political unit consisting of two or more nation states or countries. These elements are all members of the model.placeNamePart class, members of which may be used anywhere that text is permitted, including within each other as in the following examples: 13.2.3.2 Geographic Names Places may also be named in terms of geographic features such as mountains, lakes, or rivers, independently of geo-political units. The geogName is provided to mark up such names, as an alternative to the placeName element discussed above. For example: In addition to the usual phrase level elements, the geogName element may contain the following specialized element: < geogFeat > contains a common noun identifying some geographical feature contained within a geographic name, such as valley, mount, etc. Where the geogFeat element is used to characterize the kind of geographic feature being named, the name element will generally also be used to mark the associated proper noun or noun phrase: The Gaelic word lairig may be glossed as sloping hill face . The most efficient way of including this information in the above encoding would be to create a separate nym element for this component of the name and then point to it using the nymRef attribute, as further discussed in 13.3.6 Names and Nyms . 13.2.3.3 Relative Place Names All the place name specifications so far discussed are absolute , in the sense that they define only one place. A place may however be specified in terms of its relationship to another place, for example 10 miles northeast of Paris or near the top of Mount Sinai . These relative place names will contain a place name which acts as a referent (e.g. Paris and Mount Sinai ). They will also contain a word or phrase indicating the position of the place being named in relation to the referent (e.g. the top of , north of ). A distance, possibly only vaguely specified, between the referent place and the place being indicated may also be present (e.g. 10 miles , near ). Relative place names may be encoded using the following elements in combination with either a placeName or a geogName element. < offset > marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression. < measure > contains a word or phrase referring to some quantity of an object or commodity, usually comprising a number, a unit, and a commodity name. The internal structure of place names is like that of personal names—complex and subject to an enormous amount of variation across time and different cultures. The recommendations in this section should however be adequate for a majority of users and applications; they may be extended using the mechanisms described in chapter 23.3 Customization to add new elements to the existing classes. When the focus of interest is on the name components themselves, as in place name studies for example, the elements discussed in 13.3.6 Names and Nyms may also be of use. Alternatively, the meaning structure itself may be represented using feature structures ( 18 Feature Structures ). 13.2.4 Object Names < objectName > contains a proper noun or noun phrase used to refer to an object. As with other proper nouns or noun phrases used as names, the names of objects may be marked up simply with the name element. For those working with a variety of named objects the objectName element provides more flexibility. The objectName element may be used to encode any named object whether or not this is a text-bearing object. The use of objectName by itself does not categorize the object referenced, but this may be done further with the type and subtype attributes or through reference to a taxonomy . Additionally, the use of the objectName element says nothing about the physical reality of the object – that is whether it is real, fictional, purported, or missing – and this may be one aspect that some may wish to record through the type attribute. Where more detailed information is available for a named object the ref attribute should be used to point to an object element or other source of information about this object. The objectName element is intended for named objects; where an object is mentioned through a descriptive phrase but not named explicitly the rs element should be used. 13.3 Biographical and Prosopographical Data This module defines a number of special purpose elements which can be used to markup biographical, historical, and prosopographical data. We envisage a number of users and uses for these elements. For example, an encoder may be interested in creating or converting a set of biographical records of the type found in a Dictionary of National Biography. Another use is the creation or conversion of a database-like collection of information about a group of people, such as the people referenced in a marked-up collection of documents, or persons who have served as informants in the creation of spoken corpora. It is also appropriate to use these elements to register information relating to those who have taken part in the creation of a TEI document. To cater for this diversity, these Guidelines propose a flexible strategy, in which encoders may choose for themselves the approach appropriate to their needs. If one were interested, for example, in converting existing DNB-type records, and wanted to preserve the text as is, the person element (see 13.3.2 The Person Element ) could simply contain the text of an article, placed within p elements, possibly using elements such as name or date to mark up features of that text. For a more structured entry, however, one would extract the data and place information contained in the text, and encode it directly using the more specific elements described in this section. 13.3.1 Basic Principles Information about people, places, and organizations, of whatever type, essentially comprises a series of statements or assertions relating to: characteristics or traits which do not, by and large, change over time characteristics or states which hold true only at a specific time events or incidents which may lead to a change of state or, less frequently, trait, external resources where other information on the subject can be found. Characteristics or traits are typically independent of an individual's volition or action and can be either physical, such as hair and eye colour; or cultural, such as ethnicity and caste. The distinction is not entirely straightforward: gender and sex can be regarded as culturally determined with physical manifestations, interpreted based on the social hierarchies of a time and place. Also the division of humanity into different races, formalized in the nineteenth century to organize a hierarchy of humanity on the basis of physical characteristics such as skin colour, hair type, and skull measurements, is now recognized as a colonialist social construct. 3 When such a construct defined individuals' identities beyond their volition, the markup and documentation should reflect this as a culturally-determined characteristic. States include, for example, marital status, place of residence, and position or occupation. Such states have a definite duration, that is, they have a beginning and an end and are typically a consequence of the individual's own action or that of others. Changes in state refer to life-changing or identity-changing events such as birth, marriage, or appointment to office; such events will normally be associated with a specific date or a fairly narrow date-range. Changes in states can also cause or be caused by changes in characteristics. Any statement or assertion about these aspects of a person's life will be based on some source, possibly multiple sources, possibly contradictory. Taking all this into account it follows that each such statement or assertion needs to be documentable, put into a time frame, and be relatable to other statements or assertions. The elements defined by the module described in this chapter may, for the most part, all be regarded as specializations of one or other of the above three classes. Generic elements for state, trait, and event are also defined: < state > contains a description of some status or quality attributed to a person, place, or organization often at some specific time or for a specific date range. < trait > contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. < event > contains data relating to any kind of significant event associated with a person, place, or organization. < att.locatable > provides attributes for referencing locations by pointing to entries in a canonical list of places. @where indicates one or more locations by pointing to a place element or other canonical description. indicates one or more locations by pointing to a place element or other canonical description. < listEvent > contains a list of descriptions, each of which provides information about an identifiable event. When developing a prosopography record of a named entity it is a common practice to refer explicitly to other resources, for example the Library of Congress Name Authority File, Virtual Internationl Authority File (VIAF), a gazetteer of places like Pleiades, or a printed book. < idno > supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. Here is a simple example: 13.3.2 The Person Element Information about a person, as distinct from references to a person, for example by name, is grouped together within a person element. Information about a group of people regarded as a single entity (for example the audience of a performance) may be encoded using the personGrp element. Note however that information about a group of people with a distinct identity (for example a named theatrical troupe) should be recorded using the org element described in section 13.3.3 Organizational Data below. These elements may appear only within a listPerson element, which groups such descriptions together, and optionally also describes relationships amongst the people listed. < listPerson > contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. < listRelation > provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links. One or more listPerson elements may be supplied within the standOff element (see 16.10 The standOff Container ) or, when used to list the participants in a linguistic interaction, within the particDesc (participant description) element in the profileDesc element of a TEI header. Like other forms of list, however, listPerson can also appear within the body of a text when the module defined by this chapter is included in a schema. The type attribute may be used to distinguish lists of people of different kinds where this is considered convenient: The person element carries several attributes. As a member of the classes att.global.responsibility , att.editLike , and att.global.source class, it carries the usual attributes for providing details about the information recorded for that person, such as its reliability or source: < att.global.responsibility > provides attributes indicating the agent responsible for some aspect of the text, the markup or something asserted by the markup, and the degree of certainty associated with it. @cert signifies the degree of certainty associated with the intervention or interpretation. @resp indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. signifies the degree of certainty associated with the intervention or interpretation. indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. < att.editLike > provides attributes describing the nature of an encoded scholarly intervention or interpretation of any kind. @evidence indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. < att.global.source > provides attributes used by elements to point to an external source. @source specifies the source from which some aspect of this element is drawn. specifies the source from which some aspect of this element is drawn. < person > provides information about an identifiable individual, for example a participant in a language interaction, or a person referred to in a historical source. < personGrp > describes a group of individuals treated as a single person for analytic purposes. These attributes are intended for use where only a small amount of data is to be encoded in a more or less normalized form, possibly for many person elements, for example when encoding basic facts about respondents to a questionnaire. When however a more detailed encoding is required for all kinds of information about a person, for example in a historical gazetteer, then it will be more appropriate to use the elements age , sex and others described elsewhere in this chapter. Note that the age attribute is not intended to record the person's age expressed in years, months, or other temporal unit. Rather it is intended to record into which age bracket, for the purposes of some analysis, the person falls. A simple (perhaps too simple to be useful) binary classification of age brackets would be child and adult. The actual age brackets useful to various projects are likely to be varied and idiosyncratic, and thus these Guidelines make no particular recommendation as to possible values. Instead, individual projects are recommended to define the values they use in their own customization file, using a declaration like the following: The person element may contain many sub-elements, each specifying a different property of the person being described. The remainder of this section describes these more specific elements. For convenience, these elements are grouped into three classes, corresponding with the tripartite division outlined above: one for traits, one for states and one for events. Each class may contain specific elements for common types of biographical information, and contains a generic element for other, user-defined, types of information. All the elements in these three classes belong to the attribute class att.datable , which provides the following attributes: < att.datable.w3c > provides attributes for normalization of elements that contain datable events conforming to the W3C XML Schema Part 2: Datatypes Second Edition . @when supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. @notBefore specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. @notAfter specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. @from indicates the starting point of the period in standard form, e.g. yyyy-mm-dd. @to indicates the ending point of the period in standard form, e.g. yyyy-mm-dd. supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. indicates the starting point of the period in standard form, e.g. yyyy-mm-dd. indicates the ending point of the period in standard form, e.g. yyyy-mm-dd. 13.3.2.1 Personal Characteristics The model.persStateLike class contains elements describing physical or socially-constructed characteristics, traits, or states of a person. Members of the class comprise the following specific elements: < affiliation > contains an informal description of a person's present or past affiliation with some organization, for example an employer or sponsor. < age > specifies the age of a person. < education > contains a description of the educational experience of a person. < faith > specifies the faith, religion, or belief set of a person. < floruit > contains information about a person's period of activity. < gender > specifies the gender identity of a person, persona, or character. < langKnowledge > summarizes the state of a person's linguistic knowledge, either as prose or by a list of langKnown elements. < nationality > contains an informal description of a person's present or past nationality or citizenship. < occupation > contains an informal description of a person's trade, profession or occupation. < persName > contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. < persona > provides information about one of the personalities identified for a given individual, where an individual has multiple personalities. < persPronouns > indicates the personal pronouns used, or assumed to be used, by the individual being described. < residence > describes a person's present or past places of residence. < sex > specifies the sex of an organism. < socecStatus > contains an informal description of a person's perceived social or economic status. < state > contains a description of some status or quality attributed to a person, place, or organization often at some specific time or for a specific date range. < trait > contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. Encoders should take particular care to be explicit about culturally determined concepts such as nationality, ethnicity, age, or sex/gender system that influence their markup. 4 For example, when recording personal age in different cultures, there may be different assumptions about the point from which age is reckoned. Scholars face similar issues when marking sex and gender according to cultural systems from times and places not their own. A statement of the practice adopted in a given encoding may usefully be provided in the editorialDecl element discussed in 2.3.3 The Editorial Practices Declaration . The langKnowledge element contains either paragraphs or a number of langKnown elements; it may take a tags attribute, which provides one or more standard codes or tags for the languages. The langKnown element must have a tag attribute, which indicates the language with the same kind of language tag. These language tags are discussed in detail in 6.1 Language Identification . Furthermore, the langKnown element also has a level attribute to indicate the level of the person's competence in the language. It is thus possible either to say: The persona element may contain the same component elements as a person element. Its function is to document a distinct persona assumed by the person element containing it. A person, not necessarily fictional, may take on different personas at different times or in different situations, each persona having different personal characteristics, such as name, age, sex, gender etc. We distinguish a persona, which is a set of characteristics associated with one specific individual, from a role, which is a set of characteristics that many different people can assume. An actor does not change their persona when adopting a different role, but none of the personas associated with one person can properly be associated with another. The persPronouns element may be used to indicate the personal pronouns used, or assumed to be used, by the individual being described. It is common practice in email signatures and biographies, for people to include their preferred personal pronouns along with their name or handle. This allows transgender and gender variant people to express how they wish to be identified, without having to share their gender identity (though some do). Cisgender people have also adopted the practice, which normalizes the idea that a person's personal pronouns should not be inferred by their name, sex, gender, or gender presentation. The persPronouns element may be used either in transcribed content to encode a phrase used to indicate preferred personal pronouns, or may be used inside a person or persona element to indicate the associated pronouns. For example, the following entry from a hypothetical prosopography lists only the nominative case of the preferred pronouns as identified by Miss Major Griffin-Gracy, a historical figure. Personal pronouns often occur as part of the closer of an email, post, or other electronic communication. The sex and gender elements each carry a value attribute to give values from a project-internal taxonomy, or an external standard. The generic trait and state elements are also members of this class, < trait > contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. < state > contains a description of some status or quality attributed to a person, place, or organization often at some specific time or for a specific date range. These elements are provided as a simple means of extending the set of descriptive features available in a standardized way. For example, there are no predefined elements for such features as eye or hair colour. If these are to be recorded, they may simply be added as new types of trait: If none of the more specialized elements listed above is appropriate, then a choice must be made between the two generic elements trait and state . If you wish to distinguish between characteristics that are generally perceived to be transient and those which are generally considered unchanging, use state for the former, and trait for the latter. It may also be helpful to note that traits are typically, but not necessarily, independent of the volition or action of the holder. If the distinction between state and trait is not considered relevant or useful, use state . The persName element is repeatable and can, like all TEI elements, take the attribute xml:lang to indicate the language of the content of the element, as well as a type attribute to indicate the type of name, whether a nickname, maiden or birth name, alternative form, etc. This is useful in cases where, for example, a person is known by a Latin name and also by any number of vernacular names, many or all of which may have claims to authenticity. In order to ensure uniformity, the method generally employed in the library world has been to accept the form found in some authority file, for example that of the American Library of Congress, as the base or neutral form. Feelings can run high on this matter, however, and people are often reluctant to accept as neutral an overtly foreign form of the name of their local saint or hero. Within the person element any number of variant forms of a name can be given, with no prioritization, and hence less likelihood of offence. The Icelandic scholar and manuscript collector Árni Magnússon, to give his name in standard modern Icelandic spelling, is known in Danish as Arne Magnusson, the form which he himself, as a long term resident of Denmark, generally used; there is also a Latinized form, Arnas Magnæus, which he used in his scholarly writings. All three forms can be given, and in any order: At the other extreme, a person may be named periphrastically as in the following example: Alternatively, the generic name element may be used for all of the naming components in a description. For example, a description of the first living held by the Icelandic clergyman and poet Jón Oddsson Hjaltalín might be tagged as follows: Similarly, the generic state or trait element may be used in preference to the more specific elements listed above: 13.3.2.2 Personal Events Events in a person's history are not characteristics of an individual, but often cause an individual to gain such characteristics, or to enter a new state. Most such events, for example marriage, appointment, promotion, or a journey may be recorded using the generic element event , which may be grouped with listEvent , and has a content model similar to that of state and trait . The chief difference is that event can include a placeName element to identify the name of the place where the event occurred. Two particular events in a persons life, namely birth and death, are both ubiquitous and usually considered particularly important, and thus may be represented by specialized elements for the purpose: < birth > contains information about a person's birth, such as its date and place. < death > contains information about a person's death, such as its date and place. In the following example, we give a brief summary of the wedding of Jane Burden to the English writer, designer, and socialist William Morris, encoded as an event element embedded within the person element used to record data about Morris, though we could equally well have embedded the event element within the person element for Burden, or have encoded it independently of either person element: As mentioned above, all these elements, both the specific and the generic, are members of the att.datable attribute class, which means they can be limited in terms of time. The following encoding, for example, demonstrates that the person named David Jones changed his name in 1966 to David Bowie: All the generic elements are also members of the att.global.responsibility and att.editLike classes. These classes make available the attributes cert, to indicate the degree of certainty, resp, the agency responsible, evidence, the nature of the evidence used, and source, a pointer to a resource from which the information derives. In this way it is possible, in the case of multiple and conflicting sources, to provide more than one view of what happened, as in the following example: 13.3.2.3 Personal Relationships When the module defined by this chapter is included in a schema, the following two elements may be used to document relationships amongst the persons, places, or organizations identified: < listRelation > provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links. < relation > describes any kind of relationship or linkage amongst a specified group of places, events, persons, objects or other items. A relationship , as defined here, may be any kind of describable link between specified participants. A participant (in this sense) might be a person, a place, or an organization. In the case of persons, therefore, a relationship might be a social relationship (such as employer/employee), a personal relationship (such as sibling, spouse, etc.) or something less precise such as possessing shared knowledge . A relationship may be mutual , in that all the participants engage in it on an equal footing (for example the sibling relationship); or it may not be if participants are not identical with respect to their role in the relationship (for example, the employer relationship). For non-mutual relationships, only two kinds of role are currently supported; they are named active and passive . These names are chosen to reflect the fact that non-mutual relations are directed , in the sense that they are most readily described by a transitive verb, or a verb phrase of the form is X of or is X to . The subject of the verb is classed as active ; the direct object of the verb, or the object of the concluding preposition, as passive . Thus parents are active and children passive in the relationship parent (interpreted as is parent of ); the employer is active , the employee passive , in the relationship employs . These relationships can be inverted: parents are passive and children active in the relationship is child of ; similarly works for inverts the active and passive roles of employs . For example: P1 and P2 are parents of P3 and P4. P1 and P2 are linked in a mutual relationship called spouse —that is, P2 is the spouse of P1, and P1 is the spouse of P2. P1 has the social relationship employer with respect to P3 and P4. Relationships within places and organizations are further discussed in the relevant sections below. Relationships between for example organizations and places, or places and persons, may be handled in exactly the same way. 13.3.3 Organizational Data The org and listOrg elements are used to store data about an organization such as its preferred name, its locations, or key persons within it. < org > provides information about an identifiable organization such as a business, a tribe, or any other grouping of people. < listOrg > contains a list of elements, each of which provides information about an identifiable organization. An organization is not the same thing as a list or group of people because it has an identity of its own. That identity may be expressed solely in the existence of a name (for example The Scythians ), but is likely to consist in the combination of that name with a number of events, traits, or states which are considered to apply to the organization itself, rather than any of its members. For example, a sports team might be described in terms of its membership (a listPerson ), its fixtures (a listPlace ), its geographical affiliation (a placeName ), or any combination of these. It will also have properties which may be used to categorize it in some way such as the kind of sport played, whether the team is amateur or professional, and so on: these are probably best dealt with by means of the type attribute. However, it is the name of the sports team alone which identifies it. The content model for org permits any mixture of generic state , trait , or event elements: the presence of the orgName element described in 13.2.2 Organizational Names is however strongly recommended. In other respects, the org element is used in much the same way as place or person . An organization may have different names at different times: The names of the people making up an organization can also change over time, (if they are known at all). For example: An org may contain subordinate org s: The following example demonstrates the use of the listOrg element to group together a number of org elements, each of which is defined solely by means of an informal description, itself containing other names. 13.3.4 Places In 13.2.3 Place Names we discuss various ways of naming places such as towns, countries, etc. In much the same way as these Guidelines distinguish between the encoding of names for people and the encoding of other data about people, so they also distinguish between the encoding of names for places and the encoding of other data about places. In this section we present elements which may be used to record in a structured way data about places of any kind which might be named or referenced within a text. Such data may be useful as a way of normalizing or standardizing references to particular places, as the raw material for a gazetteer or similar reference document associated with a particular text or set of texts, or in conjunction with any form of geographical information system. The following elements are provided for this purpose: < listPlace > contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. < place > contains data about a geographic location The model.placeStateLike class contains elements describing characteristics of a place which have a definite duration, such as its name. Any member of the model.placeNamePart may be used for this purpose, since a place element will usually contain at least one, and possibly several, placeName -like elements indicating the names associated with it, by different people, in different languages, or at different times. For example, the modern city of Lyon in France was in Roman times known as Lugdunum. Although the modern and the Roman city are not physically co-extensive, they have significant areas which overlap, and we may therefore wish to regard them as the same place, while supplying both names with an indication of the time period during which each was current. Places usually have physical locations in addition to names. As with the example of Lyon, the precise geographic location and extent of a place may change over time, and so locations like names may need to be qualified with indications of the time period to which they apply. Locations may be specified in a number of ways: as a set of coordinates defining a point or an area on the surface of the earth, or by providing a description of how the place may be found, usually in terms of other place names. For example, we can identify the location of the Canadian city of London, either by specifying its latitude and longitude, or by specifying that we mean the city called London located in the province called Ontario within the country called Canada. In addition we may wish to supply a brief characterization of the place identified, for example to state that it is a city, an administrative area such as a country, or a landmark of some kind such as a monument or a battlefield. If our typology of places is simple, the open ended type attribute is the easiest way to represent it: so we might say place type=\"city\", place type=\"battlefield\" etc. Within the place element, the following elements may be used to provide more information about specific aspects of the place in a structured form: < placeName > contains an absolute or relative place name. < location > defines the location of a place as a set of geographical coordinates, in terms of other named geo-political entities, or as an address. 13.3.4.1 Varieties of Location A location may be specified in one or more of the following ways: by supplying a string representing its coordinates in some standardized way within a geo element, as shown below by supplying one or more place name component elements (e.g. country , settlement etc.) to place it within a geo-political context by supplying a postal address, e.g. using the address element by supplying a brief textual description, e.g. using the desc element by using a non-TEI XML vocabulary such as the Geography Markup Language The simplest method of specifying a location is by means of its geographic coordinates, supplied within the geo element. This may be used to supply any kind of positional information, using one of the many different geodetic systems available. Such systems vary in their format, in their scope or coverage, and more fundamentally in the reference frame (the datum) used for the coordinate system itself. The default recommended by these Guidelines is to supply a string containing two real numbers separated by whitespace, of which the first indicates latitude and the second longitude according to the 1984 World Geodetic System (WGS84); this is the system currently used by most GPS applications which TEI users are likely to encounter. 5 We might therefore record the information about the place known as Lyon as follows: Identifying Lyon by its geo-political status as a settlement within a country forming part of a larger political entity, we might represent the same place as follows: We may use the same procedure to represent the location of smaller places, such as a street or even an individual building: We may also treat imaginary places in the same way: A location sometimes resembles a set of instructions for finding a place: The element address may also be used to identify a location in terms of its postal or other address: The location element may thus identify a place to a greater or lesser degree of precision, using a variety of means: a name, a set of names, or a set of coordinates. The geo element introduced earlier is by default understood to supply a value expressed in a specific (and widely used) notation. If a location contains more than one geo , this is interpreted as being really the same place in the universe, but with different systems used to refer to it. If there is a lack of consensus about the location (of, for example, Camelot), more than one location should be used, each with its own geo . By default, the content of geo is interpreted as following the standard known as the World Geodetic System (WGS). This may be modified, however, in two ways. Firstly, the content of the geo element can be expressed some other way, that is, according to some different geodetic system. The decls attribute is used point to a geoDecl element defined in the document header, which describes a different datum. Secondly, the element geo may be redefined to contain markup from a different XML vocabulary which is specifically designed to represent this kind of information. This technique is used throughout these Guidelines where specialized markup is required, for example to embed mathematical expressions or vector graphics, and is further described and exemplified in 23.3.4 Examples of Modification . For geographic information, suitable non-TEI vocabularies include: the OpenGIS Geography Markup Language (GML) being defined by the OGC 6 the Keyhole Markup Language (KML) used by Google Maps 7 In the following example, we have defined the location of the place Lyon using GML and indicated the two names associated with it at different times: A bibl element may be used within location to indicate the source of the location information. 13.3.4.2 Multiple Places A place may contain other places. This containment relation can be directly modelled in XML: thus we can say that the towns of Vilnius and Kaunas are both in a place called Lithuania (or Lietuva) as follows: This does not, of course, imply that Vilnius and Kaunas are the only places constituting Lithuania; only that they are within it. A separate place element may indicate that it is a part of Lithuania by supplying a relation element, as discussed below ( 13.3.4.4 Relations Between Places ). As a further example, the islands of Mauritius, Réunion, and Rodrigues are collectively known as the Mascarene Islands. Grouped together with Mauritius there are also several smaller offshore islands, with rather picturesque French names. These offshore islands do not however constitute an identifiable place as a whole. One way of representing this is as follows: Here is a more complex example, showing the variety of names associated at different times and in different languages with a set of hierarchically grouped places—the settlement of Carmarthen Castle, within the town of Carmarthen, within the administrative county of Carmarthenshire, Wales. As noted previously, country , region , and settlement are all specializations of the generic placeName element; they are not specializations of the place element. If it is desired to distinguish amongst kinds of place this can only be done by means of the type attribute as in the above example. This use of multiple place elements should be distinguished from the (possibly simpler) case where a number of places with some property in common are being grouped together for convenience, for example, in a gazetteer. The listPlace element is provided as a means of grouping places together where there is no implication that the grouped elements constitute a distinct place. For example: 13.3.4.3 States, Traits, and Events There are many different kinds of information which it might be considered useful to record for a place in addition to its name and location, and the categories selected are likely to be very project-specific. As with persons therefore these Guidelines make no claim to comprehensiveness in this context. Instead, the generic state , trait , and event elements defined by this module should be used. Each of these may be customized for particular needs by means of their type attribute. These are complemented by a small number of predefined elements of general utility: < population > contains information about the population of a place. < climate > contains information about the physical climate of a place. < terrain > contains information about the physical terrain of a place. These are all specializations of the generic trait element. This element may be used for almost any kind of event in the life of a place; no specialized version of this element is proposed, nor do we attempt to enumerate the possible values which might be appropriate for the type attribute on any of these generic elements. Here is an example, showing how the specific and generic elements may be combined: In the following example, the climate example is used to provided a detailed discussion of this particular aspect of the information available about a particular place: As the above example shows, state and trait elements, and others of the same class, can be nested hierarchically within each other. When this is done, values for the type attribute are to be understood as cumulatively inherited, as elsewhere in the TEI scheme (for example on category or linkGrp ). In the following example, the outermost population element concerns the squirrel population between the dates given. This is then broken down into red and gray squirrel populations, and within that into male and female: Events may also be subdivided into other events. For example, a two part meeting might be represented as follows: An event element is usually used to record information about a place, or a person; for this reason the element usually appears as content of a place or person . However, it is also possible to describe events independently of either a person or a place. This may be useful in such applications as chronologies, lists of significant events such as battles, legislation, etc. The listEvent element is a member of the model.listLike class, and may therefore appear inside standOff , or wherever else lists are permitted, in the same way as the listPerson , listPlace etc. elements described elsewhere in this chapter. The next example demonstrates the use of the where attribute with event , coordinated with location information stored in listPlace . The where attribute on event can point to multiple canonical place descriptions, which should indicate that the event took place in multiple locations. For example, the November 2015 Paris Attacks took place at six different locations in Paris; this might be encoded as an event with a where attribute with six space-separated values. 13.3.4.4 Relations Between Places The relation element may also be used to express relationships of various kinds between places, or between places and persons, in much the same way as it is used to express relationships between persons alone. Returning to the Mascarene Islands example cited above, we might define the island group and its constituents separately, but indicate the relationship by means of a relation element: This stand-off style of representation has the advantage that we can now also represent the fact that a place may be a part of more than one other place; for example, Réunion is part of France, as well as part of the Mascarenes. If we add a declaration for France to the list above: 13.3.5 Objects < object > contains a description of a single identifiable physical object. < objectName > contains a proper noun or noun phrase used to refer to an object. < listObject > contains a list of descriptions, each of which provides information about an identifiable physical object. Please note: The object element is a recent addition to TEI P5 Guidelines as of version 3.5.0 and as such might be more prone to further revision in the next few releases as its use develops. This may be particularly evident where its contents have been borrowed from msDesc and have yet to be generalized from their use in the context of manuscript descriptions. The object element usually appears inside the listObject element which is used to group descriptions of identifiable objects. The listObject element is a member of model.listLike and so may appear inside standOff , or anywhere else that list is allowed. This enables the flexibility of using listObject to contain a set of metadata descriptions stored in the TEI header, or as a list of objects transcribed from a source document. The equivalent list for manuscript descriptions is listBibl . < objectIdentifier > groups one or more identifiers or pieces of locating information concerning a single object. < msContents > describes the intellectual content of a manuscript, manuscript part, or other object either as a series of paragraphs or as a series of structured manuscript items. < physDesc > contains a full physical description of a manuscript, manuscript part, or other object optionally subdivided using more specialized elements from the model.physDescPart class. < history > groups elements describing the full history of a manuscript, manuscript part, or other object. < additional > groups additional information, combining bibliographic information about a manuscript or other object, or surrogate copies of it, with curatorial or administrative information. The objectIdentifier element is a general-purpose grouping element for location or identification information relating to a single object or resource. It is very similar to an msIdentifier element with less contraints on the order of its contents. The objectIdentifier may be more or less detailed dependent on the needs of the encoder. In some cases an object may be used mostly as a common reference point for multiple objectName elements to refer back to. In situations, one might provide more detailed information in the objectIdentifier where it is available or desirable. Compare Moreover, the objectIdentifier may include an address element to provide the address at which the object currently resides. The use of location within this enables the provision of geographical coordinates when describing objects not housed in traditional repositories or institutions. This may also be used to supplement more traditional repository location information if available and, for example, to enable providing outputs such as maps showing the location of encoded objects. The msContents element is currently used to provide a description of the intellectual contents of any text on an object and, being optional, is not necessary if there are no intellectual contents to describe. (Such contents, especially in the case of artistic objects, may not always be textual.) The physDesc element may be used to give a physical description of the object either in prose or using more structured elements as and where they apply to that kind of object. The history element provides the option to describe the history of the object as paragraphs or with more structure using the origin element, as many provenance stages as are appropriate, and acquisition to describe its current ownership. The additional element may be used to provide information about surrogates for the object (such as digital facsimiles) as well as administrative and curatorial information. A full description of an object can provide more or less detail at any level to represent the state of knowledge about the object. If the object is being referenced from elsewhere in the document, this is usually done with an objectName . For example here the Alfred-Jewel xml:id is referenced from a paragraph elsewhere in the document using the ref attribute on the objectName element. There is no restriction on the form, size, or type of object that may be described by an object element, however, some objects may be more adequately described by a place element depending on context. Where a description of an object is being provided in terms of identification, physical characteristics, or history, then an object element may be preferred. Where metadata is being recorded about the geo-political location, population, or similar traits, then the place element may be better suited. A corresponding relation between an object description and place may be recorded through the use of the corresp attribute. An example of a large object that might be described with the object element could be a building such as the Central Library of the National Autonomous University of Mexico. 13.3.6 Names and Nyms So far we have discussed ways in which a name or referring string encountered in running text may be resolved by considering the object that the name refers to: in the case of a personal name, the name refers to a person; in the case of a place name, to a place, for example. The resolution of this reference is effected by means of the key or ref attributes available to all elements which are members of the att.naming class, such as persName or placeName and their more specialized variants such as forename or country . However, names can also be regarded as objects in their own right, irrespective of the objects to which they are attached, notably in onomastic studies. From this point of view, the names John in English, Jean in French, and Ivan in Russian might all be regarded as existing independently of any person to which they are attached, and also independently of any variant forms that might be attested in different sources (such as Jon or Johnny in English, or Jehan or Jojo in French). We use the term nym to refer to the canonical or normalized form of a name regarded in such a way, and provide the following elements to encode it: < listNym > contains a list of nyms, that is, standardized names for any thing. < nym > contains the definition for a canonical name or name component of any kind. Any element which is a member of the att.naming class may use the attribute nymRef to indicate the nym with which it corresponds. Thus, given the following nym for the name Antony : The person identified by this particular Tony may however be indicated independently using the ref attribute, either on the forename or on the whole name component: The nym element may be thought of as providing a specialized kind of dictionary entry. Like a dictionary entry, it may contain any element from the model.entryPart class, such as form , etym , etc. For example, we may show that the canonical form for a given nym has two orthographic variants in this way: Because a schema intending to make use of the nym or listNym element must include the dictionaries module as well as the namesdates module, many other elements are available in addition to form . For example, to provide a more complex etymological decomposition of a name, we might use the existing etym element, as follows: Where it is necessary to mark the substructure of nyms, this may be done by seg elements within the form : Alternatively, each of the constituents of Bogomil might be regarded as a nym in its own right: The nym element may also combine a number of other nym elements together, where it is intended to show that they are all regarded as variations on the same root. Thus the different forms of the name John, all being derived from the same root, may be represented as a hierarchic structure like this: The nym element may be used for components of geographical or organizational names as well. For example: As noted above, use of these elements implies that both the dictionaries and the namesdates modules are included in a schema. 13.4 Dates The following elements for the encoding of dates and times were introduced in section 3.6.4 Dates and Times : < date > contains a date in any format. < time > contains a phrase defining a time of day in any format. The current module namesdates provides a mechanism for more detailed encoding of relative dates and times. A relative temporal expression describes a date or time with reference to some other (absolute) temporal expression, and thus may contain an offset element in addition to one or more date or time elements: < offset > marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression. As members of the att.datable and att.duration classes, which in turn are members of att.datable.w3c and att.duration.w3c respectively, the date and time elements share the following attributes: < att.datable.w3c > provides attributes for normalization of elements that contain datable events conforming to the W3C XML Schema Part 2: Datatypes Second Edition . @when supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd. < att.duration.w3c > provides attributes for recording normalized temporal durations. @dur indicates the length of this element in time. indicates the length of this element in time. 13.4.1 Relative Dates and Times As noted above, relative dates and times such as in the Two Hundredth and First Year of the Republic , twenty minutes before noon , and, more ambiguously, after the lamented death of the Doctor or an hour after the game have two distinct components. As well as the absolute temporal expression or event to which reference is made (e.g. noon , the game , the death of the Doctor , [the foundation of] the Republic ), they also contain a description of the distance between the time or date which is indicated and the referent expression (e.g. the Two Hundredth and First Year , twenty minutes , an hour ); and (optionally) an offset describing the direction of the distance between the time or date indicated and the referent expression (e.g. of implying after, before , after ). The distance component of a relative temporal expression may be encoded as a temporal element in its own right using either date or time , or with the more generic measure element. A special element, offset , is provided by this module for encoding the offset component of a relative temporal expression. The absolute temporal expression contained within the relative expression may be encoded with a date or time element; in turn, those elements may of course be relative, and thus contain date or time elements within themselves. This allows for deeply nested structures such as the third Sunday after the first Monday before Lammastide in the fifth year of the King's second marriage ... but so does natural language. In the following examples, the when and dur attributes have been used to simplify processing of variant forms of expression: In the following example, a nested date element is used to show that my birthday and the cited date are parts of the same temporal expression, and hence to disambiguate the phrase A week before my birthday on 9th December : Where more complex or ambiguous expressions are involved, and where it is desirable to make more explicit the interpretive processes required, the feature structure notation described in chapter 18 Feature Structures may be used. Consider, for example, the following temporal expression which occurs in the Scottish Temperance Review of August 1850, referring to the summer holiday known in Glasgow simply as the Fair : For the definition of the ana attribute, see chapter 17 Simple Analytic Mechanisms (in particular 17.2 Global Attributes for Simple Analyses ). It is used here to link the temporal phrase with an interpretation of it. Like most traditional fairs and market days, the Glasgow Fair was established by local custom and could vary from year to year. Consequently, in order to provide such an interpretation, it is necessary to draw upon additional information which may or may not be located in the particular text in question. In this case, it is necessary at least to know the spatial and temporal context (year and place) of the fair referred to. These and other features required for the analysis of this particular temporal expression may be combined together as one feature structure of type date-analysis: 13.4.2 Absolute Dates and Times The following are examples of absolute temporal expressions. It may be useful to categorize a temporal expression which is given in terms of a named event, such as a public holiday, or a named time such as tea time or matins : Absolute temporal expressions denoting times which are given in terms of seconds, minutes, hours, or of well-defined events (e.g. noon , sunset ) may similarly be represented using the time element. 13.4.3 More Expressive Normalizations The attributes for normalization of dates and times so far described use a standard format defined by XML Schema Part 2: Datatypes Second Edition . This format is widely accepted and has significant software support. It is essentially a profile of ISO 8601 Data elements and interchange formats — Information interchange — Representation of dates and times . The full ISO standard provides formats not available in the W3C recommendation, for example, the capability to refer to a date by its ordinal date or week date, or to refer to a century. It also provides ways of indicating duration and range. When this module is included in a schema, the following additional attributes are provided: < att.datable.iso > provides attributes for normalization of elements that contain datable events using the ISO 8601:2004 standard. @when-iso supplies the value of a date or time in a standard form. @notBefore-iso specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. @notAfter-iso specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. @from-iso indicates the starting point of the period in standard form. @to-iso indicates the ending point of the period in standard form. supplies the value of a date or time in a standard form. specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. indicates the starting point of the period in standard form. indicates the ending point of the period in standard form. < att.duration.iso > provides attributes for recording normalized temporal durations. @dur-iso indicates the length of this element in time. indicates the length of this element in time. 13.4.4 Using Non-Gregorian Calendars All date-related encoding described above makes use of the Gregorian calendar, on which both the ISO and W3C datetime formats are based. However, historical texts often pre-date the invention of the Gregorian calendar in the 16th century, or its adoption in Europe over the following centuries, and many other calendars are used in texts from other cultures and contexts. Non-Gregorian dates can be encoded using methods described below. First, a Calendar Description element needs to be supplied in the teiHeader as described in 2.4.5 Calendar Description : The following attributes can now be used to encode dates using this calendar: < att.datable > provides attributes for normalization of elements that contain dates, times, or datable events. @calendar indicates one or more systems or calendars to which the date represented by the content of this element belongs. indicates one or more systems or calendars to which the date represented by the content of this element belongs. < att.datable.custom > provides attributes for normalization of elements that contain datable events to a custom dating system (i.e. other than the Gregorian used by W3 and ISO). @when-custom supplies the value of a date or time in some custom standard form. @notBefore-custom specifies the earliest possible date for the event in some custom standard form. @notAfter-custom specifies the latest possible date for the event in some custom standard form. @from-custom indicates the starting point of the period in some custom standard form. @to-custom indicates the ending point of the period in some custom standard form. @datingMethod supplies a pointer to a calendar element or other means of interpreting the values of the custom dating attributes. supplies the value of a date or time in some custom standard form. specifies the earliest possible date for the event in some custom standard form. specifies the latest possible date for the event in some custom standard form. indicates the starting point of the period in some custom standard form. indicates the ending point of the period in some custom standard form. supplies a pointer to a calendar element or other means of interpreting the values of the custom dating attributes. The calendar attribute is used to specify the calendar used in the text content of the dating element which bears it. For reasons of consistency and computability, it is often useful to complement the content of an element with attributes such as when, notBefore, notAfter, etc. For dates expressed in a non-Gregorian calendar, such normalizations may also be expressed in terms of the non-Gregorian calendar specified by the datingMethod attribute. The attributes when-custom, notBefore-custom, from-custom, etc. are provided for this purpose; the datingMethod attribute is used to identify the calendar used in the value of these attributes: Custom dating attributes can be combined with any of the standard dating attributes in order to provide a standardized Gregorian version of a non-Gregorian date. We might enhance the preceding example with the addition of when, providing the Gregorian calendar equivalent of the Julian date: 13.5 Module for Names and Dates The module described in this chapter makes available the following components: Names, dates, persons and places Names and dates The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">13 Names, Dates, People, and Places</span>"}
{"link":"p5.xml?id=FT","tag":"guidelines","content":"14 Tables, Formulæ, Graphics, and Notated Music Many documents, both historical and contemporary, include not only text, but also graphics, artwork, and other images. Although some types of images can be represented directly with markup, it is more common practice to include such information by using a reference to an external entity (typically a URL) encoded in a suitable graphical notation. In addition to graphic images, documents often contain material presented in graphical or tabular format. In such materials, details of layout and presentation may also be of comparatively greater significance or complexity than they are for running text. Indeed, it may often be difficult to make a clear distinction between details relating purely to the rendition of information and those relating to the information itself. Documents may also contain mathematical formulæ or expressions in other formulaic notations, for which no notation is defined in these Guidelines. Finally, documents may contain musical notation, embedded in a manner similar to tables, graphs, and formulæ. These areas (graphics, tabular material, and mathematical or other formulæ, and music) have in common that they have received considerable attention from many other standards bodies or similar professional groups. In part because of this, they may frequently be most conveniently encoded and processed using some notation not defined by these Guidelines. For these reasons, and others, we consider tables, formulæ, graphics, and notated music together in this chapter. As with text markup in general, many incompatible formats have been proposed for the representation of graphics, formulæ, and tables in electronic form. Unfortunately, no single format as effective as XML in the domain of text has yet emerged for their interchange, to some extent because of the difficulty of representing the information these data formats convey independently of the way it is rendered. The module defined by this chapter defines special purpose container elements that can be used to encapsulate occurrences of such data within a TEI-conformant document in a portable way. Specific recommendations for the encoding of tables are provided in section 14.1 Tables , recommendations for mathematical or other formulæ in section 14.2 Formulæ and Mathematical Expressions , and for the encoding of musical notation in section 14.3 Notated Music in Written Text . Specific recommendations for the encoding of graphic figures may be found in section 14.4 Specific Elements for Graphic Images . The rest of the chapter is devoted to general problems of encoding graphic information. There is at the time of writing no consensus on formats for graphical images, and such formats vary in many ways. We therefore provide (in section 14.5 Overview of Basic Graphics Concepts ) a brief discussion of the ways in which images may be represented, and (in section 14.6 Graphic Image Formats ) a list of formal names for those representations most popular at this time. Each one includes a very brief description. These Guidelines recommend a few particular representations as being the most widely supported and understood. 14.1 Tables A table is the least graphic of the elements discussed in this chapter. Almost any text structure can be presented as a series of rows and columns: one might, for example, choose to show a glossary or other form of list in tabular form, without necessarily regarding it as a table. In such cases, the global rend attribute is an appropriate way of indicating that some element is being presented in tabular format; similarly, the global style attribute coud be used to provide an appropriate display property in CSS. When tabular presentation is regarded as of less intrinsic importance, it is correspondingly simpler to encode descriptive or functional information about the contents of the table, for example to identify one cell as containing a name and another as containing a date, though the two methods may be combined. When, however, particular elements are required to encode the tabular arrangement itself, then one or other of the various table schemas now available may be preferable. The schemas in common use generally view a table as a special text element, made up of row elements, themselves composed of cells. Table cells generally appear in row-major order, with the first row from left to right, then the second row, and so on. Details of appearance such as column widths, border lines, and alignment are generally encoded by numerous attributes. Beyond this, however, such schemas differ greatly. This section begins by describing a table schema of this kind; a brief summary of some other widely available table schemas is also provided in section 14.1.2 Other Table Schemas . 14.1.1 TEI Tables For encoding tables of low to moderate complexity, these Guidelines provide the following special purpose elements: < table > contains text displayed in tabular form, in rows and columns. < row > contains one row of a table. < cell > contains one cell of a table. The table element is defined as a member of the class model.inter ; it may therefore appear both within other components (such as paragraphs), or between them, provided that the module defined in this chapter has been enabled, as described at the beginning of this chapter. It is to a large extent arbitrary whether a table should be regarded as a series of rows or as a series of columns. For compatibility with currently available systems, however, these Guidelines require a row-by-row description of a table. It is also possible to describe a table simply as a series of cells; this may be useful for tabular material which is not presented as a simple matrix. The attributes rows and cols may be used to indicate the size of a table, or to indicate that a particular cell or row of a table spans more than one row or column. For both tables and cells, rows and columns are always given in top-to-bottom, left-to-right order, although formatting properties such as those provided by CSS may be used to specify that they should be displayed differently. These Guidelines do not require that the size of a table be specified; for most formatting and many other applications, it will be necessary to process the whole table in two passes in any case. Where cells span more than one column or row, the encoder must determine whether this is a purely presentational effect (in which case the rend attribute may be more appropriate), whether the part of the table affected would be better treated as a nested table, or whether to use the spanning attributes listed above. The role attribute may be used to categorize a single cell, or set a default for all the cells in a given row. The present Guidelines distinguish the roles of label and data only, but the encoder may define other roles, such as derived , numeric , etc., as appropriate. These three attributes are provided by the attribute class att.tableDecoration of which both cell and row are members; see further 1.3.1 Attribute Classes . The following simple example demonstrates how the data presented as a labelled list in section 3.8 Lists might be represented by an encoder wishing to preserve its original appearance as a table: Note that this encoding makes no attempt to represent the full significance of the ditto cells above; these might be regarded as simple links between the cells containing them and that to which they refer, or as virtual copies of it. For ways of representing either interpretation, see chapter 16 Linking, Segmentation, and Alignment . The following example demonstrates how a simple statistical table may be represented using this scheme: Note the use of a blank cell in the first row to ensure that the column labels are correctly aligned with the data. Again, this encoding does not explicitly represent the alignment between column and row labels and the data to which they apply. Where the primary emphasis of an encoding is on the semantic content of a table, a more explicit mechanism for the representation of structured information such as that provided by the feature structure mechanism described in chapter 18 Feature Structures may be preferred. Alternatively, the general purpose linkage and alignment mechanisms described in chapter 16 Linking, Segmentation, and Alignment may also be applied to individual cells of a table. The content of a table cell need not be simply character data. It may also contain any sequence of the phrase-level elements described in chapter 3 Elements Available in All TEI Documents , thus allowing for the encoding of potentially more useful semantic information, as in the following example, where the fact that one cell contains a number and the other contains a place name has been explicitly recorded: The use of semantically marked elements within a cell enables the encoder to convey something about the nature and significance of the information, rather than merely suggesting how to display it in rows and columns. Alternatively, the role attribute might be used to convey such information: The content of table elements is not limited to head and row . Milestone elements such as cb and lb allow breaks to be signalled inside tables; figure provides an option for including data which is not amenable to normal row and cell analysis; and other elements such as epigraph and trailer provide options for including text which is clearly part of the table, but outside the actual tabular layout. This example shows the use of trailer : 14.1.2 Other Table Schemas Many authoring systems include built-in support for their own or for public table schemas. These provide an enhanced user interface and good formatting capabilities, but are often product-specific, despite their use of a XML markup language. The DTD developed by the Association of American Publishers (AAP) and standardized in ANSI Z39.59 provided a very simple encoding for correspondingly simple tables. This has been further developed, together with the table DTD documented in ISO Technical Report 9537, and now forms part of ISO 12083. The TEI table model described above has functionality very similar to that defined by ISO 12083. For more complex tables, the most effective publicly-available DTD is probably that developed by the US Department of Defense CALS project. This supports vertical and horizontal spanning and various kinds of text rotation and justification within cells and is also directly supported by a number of existing XML software systems. The CALS table model is much too complex to describe fully here; for historical background see http://archive.is/gGzsZ ; for more recent simplifications of it and current implementations see https://www.oasis-open.org/specs/tablemodels.php . As with any other XML vocabulary, the XML version of the CALS model may readily be included in a TEI schema, using the techniques described in 23.3 Customization . The XHTML table model ( 1 ) is based on the HTML table model ( 1 ). Both models support arrangement of arbitrary data into rows and columns of cells. Table rows and columns may be grouped to convey additional structural information and may be rendered by user agents in ways that emphasize this structure. Support for incremental rendering of tables and for rendering on non-visual user agents is also available. Special elements and attributes are provided to associate metadata with tables. They indicate the table's purpose, or are for the benefit of people using speech or Braille-based user agents. Tables are not recommended for use purely as a means to lay out document content, as this leads to many accessibility problems (see further https://www.w3.org/TR/WCAG10-HTML-TECHS/#tables ). Stylesheets provide a far more effective means of controlling layout and other visual characteristics in both HTML and XML documents. 14.2 Formulæ and Mathematical Expressions Mathematical and chemical formulæ pose problems similar to those posed by tables in that rendition may be of great significance and hard to disentangle from content. They also require access to a wide range of special characters, for most of which standard entity names already exist in the documented ISO entity sets (see further chapters 6 Languages and Character Sets and 5 Characters, Glyphs, and Writing Modes ). Formulæ and tables are also similar in that well-researched and detailed DTD fragments have already been developed for them independently of the TEI. They differ in that (for mathematics at least) there also exists a richly detailed text-based but non-XML notation which is very widely used: this is the TeX system, and the sets of descriptive macros developed for it such as LaTeX, AMS-TeX, and AMS-LaTeX. The AAP and ISO standards mentioned in section 14.1 Tables above both provide DTDs for equations as well as for tables, which now form part of ISO 12083. The European Mathematical Trust, an organization set up specifically to enhance research support for European mathematicians, has also defined a general purpose mathematical DTD known as EuroMath ( http://xml.coverpages.org/emt-ukc-index.html ), for which it provides both software and services. Most if not all of the functionality provided by these DTDs can now be found in the OpenMath and MathML XML-based systems briefly described below. As with tables, in all the XML solutions a tension exists between the need to encode the way a formula is written (its appearance) and the need to represent its semantics. If the object of the encoding is purely to act as an interchange format among different formatting programs, then there is no need to represent the mathematical meaning of an expression. If however the object is to use the encoding as input to an algebraic manipulation system (such as Mathematica or Maple) or a database system, clearly simply representing superscripts and subscripts will be inadequate. The formula element provided by these Guidelines makes no attempt to represent the internal structure of formulæ. < formula > contains a mathematical or other formula. By default, a formula is assumed to contain character data which is not validated in any way. The notation used may however be named, using the notation attribute provided by the att.notated class. Alternatively, if more detailed markup is desired, the content of the formula element may be redefined to include elements defined by some other XML vocabulary, such as that of ISO 12083, or to use elements from the OpenMath or MathML schemas. When the content of a formula element is not expressed in XML the notation used should always be specified using the notation attribute as above, and in the following longer example: Mathematical Markup Language (MathML) ( 1 ) is a vocabulary for describing mathematical notation, capturing both its structure and content. It provides two types of markup: Presentation Markup, which captures the notational structure of an expression and could be seen as the TeX for the Web and Content Markup, which captures the mathematical structure of an expression. Most of its content elements correspond with the range of operators, relations, and named functions typically found at the high-school level of mathematics. The tortoise example given above in TeX can be re-expressed in MathML as MathML 2.0 provides support for a Semantic Math-Web, XML namespaces, and other current XML standards, such as XML DOM, OMG IDL, ECMAScript, and Java. It also provides a modularized version of the MathML DTD so that MathML fragments embedded in XHTML 1.1 documents can be correctly validated. The OpenMath ( https://www.openmath.org/standard/ ) project is coordinated by the OpenMath Society ( https://www.openmath.org/ ) and funded by the European Commission under the Esprit Multimedia Standards Initiative that commenced in September 1997. It is likely to become a key standard for communicating semantically rich representations of mathematical objects both on and off the Web in a platform-independent manner. The OpenMath Standard ( https://www.openmath.org/standard/om20-2004-06-30/ ) consists of specifications for OpenMath objects, representing the structure of formulæ ( https://www.openmath.org/standard/om20-2004-06-30/omstd20html-2.xml#cha_obj ); Content Dictionaries, providing semantic context ( https://www.openmath.org/standard/om20-2004-06-30/omstd20html-4.xml#cha_cd ); Encodings, both binary ( https://www.openmath.org/standard/om20-2004-06-30/omstd20html-3.xml#sec_binary ) and XML ( https://www.openmath.org/standard/om20-2004-06-30/omstd20html-3.xml#sec_xml ). OpenMath and MathML have certain common aspects. They both use prefix operators, both are XML-based and they both construct their objects by applying certain rules recursively. Such similarities facilitate mapping between the two standards. There are also some key differences between MathML and OpenMath. OpenMath does not provide support for presentation of mathematical objects and its scope of semantically-oriented elements is much broader that of MathML, with the expressive power to cover virtually all areas of computational mathematics. In fact, a particular set of Content Dictionaries, the MathML CD Group, covers the same areas of mathematics as the Content Markup elements of MathML 2.0. Finally, OMDoc ( http://omdoc.org/ ) is an extension of the OpenMath standard that supplies markup for structures such as axioms, theorems, proofs, definitions, texts (mixing formal content with mathematical text). In-line versus block placement for an equation can be distinguished if desired, via the global rend attribute. The global n and xml:id attributes may also be used to label or identify the formula, as in the following example: 14.3 Notated Music in Written Text Music, like many other art forms, is often mentioned, discussed and described in writings of various kinds. This applies to both historical and contemporary documents, even though methods of notating music have changed considerably in western history. In most cases, music notation enters the text flow in a way similar to figures, images, or graphs. On other occasions, elements of music notation are treated as inline characters in running text. notatedMusic provides a way to signal the presence of music notation in text, but defer to other representations, which are not covered by the TEI guidelines, to describe the music notation itself. In fact several commercial, academic, and standard bodies have developed digital representations of music notation. Given the topic's complexity, these representations often focus on different aspects and adopt different methodologies. Therefore, notatedMusic only defines a container element to encode the occurrence of music notation and allows linking to the data format preferred by the encoder. (Note: notatedMusic is not the same as musicNotation , a metadata element, which is used to describe musical notation that appears in a manuscript. See 10 Manuscript Description .) The following elements can be used for encoding music notation in text: < notatedMusic > encodes the presence of music notation in a text < ptr > defines a pointer to another location. < desc > contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented. < graphic > indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. < binaryObject > provides encoded binary data representing an inline graphic, audio, video or other object. notatedMusic groups elements representing or containing music notation. ptr can be used to indicate the location of a representation of the music notation. mimeType supplies the MIME type of the data format, when available. mimeType supplies the MIME type of the data format, when available. desc can be used to give a prose description of the notated music. graphic can be used to indicate the location of a graphical representation of the music notation. binaryObject provides encoded binary data which constitutes another representation of the music notation (e.g. audio). The notatedMusic element may contain a textual description and pointers to various representations of the music notation in different media. An external representation of the notated music is specified using the ptr element, whose target attribute provides its electronically-accessible location. The attribute mimeType supplies the MIME type of the data format when available. For example: A textual description of the notation can be provided within the desc element; alternatively, a label may be supplied. For example: It is possible to link to any kind of music notation data format. However, when a MIME type is not available, it is recommended that the format be specified in the description. See the following examples. MIME type available: MIME type not available: Application format: It is possible to specify the location of digital objects representing the notated music in other media such as images or audio-visual files. The interpretation of the correspondence between the notated music and these digital objects is not encoded explicitly. We recommend the use of graphic and binaryObject mainly as a fallback mechanism when the notated music format is not displayable by the application using the encoding. The alignment of encoded notated music, images carrying the notation, and audio files is a complex matter for which we refer the reader to other formats and specifications such as MPEG-SMR . It is also recommended, when useful, to embed XML-based music notation formats, such as the Music Encoding Initiative format as content of notatedMusic . This must be done by means of customization. In modern printing, music notation positioned between blocks of text for illustrative purposes is usually referred to as a figure or example . In this cases, we recommend the inclusion of notatedMusic in figure in order to encode possible captions and headers. For example: 14.4 Specific Elements for Graphic Images The following special purpose elements are used to indicate the presence of graphic images within a document: < figure > groups elements representing or containing graphic information such as an illustration, formula, or figure. < graphic > indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. < binaryObject > provides encoded binary data representing an inline graphic, audio, video or other object. < figDesc > contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. The graphic and binaryObject elements form part of the common core module, and are discussed in section 3.10 Graphics and Other Non-textual Components . The figure element is used to contain images, captions, and textual descriptions of the pictures. The images themselves are specified using the graphic element, whose url attribute provides the location of an image. For example: Three kinds of content may be supplied inside a figure element: the element head may be used to transcribe (or supply) a descriptive heading or title for the graphic itself as in this example: Figures are often accompanied not only by a title or heading (a caption), but by a paragraph or so of commentary (a legend) following the caption. One or more p or ab elements may be used to transcribe any commentary on the figure in the source: Where the graphic itself contains large amounts of text, perhaps with a complex structure, and perhaps difficult to distinguish from the graphic, the encoder should choose whether to regard the graphic as containing the text (in which case, a nested floatingText element may be included within the figure element) or to regard the enclosed text as being a separate division of the text element in which the graphic appears. In this latter case, an appropriate div or div1 (etc.) element may be used for the text represented within the graphic, and the figure element embedded within it. The choice will depend to a large degree on the encoder's understanding of the relationship between the graphic and the surrounding text. A figure which is internally divided, or contains sub-figures, may be encoded with nested figure elements, as in the following example. Like any other element in the TEI scheme, figures may be given identifiers so that they can be aligned with other elements, and linked to or from them, as described in chapter 16 Linking, Segmentation, and Alignment . Some common examples are discussed briefly here; full information is provided in that chapter. It is often desirable to maintain two versions of an image in an electronic file: one a low resolution or thumbnail version which, when selected by the user, causes the other, high resolution, version to be accessed. In TEI terms, the thumbnail image acts as a reference to the other. Supposing that a thumbnail version of the figure discussed above is available as fig1th.png , we might embed a reference to the image using the simple ref element discussed in section 3.7 Simple Links and Cross-References : Another common requirement is to associate part or the whole of an image with a textual element not necessarily contiguous to it in the text; this is sometimes known as a callout . When the module for transcription is included in a schema, specific attributes for parts of a text and parts (or all) of a digital image are available; these are discussed in 11.1 Digital Facsimiles . In addition, chapter 16 Linking, Segmentation, and Alignment may be consulted for other mechanisms available for this purpose. The following example assumes that we wish to associate one portion of the image held as fig1 with chapter two of some text, and another portion of it with chapter three. The application may be thought of as a hypertext browser in which the user selects from a graphic image which part of a text to read next, but the mechanism is independent of this particular application. The first requirement is some way of identifying and hence pointing to sub-parts of a graphic image. This may be done by pointing into an XML graphic representation, for example an SVG file. Thus These ptr elements identify two areas within the image Fig1 by pointing at elements inside the XML file Fig1.svg , which contains the following. The next requirement is some way of identifying the parts of the document to which a link is to be made. The most obvious way of doing this is to use the global xml:id attribute: Now, all that is needed to linking these areas to the relevant chapters is a linkGrp element, as described in section 16.1 Links : In this example, the SVG representation of the graphic is stored externally to the TEI document and linked by means of a pointer. It is also possible to embed the SVG representation directly within the TEI by extending the content model of the figure element to permit an element svg from the SVG namespace. Like other customizations of the TEI scheme, this is carried out using the techniques documented in section 1.2 Defining a TEI Schema ; further examples are provided in chapter 16 Linking, Segmentation, and Alignment . 14.5 Overview of Basic Graphics Concepts The first major distinction in graphic representation is that between raster graphics and vector graphics. A raster image is a list of points, or dots. Scanners, fax machines, and other simple devices easily produce digital raster images, and such images are therefore quite common. A vector image , in contrast, is a list of geometrical objects, such as lines, circles, arcs, or even cubes. These are much more difficult to produce, and so are mainly encountered as the output of sophisticated systems such as architectural and engineering CAD programs. Raster images are difficult to modify because by definition they only encode single points: a line, for example, cannot grow or shrink as such, since it is not identified as such. Only its component parts are identified, and only they can be manipulated. Therefore the resolution or dot-size of a raster image is important, which is not the case with vector images. It is also far more difficult to convert raster images to vector images than to perform the opposite conversion. Raster images generally require more storage space than vector images, and a wide variety of methods exists for compressing them; the variation in these methods leads to corresponding variations in representations for storage and transmission of raster images. Motion video usually consists of a long series of raster images. Data compression is even more effective on video than on single raster images (mainly owing to redundancy which arises from the usual similarity of adjacent frames). Notations for representing full-motion video are hotly debated at this time, and any user of these Guidelines would do well to obtain up-to-date expert advice before undertaking a project using them. The compression methods used with any of these image types may be lossy or lossless. Methods for lossy compression save space by discarding a small portion of the image's detail, such as fine distinctions of shading. When decompressed, therefore, such an image will be only a close approximation of the original. In contrast, lossless compression guarantees that the exact uncompressed image will be reproducible from the compressed form: only truly redundant information is removed. In general, therefore, lossless compression does not save quite so much space as lossy compression, though it does guarantee fidelity to the original uncompressed image. Raster images may be characterized by their resolution , which is the number of dots per inch used to represent the image. Doubling the resolution will give a more precise image, but also quadruple the storage requirement (before compression), and affect processing time for any operations to be performed, such as displaying an image for a reader. Motion video also has resolution in time: the number of frames to be shown per second. Encoders should consider carefully what resolution(s) and frame rate(s) to use for particular applications; these Guidelines express no recommendation in this matter, save the universal ones of consistency and documentation. Within any image, it is typical to refer to locations via Cartesian coordinate axes: values for x, y, and sometimes z and/or time. However, graphic notations vary in whether coordinates count from left-to-right and top-to-bottom, or another way. They also vary in whether coordinates are considered real (inches, millimeters, and so on), or virtual (dots). These Guidelines do not recommend any of these methods over another, but all decisions made should be applied consistently, and documented in the encodingDesc section of the TEI header. 1 Methods of aligning images and text are discussed in 11.1 Digital Facsimiles . The chromatic values of an image may be rendered in many different ways. In monochrome images every displayed point is either black or white. In grayscale images, each point is rendered in some shade of gray, the number of shades varying from system to system. In true polychrome images, points are rendered in different hues, again with varying limitations affecting the number of distinct shades and the means by which they are displayed. 14.6 Graphic Image Formats As noted above, there exists a wide variety of different graphics formats, and the following list is in no way exhaustive. Moreover, inclusion of any format in this list should not be taken as indicating endorsement by the TEI of this format or any products associated with it. Some of the formats listed here are proprietary to a greater or lesser extent and cannot therefore be regarded as standards in any meaningful sense. They are however widely used by many different vendors. The following formats are widely used at the present time, and likely to remain supported by more than one vendor's software: BMP: Microsoft bitmap format CGM: Computer Graphics Metafile GIF: Graphics Interchange Format JPEG: Joint Photographic Expert Group PBM: Portable Bit Map PCX: IBM PC raster format PICT: Macintosh drawing format PNG: Portable Network Graphics format Photo-CD: Kodak Photo Compact Disk format QuickTime: Apple real-time image system SMIL: Synchronized Multimedia Integration Language format SVG: Scalable Vector Graphics format TIFF: Tagged Image File Format Brief descriptions of all the above are given below. Where possible, current addresses or other contact information are shown for the originator of each format. Many formal standards, especially those promulgated by ISO and many related national organizations (ANSI, DIN, BSI, and many more), are available from those national organizations. Addresses may be found in any standard organizational directory for the country in question. 14.6.1 Vector Graphic Formats This vector graphics format is specified by an ISO standard, ISO 8632:1987, amended in 1990. It defines binary, character, and plain-text encodings; the non-binary forms are safer for blind interchange, especially over networks. Documentation on CGM is available from ISO and from its member national bodies such as AFNOR, ANSI, BSI, DIN, JIS, etc. SVG is a language for describing two-dimensional vector and mixed vector or raster graphics in XML. It is defined by the Scalable Vector Graphics (SVG) 1.0 Specification, W3C Recommendation, 04 September 2001, and is available at https://www.w3.org/TR/2001/REC-SVG-20010904/ . This format is universally supported on Macintosh™ systems, and readable by a limited range of software for other systems. Documentation is available from Apple Computer Company, Cupertino, California USA. 14.6.2 Raster Graphic Formats PNG is a non-proprietary raster format currently widely available. It provides an extensible file format for the lossless, portable, well-compressed storage of raster images. Indexed-color, grayscale, and truecolor images are supported, plus an optional alpha channel. Sample depths range from 1 to 16 bits. It is defined by IETF RFC 2083, March 1997. Currently the most widely supported raster image format, especially for black and white images, TIFF is also one of the few formats commonly supported on more than one operating system. The drawback to TIFF is that it actually is a wrapper for several formats, and some TIFF-supporting software does not support all variants. TIFF files may use LZW, CCITT Group 4, or PackBits compression methods, or may use no compression at all. Also, TIFF files may be monochrome, grayscale, or polychromatic. All such options should be specified in prose at the end of the encodingDesc section of the TEI header for any document including TIFF images. TIFF is owned by Aldus Corporation. Documentation on TIFF is available from them at Craigcook Castle, Craigcook Road, Edinburgh EH4 3UH, Scotland, or 411 First Avenue South, Seattle, Washington 98104 USA. Raster images are widely available in this form, which was created by CompuServe Information Services, but has by now been implemented for many other systems as well. Documentation on GIF is copyright by, and is available from, CompuServe Incorporated, Graphics Technology Department, 5000 Arlington Center Boulevard, Columbus, Ohio 43220 USA. PBM files are easy to process, eschewing all compression in favor of transparency of file format. PBM files can, of course, be compressed by generic file-compression tools for storage and transfer. Public domain software exists which will convert many other formats to and from PBM. Documentation on PBM is copyright by Jeff Poskanzer, and is available widely on the Internet. This format is used by most IBM PC paint programs, and supports both monochrome and polychromatic images. Documentation is available from ZSoft Corporation, Technical Support Department, ATTN: Technical Reference Manual, 450 Franklin Rd. Suite 100, Marietta, GA 30067 USA. This format is the standard raster format for computer using Microsoft Windows™ or Presentation Manager™. Documentation is available from Microsoft Corporation. 14.6.3 Photographic and Motion Video Formats This standard is sponsored by CCITT and by ISO. It is ISO/IEC Draft International Standard 10918-1, and CCITT T.81. It handles monochrome and polychromatic images with a variety of compression techniques. JPEG per se, like CCITT Group IV, must be encapsulated before transmission; this can be done via TIFF, or via the JPEG File Interchange Format (JFIF), as commonly done for Internet delivery. QuickTime is a proprietary method introduced by Apple Computer Company to synchronize the display of various data. The data can include frames of video, sound, lighting control mechanisms, and other things. Viewers for QuickTime productions are available for Apple and other computers. Further information is available from Apple Computer Incorporated, 10201 North de Anza Boulevard MS 23AQ, Cupertino, California 95014 USA. This format was introduced by Kodak for rasterizing photographs and storing them on CD-ROMs (about one hundred 35mm file images fit on one disk), for display on televisions or CD-I systems. Information on Photo-CD is available from Kodak Limited, Research and Development, Headstone Drive, Harrow, Middlesex HA1 4TY, UK. SMIL is a W3C Recommendation which supports the integration of independent multimedia objects into a synchronized multimedia presentation. It provides multimedia authors with easily-defined basic timing relationships, fine-tuned synchronization, spatial layout, direct inclusion of non-text and non-image media objects, hyperlink support for time-based media, and adaptiveness to varying user and system characteristics. SMIL 1.0 ( https://www.w3.org/TR/REC-smil/ ) became a W3C Recommendation on June 15, 1998, and was further developed in SMIL 2.0. SMIL 2.0 adds native support for transitions, animation, event-based interaction, extended layout facilities, and more sophisticated timing and synchronization primitives to the SMIL 1.0 language. It also allows reuse of SMIL syntax and semantics in other XML-based languages, in particular those who need to represent timing and synchronization. For example, SMIL 2.0 components are used for integrating timing into XHTML Document Types and into SVG. SMIL 2.0 also provides recommendations for Document Types based on SMIL 2.0 Modules ( https://www.w3.org/TR/2005/REC-SMIL2-20050107/smil-modules.html ). One such Document Type is the SMIL 2.0 Language Profile ( https://www.w3.org/TR/2005/REC-SMIL2-20050107/smil20-profile.html ). It contains support for all of the major SMIL 2.0 features including animation, content control, layout, linking, media object, meta-information, structure, timing, and transition effects and is designed for Web clients that support direct playback from SMIL 2.0 markup. SMIL 2.0 ( https://www.w3.org/TR/2001/REC-smil20-20010807/ ) became a W3C Recommendation on August 7, 2001, becoming the first vocabulary to provide XML Schema support and to have reached such status. As noted above, the reader will encounter many, many other graphics formats. 14.7 Module for Tables, Formulæ, Notated Music, and Graphics The module described in this chapter provides the following features: Tables, Formulæ, Notated Music, Figures Tables, formulæ, notated music, and figures The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . ","title":"<span class=\"tei-div7 breadcrumb\">14 Tables, Formulæ, Graphics, and Notated Music</span>"}
{"link":"p5.xml?id=CC","tag":"guidelines","content":"15 Language Corpora The term language corpus is used to mean a number of rather different things. It may refer simply to any collection of linguistic data (for example, written, spoken, signed, or multimodal), although many practitioners prefer to reserve it for collections which have been organized or collected with a particular end in view, generally to characterize a particular state or variety of one or more languages. Because opinions as to the best method of achieving this goal differ, various subcategories of corpora have also been identified. For our purposes however, the distinguishing characteristic of a corpus is that its components have been selected or structured according to some conscious set of design criteria. These design criteria may be very simple and undemanding, or very sophisticated. A corpus may be intended to represent (in the statistical sense) a particular linguistic variety or sublanguage, or it may be intended to represent all aspects of some assumed core language. A corpus may be made up of whole texts or of fragments or text samples. It may be a closed corpus, or an open or monitor corpus, the composition of which may change over time. However, since an open corpus is of necessity finite at any particular point in time, the only likely effect of its expansibility from the encoding point of view may be some increased difficulty in maintaining consistent encoding practices (see further section 15.5 Recommendations for the Encoding of Large Corpora ). For simplicity, therefore, our discussion largely concerns ways of encoding closed corpora, regarded as single but composite texts. Language corpora are regarded by these Guidelines as composite texts rather than unitary texts (on this distinction, see chapter 4 Default Text Structure ). This is because although each discrete sample of language in a corpus clearly has a claim to be considered as a text in its own right, it is also regarded as a subdivision of some larger object, if only for convenience of analysis. Corpora share a number of characteristics with other types of composite texts, including anthologies and collections. Most notably, different components of composite texts may exhibit different structural properties (for example, some may be composed of verse, and others of prose), thus potentially requiring elements from different TEI modules. Aside from these high-level structural differences, and possibly differences of scale, the encoding of language corpora and the encoding of individual texts present identical sets of problems. Any of the encoding techniques and elements presented in other chapters of these Guidelines may therefore prove relevant to some aspect of corpus encoding and may be used in corpora. Therefore, we do not repeat here the discussion of such fundamental matters as the representation of multiple character sets (see chapter 6 Languages and Character Sets ); nor do we attempt to summarize the variety of elements provided for encoding basic structural features such as quoted or highlighted phrases, cross-references, lists, notes, editorial changes and reference systems (see chapter 3 Elements Available in All TEI Documents ). In addition to these general purpose elements, these Guidelines offer a range of more specialized sets of tags which may be of use in certain specialized corpora, for example those consisting primarily of verse (chapter 6 Verse ), drama (chapter 7 Performance Texts ), transcriptions of spoken text (chapter 8 Transcriptions of Speech ), etc. Chapter 1 The TEI Infrastructure should be reviewed for details of how these and other components of these Guidelines should be tailored to create a TEI customization appropriate to a given application. In sum, it should not be assumed that only the matters specifically addressed in this chapter are of importance for corpus creators. This chapter does however include some other material relevant to corpora and corpus-building, for which no other location appeared suitable. It begins with a review of the distinction between unitary and composite texts, and of the different methods provided by these Guidelines for representing composite texts of different kinds (section 15.1 Varieties of Composite Text ). Section 15.2 Contextual Information describes a set of additional header elements provided for the documentation of contextual information, of importance largely though not exclusively to language corpora. This is the additional module for language corpora proper. Section 15.3 Associating Contextual Information with a Text discusses a mechanism by which individual parts of the TEI header may be associated with different parts of a TEI-conformant text. Section 15.4 Linguistic Annotation of Corpora reviews various methods of providing linguistic annotation in corpora, with some specific examples of relevance to current practice in corpus linguistics. Finally, section 15.5 Recommendations for the Encoding of Large Corpora provides some general recommendations about the use of these Guidelines in the building of large corpora. 15.1 Varieties of Composite Text Both unitary and composite texts may be encoded using these Guidelines; composite texts, including corpora, will typically make use of the following tags for their top-level organization. < teiCorpus > contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more TEI elements, each containing a single text header and a text. < TEI > contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple TEI elements may be combined within a TEI (or teiCorpus ) element. < teiHeader > supplies descriptive and declarative metadata associated with a digital resource or set of resources. < text > contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. < group > contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. In these Guidelines, the word text refers to any stretch of discourse, whether complete or incomplete, unitary or composite, which the encoder chooses (perhaps merely for purposes of analytic convenience) to regard as a unit. The term composite text refers to texts within which other texts appear; the following common cases may be distinguished: language corpora collections or anthologies poem cycles and epistolary works (novels or essays written in the form of collections or series of letters) otherwise unitary texts, within which one or more subordinate texts are embedded In corpora, the component samples are clearly distinct texts, but the systematic collection, standardized preparation, and common markup of the corpus often make it useful to treat the entire corpus as a unit, too. Some corpora may become so well established as to be regarded as texts in their own right; the Brown and LOB corpora are now close to achieving this status. The teiCorpus element is intended for the encoding of language corpora, though it may also be useful in encoding newspapers, electronic anthologies, and other disparate collections of material. The TEI element may be used in the same manner itself; the teiCorpus element, however, makes explicit the multiplicity of the collection, whatever it may be. The individual samples in the corpus are encoded as separate TEI elements, and the entire corpus is enclosed in a TEI or teiCorpus element. Each sample has the usual structure for a TEI document, comprising a teiHeader followed by one or more members of the model.resource class. The corpus, too, has a corpus-level teiHeader element, in which the corpus as a whole, and encoding practices common to multiple samples may be described. The overall structure of a TEI-conformant corpus is thus: Header information which relates to the whole corpus rather than to individual components of it should be factored out and included in the teiHeader element prefixed to the whole. This two-level structure allows for contextual information to be specified at the corpus level, at the individual text level, or at both. Discussion of the kinds of information which may thus be specified is provided below, in section 15.2 Contextual Information , as well as in chapter 2 The TEI Header . Information of this type should in general be specified only once: a variety of methods are provided for associating it with individual components of a corpus, as further described in section 15.3 Associating Contextual Information with a Text . In some cases, the design of a corpus is reflected in its internal structure. For example, a corpus of newspaper extracts might be arranged to combine all stories of one type (reportage, editorial, reviews, etc.) into some higher-level grouping, possibly with sub-groups for date, region, etc. The teiCorpus element provides no direct support for reflecting such internal corpus structure in the markup: it treats the corpus as an undifferentiated series of components, each tagged TEI . If it is essential to reflect a single permanent organization of a corpus into sub- and sub-sub-corpora, then the corpus or the high-level subcorpora may be encoded as composite texts, using the group element described below and in section 4.3.1 Grouped Texts . The mechanisms for corpus characterization described in this chapter, however, are designed to reduce the need to do this. Useful groupings of components may easily be expressed using the text classification and identification elements described in section 15.2.1 The Text Description , and those for associating declarations with corpus components described in section 15.3 Associating Contextual Information with a Text . These methods also allow several different methods of text grouping to co-exist, each to be used as needed at different times. This helps minimize the danger of cross-classification and misclassification of samples, and helps improve the flexibility with which parts of a corpus may be characterized for different applications. Anthologies and collections are often treated as texts in their own right, if only for historical reasons. In conventional publishing, at least, anthologies are published as units, with single editorial responsibility and common front and back matter which may need to be included in their electronic encodings. The texts collected in the anthology, of course, may also need to be identifiable as distinct individual objects for study. Poem cycles, epistolary novels, and epistolary essays differ from anthologies in that they are often written as single works, by single authors, for single occasions; nevertheless, it can be useful to treat their constituent parts as individual texts, as well as the cycle itself. Structurally, therefore, they may be treated in the same way as anthologies: in both cases, the body of the text is composed largely of other texts. The group element is provided to simplify the encoding of collections, anthologies, and cyclic works; as noted above, the group element can also be used to record the potentially complex internal structure of language corpora. For a full description, see chapter 4 Default Text Structure . Some composite texts, finally, are neither corpora, nor anthologies, nor cyclic works: they are otherwise unitary texts within which other texts are embedded. In general, they may be treated in the same way as unitary texts, using the normal TEI and body elements. The embedded text itself may be encoded using the text element. For further discussion, see chapter 4 Default Text Structure . All composite texts share the characteristic that their different component texts may be of structurally similar or dissimilar types. If all component texts may all be encoded using the same module, then no problem arises. If however they require different modules, then these must be included in the TEI customization. This process is described in more detail in section 1.1 TEI Modules . 15.2 Contextual Information Contextual information is of particular importance for collections or corpora composed of samples from a variety of different kinds of text. Examples of such contextual information include: the age, sex, and geographical origins of participants in a language interaction, or their socio-economic status; the cost and publication data of a newspaper; the topic, register or factuality of an extract from a textbook. Such information may be of the first importance, whether as an organizing principle in creating a corpus (for example, to ensure that the range of values in such a parameter is evenly represented throughout the corpus, or represented proportionately to the population being sampled), or as a selection criterion in analysing the corpus (for example, to investigate the language usage of some particular vector of social characteristics). Such contextual information is potentially of equal importance for unitary texts, and these Guidelines accordingly make no particular distinction between the kinds of information which should be gathered for unitary and for composite texts. In either case, the information should be recorded in the appropriate section of a TEI header, as described in chapter 2 The TEI Header . In the case of language corpora, such information may be gathered together in the overall corpus header, or split across all the component texts of a corpus, in their individual headers, or divided between the two. The association between an individual corpus text and the contextual information applicable to it may be made in a number of ways, as further discussed in section 15.3 Associating Contextual Information with a Text below. Chapter 2 The TEI Header , which should be read in conjunction with the present section, describes in full the range of elements available for the encoding of information relating to the electronic file itself, for example its bibliographic description and those of the source or sources from which it was derived (see section 2.2 The File Description ); information about the encoding practices followed with the corpus, for example its design principles, editorial practices, reference system, etc. (see section 2.3 The Encoding Description ); more detailed descriptive information about the creation and content of the corpus, such as the languages used within it and any descriptive classification system used (see section 2.4 The Profile Description ); and version information documenting any changes made in the electronic text (see section 2.6 The Revision Description ). In addition to the elements defined by chapter 2 The TEI Header , several other elements can be used in the TEI header if the additional module defined by this chapter is invoked. These additional tags make it possible to characterize the social or other situation within which a language interaction takes place or is experienced, the physical setting of a language interaction, and the participants in it. Though this information may be relevant to, and provided for, unitary texts as well as for collections or corpora, it is more often recorded for the components of systematically developed corpora than for isolated texts, and thus this module is referred to as being for language corpora . When the module defined in this chapter is included in a schema, a number of additional elements become available within the profileDesc element of the TEI header (discussed in section 2.4 The Profile Description ). < textDesc > provides a description of a text in terms of its situational parameters. < particDesc > describes the identifiable speakers, voices, or other participants in any kind of text or other persons named or otherwise referred to in a text, edition, or metadata. < settingDesc > describes the setting or settings within which a language interaction takes place, or other places otherwise referred to in a text, edition, or metadata. 15.2.1 The Text Description The textDesc element provides a full description of the situation within which a text was produced or experienced, and thus characterizes it in a way relatively independent of any a priori theory of text-types. It is provided as an alternative or a supplement to the common use of descriptive taxonomies used to categorize texts, which is fully described in section 2.4.3 The Text Classification , and section 2.3.7 The Classification Declaration . The description is organized as a set of values and optional prose descriptions for the following eight situational parameters , each represented by one of the following eight elements: < channel > describes the medium or channel by which a text is delivered or experienced. For a written text, this might be print, manuscript, email, etc.; for a spoken one, radio, telephone, face-to-face, etc. < constitution > describes the internal composition of a text or text sample, for example as fragmentary, complete, etc. < derivation > describes the nature and extent of originality of this text. < domain > describes the most important social context in which the text was realized or for which it is intended, for example private vs. public, education, religion, etc. < factuality > describes the extent to which the text may be regarded as imaginative or non-imaginative, that is, as describing a fictional or a non-fictional world. < interaction > describes the extent, cardinality and nature of any interaction among those producing and experiencing the text, for example in the form of response or interjection, commentary, etc. < preparedness > describes the extent to which a text may be regarded as prepared or spontaneous. < purpose > characterizes a single purpose or communicative function of the text. These elements constitute a model class called model.textDescPart ; new parameters may be defined by defining new elements and adding them to that class, as further described in 23.3 Customization . By default, a text description will contain each of the above elements, supplied in the order specified. Except for the purpose element, which may be repeated to indicate multiple purposes, no element should appear more than once within a single text description. Each element may be empty, or may contain a brief qualification or more detailed description of the value expressed by its attributes. It should be noted that some texts, in particular literary ones, may resist unambiguous classification in some of these dimensions; in such cases, the situational parameter in question should be given the content not applicable or an equivalent phrase. Texts may be described along many dimensions, according to many different taxonomies. No generally accepted consensus as to how such taxonomies should be defined has yet emerged, despite the best efforts of many corpus linguists, text linguists, sociolinguists, rhetoricians, and literary theorists over the years. Rather than attempting the task of proposing a single taxonomy of text-types (or the equally impossible one of enumerating all those which have been proposed previously), the closed set of situational parameters described above can be used in combination to supply useful distinguishing descriptive features of individual texts, without insisting on a system of discrete high-level text-types. Such text-types may however be used in combination with the parameters proposed here, with the advantage that the internal structure of each such text-type can be specified in terms of the parameters proposed. This approach has the following analytical advantages: 1 it enables a relatively continuous characterization of texts (in contrast to discrete categories based on type or topic) it enables meaningful comparisons across corpora it allows analysts to build and compare their own text-types based on the particular parameters of interest to them it is equally applicable to spoken, written, or signed texts Two alternative approaches to the use of these parameters are supported by these Guidelines. One is to use pre-existing taxonomies such as those used in subject classification or other types of text categorization. Such taxonomies may also be appropriate for the description of the topics addressed by particular texts. Elements for this purpose are described in section 2.4.3 The Text Classification , and elements for defining or declaring such classification schemes in section 2.3.7 The Classification Declaration . A second approach is to develop an application-specific set of feature structures and an associated feature system declaration, as described in chapters 18 Feature Structures and 18.11 Feature System Declaration . Where the organizing principles of a corpus or collection so permit, it may be convenient to regard a particular set of values for the situational parameters listed in this section as forming a text-type in its own right; this may also be useful where the same set of values applies to several texts within a corpus. In such a case, the set of text-types so defined should be regarded as a taxonomy . The mechanisms described in section 2.3.7 The Classification Declaration may be used to define hierarchic taxonomies of such text-types, provided that the catDesc component of the category element contains a textDesc element rather than a prose description. Particular texts may then be associated with such definitions using the mechanisms described in sections 2.4.3 The Text Classification . Using these situational parameters, an informal domestic conversation might be characterized as follows: The following example demonstrates how the same situational parameters might be used to characterize a novel: 15.2.2 The Participant Description The particDesc element in the profileDesc element provides additional information about the participants in a spoken text or, where this is judged appropriate, the persons named or depicted in a written text. When the detailed elements provided by the namesdates module described in 13 Names, Dates, People, and Places are included in a schema, this element can contain detailed demographic or descriptive information about individual speakers or groups of speakers, such as their names or other personal characteristics. Individually identified persons may also identified by a code which can then be used elsewhere within the encoded text, for example as the value of a who attribute. It should be noted that although the terms speaker or participant are used throughout this section, it is intended that the same mechanisms may be used to characterize fictional personæ or voices within a written text, except where otherwise stated. For the purposes of analysis of language usage, the information specified here should be equally applicable to written, spoken, or signed texts. The element particDesc contains a description of the participants in an interaction, which may be supplied as straightforward prose, possibly containing a list of names, encoded using the usual list and name elements, or alternatively using the more specific and detailed listPerson element provided by the namesdates module described in 13 Names, Dates, People, and Places . For example, a participant in a recorded conversation might be described informally as follows: Alternatively, when the namesdates module is included in a schema, information about the same participant described above might be provided in a more structured way as follows: An identified character in a drama or a novel may also be regarded as a participant in this sense, and encoded using the same techniques: 2 15.2.3 The Setting Description The settingDesc element is used to describe the setting or settings in which language interaction takes place. It may contain a prose description, analogous to a stage description at the start of a play, stating in broad terms the locale, or a more detailed description of a series of such settings. Each distinct setting is described by means of a setting element. < setting > describes one particular setting in which a language interaction takes place. The setting element may contain either a prose description or a selection of elements from the classes model.nameLike.agent , model.dateLike , or model.settingPart . By default, when the module defined by this chapter is included in a schema, these classes thus provide the following elements: < name > contains a proper noun or noun phrase. < date > contains a date in any format. < time > contains a phrase defining a time of day in any format. < locale > contains a brief informal description of the kind of place concerned, for example: a room, a restaurant, a park bench, etc. < activity > contains a brief informal description of what a participant in a language interaction is doing other than speaking, if anything. The following example demonstrates the kind of background information often required to support transcriptions of language interactions, first encoded as a simple prose narrative: Again, a more detailed encoding for places is feasible if the namesdates module is included in the schema. The above examples assume that only the general purpose name element supplied in the core module is available. 15.3 Associating Contextual Information with a Text This section discusses the association of the contextual information held in the header with the individual elements making up a TEI text or corpus. Contextual information is held in elements of various kinds within the TEI header, as discussed elsewhere in this section and in chapter 2 The TEI Header . Here we consider what happens when different parts of a document need to be associated with different contextual information of the same type, for example when one part of a document uses a different encoding practice from another, or where one part relates to a different setting from another. In such situations, there will be more than one instance of a header element of the relevant type. The TEI scheme allow for the following possibilities: A given element may appear in the corpus header only, in the header of one or more texts only, or in both places There may be multiple occurrences of certain elements in either the corpus or a text header. To simplify the exposition, we deal with these two possibilities separately in what follows; however, they may be combined as desired. 15.3.1 Combining Corpus and Text Headers A TEI-conformant document may have more than one header only in the case of a TEI corpus, which must have a header in its own right, as well as the obligatory header for each text. Every element specified in a corpus-header is understood as if it appeared within every text header in the corpus. An element specified in a text header but not in the corpus header supplements the specification for that text alone. If any element is specified in both corpus and text headers, the corpus header element is over-ridden for that text alone. The titleStmt for a corpus text is understood to be prefixed by the titleStmt given in the corpus header. All other optional elements of the fileDesc should be omitted from an individual corpus text header unless they differ from those specified in the corpus header. All other header elements behave identically, in the manner documented below. This facility makes it possible to state once for all in the corpus header each piece of contextual information which is common to the whole of the corpus, while still allowing for individual texts to vary from this common denominator. For example, the following schematic shows the structure of a corpus comprising three texts, the first and last of which share the same encoding description. The second one has its own encoding description. 15.3.2 Declarable Elements Certain of the elements which can appear within a TEI header are known as declarable elements . These elements have in common the fact that they may be linked explicitly with a particular part of a text header or the corpus header by means of a decls attribute on that element. This linkage is used to over-ride the default association between declarations in the header and a corpus or corpus text. The only header elements which may be associated in this way are those which would not otherwise be meaningfully repeatable. Declarable elements are all members of the class att.declarable ; the corresponding declaring elements are all members of the class att.declaring . < att.declarable > provides attributes for those elements in the TEI header which may be independently selected by means of the special purpose decls attribute. @default indicates whether or not this element is selected by default when its parent is selected. indicates whether or not this element is selected by default when its parent is selected. < att.declaring > provides attributes for elements which may be independently associated with a particular declarable element within the header, thus overriding the inherited default for that element. @decls identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content. identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content. An alphabetically ordered list of declarable elements follows: < availability > supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. < bibl > contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. < biblFull > contains a fully-structured bibliographic citation, in which all components of the TEI file description are present. < biblStruct > contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order. < broadcast > describes a broadcast used as the source of a spoken text. < correction > states how and under what circumstances corrections have been made in the text. < correspDesc > contains a description of the actions related to one act of correspondence. < editorialDecl > provides details of editorial principles and practices applied during the encoding of a text. < equipment > provides technical details of the equipment and media used for an audio or video recording used as the source for a spoken text. < geoDecl > documents the notation and the datum used for geographic coordinates expressed as content of the geo element elsewhere within the document. < hyphenation > summarizes the way in which hyphenation in a source text has been treated in an encoded version of it. < interpretation > describes the scope of any analytic or interpretive information added to the text in addition to the transcription. < langUsage > describes the languages, sublanguages, registers, dialects, etc. represented within a text. < listApp > contains a list of apparatus entries. < listBibl > contains a list of bibliographic citations of any kind. < listEvent > contains a list of descriptions, each of which provides information about an identifiable event. < listNym > contains a list of nyms, that is, standardized names for any thing. < listObject > contains a list of descriptions, each of which provides information about an identifiable physical object. < listOrg > contains a list of elements, each of which provides information about an identifiable organization. < listPerson > contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. < listPlace > contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. < metDecl > documents the notation employed to represent a metrical pattern when this is specified as the value of a met, real, or rhyme attribute on any structural element of a metrical text (e.g. lg , l , or seg ). < normalization > indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. < particDesc > describes the identifiable speakers, voices, or other participants in any kind of text or other persons named or otherwise referred to in a text, edition, or metadata. < projectDesc > describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. < punctuation > specifies editorial practice adopted with respect to punctuation marks in the original. < quotation > specifies editorial practice adopted with respect to quotation marks in the original. < recording > provides details of an audio or video recording event used as the source of a spoken text, either directly or from a public broadcast. < refsDecl > specifies how canonical references are constructed for this text. < samplingDecl > contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. < scriptStmt > contains a citation giving details of the script used for a spoken text. < segmentation > describes the principles according to which the text has been segmented, for example into sentences, tone-units, graphemic strata, etc. < settingDesc > describes the setting or settings within which a language interaction takes place, or other places otherwise referred to in a text, edition, or metadata. < sourceDesc > describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as \"born digital\" for a text which has no previous existence. < stdVals > specifies the format used when standardized date or number values are supplied. < styleDefDecl > specifies the name of the formal language in which style or renditional information is supplied elsewhere in the document. The specific version of the scheme may also be supplied. < textClass > groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. < textDesc > provides a description of a text in terms of its situational parameters. < xenoData > provides a container element into which metadata in non-TEI formats may be placed. each must bear a unique identifier when occurring within the same parent element, exactly one element must be specified as the default, by having a default attribute with the value \"true\". In the following example, an editorial declaration contains two possible correction policies, one identified as CorPol1 and the other as CorPol2. Since there are two, one of them (in this case CorPol1) should be specified as the default: The decls attribute is defined for any element which is a member of the class declaring . This includes the major structural elements text , group , and div , as well as smaller structural units, down to the level of paragraphs in prose, individual utterances in spoken texts, and entries in dictionaries. However, TEI recommended practice is to limit the number of multiple declarable elements used by a document as far as possible, for simplicity and ease of processing. The identifier or identifiers to which the decls attribute points must follow two further restrictions: When decl references an element that itself contains multiple elements of the same type, only the children elements with default set to \"true\" are considered referenced. Each element specified, explicitly or implicitly, by the list of identifiers must be of a different kind. To demonstrate how these rules operate, we now expand our earlier example slightly: This encoding description now has two editorial declarations, identified as ED1 (the default) and ED2. For texts not specifying otherwise, ED1 will apply. If ED1 applies, correction method C1A and normalization method N1 apply, since these are the specified defaults within ED1. In the same way, for a text specifying decls as #ED2 , correction C2A, and normalization N2B will apply. A finer grained approach is also possible. A text might specify text decls='#C2B #N2A', to mix and match declarations as required. A tag such as text decls='#ED1 #ED2' would (obviously) be illegal, since it includes two elements of the same type; a tag such as text decls='#ED2 #C1A' is also illegal, since in this context #ED2 is synonymous with the defaults for that editorial declaration, namely #C2A #N2B, resulting in a list that identifies two correction elements (C1A and C2A). 15.3.3 Summary The rules determining which of the declarable elements are applicable at any point may be summarized as follows: If there is a single occurrence of a given declarable element in a corpus header, then it applies by default to all elements within the corpus. If there is a single occurrence of a given declarable element in the text header, then it applies by default to all elements of that text irrespective of the contents of the corpus header. Where there are multiple occurrences of declarable elements within a text’s header or its corpus header, each must have a unique value specified as the value of its xml:id attribute; one and only one must bear a default attribute with the value true (or 1). each must have a unique value specified as the value of its xml:id attribute; one and only one must bear a default attribute with the value true (or 1). It is a semantic error for an element to be associated with more than one occurrence of any declarable element. Selecting an element which contains multiple occurrences of a given declarable element is semantically equivalent to selecting only those contained elements which are specified as defaults. An association made by one element applies by default to all of its descendants. 15.4 Linguistic Annotation of Corpora Language corpora often include analytic encodings or annotations, designed to support a variety of different views of language. The present Guidelines do not advocate any particular approach to linguistic annotation (or tagging); instead a number of general analytic facilities are provided which support the representation of most forms of annotation in a standard and self-documenting manner. Analytic annotation is of importance in many fields, not only in corpus linguistics, and is therefore discussed in general terms elsewhere in the Guidelines. 3 The present section presents informally some particular applications of these general mechanisms to the specific practice of corpus linguistics. 15.4.1 Levels of Analysis By linguistic annotation we mean here any annotation determined by an analysis of linguistic features of the text, excluding as borderline cases both the formal structural properties of the text (e.g. its division into chapters or paragraphs) and descriptive information about its context (the circumstances of its production, its genre, or medium). The structural properties of any TEI-conformant text should be represented using the structural elements discussed elsewhere in these Guidelines, for example in chapters 3 Elements Available in All TEI Documents and 4 Default Text Structure . The contextual properties of a TEI text are fully documented in the TEI header, which is discussed in chapter 2 The TEI Header , and in section 15.2 Contextual Information of the present chapter. Other forms of linguistic annotation may be applied at a number of levels in a text. A code (such as a word-class or part-of-speech code) may be associated with each word or token, or with groups of such tokens, which may be continuous, discontinuous, or nested. A code may also be associated with relationships (such as cohesion) perceived as existing between distinct parts of a text. The codes themselves may stand for discrete non-decomposable categories, or they may represent highly articulated bundles of textual features. Their function may be to place the annotated part of the text somewhere within a narrowly linguistic or discoursal domain of analysis, or within a more general semantic field, or any combination drawn from these and other domains. The manner by which such annotations are generated and attached to the text may be entirely automatic, entirely manual, or a mixture. The ease and accuracy with which analysis may be automated may vary with the level at which the annotation is attached. The method employed should be documented in the interpretation element within the encoding description of the TEI header, as described in section 2.3.3 The Editorial Practices Declaration . Where different parts of a corpus have used different annotation methods, the decls attribute should be used to indicate the fact, as further discussed in section 15.3 Associating Contextual Information with a Text . An extended example of one form of linguistic analysis commonly practised in corpus linguistics is given in section 17.4 Linguistic Annotation . 15.5 Recommendations for the Encoding of Large Corpora These Guidelines include proposals for the identification and encoding of a far greater variety of textual features and characteristics than is likely to be either feasible or desirable in any one language corpus, however large and ambitious. The reasoning behind this catholic approach is further discussed in chapter 4 About These Guidelines . For most large-scale corpus projects, it will therefore be necessary to determine a subset of TEI recommended elements appropriate to the anticipated needs of the project, as further discussed in chapter 23.3 Customization ; these mechanisms include the ability to exclude selected element types, add new element types, and change the names of existing elements. A discussion of the implications of such changes for TEI conformance is provided in chapter 23.4 Conformance . Because of the high cost of identifying and encoding many textual features, and the difficulty in ensuring consistent practice across very large corpora, encoders may find it convenient to divide the set of elements to be encoded into the following four categories: texts included within the corpus will always encode textual features in this category, should they exist in the text textual features in this category will be encoded wherever economically and practically feasible; where present but not encoded, a note in the header should be made. textual features in this category may or may not be encoded; no conclusion about the absence of such features can be inferred from the absence of the corresponding element in a given text. textual features in this category are deliberately not encoded; they may be transcribed as unmarked up text, or represented as gap elements, or silently omitted, as appropriate. 15.6 Module for Language Corpora The module described in this chapter makes available the following components: Metadata for Language Corpora Corpus texts The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema .","title":"<span class=\"tei-div7 breadcrumb\">15 Language Corpora</span>"}
{"link":"p5.xml?id=SA","tag":"guidelines","content":"16 Linking, Segmentation, and Alignment This chapter discusses a number of ways in which encoders may represent analyses of the structure of a text which are not necessarily linear or hierarchic. The module defined by this chapter provides for the following common requirements: to link disparate elements using the xml:id attribute (section 16.1 Links ); to link disparate elements without using the xml:id attribute (sections 16.2.1 Pointing Elsewhere and 16.2.4 TEI XPointer Schemes ); to segment text into elements convenient for the encoder and to mark arbitrary points within documents (section 16.3 Blocks, Segments, and Anchors ); to represent correspondence or alignment among groups of text elements, both those with content and those which are empty (section 16.5 Correspondence and Alignment ); 1 to synchronize elements of a text, that is to represent temporal correspondences and alignments among text elements (section 16.4 Synchronization ) and also to align them with specific points in time (section 16.4.2 Placing Synchronous Events in Time ); to specify that one text element is identical to or a copy of another (section 16.6 Identical Elements and Virtual Copies ); to aggregate possibly noncontiguous elements (section 16.7 Aggregation ); to specify that different elements are alternatives to one another and to express preferences among the alternatives (section 16.8 Alternation ); to store markup separately from the data it describes or is related to (section 16.9 Stand-off Markup ); to associate segments of a text with interpretations or analyses of their significance (section 16.12 Connecting Analytic and Textual Markup ); to group together elements used to provide stand-off annotation, including contextual information (section 16.10 The standOff Container ). These facilities all use the same set of techniques based on the W3C XPointer framework ( 1 ) This provides a variety of schemes ; the most convenient of which, and that recommended by these Guidelines, makes use of the global xml:id attribute, as defined in section 1.3.1.1 Global Attributes , and introduced in the section of 5 A Gentle Introduction to XML titled 5.6.2 Identifiers and Indicators . When the linking module is included in a schema, the attribute class att.global is extended to include eight additional attributes to support the various kinds of linking listed above. Each of these attributes is introduced in the appropriate section below. In addition, for many of the topics discussed, a choice of methods of encoding is offered, ranging from simple but less general ones, which use attribute values only, to more elaborate and more general ones, which use specialized elements. 16.1 Links We say that one element points to others if the first has an attribute whose value is a reference to the others: such an element is called a pointer element , or simply a pointer . Among the pointers that have been introduced up to this point in these Guidelines are note , ref , and ptr . These elements all indicate an association between one place in the document (the location of the pointer itself) and one or more others (the elements whose identifiers are specified by the pointer's target attribute). The module described in this chapter introduces a variation on this basic kind of pointer, known as a link , which specifies both ends of an association. In addition, we define a syntax for representing locations in a document by a variety of means not dependent on the use of xml:id attributes. 16.1.1 Pointers and Links In section 3.7 Simple Links and Cross-References we introduced the simplest pointer elements, ptr and ref . Here we introduce additionally the link element, which represents an association between two (or more) locations by specifying each location explicitly. Its own location is irrelevant to the intended linkage. All three elements use the attribute target, provided by the att.pointing class as a means of indicating the location or locations referenced or pointed to. < att.pointing > provides a set of attributes used by all elements which point to other elements by means of one or more URI references. @target specifies the destination of the reference by supplying one or more URI References specifies the destination of the reference by supplying one or more URI References < link > defines an association or hypertextual link among elements or passages, of some type not more precisely specifiable by other elements. These three elements also share a common set of attributes, derived from the att.pointing and att.typed classes: < att.pointing > provides a set of attributes used by all elements which point to other elements by means of one or more URI references. @evaluate specifies the intended meaning when the target of a pointer is itself a pointer. specifies the intended meaning when the target of a pointer is itself a pointer. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed Double connection among elements could also be expressed by a combination of pointer elements, for example, two ptr elements, or one ptr element and one note element. All that is required is that the value of the target (or other pointing) attribute of the one be the value of the xml:id attribute of the other. What the link element accomplishes is the handling of double connection by means of a single element. Thus, in the following encoding: As noted elsewhere, the target attribute may take as value one or more URI reference. In the simplest case, each such reference will indicate an element in the current document (or in some other document), for example by supplying the value used for its global xml:id attribute. It may however carry as value any form of URI, such as a URL pointing to some other document or location on the Internet. Pointing or linking to external documents and pointing and linking where identifiers are not available is described below in section 16.2 Pointing Mechanisms . 16.1.2 Using Pointers and Links As an example of the use of mechanisms which establish connections among elements, consider the practice (common in 18th century English verse and elsewhere) of providing footnotes citing parallel passages from classical authors. The figure shows the original page of Pope's Dunciad which is discussed in the text. Such footnotes can of course simply be encoded using the note element (see section 3.9 Notes, Annotation, and Indexing ) without a target attribute, placed adjacent to the passage to which the note refers: 2 This use of the note element can be called implicit pointing (or implicit linking ). It relies on the juxtaposition of the note to the text being commented on for the connection to be understood. If it is felt that the mere juxtaposition of the note to the text does not make it sufficiently clear exactly what text segment is being commented on (for example, is it the immediately preceding line, or the immediately preceding two lines, or what?), or if it is decided to place the note at some distance from the text, then the pointing or the linking must be made explicit. We now consider various methods for doing that. Firstly, a ptr element might be placed at an appropriate point within the text to link it with the annotation: Secondly, the target attribute of the note element can be used to point at its associated text, provided that an xml:id attribute has been supplied for the associated text: Combining these two approaches gives us the following associations: a pointer within one line indicates the note the note indicates the line a pointer within the note indicates the line The target attribute of the link element here bears the identifier of the note followed by that of the verse line. We could also allocate an identifier to the reference within the note and encode the association between it and the verse line in the same way: 16.1.3 Groups of Links Clearly, there are many reasons for which an encoder might wish to represent a link or association between different elements. For some of them, specific elements are provided in these Guidelines; some of these are discussed elsewhere in the present chapter. The link element is a general purpose element which may be used for any kind of association. The element linkGrp may be used to group links of a particular type together in a single part of the document; such a collection may be used to represent what is sometimes referred to in the literature of Hypertext as a web , a term introduced by the Brown University FRESS project in 1969, and not to be confused with the World Wide Web. < linkGrp > defines a collection of associations or hypertextual links. < att.pointing.group > provides a set of attributes common to all elements which enclose groups of pointer elements. @domains optionally specifies the identifiers of the elements within which all elements indicated by the contents of this element lie. @targFunc describes the function of each of the values of the target attribute of the enclosed link , join , or alt tags. optionally specifies the identifiers of the elements within which all elements indicated by the contents of this element lie. describes the function of each of the values of the target attribute of the enclosed link , join , or alt tags. The linkGrp element provides a convenient way of establishing a default for the type attribute on a group of links of the same type: by default, the type attribute on a link element has the same value as that given for type on the enclosing linkGrp . Typical software might hide a web entirely from the user, but use it as a source of information about links, which are displayed independently at their referenced locations. Alternatively, software might provide a direct view of the link collection, along with added functions for manipulating the collection, as by filtering, sorting, and so on. To continue our previous example, this text contains many other notes of a kind similar to the one shown above. Here are a few more of the lines to which annotations have to be attached, followed by the annotations themselves: Additional information for applications that use linkGrp elements can be provided by means of special attributes. First, the domains attribute can be used to identify the text elements within which the individual targets of the links are to be found. Suppose that the text under discussion is organized into a body element, containing the text of the poem, and a back element containing the notes. Then the domains attribute can have as its value the identifiers of the body and the back , to enable an application to verify that the link targets are in fact contained by appropriate elements, or to limit its search space: Note that there must be a single parent element for each domain; if some notes are contained by a section with identifier dunnotes, and others by a section with identifier dunimits, an intermediate pointer must be provided (as described in section 16.1.4 Intermediate Pointers ) within the linkGrp and its identifier used instead. Next, the targFunc attribute can be used to provide further information about the role or function of the various targets specified for each link in the group. The value of the targFunc attribute is a list of names (formally, name tokens), one for each of the targets in the link; these names can be chosen freely by the encoder, but their significance should be documented in the encoding description in the header. 3 In the current example, we might think of the note as containing the source of the imitation and the verse line as containing the goal of the imitation. Accordingly, we can specify the linkGrp in the preceding example thus: 16.1.4 Intermediate Pointers In the preceding examples, we have shown various ways of linking an annotation and a single verse line. However, the example cited in fact requires us to encode an association between the note and a pair of verse lines (lines 284 and 285); we call these two lines a span . There are a number of possible ways of correcting this error: one could use the target attribute to indicate one end of the span and the special purpose targetEnd attribute on the note element to point to the other. Another possibility might be to create an element which represents the whole span itself and assign that an xml:id attribute, which can then be linked to the note and ref elements. This could be done using for example the lg element defined in section 3.13.1 Core Tags for Verse or the virtual join element discussed in section 16.7 Aggregation . A third possibility would be to use an intermediate pointer as follows: The all value of evaluate is used on the link element to specify that any pointer encountered as a target of that element is itself evaluated. If evaluate had the value none, the link target would be the pointer itself, rather than the objects it points to. Where a linkGrp element is used to group a collection of link elements, any intermediate pointer elements used by those link elements should be included within the linkGrp . 16.2 Pointing Mechanisms This section introduces more formally the pointing mechanisms available in the TEI. In addition to those discussed so far, the TEI provides methods of pointing: into documents other than the current document; to a particular element in a document other than the current document using its xml:id; to a particular element whether in the current document or not, using its position in the XML element tree; at arbitrary content in any XML document using TEI-defined XPointer schemes. All TEI attributes used to point at something else are declared as having the datatype teidata.pointer , which is defined as a URI reference 4 ; the cases so far discussed are all simple examples of a URI reference. Another familiar example is the mechanism used in XHTML to create represent hypertext links by means of the XHTML href attribute. A URI reference can reference the whole of an XML resource such as a document or an XML element, or a sub-portion of such a resource, identified by means of an appropriate fragment identifier . Technically speaking, the fragment identifier is that portion of a URI reference following the first unescaped # character; in practice, it provides a means of accessing some part of the resource described by the URI which is less than the whole. The first three of the following subsections provide only a brief overview and some examples of the W3C mechanisms recommended. More detailed information on the use of these mechanisms is readily available elsewhere. 16.2.1 Pointing Elsewhere Like the ubiquitous if misnamed XHTML pointing attribute href, the TEI pointing attributes can point to a document that is not the current document (the one that contains the pointing element) whether it is in the same local filesystem as the current document, or on a different system entirely. In either case, the pointing can be accomplished absolutely (using the entire address of the target document) or relatively (using an address relative to the current base URI in force). The current base URI is defined according to Marsh and Tobin 2009 . If there is none, the base URI is that of the current document. In common practice the current base URI in force is likely to be the value of the xml:base attribute of the closest ancestor that has one. However this may not be the case, since xml:base attributes are accumulated through the hierarchy by concatenation of path segments, beginning at the top of the hierarchy and proceeding down to the context node. The following example demonstrates an absolute URI reference that points to a remote document: This example points explicitly to a location on the Web, accessible via HTTP. Suppose however that we wish to access a document stored locally in a file. Again we will supply an absolute URI reference, but this time using a different protocol: In the following example, we use a relative URI reference to point to a local document: In the following example, however, we first change the current base URI by setting a new value for xml:base. The resource required is then identified by means of a relative URI: As noted above, the current base URI is found on the nearest ancestor. It is technically possible to use xml:base as a means to shorten URIs, but this usage is not recommended. Abbreviated pointers provide a more flexible and consistent method for creating shorthand links. 16.2.2 Pointing Locally A shorthand pointer , in which the URI consists only of # followed by the value of an xml:id acts as a pointer to the element in the current document with that xml:id, as in the following example. 16.2.3 Using Abbreviated Pointers Even in the case of relative links on the local file system, ref or target attributes may become quite lengthy and make XML code difficult to read. To deal with this problem, the TEI provides a useful method of using abbreviated pointers and documenting a way to dereference them automatically. Imagine a project which has a large collection of XML documents organized like this: anthology poetry poem.xml prose novel.xml poetry poem.xml poem.xml prose novel.xml novel.xml references people personography.xml people personography.xml personography.xml If you want to link a name in the novel.xml file to a person in the personography.xml file, the link will look like this: One way to deal with this is to use what is often referred to as a \"magic token\". You could make such links using the key attribute: A more robust alternative is to use a private URI scheme . This is a method of constructing a simple, key-like token which functions as a teidata.pointer , and can therefore be used as the value of any attribute which has that datatype, such as ref and target. Such a scheme consists of a prefix with a colon, and then a value. You might, for example, use the prefix psn (for \"person\"), and structure your name tags like this: < listPrefixDef > contains a list of definitions of prefixing schemes used in teidata.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. < prefixDef > defines a prefixing scheme used in teidata.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. < att.patternReplacement > provides attributes for regular-expression matching and replacement. @matchPattern specifies a regular expression against which the values of other attributes can be matched. @replacementPattern specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the matchPattern which, once subpattern substitution has been performed, complete the URI. specifies a regular expression against which the values of other attributes can be matched. specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the matchPattern which, once subpattern substitution has been performed, complete the URI. This is how you might document a private URI scheme using the psn: prefix: Through this mechanism, any processor which encounters a teidata.pointer with a protocol unknown to it can check the listPrefixDef in the header to see if there is an available expansion for it, and if there is, it can automatically provide the expansion and generate a full or relative URI. For any given prefix, it may be useful to supply more than one expansion. For instance, in addition to pointing at the person element in the personography file, it might also be useful to point to an external source which is available on the network, representing the same information in a different way. So there might be a second prefixDef like this: When creating private URI schemes, it is recommended that you avoid using any existing registered prefix. A list of registered prefixes is maintained by IANA at http://www.iana.org/assignments/uri-schemes.html . Note that this mechanism can also be used to dereference other abbreviated pointing systems which are based on prefixes, such as Tag URIs. The matchPattern and replacementPattern attributes are also used in dereferencing canonical reference patterns, and further examples of the use of regular expressions are shown in 16.2.5 Canonical References . 16.2.4 TEI XPointer Schemes The pointing schemes described in this chapter are part of a number of such schemes envisaged by the W3C, which together constitute a framework for addressing data within XML documents, known as the XPointer Framework ( Grosso et al 2003 ). This framework permits the definition of many other named addressing methods, each of which is known as an XPointer Scheme . The W3C has predefined a set of such schemes, and maintains a register for their expansion. One important scheme, also defined by the W3C, and recommended by these Guidelines is the xpath() pointer scheme, which allows for any part of an XML structure to be selected using the syntax defined by the XPath specification. This is further discussed below, 16.2.4.2 xpath() . These Guidelines also define six other pointer schemes, which provide access to parts of an XML document such as points within data content or stretches of data content. These additional TEI pointer schemes are defined in sections 16.2.4.3 left() to 16.2.4.8 match() below. 16.2.4.1 Introduction to TEI Pointers Before discussing the TEI pointer schemes, we introduce slightly more formally the terminology used to define them. So far, we have discussed only ways of pointing at components of the XML information set node such as elements and attributes. However, there is often a need in text analysis to address additional types of location such as the point locations between nodes, and sequences that may arbitrarily cross the boundaries of nodes in a document. The content of an XML document is organized sequentially as well as hierarchically, and it makes sense to consider ranges of characters within a document independently of the nodes to which they belong. From the perspective of most of the pointer schemes discussed below, a TEI document is a tree structure superimposed upon a character stream. Nodes are entities available only in the tree, while points are available only in the stream. For this reason, the schemes below that rely upon character positions ( string-index() , string-range() , and match() ) cannot take nodes into account. Conversely, XPath (disregarding functions that return atomic values) is a method for locating nodes in the tree and treats those nodes as indivisible units, meaning it is unable to address parts of nodes in their document context. The TEI pointer scheme thus distinguishes the following kinds of object: A node is an instance of one of the node kinds defined in the XQuery 1.0 and XPath 2.0 Data Model (Second Edition) . It represents a single item in the XML information set for a document. For pointing purposes, the only nodes that are of interest are Text Nodes, Element Nodes, and Attribute Nodes. A Sequence follows the definition in the XPath 2.0 Data Model, with one alteration. A Sequence is an ordered collection of zero or more items, where an item is either a node or a partial text node. A Text Stream is the concatenation of the text nodes in a document and behaves as though all tags had been removed. A text stream begins at a reference node and encompasses all of the text inside that node (if any) and all the text following it in document order. In XPath terms, this would encompass all of the text nodes beginning at a particular node, and following it on the following axis . A Point represents a dimensionless point between nodes or characters in a document. Every point is adjacent to either characters or elements, and never to another point. Points can only be referenced in relation to an element or text node in the document (i.e. something addressable by either an XPath or a fragment identifier). Points occur either immediately before or after an element, or at a numbered position inside a text stream. Position zero in the stream would be immediately before the first character. Note that points within attribute values cannot mark the beginning or end of a range extending beyond the attribute value, because points indicate a position within a document. Since attribute nodes are by definition un-ordered, they cannot be said to have a fixed position. The TEI recommends the following seven pointer schemes: Addresses a node or node sequence using the XPath syntax. ( 16.2.4.2 xpath() ) addresses the point before (left) or after (right) a node or node sequence ( 16.2.4.3 left() and 16.2.4.4 right() ) addresses a point inside a text node ( 16.2.4.5 string-index() addresses the range between two points ( 16.2.4.6 range() ) addresses a range of a specified length starting from a specified point ( 16.2.4.7 string-range() ) addresses a range which matches a specified string within a node ( 16.2.4.8 match() ) The xpath() scheme refers to the existing XPath specification which is adopted with one modification: the default namespace for any XPath used as a parameter to this scheme is assumed to be the TEI namespace http://www.tei-c.org/ns/1.0 . The other six schemes overlap in functionality with a W3C draft specification known as the XPointer scheme draft, but are individually much simpler. At the time of this writing, there is no current or scheduled activity at the W3C towards revising this draft or issuing it as a recommendation. A note on namespaces : The W3C defines an xmlns() scheme (see XPointer xmlns() Scheme ) which when prepended to a resolvable pointer allows for the definition of namespace prefixes to be used in XPaths in subsequent pointers. TEI Pointer schemes assume that un-prefixed element names in TEI Pointer XPaths are in the TEI namespace, http://www.tei-c.org/ns/1.0 . The use of xmlns() is thus optional, provided no new prefixes need to be defined. If the schemes described here are used to address non-TEI elements, then any new prefixes to be used in pointer XPaths may be defined using the xmlns() scheme. 16.2.4.2 xpath() Sequence xpath(XPATH) The xpath() scheme locates zero or more nodes within an XML Information Set. The single argument XPATH is an XPath selection pattern, as defined in XSLT 3.0 , that returns a node or sequence of nodes. XPaths returning atomic values (e.g. substring() ) are illegal in the xpath() scheme because they represent extracted values rather than locations in the source document. Because the schemes below involve starting at a node and navigating from there, and because attribute nodes have no intrinsic order, XPath expressions that address attribute nodes should be avoided in schemes other than xpath() . The example below, and all subsequent examples in this section refer to the following TEI fragment : A TEI Pointer that referenced the reg element in the choice in line 1 of the example might look like: #xpath(//lb[@n='1']/following-sibling::choice[1]/reg) . Note that XPath values must be assumed to start from the document root. They cannot be relative to the element bearing the attribute that uses the pointer because TEI Pointers are URIs. Care should be taken to ensure that XPaths used in TEI Pointers match only a single node, unless multiple matches are desired. The examples that follow are relatively simple because the document they refer to is short and does not contain many elements. When an XPath is interpreted by a TEI processor, the information set of the referenced document is interpreted without any additional information supplied by any schema processing that may or may not be present. In particular this means that no whitespace normalization is applied to a document before the XPath is interpreted. This pointer scheme allows easy, direct use of the most widely-implemented XML query method. It is probably the most robust pointing mechanism for the common situation of selecting an XML element or its contents where an xml:id is not present. The ability to use element names and attribute names and values makes xpath() pointers more robust than the other mechanisms discussed in this section even if the designated document changes. For durability in the presence of editing, use of xml:id is always recommended when possible. 16.2.4.3 left() Point left( IDREF | XPATH ) The left() scheme locates the point immediately preceding the node addressed by its argument, which is either an XPATH as defined above or an IDREF , the value of an xml:id occurring in the document addressed by the base URI in effect for the pointer. Example: the pointer #left(//supplied[1]) indicates the point between the first lb and the first supplied in the example above. Example: #left(//gap[1]) indicates the point immediately before the first gap element in line two and the string si . Example: #left(line1) indicates the point immediately before the <lb n=\"1\"/> element. 16.2.4.4 right() Point right( IDREF | XPATH ) The right() scheme locates the point immediately following the node addressed by its argument. Example: the pointer #right(//lb[@n='3']) indicates the point between the third lb and the <unclear>s</unclear> element in the example . 16.2.4.5 string-index() Point string-index( IDREF | XPATH, OFFSET ) The string-index() scheme locates a point based on character positions in a text stream relative to the node identified by the IDREF or XPATH parameter. The OFFSET parameter is a positive, negative, or zero integer which determines the position of the point . An offset of 0 represents the position immediately before the first character in either the first text node descendant of the node addressed in the first parameter or the first following text node, if the addressed element contains no text node descendants. Example: #string-index(//lb[@n='2'],1) indicates the point between the s and the i in the word si in line 2. Note : The OFFSET parameter (and similarly the LENGTH parameter found below in the string-range() scheme) are measured in characters. What is considered a single character will depend (assuming the document being evaluated is in Unicode) on the Normalization Form in use (see UNICODE NORMALIZATION FORMS ). A letter followed by a combining diacritic counts as two characters, but the same diacritic precombined with a letter would count as a single character. Compare, for example, é ( \\u0060 followed by \\u0301 ) and é ( \\u00E9 ). These are equivalent, and a conversion between Normalization Forms C and D will transform one into the other. This specification does not mandate a particular Normalization Form (see 6.2.7.2 Precomposed and Combining Characters and Normalization ), but users and implementers should be aware that it affects the character count and therefore the result of evaluating pointers that rely on character counting. 16.2.4.6 range() Sequence range( POINTER, POINTER[, POINTER, POINTER ...]) The range() scheme takes as parameters one or more pairs of POINTER s, which are each members of the set IDREF , XPATH , left() , right() , or string-index() . A range() locates a (possibly non-contiguous) sequence beginning at the first POINTER parameter and ending at the last. If the POINTER locates a node (i.e. is an XPATH or IDREF), then that node is a member of the addressed sequence. If a sequence addressed by a range pointer overlaps, but does not wholly contain, an element (i.e. it contains only the start but not the end tag or vice-versa), then that element is not part of the sequence. Range() s may address sequences of non-contiguous nodes. For example, a range() might select text beginning before an app , encompassing the content of a single rdg and continuing after the app . Example: #range(left(//lb[@n='3']),left(//lb[@n='4'])) indicates the whole of line 3 from the <lb n=\"3\"/> to the point right before the following <lb n=\"4\"/> . Example: #range(right(//lb[@n='3']),string-index(//lb[@n='3'],15)) indicates the sequence <unclear>s</unclear>emp<unclear>er</unclear> in mente . Example: #range(string-index(//lb[@n='3'],7),string-index(//lb[@n='3'],10),string-index(//lb[@n='3'],15),string-index(//lb[@n='3'],21)) indicates the non-contiguous sequence in mentem . 16.2.4.7 string-range() Sequence string-range(IDREF | XPATH, OFFSET, LENGTH[, OFFSET, LENGTH ...]) The string-range() scheme locates a sequence based on character positions in a text stream relative to the node identified by the first parameter. The location of the beginning of the addressed sequence is determined precisely as for string-index() . The OFFSET parameter is defined as above in string-index() . The LENGTH parameter is a positive integer that denotes the length of the text stream captured by the sequence. As with range() , the addressed sequence may contain text nodes and/or elements. The string-range() scheme can accept multiple OFFSET, LENGTH pairs to address a non-contiguous sequence in much the same way that range() can accept multiple pairs of pointers. Because string-range() addresses points in the text stream, tags are invisible to it. For example, if an empty tag like lb is encountered while processing a string-range(), it will be included in the resulting sequence, but the LENGTH count will not increment when it is captured. Example: #string-range(//lb[@n='5'],0,27) indicates the whole of line 5 from the text immediately following the lb to the point right before the closing ab tag. Example: #string-range(//lb[@n='3'],7,8) indicates the sequence in mente . Example: #string-range(//lb[@n='3'],7,3,15,6) indicates the non-contiguous sequence in mentem . 16.2.4.8 match() Sequence match(IDREF | XPATH, 'REGEX' [, INDEX]) The match scheme locates a sequence based on matching the REGEX parameter against a text stream relative to the reference node identified by the first parameter. REGEX is a regular expression as defined by XQuery 1.0 and XPath 2.0 Functions and Operators (Second Edition) , with some modifications: Because the regular expression is delimited by apostrophe characters, any such characters ( ' or \\u0027 ) occurring inside the expression must be escaped using the URI percent-encoding scheme %27 . Regular expressions in match() are assumed to operate in single-line mode. The end of the string to be matched against is either the end of the text contained by the element in the first parameter or the end of the document, if that parameter indicates an empty element. The meta-character ^ therefore matches the beginning of the text stream inside or following the reference node, and the meta-character $ matches the end of that stream. Like string-range() , match() may capture elements in the indicated sequence, even though they are ignored for purposes of evaluating the match. Example: #match(//lb[@n='5'],'opto.*valeas') indicates the sequence opto u<unclear>t</unclear> bene valeas in line 5 . Example: #match(//lb[@n='3'],'semper') would indicate the word semper , but would not capture the unclear elements in <unclear>s</unclear>emp<unclear>er</unclear> , just their text children. 16.2.5 Canonical References By canonical reference we mean any means of pointing into documents, specific to a community or corpus. For example, biblical scholars might understand Matt 5:7 to mean the book called Matthew , chapter 5, verse 7. They might then wish to translate the string Matt 5:7 into a pointer into a TEI-encoded document, selecting the element which corresponds to the seventh div element within the fifth div element within the div element with the n attribute valued Matt. Several elements in the TEI scheme ( gloss , ptr , ref , and term ) bear a special attribute, cRef, just for this purpose. Using the system described in this section, an encoder may specify references to canonical works in a discipline-familiar format, and expect software to derive a complete URI from it. The value of the cRef attribute is processed as described in this section, and the resulting URI reference is treated as if it were the value of the target attribute. The cRef and target attributes are mutually exclusive: only one or the other may be specified on any given occurrence of an element. For the cRef attribute to function as required, a mechanism is needed to define the mapping between (for example) the book called Matt and the part of the XML structure which corresponds with it. This is provided by the refsDecl element in the TEI header, which contains an algorithm for translating a canonical reference string (like Matt 5:7) into a URI such as #xpath(//div[@n='Matt']/div[5]/div[7]) . The refsDecl element is described in section 2.3.6 The Reference System Declaration ; the following example is discussed in more detail below in section 16.2.5.1 Worked Example . An alternative and less verbose method is described in section 16.2.5.4 Citation Structures . When an application encounters a canonical reference as the value of cRef attribute, it might follow this sequence of specific steps to transform it into a URI reference: Ascertain the correct refsDecl following the rules summarized in section 15.3.3 Summary . For each cRefPattern element encountered in the appropriate refsDecl , in the order encountered: match the value of the cRef attribute to the regular expression found as the value of the matchPattern attribute if the value of the cRef attribute matches: take the value of the replacementPattern attribute and substitute the back references ($1, $2, etc.) with the corresponding matched substrings the result is taken as if it were a relative or absolute URI reference specified on the target attribute; i.e., it should be used as is or combined with the current xml:base attribute value as usual no further processing of this value of the cRef attribute against the refsDecl should take place if, however, the value of the cRef attribute does not match the regular expression specified in the value of the matchPattern attribute, proceed to the next cRefPattern match the value of the cRef attribute to the regular expression found as the value of the matchPattern attribute if the value of the cRef attribute matches: take the value of the replacementPattern attribute and substitute the back references ($1, $2, etc.) with the corresponding matched substrings the result is taken as if it were a relative or absolute URI reference specified on the target attribute; i.e., it should be used as is or combined with the current xml:base attribute value as usual no further processing of this value of the cRef attribute against the refsDecl should take place take the value of the replacementPattern attribute and substitute the back references ($1, $2, etc.) with the corresponding matched substrings the result is taken as if it were a relative or absolute URI reference specified on the target attribute; i.e., it should be used as is or combined with the current xml:base attribute value as usual no further processing of this value of the cRef attribute against the refsDecl should take place if, however, the value of the cRef attribute does not match the regular expression specified in the value of the matchPattern attribute, proceed to the next cRefPattern If all the cRefPattern elements are examined in turn and none matches, the pointer fails. The regular expression language used as the value of the matchPattern attribute is that used for the pattern facet of the World Wide Web Consortium's XML Schema Language in an Appendix to XML Schema Part 2 . 5 The value of the replacementPattern attribute is simply a string, except that occurrences of $1 through $9 are replaced by the corresponding substring match. Note that since a maximum of nine substring matches are permitted, the string $18 means the value of the first matched substring followed by the character 8 as opposed to the eighteenth matched substring . If there is a need for an actual string including a dollar sign followed by a digit that is not supposed to be replaced, the dollar sign should be written as $$ . Implementations must convert $$ to $ during processing. 16.2.5.1 Worked Example Let us presume that with the example refsDecl above, an application comes across a cRef value of Matt 5:7. The application would first apply the regular expression (.+) (.+):(.+) to Matt 5:7 . This regular expression would successfully match. The first matched substring would be Matt , the second 5 , and the third 7 . The application would then apply these substrings to the pattern #xpath(//div[@n='$1']/div[$2]/div[$3]) , producing #xpath(//div[@n='Matt']/div[5]/div[7]) . If, however, the input string had been Matt 5 , the first regular expression would not have matched. The application would have then tried the second, (.+) (.+) , producing a successful match, and the matched substrings Matt and 5 . It would then have substituted those matched substrings into the pattern #xpath(//div[@n='$1']/div[$2]) to produce a fragment identifier indicating the referenced element. If the input string had been Matt , neither the first nor the second regular expressions would have successfully matched. The application would have then tried the third, (.+) , producing the matched substring Matt , and the URI Reference #xpath(//div[@n='Matt']) . a cRefPattern should not reference more matched substrings. For example: 16.2.5.2 Complete and Partial URI Examples In the above example, the value of cRef was used to generate a Fragment Identifier. An absolute URI could be generated directly, as in the following example. See 16.2.3 Using Abbreviated Pointers for another related use of the matchPattern and replacementPattern attributes. 16.2.5.3 Miscellaneous Usages Canonical reference pointers are intended for use by TEI encoders. However, this specification might be useful to the development of a process for recognizing canonical references in non-TEI documents (such as plain text documents), possibly as part of their conversion to TEI. 16.2.5.4 Citation Structures Citation structures provide a more thorough and concise mechanism for describing canonical references and the ways those references map on to parts of a TEI document. A citeStructure element describes a single step in a reference, such as Matt , and may nest to handle multi-part references. The equivalent structure to the set of cRefPattern s in 16.2.5.1 Worked Example would be: An application wishing to resolve a canonical reference such as Matt 5:7 might follow this procedure: Ascertain the correct refsDecl following the rules summarized in section 15.3.3 Summary . Begin with the outer citeStructure. If it has a delim attribute and the reference begins with the value of delim then take the portion of the reference after the value of delim as input for the next child citeStructure. For each nested citeStructure, if the input reference string contains the value of the delim, then split the string on the value of the delim attribute. If the input string does not contain delim, then stop. Take the portion of the input string after the value of delim and use it as the input string for the child citeStructure. After processing the outer citeStructure, the output will be ('Matt 5:7') , after the second, ('Matt', '5:7') . The end result will be a sequence like ('Matt','5','7') . For each item in the resulting sequence, resolve the matching node by evaluating the XPath in match with the predicate found in use, using the context of the previously matched node, if any. Start with the outer citeStructure and move to the next child citeStructure for each step in the sequence. For example, for the first citeStructure, we could construct an XPath //div[@n='Matt'] . The full XPath after the reference Matt 5:7 is resolved will be //div[@n='Matt']/div[@n='5']/div[@n='7'] . Citation structures may in addition specify how informational properties are to be extracted from the document sections they identify, using the citeData element. For example, if a TEI document is divided into chapters with a div per chapter and those chapters have titles, contained in head elements, then we might declare a citation structure for the document thus: This specifies that chapter references are given in the form ch. n , where n is the position of the div in the body of the document, and that we may obtain the title of the chapter (identified by the Dublin Core property title ) from the chapter heading. This would, for example, enable the automated generation of a chapter listing for the document. 16.3 Blocks, Segments, and Anchors In this section, we discuss three general purposes elements which may be used to mark and categorize both a span of text and a point within one. These elements have several uses, most notably to provide elements which can be given identifiers for use when aligning or linking to parts of a document, as discussed elsewhere in this chapter. They also provide a convenient way of extending the semantics of the TEI markup scheme in a theory-neutral manner, by providing for two neutral or anonymous elements to which the encoder can add any meaning not supplied by other TEI defined elements. < anchor > attaches an identifier to a point within a text, whether or not it corresponds with a textual element. < ab > contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph. < seg > represents any segmentation of text below the chunk level. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed < att.fragmentable > provides attributes for representing fragmentation of a structural element, typically as a consequence of some overlapping hierarchy. @part specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers. specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers. < att.segLike > provides attributes for elements used for arbitrary segmentation. @function characterizes the function of the segment. characterizes the function of the segment. The anchor element may be thought of as an empty seg , or as an artifice enabling an identifier to be attached to any position in a text. Like the milestone element discussed in section 3.11 Reference Systems , it is useful where multiple views of a document are to be combined, for example, when a logical view based on paragraphs or verse lines is to be mapped on to a physical view based on manuscript lines. Like those elements, it is a member of the class model.global and can therefore appear anywhere within a document when the module defined by this chapter is included in a schema. Unlike the other elements in its class, the anchor element is primarily intended to mark an arbitrary point used for alignment, or as the target of a spanning element such as those discussed in section 11.3.1.4 Additions and Deletions , rather than as a means of marking segment boundaries for some arbitrary segmentation of a text. For example, suppose that we wish to mark the end of the fifth word following each occurrence of some term in a particular text, perhaps to assist with some collocational analysis. This can most easily be done with the help of the anchor element, as follows: The seg element may be used at the encoder's discretion to mark almost any segment of the text of interest for processing. One use of the element is to mark text features for which no appropriate markup is otherwise defined, i.e. as a simple extension mechanism. Another use is to provide an identifier for some segment which is to be pointed at by some other element, i.e. to provide a target, or a part of a target, for a ptr or other similar element. Several examples of uses for the seg element are provided elsewhere in these Guidelines. For example: as a means of marking segments significant in a metrical or rhyming analysis (see section 6.4 Rhyme and Metrical Analysis ) as a means of marking typographic lines in drama (see section 7.2 The Body of a Performance Text ) or title pages (see section 4.6 Title Pages ) as a means of marking prosody- or pause-defined units in transcribed speech (see section 8.4.1 Segmentation ) as a means of marking linguistic or other analyses in a theory-neutral manner (see chapter 17 Simple Analytic Mechanisms passim) In the following simple example, the seg element simply delimits the extent of a stutter, a textual feature for which no element is provided in these Guidelines. As the above example shows, seg elements may be nested directly within one another, to any degree of analysis considered appropriate. This is taken a little further in the following example, where the type and subtype attributes have been used to further categorize each word of the sentence (the xml:id attributes have been removed to reduce the complexity of the example): (The example values shown are chosen for simplicity of comprehension, rather than verisimilitude). It should also be noted that specialized segment elements are defined in section 17.1 Linguistic Segment Categories to facilitate this particular kind of analysis. These allow for the explicit markup of units called s-units , clauses , phrases , words , morphemes , and characters , which may be felt preferable to the more generic approach typified by use of the seg element. Using these, the first phrase above might be encoded simply as In language corpora and similar material, the seg element may be used to provide an end-to-end segmentation as an alternative to the more specific s element proposed in chapter 17.1 Linguistic Segment Categories for the markup of orthographic sentences, or s-units . However, it may be more useful to use the s element for this purpose, since this means that the seg element can then be used to mark both features within s-units and segments composed of s-units, as in the following example: 6 Like other elements, the seg tag must be properly enclosed within other elements. Thus, a single seg element can be used to group together words in different sentences only if the sentences are not themselves tagged. The first of the following two encodings is legal, but the second is not. The part attribute may be used as one simple method of overcoming this restriction: The seg element has the same content as a paragraph in prose: it can therefore be used to group together consecutive sequences of model.inter class elements, such as lists, quotations, notes, stage directions, etc. as well as to contain sequences of phrase-level elements. It cannot however be used to group together sequences of paragraphs or similar text units such as verse lines; for this purpose, the encoder should use intermediate pointers, as described in section 16.1.4 Intermediate Pointers or the methods described in section 16.7 Aggregation . It is particularly important that the encoder provide a clear description of the principles by which a text has been segmented, and the way in which that segmentation is represented. This should include a description of the method used and the significance of any categorization codes. The description should be provided as a series of paragraphs within the segmentation element of the encoding description in the TEI header, as described in section 2.3.3 The Editorial Practices Declaration . The seg element may also be used to encode simultaneous or mutually exclusive variants of a text when the more special purpose elements for simple editorial changes, abbreviation and expansion, addition and deletion, or for a critical apparatus are not appropriate. In these circumstances, one seg is encoded for each possible variant, and the set of them is enclosed in a choice element. For example, if one were writing dual-platform instructions for installation of software, it might be useful to use seg to record platform-specific pieces of mutually exclusive text. Elsewhere in this chapter we provide a number of examples where the seg element is used simply to provide an element to which an identifier may be attached, for example so that another segment may be linked or related to it in some way. The ab (anonymous block) element performs a similar function to that of the seg element, but is used for portions of the text which occur not within paragraphs or other component-level elements, but at the component level themselves. It is therefore a member of the model.pLike class. The ab element may be used, for example, to tag the canonical verse divisions of Biblical texts: In other cases, where the text clearly indicates paragraph divisions containing one or more verses, the p element may be used to tag the paragraphs, and the seg element used to subdivide them. The ab element is provided as an alternative to the p element; it may not be used within paragraphs. The seg element, by contrast, may appear only within and not between paragraphs (or anonymous block elements). The ab element is also useful for marking dramatic speeches when it is not clear whether the speech is to be regarded as prose or verse. If, for example, an encoder does not wish to express an opinion as to whether the opening lines of Shakespeare's The Tempest are to be regarded as prose or as verse, they might be tagged as follows: 16.4 Synchronization In the previous section we discussed two particular kinds of alignment: alignment of parallel texts in different languages; and alignment of texts and portions of an image. In this section we address another specialized form of alignment: synchronization. The need to mark the relative positions of text components with respect to time arises most naturally and frequently in transcribed spoken texts, but it may arise in any text in which quoted speech occurs, or events are described within a time frame. The methods described here are also generalizable for other kinds of alignment (for example, alignment of text elements with respect to space). 16.4.1 Aligning Synchronous Events Provided that explicit elements are available to represent the parts or places to be synchronized, then the global linking attribute synch may be used to encode such synchronization, once it has been identified. < att.global.linking > provides a set of attributes for hypertextual linking. @synch points to elements that are synchronous with the current element. points to elements that are synchronous with the current element. To illustrate the use of these mechanisms for marking synchrony, consider the following representation of a spoken text: This representation uses numbers in brackets to mark the points at which speakers overlap each other. For example, the [1] in A's first speech is to be understood as coinciding with the [1] in B's second speech. 7 To encode this we use the spoken texts module, described in chapter 8 Transcriptions of Speech , together with the module described in the present chapter. First, we transcribe this text, marking the synchronous points with anchor elements, and providing a synch attribute on one of each of the pairs of synchronous anchors. As noted in the example given above (section 16.5.2 Alignment of Parallel Texts ), correspondence, and hence synchrony, is a symmetric relation; therefore the attribute need only be specified on one of the pairs of synchronous anchors. We can encode this same example using link and linkGrp elements to make the temporal alignment explicit. A back element has been used to enclose the linkGrp element, but the links may be located anywhere the encoder finds convenient: As with other forms of alignment, synchronization may be expressed between stretches of speech as well as between points. When complete utterances are synchronous, for example, if one person says What? and another No! at the same time, that can be represented without anchor elements as follows. A simple way of expressing overlap (where one speaker starts speaking before another has finished) is thus to use the seg element to encode the overlapping portions of speech. For example, 16.4.2 Placing Synchronous Events in Time A synchronous alignment specifies which points in a spoken text occur at the same time, and the order in which they occur, but does not say at what time those points actually occur. If that information is available to the encoder it can be represented by means of the when and timeline elements, whose description and attributes are the following: < when > indicates a point in time either relative to other elements in the same timeline tag, or absolutely. < timeline > provides a set of ordered points in time which can be linked to elements of a spoken text to create a temporal alignment of that text. Each when element indicates a point in time, either directly by means of the absolute attribute, whose value is a string which specifies a particular time, or indirectly by means of the since attribute, which points to another when . If the since is used, then the interval and unit attributes should also be used to indicate the amount of time that has elapsed since the time specified by the element pointed to by the since attribute; the value -1 can be given to indicate that the interval is unknown. If the when elements are uniformly spaced in time, then the interval and unit values need be given once in the timeline , and not repeated in any of the when elements. If the intervals vary, but the units are all the same, then the unit attribute alone can be given in the timeline element, and the interval attribute given in the when element. The origin attribute in the timeline element points to a when element which specifies the reference or origin for the timings within the timeline ; this must, of course, specify its position in time absolutely. If the origin of a timeline is unknown, then this attribute may be omitted. The following timeline might be used to accompany the marked up conversation shown in the preceding section: To avoid the need for two distinct link groups (one marking the synchronization of anchors with each other, and the other marking their alignment with points on the time line) it would be better to link the when elements with the synchronous points directly: Finally, suppose that a digitized audio recording is also available, and an XML file that assigns identifiers to the various temporal spans of sound is available. For example, the following Synchronized Multimedia Integration Language (SMIL, pronounced \"smile\") fragment: For further discussion of this and related aspects of encoding transcribed speech, refer to chapter 8 Transcriptions of Speech . 16.5 Correspondence and Alignment In this section we introduce the notions of correspondence , expressed by the corresp attribute, and of alignment , which is a special kind of correspondence involving an ordered set of correspondences. Both cases may be represented using the link and linkGrp elements introduced in section 16.1 Links . We also discuss the special case of alignment in time or synchronization , for which special purpose elements are proposed in section 16.4 Synchronization . 16.5.1 Correspondence A common requirement in text analysis is to represent correspondences between two or more parts of a single document, or between places in different documents. Provided that explicit elements are available to represent the parts or places to be linked, then the global linking attribute corresp may be used to encode such correspondence, once it has been identified. < att.global.linking > provides a set of attributes for hypertextual linking. @corresp points to elements that correspond to the current element in some way. points to elements that correspond to the current element in some way. Where the correspondence is between spans, the seg element should be used, if no other element is available. Where the correspondence is between points, the anchor element should be used, if no other element is available. The use of the corresp attribute with spans of content is illustrated by the following example: Essentially, what the corresp attribute does is to specify that elements bearing this attribute and those to which the attribute points are doubly linked. In the example above, the use of the corresp attribute indicates that the seg element containing the show and the title element containing Shirley correspond to each other: the correspondence relationship is not from one to the other, but between the two objects. It is thus different from the target attribute, and provides functionality more similar to that of the link and linkGrp elements defined in section 16.1 Links , although it lacks the ability to indicate more precisely what kind of correspondence is intended as in the following retagging of the preceding example. In the following example, we use the same mechanism to express a correspondence amongst the anchors introduced following the fifth word after English in a text: 16.5.2 Alignment of Parallel Texts One very important application area for the alignment of parallel texts is multilingual corpora. Consider, for example, the need to align translation pairs of sentences drawn from a corpus such as the Canadian Hansard, in which each sentence is given in both English and French. Concerning this problem, Gale and Church write: Most English sentences match exactly one French sentence, but it is possible for an English sentence to match two or more French sentences. The first two English sentences [in the example below] illustrate a particularly hard case where two English sentences align to two French sentences. No smaller alignments are possible because the clause ...sales...were higher... in the first English sentence corresponds to (part of) the second French sentence. The next two alignments ... illustrate the more typical case where one English sentence aligns with exactly one French sentence. The final alignment matches two English sentences to a single French sentence. These alignments [which were produced by a computer program] agreed with the results produced by a human judge. 8 The alignment produced by Gale and Church's program can be expressed in four different ways. The encoder must first decide whether to represent the alignment in terms of points within each text (using the anchor element) or in terms of whole stretches of text, using the seg element. To some extent the choice will depend on the process by which the software works out where alignment occurs, and the intention of the encoder. Secondly, the encoder may elect to represent the actual encoding using either corresp attributes attached to the individual anchor or seg elements, or using a free-standing linkGrp element. We present first a solution using anchor elements bearing only corresp attributes: There is no requirement that the corresp attribute be specified in both English and French texts, since (as noted above) this attribute is defined as representing a mutual association. However, it may simplify processing to do so, and also avoids giving the impression that the English is translating the French, or vice versa. More seriously, this encoding does not make explicit that it is in fact the entire stretch of text between the anchors which is being aligned, not simply the points themselves. If for example one text contained material omitted from the other, this approach would not be appropriate. We now present the same passage using the alternative linkGrp mechanism and marking explicitly the segments which have been aligned: Note that use of the ab element allows us to mark up the orthographic sentences in both languages independently of the alignment: the first translation pair in this example might be marked up as follows: 16.5.3 A Three-way Alignment The preceding encoding of the alignment of parallel passages from two texts requires that those texts and the alignment all be part of the same document. If the texts are in separate documents, then complete URIs, whether absolute or relative (section 16 Linking, Segmentation, and Alignment ), will be required. These external pointers may appear anywhere within the document, but if they are created solely for use in encoding links, they may for convenience be grouped within the linkGrp (or other grouping element that uses them for linking). To demonstrate this facility, we consider how we might encode the alignments in an extract from Comenius' Orbis Sensualium Pictus , in the English translation of Charles Hoole (1659). Each topic covered in this work has three parts: a picture, a prose text in Latin describing the topic, and a carefully-aligned translation of the Latin into English, German, or some other vernacular. Key terms in the two texts are typographically distinct, and are linked to the picture by numbers, which appear in the two texts and within the picture as well. First, we consider the text portions. The English and Latin portions have been encoded as distinct div elements. Identifiers have been attached to each typographic line, but no other encoding added, to simplify the example. Next we consider the non-textual parts of the page. Encoding this requires providing two distinct components: firstly a digitized rendering of the page itself, and secondly a representation of the areas within that image which are to be aligned. In section 11.1 Digital Facsimiles we present a simple way of doing this using the TEI-defined markup for alignment of facsimiles. In the present chapter we demonstrate a more powerful means of aligning arbitrary polygons and points, which uses the XML notation SVG (see SVG ). This provides appropriate facilities for both these requirements: As printed, the Comenius text exhibits three kinds of alignment. The English and Latin portions are printed in two parallel columns, with corresponding phrases, (represented above by seg elements), more or less next to each other. Particular words or phrases are marked as terms in the two languages by a change of rendition: the English text, which otherwise uses black letter type throughout, has the words The Study , a Student , Studies , and Books in a roman font; in the Latin text, which is printed in roman, the corresponding words ( Museum , Studiosus , Studiis , and Libros ) are all in italic. Numbered labels appear within the text portions, linking keywords to each other and to sections of the picture. These labels, which have been left out of the above encoding, are attached to the first, third, and last segments in each language quoted below, and also appear (rather indistinctly) within the picture itself. Thus, the images of the study, the student, and his books are each aligned with the correct term for them in the two languages. The first kind of alignment might be represented by using the corresp attribute on the seg element. The second kind might be represented by using the gloss and term mechanism described in section 3.4.1 Terms and Glosses . The third kind of alignment might be represented using pointers embedded within the texts, for example: This map, of course, only aligns whole segments and image portions, since these are the only parts of our encoding which bear identifiers and can therefore be pointed to. To add to it the alignment between the typographically distinct words mentioned above, new elements must be defined, either within the text itself or externally by using stand off techniques. Encoding these word pairs as term and gloss , although intuitively obvious, requires a non-trivial decision as to whether the Latin text is glossing the English, or vice versa. Tagging all the marked words as term avoids the difficult decision, but might be thought by some encoders to convey the wrong information about the words in question. Simply tagging them as additional embedded seg elements with identifiers that can be aligned like the others is also a possibility. These solutions all require the addition of further markup to the text. This may pose no problems, or it may be infeasible, for example because the text is held on a read-only medium. If it is not feasible to add more markup to the original text, some form of stand-off markup will be needed. Any item within the text that can be pointed to using the various pointer schemes discussed in this chapter may be used, not simply those which rely on the existence of an xml:id attribute. Suppose our example had been more lightly tagged, as follows: To express the same alignment mentioned above, we could use an XPath expression to identify the required ab elements: 16.6 Identical Elements and Virtual Copies This section introduces the notion of a virtual element , that is, an element which is not explicitly present in a text, but the presence of which an application can infer from the encoding supplied. In this section, we are concerned with virtual elements made by simply cloning existing elements. In the next section ( 16.7 Aggregation ), we discuss virtual elements made by aggregating existing elements. Provided that explicit elements are available to represent the parts or places to be linked, then the global linking attributes sameAs and copyOf may be used to encode this kind of equivalence: < att.global.linking > provides a set of attributes for hypertextual linking. @sameAs points to an element that is the same as the current element. @copyOf points to an element of which the current element is a copy. points to an element that is the same as the current element. points to an element of which the current element is a copy. It is useful to be able to represent the fact that one element of text is identical to others, for analytical purposes, or (especially if the elements have lengthy content) to obviate the need to repeat the content. For example, consider the repetition of the date element in the following material: The sameAs attribute may be used to document the fact that two elements have identical content. It may be regarded as a special kind of link. It should only be attached to an element with identical content to that which it targets, or to one the content of which clearly designates it as a repetition, such as the word repeat or bis in the representation of the chorus of a song, the second time it is to be sung. The relation specified by the sameAs attribute is symmetric: if a chorus is repeated three times and each repetition bears a sameAs attribute indicating the first occurrence of the element concerned, it is implied that each chorus is identical, and there is no need for the first occurrence to specify any of its copies. The copyOf attribute is used in a similar way to indicate that the content of the element bearing it is identical to that of another. The difference is that the content is not itself repeated. The effect of this attribute is thus to create a virtual copy of the element indicated. Using this attribute, the repeated date in the first example above could be recoded as follows: An application program should replace whatever is the actual content of an element bearing a copyOf attribute with the content of the element specified by it. If the content of the element specified includes other elements, these will become embedded within the element bearing the attribute. Care must be taken to ensure that the document is valid both before and after this embedding takes place. If, for example, the element bearing a copyOf attribute requires a mandatory sub-component, then this component must be present (though possibly empty), even though it will be replaced by the content of the targetted element. The following example demonstrates how the copyOf attribute may be used in conjunction with the seg element to highlight the differences between almost identical repetitions: For further examples of the use of this attribute, see 16.8 Alternation and 19.3 Another Tree Notation . 16.7 Aggregation Because of the strict hierarchical organization of elements, or for other reasons, it may not always be possible or desirable to include all the parts of a possibly fragmented text segment within a single element. In section 16.1.4 Intermediate Pointers we introduced the notion of an intermediate pointer as a way of pointing to discontinuous segments of this kind. In this section we first describe another way of linking the parts of a discontinuous whole, using a set of linking attributes, which are made available for any tag by following the procedure described at the beginning of this chapter. We then describe how the link element may be used to aggregate such segments, and finally introduce the join element, which is a special-purpose linking element specifically for representing the aggregation of parts, and the joinGrp for grouping join elements. The linking attributes for aggregation are next and prev; each of these attributes has a single identifier as its value: < att.global.linking > provides a set of attributes for hypertextual linking. @next points to the next element of a virtual aggregate of which the current element is part. @prev points to the previous element of a virtual aggregate of which the current element is part. points to the next element of a virtual aggregate of which the current element is part. points to the previous element of a virtual aggregate of which the current element is part. It is recommended that the elements indicated by these attributes be of the same type as the element bearing them. The join element is also a member of the class of att.pointing elements, and so may carry any of the attributes of that class; for the list, see section 16.1 Links . Here is the material on which we base our first illustration of the use of these mechanisms. Our problem is to represent the s-units identified below as qs3 and qs4 as a single (but discontinuous) whole: Using the prev and next attributes, we can link the s-units with identifiers qs3 and qs4, either singly or doubly as follows: Such a link element must carry a type attribute with a value of join to specify that the link is to be understood as joining its targets into a single aggregate. The join element is equivalent to a link element of type join. Unlike the link element, the join element can additionally specify information about the virtual element which it represents, by means of its result attribute. And finally, unlike the link element, the position of a join element within a text is significant: it must be supplied at a position where the element indicated by its result attribute would be contextually legal. < join > identifies a possibly fragmented segment of text, by pointing at the possibly discontiguous elements which compose it. < joinGrp > groups a collection of join elements and possibly pointers. The following example shows how join can be used to reconstruct a text cited in fragments presented out of order. The poem being remembered (an unusual translation of a well-known poem by Basho) runs When the old pond / gets a new frog, / it's a new pond. As with other forms of link, a grouping element joinGrp is available for use when a number of join elements of the same kind co-occur. This avoids the need to specify the result attribute for each join if they are all of the same type, and also allows us to restrict the domain within which their target elements are to be found, in the same way as for linkGrp elements (see 16.1.3 Groups of Links ). Like a join , a joinGrp may appear only where the elements represented by its contents are legal. Thus if we had created many join tags of the sort just described, we could group them together, and require that their components are all contained by an element with the identifier MFKFhungry as follows: The join element is useful as a means of representing non-hierarchic structures (as further discussed in chapter 20 Non-hierarchical Structures ). It may also be used as a convenient way of representing a variety of analytic units, like the span and interp elements discussed in chapter 17 Simple Analytic Mechanisms . As an example, consider the following famous Zen koan: Zui-Gan called out to himself every day, Master. Then he answered himself, Yes, sir. And then he added, Become sober. Again he answered, Yes, sir. And after that, he continued, do not be deceived by others. Yes, sir; yes, sir, he replied. Suppose now that we wish to represent an interpretation of the above passage in which we distinguish between the various voices adopted by Zui-Gan. In the following encoding, the who attribute has been used for this purpose; its value on each occasion supplies a pointer to the voice to which each speech is attributed. (For convenience in this example, we use simply the first occurrence of the names used for each voice as the target for these pointers.) Note also that we add xml:id attributes to each distinct speech fragment, which we can then use to link the material spoken by each voice: However, by using the join element, we can directly represent the complete speech attributed to each voice: Note the use of the desc child element within the two join s making up the q element here. These enable us to document the speakers of the two virtual q elements represented by the join elements; this is necessary because the there is no way of specifying the attributes to be associated with a virtual element, in particular there is no way to specify a who value for them. Suppose now that xml:id attributes, for whatever reasons, are not available. Then ptr elements may be created using any of the methods described in section 16.2.4 TEI XPointer Schemes . The xml:id attributes of these elements may now be specified by the target attribute on the join elements. The extended pointer with identifier rzuiq2, for example, may be read as the first q in the first p , within the sixth div1 element of the current document. 16.8 Alternation This section proposes elements for the representation of alternation. We say that two or more elements are in exclusive alternation if any of those elements could be present in a text, but one and only one of them is; in addition, we say that those elements are mutually exclusive . We say that the elements are in inclusive alternation if at least one (and possibly more) of them is present. The elements that are in alternation may also be called alternants . The need to mark exclusive alternation arises frequently in text encoding. A common situation is one in which it can be determined that exactly one of several different words appears in a given location, but it cannot be determined which one. One way to mark such an exclusive alternation is to use the linking attribute exclude. Having marked an exclusive alternation, it can sometimes later be determined which of the alternants actually appears in the given location. To preserve the fact that an alternation was posited, one can add the linking attribute select to a tag which hierarchically encompasses the alternants, which points to the one which actually appears. To assign responsibility and degree of certainty to the choice, one can use the certainty tag described in chapter 21 Certainty, Precision, and Responsibility . Also see that chapter for further discussion of certainty in general. The exclude and select attributes may be used with any element assuming that they have been declared following the procedure discussed in the introduction to this chapter. < att.global.linking > provides a set of attributes for hypertextual linking. @exclude points to elements that are in exclusive alternation with the current element. @select selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected. points to elements that are in exclusive alternation with the current element. selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected. A more general way to mark alternation, encompassing both exclusive and inclusive alternation, is to use the linking element alt . The description and attributes of this tag and of the associated grouping tag altGrp are as follows. These elements are also members of the att.pointing class and therefore have all the attributes associated with that class. < alt > identifies an alternation or a set of choices among elements or passages. < altGrp > groups a collection of alt elements and possibly pointers. To take a simple hypothetical example, suppose in transcribing a spoken text, we encounter an utterance that we can understand either as We had fun at the beach today. or as We had sun at the beach today. We can represent the exclusive alternation of these two possibilities by means of the exclude attribute as follows. If it is then determined that the speaker said fun , not sun , the encoder could amend the text by deleting the alternant containing sun and the exclude attribute on the remaining alternant. Alternatively, the encoder could preserve the fact that there was uncertainty in the original transcription by retaining the alternants, and assigning the we.fun value to the select attribute value on the div element that encompasses the alternants, as in: The above alternation (including the select attribute) could be recoded by assigning the exclude attributes to tags that enclose just the words or even the characters that are mutually exclusive, as in: 9 Now suppose that the transcriber is uncertain whether the first word in the utterance is We or Lee , but is certain that if it is Lee , then the other uncertain word is definitely fun and not sun . The three utterances that are in mutual exclusion can be encoded as follows. The preceding example can also be encoded with exclude attributes on the word segments We , Lee , fun , and sun : The value of the select attribute is defined as a list of identifiers; hence it can also be used to narrow down the range of alternants, as in: The exclude attribute can also be used in case there is uncertainty about the tag that appears in a certain position. For example, the occurrence of the word May in the s-unit Let's go to May can be interpreted, in the absence of other information, either as a person's name or as a date. The uncertainty can be rendered as follows, using the exclude attribute. Note the use of the copyOf attribute discussed in section 16.6 Identical Elements and Virtual Copies ; this avoids having to repeat the content of the element whose correct tagging is in doubt. The copyOf and the exclude attributes also provide for a simple way of indicating uncertainty about exactly where a particular element occurs in a document. 10 For example suppose that a particular div2 element appears either as the third and last of the div2 elements within the first div1 element in the body of a document, or as the first div2 of the second div1 . One solution would be to record the div2 in its entirety in the first of these positions, and a virtual copy of it in the second, and mark them as excluding each other as follows: Mutual exclusion can also be expressed using a link ; the first example in this section can be recoded by removing the exclude attributes from the u elements, and adding a link element as follows: 11 Now we define the specialized linking element alt , making it a member of the class att.pointing , and assigning it a mode attribute, which can have either of the values excl (for exclusive) or incl (for inclusive). Then the following equivalence holds: The preceding link element may therefore be recoded as the following alt element. Another attribute that is defined specifically for the alt element is weights, which is to be used if one wishes to assign probabilistic weights to the targets (alternants). Its value is a list of numbers, corresponding to the targets, expressing the probability that each target appears. If the alternants are mutually exclusive, then the weights must sum to 1.0. Suppose in the preceding example that it is equiprobable whether fun or sun appears. Then the alt element that represents the alternation may be stated as follows: The assignment of a weight of 1.0 to one target (and weights of 0 to all the others) is equivalent to selecting that target. Thus the following encoding is equivalent to the second example at the beginning of this section. If it is desired, alt elements may be grouped together in an altGrp element, and attribute values shared by the individual alt elements may be identified on the altGrp element. The targFunc attribute defaults to the value first.alternant next.alternant. To illustrate, consider again the example of a transcribed utterance, in which it is uncertain whether the first word is We or Lee , whether the third word is fun or sun , but that if the first word is Lee , then the third word is fun . Now suppose we have the following additional information: if we occurs, then the probability that fun occurs is 50% and that sun occurs is 50%; if fun occurs, then the probability that we occurs is 40% and that Lee occurs is 60%. This situation can be encoded as follows. From the information in this encoding, we can determine that the probability is about 28.5% that the utterance is We had fun at the beach today , 28.5% that it is We had sun at the beach today , and 43% that it is Lee had fun at the beach today . Another very similar example is the following regarding the text of a Broadway song. In three different versions of the song, the same line reads Her skin is tender as a leather glove , Her skin is tender as a baseball glove , and Her skin is tender as Dimaggio's glove. 12 If we wish to express this textual variation using the alt element, we can record our relative confidence in the readings Dimaggio's (with probability 50%), a leather (25%), and a baseball (25%). Let us extend the example with a further (imaginary) variation, supposing for the sake of the argument that the next line is variously given as and she bats from right to left (with probability 50%) or now ain't that too damn bad (with probability 50%). Using the alt element, we can express the conviction that if the first choice for the second line is correct, then the probability that the first line contains Dimaggio's is 90%, and each of the others 5%; whereas if the second choice for the second line is correct, then the probability that the first line contains Dimaggio's is 10%, and each of the others is 45%. This can be encoded, with an altGrp element containing a combination of exclusive and inclusive alt elements, as follows. 16.9 Stand-off Markup 16.9.1 Introduction Most of the mechanisms defined in this chapter rely to a greater or lesser extent on the fact that tags in a marked-up document can both assert a property for a span of text which they enclose, and assert the existence of an association between themselves and some other span of text elsewhere. In stand-off markup, there is a clear separation of these two behaviours: the markup does not directly contain any part of the text, but instead includes it by reference. One specific mechanism recommended by these Guidelines for this purpose is the standard XInclude mechanism defined by the W3C; another is to use pointers as demonstrated elsewhere in this chapter. There are many reasons for using stand-off markup: the source text might be read-only so that additional markup cannot be added, or a single text may need to be marked up according to several hierarchically incompatible schemes, or a single scheme may need to accommodate multiple hierarchical ambiguities, so that a single markup tree is not the most faithful representation of the source material. This section describes a generic mechanism for expressing all kinds of markup externally as stand-off tags, for use whenever it is appropriate; and a place in the TEI structure ( standOff ) to contain certain common kinds of stand-off markup. Throughout this section the following terms will be systematically used in specific senses. a document to which the stand-off markup refers (a source document can be either XML or plain text); there may be more than one source document. markup that is already present in an XML source document markup that is either outside of the source document and points in to it to the data it describes, or is pointed at by the data that refers to it; or alternatively is in another part of the source document and points elsewhere within the document to the data it describes, or is pointed at by data elsewhere that refers to it. a document that contains stand-off markup that points to a different, source document the action of creating a new XML document with external markup and data integrated with the source document data, and possibly some source document markup as well a process applied to markup from a pre-existing XML document, which splits it into two documents, an XML (external) document containing some of the markup of the original document, and another (source) XML document containing whatever text content and markup has not been extracted into the stand-off document; if all markup has been externalized from a document, the new source may be a plain text document The three major requirements satisfied by this scheme for stand-off markup are: any valid TEI markup can be either internal or external, external markup can be internalized by applying it to the document content by either substituting the existing markup or adding to it, to form a valid TEI document, and the external markup itself specifies whether an internalized document is to be created by substituting the existing internal markup or by adding to it. 16.9.2 Overview of XInclude Stand-off markup which relies on the inclusion of virtual content is adequately supported by the W3C XInclude recommendation, which is also recommended for use by these Guidelines. 13 XInclude defines a namespace ( http://www.w3.org/2001/XInclude ), which in these Guidelines will be associated with the prefix xi: , and exactly two elements, xi:include and xi:fallback . XInclude relies on the XPointer framework discussed elsewhere in this chapter to point to the actual fragments of text to be internalized. Although XInclude only requires support for the element() scheme of XPointer, these Guidelines permit the use of any of the pointing schemes discussed in section 16.2 Pointing Mechanisms . XInclude is a W3C recommendation which specifies a syntax for the inclusion within an XML document of data fragments placed in different resources. Included resources can be either plain text or XML. XInclude instructions within an XML document are meant to be replaced by a resource targetted by a URI, possibly augmented by an XPointer that identifies the exact subresource to be included. The xi:include element uses the href attribute to specify the location of the resource to be included; its value is an URI containing, if necessary, an XPointer. Additionally, it uses the parse attribute (whose only valid values are text and xml) to specify whether the included content is plain text or an XML fragment, and the encoding attribute to provide a hint, when the included fragment is text, of the character encoding of the fragment. An optional xi:fallback element is also permitted within an xi:include ; it specifies alternative content to be used when the external resource cannot be fetched for some reason. Its use is not however recommended for stand-off markup. 16.9.3 Stand-off Markup in TEI The operations of internalizing and externalizing markup are very useful and practically important. XInclude processing as defined by the W3C is internalization of one or more source documents' content into a stand-off document. TEI use of XInclude for stand-off markup enables use of XInclude-conformant software to perform this useful operation. However, internalization is not clearly defined for all stand-off files, because the structure of the internal and external markup trees may overlap. In particular, when an external markup document selects a range that overlaps partial elements in the source document, it is not clear how the semantics of internalization (inclusion) should work, since partial elements are not XML objects. 14 XInclude defines a semantics for this case that involves only complete elements. When a range selection partially overlaps a number of elements in a source document, XInclude specifies that the partially overlapping elements should be included as well as all completely overlapping elements and characters (partially overlapping characters are not possible). The effect of this is that elements that straddle the start or end of a selected range will be included as wrappers for those of their children that are completely or partially selected by the range. For example, given the following source document: When overlapping hierarchies need to be represented for a single document, each hierarchy must be represented by a separate set of XInclude tags pointing to a common source document. This sort of structure corresponds to common practice in work with linguistic text corpora. In such corpora, each potentially overlapping hierarchy of elements for the text is represented as a separate stream of stand-off markup. Generally the source text contains markup for the smallest significant units of analysis in the corpus, such as words or morphemes, this information and its markup representing a layer of common information that is shared by all the various hierarchies. As a way of organizing the representation of complex data, this technique generally allows a large number of xml:id attributes to be attached to the shared elements, providing robust anchors for links and facilitating adjustments to the source document without breaking external documents that reference it. Any tag can be externalized by removing its content and replacing it with an xi:include element that contains an XPointer pointing to the desired content. For instance the following portion of a TEI document: Please note that this specification requires that the XInclude namespace declaration is present in all cases. The xi:fallback element contains text or XML fragments to be placed in the document if the inclusion fails for any reason (for instance due to inaccessibility of an external resource). The xi:fallback element is optional; if it is not present an XInclude processor must signal a fatal error when a resource is not found. This is the preferred behaviour for use with stand-off markup. These Guidelines recommend against the use of xi:fallback for stand-off markup. 16.9.4 Well-formedness and Validity of Stand-off Markup The whole source fragment identified by an XInclude element, as well as any markup therein contained is inserted in the position specified, and an XInclude processor is required to ensure that the resulting internalized document is well-formed. This has obvious implications when the external document contains XML markup. A plain text source document will always create a well-formed internalized document. While a TEI customization may permit xi:include elements in various places in a TEI document instance, in general these Guidelines suggest that validity be verified after the resolution of all the xi:include elements. 16.9.5 Including Text or XML Fragments When the source text is plain text the overall form of the XPointer pointing to it is of minimal importance. The form of the XPointer matters considerably, on the other hand, when the source document is XML. In this case, it is rather important to distinguish whether we intend to substitute the source XML with the new one, or just to add new markup to it. The XPointers used in the references can express both cases. A simple way is to make sure to select only textual data in the XPointer. For instance, given the following document: Source.xhtml On the contrary, the expressions xpointer(//text()/range-to(.)) and xpointer(string-range(//text(),\"To\")/range-to(//text(),\"few.\") will only select the text of the poem, with no markup inside. Thus, the following could be a valid stand-off document for the Source.xhtml document: External2.xml 16.10 The standOff Container The standOff element is intended to hold content that does not fit well in the text (e.g. because it is not transcribed from the source), nor in the teiHeader (e.g. because it is not metadata about the source or transcription). Examples include contextual information about named entities (typically encoded using listBibl , listOrg , listNym , listPerson , or listPlace ), annotations indicating the morphosyntactic features of a text, and annotations commenting on or associating parts of a text with additional information. < standOff > Functions as a container element for linked data, contextual information, and stand-off annotations embedded in a TEI document. As a member of model.resource , standOff may occur as a child of TEI (or teiCorpus ). If the metadata that describes the standOff is largely the same as the metadata that describes the associated resource (e.g., the transcribed text in text ), then the standOff and the encoded associated resource may appear as children of the same TEI element. The example below has a transcription with placename elements in the text linked to a list of place elements in the standOff section. 16.11 Annotations The annotation element's structure is based on the Web Annotation Data Model (WADM). A Web Annotation may have one or more targets, which are URIs, and zero or more bodies, which may be either URIs or embedded text. A Web Annotation may also contain metadata about the annotation, such as the creator, creation and modification dates, and license information. The annotation element implements a subset of WADM, using TEI elements and attributes to encode the same information, with a focus on annotating TEI documents. Targets are represented using the target attribute on annotation . URI bodies are represented using ref or ptr and embedded text bodies using note . Lifecycle and license information may be given using respStmt , revisionDesc , and licence . < listAnnotation > contains a list of annotations, typically encoded as annotation , annotationBlock , or note , possibly organized with nested listAnnotation elements. < annotation > represents an annotation following the Web Annotation Data Model . TEI annotations are, in general, intended to capture the output of processes that annotate TEI texts without altering the text and markup in the text . They allow this kind of output to be represented directly in TEI, and thus to be processed using the same toolchains as the texts they annotate. A named entity recognition workflow might use annotation , for example to associate names in the text with person elements instead of attempting to rewrite the TEI text using inline persName . Projects may wish to use this mechanism to layer information onto a TEI text in case where using inline elements might result in complicated markup. The example below illustrates how stand-off annotations can be used to connect words in a text with place elements in a list. The words Gallia and Galliae in the edition are connected by an annotation in the standOff section which points to them using string-range() pointers and references the definition of the place (also in the standOff section). If the set of annotations were created in a process separate from the creation of the transcription and then imported into the transcription document, then wrapping them in a TEI element with its own teiHeader providing metadata for the annotations might be advisable. core teiCorpus textstructure TEI analysis interp interpGrp span spanGrp certainty certainty precision respons core bibl biblStruct index list listBibl note dictionaries entry entryFree superEntry drama castList figures table header biblFull listChange iso-fs fLib fs fvLib linking alt altGrp annotation join joinGrp link linkGrp listAnnotation seg timeline msdescription msDesc namesdates listEvent listNym listObject listOrg listPerson listPlace listRelation nets eTree forest graph listForest tree spoken annotationBlock u textcrit listApp listWit transcr listTranspose substJoin zone This example shows an encoding of morphosyntactic features similar to the encoding system used by ISO 24611 (MAF) . This example shows an encoding of contextual information which is referred to from the main text. linking listAnnotation standOff core desc head label note linking annotation listAnnotation spoken annotationBlock The enclosed annotations may use the general-purpose note element; or, for annotations pertaining to transcriptions of speech, the special-purpose annotationBlock element; or the annotation element, which is intended to map cleanly onto the Web Annotation Data Model . linking listAnnotation standOff core note ptr ref respStmt header licence revisionDesc 16.12 Connecting Analytic and Textual Markup In chapters 17 Simple Analytic Mechanisms and 18 Feature Structures and elsewhere, provision is made for analytic and interpretive markup to be represented outside of textual markup, either in the same document or in a different document. The elements in these separate domains can be connected, either with the pointing attributes ana (for analysis ) and inst (for instance ), or by means of link and linkGrp elements. Numerous examples are given in these chapters. Another more specific form of annotation is available through the TEI ruby element and its children, described in detail in 3.4.2 Ruby Annotations . 16.13 Module for Linking, Segmentation, and Alignment The module described in this chapter makes available the following components: Linking, Segmentation, and Alignment Linking, segmentation, and alignment The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . ","title":"<span class=\"tei-div7 breadcrumb\">16 Linking, Segmentation, and Alignment</span>"}
{"link":"p5.xml?id=AI","tag":"guidelines","content":"17 Simple Analytic Mechanisms This chapter describes a module for associating simple analyses and interpretations with text elements. We use the term analysis here to refer to any kind of semantic or syntactic interpretation which an encoder wishes to attach to all or part of a text. Examples discussed in this chapter include familiar linguistic categorizations (such as clause , morpheme , part-of-speech etc.) and characterizations of narrative structure (such as theme , reconciliation etc.). The mechanisms presented in this chapter are simpler but less powerful than those described in chapter 18 Feature Structures . Section 17.1 Linguistic Segment Categories introduces elements which can be used to characterize text segments according to the familiar linguistic categories of sentence or s-unit , clause , phrase , word , morpheme , character , and punctuation mark . These elements represent special cases of the generic seg element described in section 16.3 Blocks, Segments, and Anchors . Section 17.2 Global Attributes for Simple Analyses introduces an additional global attribute which allows passages of text to be associated with specialized elements representing their interpretation. These interpretative elements ( span and interp ) are described in detail in section 17.3 Spans and Interpretations . They allow the encoder to specify an analysis as a series of names and associated values, 1 each such pair being linked to one or more stretches of text, either directly, in the case of spans, or indirectly, in the case of interpretations. Finally section 17.4 Linguistic Annotation revisits the topic of linguistic analysis, and illustrates how these interpretative mechanisms may be used to associate simple linguistic analysis with text segments. 17.1 Linguistic Segment Categories In this section we introduce specialized linguistic segment category elements which may be used to represent the segmentation of a text into the traditional linguistic categories of sentence , clause , phrase , word , morpheme , characters , and punctuation marks . 17.1.1 Words and Above Although different languages have very different rules about what constitutes a word or a sentence, these remain generally useful concepts. In this section we discuss elements provided for marking up linguistic units down to the word level, however defined. < s > contains a sentence-like division of a text. < cl > represents a grammatical clause. < phr > represents a grammatical phrase. < w > represents a grammatical (not necessarily orthographic) word. As members of the att.segLike class, these elements all share the following attribute: < att.segLike > provides attributes for elements used for arbitrary segmentation. @function characterizes the function of the segment. characterizes the function of the segment. < att.typed > provides attributes that can be used to classify or subclassify elements in any way. @type characterizes the element in some sense, using any convenient classification scheme or typology. @subtype provides a sub-categorization of the element, if needed characterizes the element in some sense, using any convenient classification scheme or typology. provides a sub-categorization of the element, if needed These elements are also all members of the model.segLike class, which is a subclass of model.phrase . They may thus appear anywhere that text is permitted within a document, when the module defined by this chapter is included in a schema. The w and pc elements belong to the att.linguistic class, which supplies attributes that may be used for lightweight linguistic annotation (see section 17.4.2 Lightweight Linguistic Annotation below): < att.linguistic > provides a set of attributes concerning linguistic features of tokens, for usage within token-level elements, specifically w and pc in the analysis module. @lemma provides a lemma (base form) for the word, typically uninflected and serving both as an identifier (e.g. in dictionary contexts, as a headword), and as a basis for potential inflections. @lemmaRef provides a pointer to a definition of the lemma for the word, for example in an online lexicon. @pos (part of speech) indicates the part of speech assigned to a token (i.e. information on whether it is a noun, adjective, or verb), usually according to some official reference vocabulary (e.g. for German: STTS, for English: CLAWS, for Polish: NKJP, etc.). @msd (morphosyntactic description) supplies morphosyntactic information for a token, usually according to some official reference vocabulary (e.g. for German: STTS-large tagset ; for a feature description system designed as (pragmatically) universal, see Universal Features ). @join when present, provides information on whether the token in question is adjacent to another, and if so, on which side. provides a lemma (base form) for the word, typically uninflected and serving both as an identifier (e.g. in dictionary contexts, as a headword), and as a basis for potential inflections. provides a pointer to a definition of the lemma for the word, for example in an online lexicon. (part of speech) indicates the part of speech assigned to a token (i.e. information on whether it is a noun, adjective, or verb), usually according to some official reference vocabulary (e.g. for German: STTS, for English: CLAWS, for Polish: NKJP, etc.). (morphosyntactic description) supplies morphosyntactic information for a token, usually according to some official reference vocabulary (e.g. for German: STTS-large tagset ; for a feature description system designed as (pragmatically) universal, see Universal Features ). when present, provides information on whether the token in question is adjacent to another, and if so, on which side. Additionally, these elements also have access to the att.lexicographic.normalized class, which supplies the attributes norm and orig: the former for handling normalization/regularization at the word level, the latter providing the original form if the element content is modernized or regularized. Note that these attributes are a local (word-level) alternative to the robust mechanism that uses the choice , orig , and reg elements, discussed in section 3.5.2 Regularization and Normalization and in chapter 12 Critical Apparatus . The choice -based mechanism is the default descriptive device, while the norm and orig attributes are used to handle a subset of normalizations in linguistic contexts where a single sequence of tokens is a priority, for example in historical corpora subject to linguistic analysis. It needs to be stressed that the simplified attribute-based mechanism is not meant to be used for editorial interventions. 2 The s element may be used simply to segment a text end-to-end into a series of non-overlapping segments, referred to here and elsewhere as s-units , or sentences . The s element may be further subdivided into clauses , marked with the cl element, as in the following example: Clauses may be further divided into phr elements in the same way. A text may be segmented directly into clauses, or into phrases, with no need to include segmentation at a higher level as well. For verse texts, the overlapping of metrical and syntactic structure requires that special care be given to representing both using an element hierarchy. One simple approach is to split the syntactic phrases into fragments when they cross verse boundaries, reuniting them with the part attribute: The type attribute on linguistic segment categories can be used to provide additional interpretative information about the category. The function attribute on the cl and phr elements can be used to provide additional information about the function of the category. Legal values for these two attributes are not defined by these Guidelines, but should be documented in the segmentation element of the encodingDesc element within the document's header. A general approach to the encoding of linguistic categories for parts of a text is discussed in section 17.4 Linguistic Annotation below. Using traditional terminology, these attributes provide a convenient way of specifying, for example, that the clause from whence it came is a relative clause modifying another, or that the phrase by the U.S. Supreme Court is a prepositional post-modifier: Segmentation into clauses and phrases can, of course, be combined. Such detailed encodings as the following may require careful formatting if they are to be easily readable however. This style of markup may introduce spurious new lines and blanks into the text. If the original layout is important, it should be explicitly encoded, using such facilities as the lb element, the global rend or rendition attributes, etc. The w , m , and c elements are identical in meaning to the seg element with a type attribute of w , m , or c respectively, and may occur wherever seg is permitted to occur. However, their content is more constrained than seg : for example, the w element should only contain w , m , c elements or pc elements, or plain text; the m element should contain only c or pc elements or plain text; both the c and pc elements should contain only plain text, most often only a single character or a sequence of graphemes to be treated as a single character. Consequently, while these more specific elements can be translated directly into typed seg elements, the reverse is not necessarily the case. The restriction on the content of the w element in particular requires that a certain care must be exercised when using it, especially in relation to the use of other tags that one may think of as word level , but which are in fact defined as phrase level . Consider the problem of segmenting an occurrence of the mentioned element as a word. On the other hand, both of the following encodings are legitimate: The w element carries additional attributes which may be of use in many indexing or analytic applications. The lemma attribute may be used to specify the lemma , that is the head- or uninflected form of an inflected verb or noun, for example: In some situations it may be more convenient to use the lemmaRef pointer attribute than to supply an explicit uninflected form. This attribute assumes the existence of a list of uninflected forms, for example in an online lexicon, with which individual w entries can be associated using the usual TEI pointer mechanisms. Assuming that a standardized lexicon for Latin is available at the location http://lexicon.org/latin.xml , we might for example revise the above example as: 17.1.2 Below the Word Level It is sometimes helpful to markup explicitly sub-word components such as morphemes, characters, or punctuation. < m > represents a grammatical morpheme. < c > represents a character. < pc > contains a character or string of characters regarded as constituting a single punctuation mark. The m element is used to mark up morphologically identified segmentation below the word level. Analogous to the lemma attribute for w , there is a baseForm attribute for the m element, which may be used to indicate the base form of an inflected morpheme; where appropriate, m elements may also be organized hierarchically: The distinction between m and w is provided as a convenience only; it may not be appropriate for all linguistic theories, nor is it meaningful in all languages. The intention is to provide a means for those cases where it is considered helpful to distinguish lexical from sub-lexical tokens, to complement the more general mechanism already provided by the seg element, using which the above example could alternatively be marked up as follows: There is a substantial linguistic difference between characters like letters or diacritics and punctuation marks. The former are used to construct meaningful units like morphemes or words. The latter are functionally independent units acting at the level of syntactic units. A word may consist of a single letter (for example I in English), but this does not mean that we should use c instead of w to mark it up. The c (character) element should be used to mark up any non-lexical character, whether this appears within a word, or outside it. In the following example, the encoder wishes to indicate that the letters are not to be regarded as words: The c element may be used for individual characters occurring within a w or m element which it is desired to distinguish for some reason, as in the following examples: The pc (punctuation character) element should be used to mark up characters which are specifically regarded as providing punctuation, rather than constituting parts of a word. It may be particularly useful when transcribing older written materials, in which an encoding of the original punctuation may be useful for interpretive or analytic purposes, in much the same way as an encoding of the original orthography may be. For example, in the following extract from a Bodleian Library musical manuscript two different punctuation marks are used to distinguish kinds of pause in the text. The punctus elevatus (which resembles an inverted semicolon) is not a Unicode character, but may still be encoded using the g element. As further described in chapter 5 Characters, Glyphs, and Writing Modes , this element points to a definition for the intended character which may be stored either locally or elsewhere. The pc element carries special attributes to record analyses of the functional behaviour or classification of the punctuation mark it contains. The unit attribute may be used, as on the milestone element to name the kind of unit which the punctuation mark delimits, for example a paragraph or section. The pre attribute may be used to indicate whether the punctuation precedes or follows the unit it delimits. The force attribute indicates the strength of the association between the punctuation mark and its adjacent word. In the following example, the paragraph marker (¶) has been tagged as a strong punctuation mark, preceding the unit it marks, which is named para: A similar encoding can be used for hyphenation: The w , m , c , and pc elements can be used together to give a fairly detailed low-level grammatical analysis of text. For example, consider the following segmentation of the English S-unit I didn't do it . This segmentation, crude as it is, succeeds in representing the idea that did occurring as a morphological component of the word didn't has something in common with the word do . A further advantage of segmenting the text down to this level is that it becomes relatively simple to associate each such segment with a more detailed formal analysis, for example by providing a baseform, or morphological analysis at whichever level is appropriate. This matter is taken up in detail in section 17.4 Linguistic Annotation . 17.2 Global Attributes for Simple Analyses When the module described by this chapter is selected, an additional attribute is defined for all elements: < att.global.analytic > provides additional global attributes for associating specific analyses or interpretations with appropriate portions of a text. @ana indicates one or more elements containing interpretations of the element on which the ana attribute appears. indicates one or more elements containing interpretations of the element on which the ana attribute appears. 17.3 Spans and Interpretations The simplest mechanisms for attaching analytic notes in some structured vocabulary to particular passages of text are provided by the span and interp elements, and their associated grouping elements spanGrp and interpGrp . < span > associates an interpretative annotation directly with a span of text. < spanGrp > collects together span tags. < interp > summarizes a specific interpretative annotation which can be linked to a span of text. < interpGrp > collects together a set of related interpretations which share responsibility or type. These elements are all members of the class att.interpLike , and thus share the following attribute: < att.interpLike > provides attributes for elements which represent a formal analysis or interpretation. @inst points to instances of the analysis or interpretation represented by the current element. points to instances of the analysis or interpretation represented by the current element. < att.global.responsibility > provides attributes indicating the agent responsible for some aspect of the text, the markup or something asserted by the markup, and the degree of certainty associated with it. @cert signifies the degree of certainty associated with the intervention or interpretation. @resp indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. signifies the degree of certainty associated with the intervention or interpretation. indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber. The type attribute of the span and interp elements may be used to indicate that the annotations are of specific types, for example thematic or structural. The annotation itself is supplied as the content of the span or interp element. In the case of the span element, the span of text being annotated is indicated by values of the from, to or target attributes, used in combination as follows. If only the from attribute is supplied, then the span is coterminous with the element indicated by its value; if both from and to are supplied, the span runs from the start of the element indicated by the from attribute up to the end of the element indicated by the to attribute; if the target attribute is used, the span is defined by aggregating the contents of the (possibly non-contiguous) elements pointed to by its values. It is an error to supply only the to attribute; to supply more than one pointer value for either to or from attributes; or to supply either of these in conjunction with the target attribute. In the case of interp (see below), the span is indicated by a pointer from a link element or some similar mechanism. The resp attribute indicates the annotator responsible for this annotation. The span element provides a simple way of indicating such features as phrasal verbs in a linguistic analysis, as in this example: The span element can be used for any kind of annotation. In this example it is used in a narratological analysis: The span element may, as in this example, be placed in the text near the textual span it is associated with. Alternatively, it may be placed elsewhere in the same or a different document. Where several span or interp elements share the same attributes, for example having the same responsibility or type, it may be convenient to group them within a spanGrp or interpGrp element as follows: Spans may also be used to represent structural divisions within a narrative, particularly when these do not coincide with the structure implied by the element structure. Consider the following narrative: Sigmund, the son of Volsung, was a king in Frankish country. Sinfiotli was the eldest of his sons, the second was Helgi, the third Hamund. Borghild, Sigmund's wife, had a brother named — But Sinfiotli, her stepson, and — both wooed the same woman and Sinfiotli killed him over it. 4 And when he came home, Borghild asked him to go away, but Sigmund offered her weregild, and she was obliged to accept it. At the funeral feast Borghild was serving beer. She took poison, a big drinking horn full, and brought it to Sinfiotli. When Sinfiotli looked into the horn, he saw that poison was in it, and said to Sigmund This drink is cloudy, old man. Sigmund took the horn and drank it off. It is said that Sigmund was hardy and that poison did him no harm, inside or out. And all his sons could tolerate poison on their skin. Borghild brought another horn to Sinfiotli, and asked him to drink, and everything happened as before. And a third time she brought him a horn, and reproachful words as well, if he didn't drink from it. He spoke again to Sigmund as before. He said Filter it through your mustache, son! Sinfiotli drank it off and at once fell dead. Sigmund carried him a long way in his arms and came to a long, narrow fjord, and there was a small boat there and a man in it. He offered to ferry Sigmund over the fjord. But when Sigmund carried the body out to the boat, it was fully laden. The man said Sigmund should go around the fjord inland. The man pushed the boat out and then suddenly vanished. King Sigmund lived a long time in Denmark in the kingdom of Borghild, after he married her. Then he went south to Frankish lands, to the kingdom he had there. Then he married Hiordis, the daughter of King Eylimi. Their son was Sigurd. King Sigmund fell in a battle with the sons of Hunding. And then Hiordis married Alf, the son of King Hialprec. Sigurd grew up there as a boy. Sigmund and all his sons were tall and outstanding in their strength, their growth, their intelligence, and their accomplishments. But Sigurd was the most outstanding of all, and everyone who knows about the old days says he was the most outstanding of men and the noblest of all the warrior kings. A structural analysis of this text, dividing it into narrative units in a pattern shared with other texts from the same literature, might look like this: Note the use of an empty anchor element to provide a target for the reconciliation unit which is normally part of the narrative pattern but which is not realized in the text shown. The same analysis may be expressed with the interp element instead of the span element; this element provides attributes for recording an interpretive category and its value, as well as the identity of the interpreter, but does not itself indicate which passage of text is being interpreted; the same interpretive structures can thus be associated with many passages of the text. The association between text passages and interp elements should be made either by pointing from the text to the interp element with the ana attribute defined in section 17.2 Global Attributes for Simple Analyses , or by pointing at both text and interpretation from a link element, as described in chapter 16 Linking, Segmentation, and Alignment . To encode the first example above using interp , it is necessary to create a text element which contains—or corresponds to—the third, fourth, and fifth orthographic sentences (S-units) in the paragraph. This can be done either with the seg element, described in 16.3 Blocks, Segments, and Anchors , or the join element, described in 16.7 Aggregation . The resulting element can then be associated with the interp element using the ana attribute described in section 17.2 Global Attributes for Simple Analyses . We illustrate using the seg element. The second example above can be recoded using interp and interpGrp tags in a similar manner. The interpretation itself can be expressed in an interpGrp element, which would replace the spanGrp in the example shown above: Any of these interp elements may be linked to the text either by means of the ana attribute, or by means of link elements. Using the ana attribute (on seg elements introduced specifically for this purpose), the text would be encoded as follows: The linkage may also be accomplished using a linkGrp element, whose content is a set of link elements which point to each interpretive element and its corresponding text unit. This method does not require the use of the ana attribute on the text units. One obvious advantage of using interp rather than span elements for the Sigmund text is that the interp elements can be reused for marking up other texts in the same document, whereas the span elements cannot. On the other hand, the use of interp elements may require the creation of special text elements not otherwise needed (e.g. the seg and the join in the revised encoding of the text), whereas the use of span elements does not. 17.4 Linguistic Annotation By linguistic annotation we mean here any annotation determined by an analysis of linguistic features of the text, excluding as borderline cases both the formal structural properties of the text (e.g. its division into chapters or paragraphs) and descriptive information about its context (the circumstances of its production, its genre or medium). The structural properties of any TEI-conformant text should be represented using the structural elements discussed elsewhere in this chapter and in chapters 3 Elements Available in All TEI Documents , 4 Default Text Structure , 6 Verse , 7 Performance Texts , 8 Transcriptions of Speech , 9 Dictionaries , and 15 Language Corpora . The contextual properties of a TEI text are fully documented in the TEI header, which is discussed in chapter 2 The TEI Header , and in section 15.2 Contextual Information . Other forms of linguistic annotation may be applied at a number of levels in a text. A code (such as a word-class or part-of-speech code) may be associated with each word or token, or with groups of such tokens, which may be continuous, discontinuous, or nested. A code may also be associated with relationships (such as cohesion) perceived as existing between distinct parts of a text. The codes themselves may stand for discrete and non-decomposable categories, or they may represent highly articulated bundles of textual features. Their function may be to place the annotated part of the text somewhere within a narrowly linguistic or discoursal domain of analysis, or within a more general semantic field, or any combination drawn from these and other domains. The manner by which such annotations are generated and attached to the text may be entirely automatic, entirely manual or a mixture. The ease and accuracy with which analysis may be automated may vary with the level at which the annotation is attached. The method employed should be documented in the interpretation element within the encoding description of the TEI header, as described in section 2.3.3 The Editorial Practices Declaration . Where different parts of a language corpus have used different annotation methods, the decls attribute may be used to indicate the fact, as further discussed in section 15.3 Associating Contextual Information with a Text . 17.4.1 Linguistic Annotation by Means of Generic TEI Devices As one example of such types of analysis, consider the following sentence, taken from the Lancaster/IBM Treebank Project ( 1 ). The victim's friends told police that Kruger drove into the quarry and never surfaced. Our discussion focuses on the way that this sentence might be analysed using the CLAWS system developed at the University of Lancaster but exactly the same principles may be applied to a wide variety of other systems. 5 Output from the system consists of a segmented and tokenized version of the text, in which word class codes have been associated with each token. CLAWS offers outputs in a variety of non-XML and XML formats: for example, the simplest format for the sample sentence would be: This may be easily transformed into an equivalent TEI XML representation: This approach requires the text to be fully segmented, using the linguistic segment elements described in section 17.1 Linguistic Segment Categories , so that the scope of the ana attribute used to point to each interpretation is clearly defined. A further analysis into phrase and clause elements can be superimposed on the word and morpheme tagging in the preceding illustration. For example, CLAWS provides the following constituent analysis of the sample sentence (the word class codes have been deleted): Treating the labels on the brackets as phrase or clause interpretations, this analysis of the structure of the example sentence can be combined with the word class analysis and represented as follows (the symbol V&\"/> representing the first part of a coordinate phrase, has been replaced by V1, and V+, representing the second part, has been replaced by V2). This approach requires the definition of further interp (or fs ) elements to provide targets for the pointers used to represent the constituent analysis: Alternatively, a stand-off representation for these analyses might be created using the linkGrp element. In this case, each linguistic segment to be annotated must be supplied with its own xml:id attribute: Each linguistic segment so far discussed has been well-behaved with respect to the basic document hierarchy, having only a single parent. Moreover, the segmentation has been complete, in that each part of the text is accounted for by some segment at each level of analysis, without discontinuities or overlap. This state of affairs does not of course apply in all types of analysis, and these Guidelines provide a number of mechanisms to support the representation of discontinuities or multiple analyses. A brief overview of these facilities is provided in chapter 20 Non-hierarchical Structures ; also see 16 Linking, Segmentation, and Alignment . These mechanisms all depend to a greater or lesser degree on the use of pointing elements of various kinds. 17.4.2 Lightweight Linguistic Annotation While these Guidelines offer a variety of means to add linguistic information to textual units and much of that has been presented above, two kinds of use cases and two groups of users call for a dedicated set of specialized attributes to carry linguistic information. One relevant use case is where basic linguistic information gets added to an existing resource, in which generic attributes such as type or ana have already been used to encode other categorizations and analyses. The other group of users and use cases involves corpus linguists and resources built from scratch as lightly annotated language corpora. In the latter kind of projects, energy and person-hours are not devoted to careful literary analysis and hand-encoding of the relevant phenomena, but rather to the analysis of the completed resources, and therefore the phase of resource-building must be quick and relatively effortless, requiring minimal structural markup, well-established containers for grammatical information, and a standardized way of filling them in. The aims defined above can be realized by means of lightweight linguistic annotation using attributes that belong to the att.linguistic class: < att.linguistic > provides a set of attributes concerning linguistic features of tokens, for usage within token-level elements, specifically w and pc in the analysis module. @lemma provides a lemma (base form) for the word, typically uninflected and serving both as an identifier (e.g. in dictionary contexts, as a headword), and as a basis for potential inflections. @pos (part of speech) indicates the part of speech assigned to a token (i.e. information on whether it is a noun, adjective, or verb), usually according to some official reference vocabulary (e.g. for German: STTS, for English: CLAWS, for Polish: NKJP, etc.). @msd (morphosyntactic description) supplies morphosyntactic information for a token, usually according to some official reference vocabulary (e.g. for German: STTS-large tagset ; for a feature description system designed as (pragmatically) universal, see Universal Features ). @join when present, provides information on whether the token in question is adjacent to another, and if so, on which side. provides a lemma (base form) for the word, typically uninflected and serving both as an identifier (e.g. in dictionary contexts, as a headword), and as a basis for potential inflections. (part of speech) indicates the part of speech assigned to a token (i.e. information on whether it is a noun, adjective, or verb), usually according to some official reference vocabulary (e.g. for German: STTS, for English: CLAWS, for Polish: NKJP, etc.). (morphosyntactic description) supplies morphosyntactic information for a token, usually according to some official reference vocabulary (e.g. for German: STTS-large tagset ; for a feature description system designed as (pragmatically) universal, see Universal Features ). when present, provides information on whether the token in question is adjacent to another, and if so, on which side. The essence of lightweight linguistic annotation is that the basic grammatical information is encapsulated at the word level, together with the orthographic shape of the word. This has clear advantages for automatic processing but, on the other hand, this form of data encapsulation also imposes restrictions on the extent of information that can be encoded, essentially limiting it to a single tokenization and lemmatization schema, a single tagset, and a subset of the possible analyses (out from potentially many guesses at the part-of-speech or morphosyntactic descriptions, single values have to fit into the existing attributes). Another important principle that this kind of annotation is sensitive to is the need for (near) homomorphism between the assumed tokenization (division of the text stream into minimal units) and the division into minimal syntactic units ( word forms , in the terminology of ISO Morpho-Syntactic Framework, ISO 24611 6 ), because it is the former that results from the process of tokenization, but the latter that can be lemmatized and meaningfully described by means of grammatical features. Where tokens are only minimally mismatched with word forms, various repair strategies can be used (e.g., recursing w to capture multi-token compounds or using att.fragmentable to point at disjoint tokens). Beyond that, more robust TEI mechanisms, based on standoff principles and feature structures, should replace lightweight annotation. The basic grammatical information encoded by means of att.linguistic is sufficient for the purpose of enhancing queries or improving the analysis of search results by, for example, making it possible to distinguish between the noun cut and the identically spelled verb cut in English, and further between e.g. the present-tense form of cut and its past-tense or past-participial forms. For the former contrast, the part-of-speech (pos) attribute should be used, whereas the latter may use pos and/or msd attributes, depending on the annotation vocabulary adopted for the project in question. The various grammatical realizations of a single dictionary word can be captured by means of the attribute lemma, which provides a common label for them. For example, English verbs are typically lemmatized as the base form (also called bare infinitive ), so the value of lemma for the verbal forms write , writes , wrote , written , and writing is typically write. Together with the span-delimiting elements mentioned in this section, such as s , cl , or phr , lightweight grammatical annotation may be used to build basic syntactic constituency structures, where hierarchical information is expressed through span containment rather than by relations among tree nodes. This is however the limit of this kind of annotation: for the purpose of describing true constituency or dependency syntactic structures, one needs to turn to more robust mechanisms offered by the TEI, which may involve graph description (see chapter 19 Graphs, Networks, and Trees ) or standoff techniques (see section 16.9 Stand-off Markup ), and where grammatical labels may need to be annotated by means of feature structures (see chapter 18 Feature Structures ). Some of the above-mentioned robust methods will also prove handy in cases where more than one tagset (label inventory) is used to label the words, or where automatic morphological analysis yields multiple possibilities (for example, the form cutting is morphologically ambiguous between verbal, adjectival, and nominal) and needs to be followed by (often also automatic) disambiguation in morphosyntactic contexts, with varying probabilities that may also need to be recorded together with their corresponding part-of-speech and morphosyntactic values. It should be borne in mind that tokenization, lemmatization, part-of-speech identification, and morphosyntactic labelling, especially when performed automatically, should in most cases be seen as involving pragmatic decisions, dictated by concrete practical goals, economy of description, or the demands of particular analytic and/or visualization tools. It comes therefore as no surprise that numerous alternative (and often conflicting) lemmatization strategies and tagsets exist, in use by various communities and various tools, and that they change with time (a case in point is the CLAWS tagset for English, with several versions that merge the part-of-speech and morphosyntactic information to various degrees). 7 The nature and description of these systems is outside the scope of these Guidelines, but it has to be stressed that all the strategies adopted for linguistic annotation, even at the lightweight level of complexity, must be documented in the header of the given electronic resource, not only for the purpose of guaranteeing successful data interpretation and exchange, but also for the sake of sustainability of the results of the given project. The last of the att.linguistic attributes, join, has the most text-technological flavour. It can be used to amend the loss of whitespace-related information in non-inline markup. Compare the following two listings. The first difference between them is in the tagset used (CLAWS-5 vs. CLAWS-7) and only serves to exemplify the need to document the choice of descriptive vocabulary in the header, lest the encoded information is unreadable or confusing. The second difference is the difference in the treatment of inter-token whitespace, and it is here that the join attribute proves indispensable. The first example listing uses CLAWS-5 and inline annotation, where whitespace serves as part of the markup: In the second example, the attribute join is the only way to encode whether two tokens are adjacent or not: Note that projects will need to decide whether they want to redundantly encode full information on the adjacency of each token (in which case, the above listing should also have join with the value right on the tokens victim and surfaced , or whether information on a single direction of adjacency is enough. Strategies vary, and it is important to document them in the TEI header. The following example shows a German sentence Wir fahren in den Urlaub ( We're going on vacation ) annotated with all the attributes discussed above. 8 The final examples lay out a strategy for dealing with e.g. historical corpora where it is on the one hand important to maintain a steady stream of token-level elements ( w and pc ) for efficient processing, but, on the other hand, it is also important to either record the original spelling (when the corpus text is normalized) or to record the normalized variants (when the element content of the corpus preserves the original spelling). The attribute class att.lexicographic.normalized can be used for that purpose: < att.lexicographic.normalized > provides attributes for usage within word-level elements in the analysis module and within lexicographic microstructure in the dictionaries module. @norm provides the normalized/standardized form of information present in the source text in a non-normalized form @orig gives the original string or is the empty string when the element does not appear in the source text. provides the normalized/standardized form of information present in the source text in a non-normalized form gives the original string or is the empty string when the element does not appear in the source text. The first fragment below comes from \"Gottfried, Newe Welt Vnd Americanische Historien. Frankfurt/M., 1631\" encoded in the Deutsches Textarchiv and records normalized forms in the norm attribute. The following example comes from the EarlyPrint project and uses the attribute orig to record the original spelling (note that the xml:id attributes have been removed for the sake of readability). 17.4.3 Spoken Text The mechanisms proposed in this chapter may also be used to encode analyses of an entirely different kind, for example discourse function. Here is an application of the span technique to record details of a sales transaction in a spoken text. 17.5 Module for Analysis and Interpretation The module described in this chapter makes available the following components: Analysis and Interpretation Simple analytic mechanisms The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . ","title":"<span class=\"tei-div7 breadcrumb\">17 Simple Analytic Mechanisms</span>"}
{"link":"p5.xml?id=FS","tag":"guidelines","content":"18 Feature Structures A feature structure is a general purpose data structure which identifies and groups together individual features , each of which associates a name with one or more values. Because of the generality of feature structures, they can be used to represent many different kinds of information, but they are of particular usefulness in the representation of linguistic analyses, especially where such analyses are partial, or underspecified . Feature structures represent the interrelations among various pieces of information, and their instantiation in markup provides a metalanguage for the generic representation of analyses and interpretations. Moreover, this instantiation allows feature values to be of specific types , and for restrictions to be placed on the values for particular features, by means of feature system declarations . 1 18.1 Organization of this Chapter This chapter is organized as follows. Following this introduction, section 18.2 Elementary Feature Structures and the Binary Feature Value introduces the elements fs and f , used to represent feature structures and features respectively, together with the elementary binary feature value. Section 18.3 Other Atomic Feature Values introduces elements for representing other kinds of atomic feature values such as symbolic , numeric , and string values. Section 18.4 Feature Libraries and Feature-Value Libraries introduces the notion of predefined libraries or groups of features or feature values along with methods for referencing their components. Section 18.5 Feature Structures as Complex Feature Values introduces complex values, in particular feature-structures as values, thus enabling feature structures to be recursively defined. Section 18.7 Collections as Complex Feature Values discusses other complex values, in particular values which are collections, organized as set s, bag s, and list s. Section 18.8 Feature Value Expressions discusses how the operations of alternation, negation, and collection of feature values may be represented. Section 18.9 Default Values discusses ways of representing underspecified, default, or uncertain values. Section 18.10 Linking Text and Analysis discusses how analyses may be linked to other parts of an encoded text. Section 18.11 Feature System Declaration describes the feature system declaration , a construct which provides for the validation of typed feature structures. Formal definitions for all the elements introduced in this chapter are provided in section 18.12 Formal Definition and Implementation . 18.2 Elementary Feature Structures and the Binary Feature Value The fundamental elements used to represent a feature structure analysis are f (for feature ), which represents a feature-value pair, and fs (for feature structure ), which represents a structure made up of such feature-value pairs. The fs element has an optional type attribute which may be used to represent typed feature structures, and may contain any number of f elements. An f element has a required name attribute and an associated value . The value may be simple: that is, a single binary, numeric, symbolic (i.e. taken from a restricted set of legal values), or string value, or a collection of such values, organized in various ways, for example, as a list; or it may be complex, that is, it may itself be a feature structure, thus providing a degree of recursion. Values may be under-specified or defaulted in various ways. These possibilities are all described in more detail in this and the following sections. Feature and feature-value representations (including feature structure representations) may be embedded directly at any point in an XML document, or they may be collected together in special-purpose feature or feature-value libraries . The components of such libraries may then be referenced from other feature or feature-value representations, using the feats or fVal attribute as appropriate. We begin by considering the simple case of a feature structure which contains binary-valued features only. The following three XML elements are needed to represent such a feature structure: < fs > represents a feature structure , that is, a collection of feature-value pairs organized as a structural unit. < f > represents a feature value specification , that is, the association of a name with a value of any of several different types. < binary > represents the value part of a feature-value specification which can contain either of exactly two possible values. An fs element containing f elements with binary values can be straightforwardly used to encode the matrices of feature-value specifications for phonetic segments, such as the following for the English segment [s]. This representation may be encoded in XML as follows: The restriction of specific features to specific types of values (e.g. the restriction of the feature strident to a binary value) requires additional validation, as does any restriction on the features available within a feature structure of a particular type (e.g. whether a feature structure of type phonological segment necessarily contains a feature voiced ). Such validation may be carried out at the document level, using special purpose processing, at the schema level using additional validation rules, or at the declarative level, using an additional mechanism such as the feature-system declaration discussed in 18.11 Feature System Declaration . Although we have used the term binary for this kind of value, and its representation in XML uses values such as true and false (or, equivalently, 1 and 0 ), it should be noted that such values are not restricted to propositional assertions. As this example shows, this kind of value is intended for use with any binary-valued feature. 18.3 Other Atomic Feature Values Features may take other kinds of atomic value. In this section, we define elements which may be used to represent: symbolic values , numeric values , and string values . The module defined by this chapter allows for the specification of additional datatypes if necessary, by extending the underlying class model.featureVal.single . If this is done, it is recommended that only the basic W3C datatypes should be used; more complex datatyping should be represented as feature structures. < symbol > represents the value part of a feature-value specification which contains one of a finite list of symbols. < numeric > represents the value part of a feature-value specification which contains a numeric value or range. < string > represents the value part of a feature-value specification which contains a string. The symbol element is used for the value of a feature when that feature can have any of a small, finite set of possible values, representable as character strings. For example, the following might be used to represent the claim that the Latin noun form mensas (tables) has accusative case, feminine gender, and plural number: More formally, this representation shows a structure in which three features ( case , gender , and number ) are used to define morpho-syntactic properties of a word. Each of these features can take one of a small number of values (for example, case can be nominative , genitive , dative , accusative , etc.) and it is therefore appropriate to represent the values taken in this instance as symbol elements. Note that, instead of using a symbolic value for grammatical number, one could have named the feature singular or plural and given it an appropriate binary value, as in the following example: The string element is used for the value of a feature when that value is a string drawn from a very large or potentially unbounded set of possible strings of characters, so that it would be impractical or impossible to use the symbol element. The string value is expressed as the content of the string element, rather than as an attribute value. For example, one might encode a street address as follows: The numeric element is used when the value of a feature is a numeric value, or a range of such values. For example, one might wish to regard the house number and the street name as different features, using an encoding like the following: If the numeric value to be represented falls within a specific range (for example an address that spans several numbers), the max attribute may be used to supply an upper limit: It is also possible to specify that the numeric value (or values) represented should (or should not) be truncated. For example, assuming that the daily rainfall in mm is a feature of interest for some address, one might represent this by an encoding like the following: Some communities of practice, notably those with a strong computer-science bias, prefer to dissociate the information on the value of the given feature from the specification of the data type that this value represents. In such cases, feature values can be provided directly as textual content of f , with the assumption that the data type is specified by the schema. The following is an example taken from ISO 24612, presenting the symbolic values for Active Voice and Simple Present Tense in the untyped form: As noted above, additional processing is necessary to ensure that appropriate values are supplied for particular features, for example to ensure that the feature singular is not given a value such as symbol value=\"feminine\"/. There are two ways of attempting to ensure that only certain combinations of feature names and values are used. First, if the total number of legal combinations is relatively small, one can predefine all of them in a construct known as a feature library , and then reference the combination required using the feats attribute in the enclosing fs element, rather than give it explicitly. This method is suitable in the situation described above, since it requires specifying a total of only ten (5 + 3 + 2) combinations of features and values. Similarly, to ensure that only feature structures containing valid combinations of feature values are used, one can put definitions for all valid feature structures inside a feature value library (so called, since a feature structure may be the value of a feature). A total of 30 feature structures (5 × 3 × 2) is required to enumerate all the possible combinations of individual case, gender and number values in the preceding illustration. We discuss the use of such libraries and their representation in XML further in section 18.4 Feature Libraries and Feature-Value Libraries below. However, the most general method of attempting to ensure that only legal combinations of feature names and values are used is to provide a feature-system declaration discussed in 18.11 Feature System Declaration . Whether at the level of feature-system declarations, feature- and feature-value libraries, or individual features, it is possible to align both feature names and their values with standardized external data category repositories such as ISOcat. 2 In the following example, both the feature part_of_speech and its value #commonNoun are aligned with the respective definitions provided by ISO DCR (Data Category Registry) , as implemented by ISOcat. 18.4 Feature Libraries and Feature-Value Libraries As the examples in the preceding section suggest, the direct encoding of feature structures can be verbose. Moreover, it is often the case that particular feature-value combinations, or feature structures composed of them, are re-used in different analyses. To reduce the size and complexity of the task of encoding feature structures, one may use the feats attribute of the fs element to point to one or more of the feature-value specifications for that element. This indirect method of encoding feature structures presumes that the f elements are assigned unique xml:id values, and are collected together in fLib elements ( feature libraries ). In the same way, feature values of whatever type can be collected together in fvLib elements ( feature-value libraries ). If a feature has as its value a feature structure or other value which is predefined in this way, the fVal attribute may be used to point to it, as discussed in the next section. The following elements are used for representing feature libraries and feature-value libraries: < fLib > assembles a library of f (feature) elements. < fvLib > assembles a library of reusable feature value elements (including complete feature structures). For example, suppose a feature library for phonological feature specifications is set up as follows. Then the feature structures that represent the analysis of the phonological segments (phonemes) /t/ , /d/ , /s/ , and /z/ may be defined as follows. The preceding are but four of the 128 logically possible fully specified phonological segments using the seven binary features listed in the feature library. Presumably not all combinations of features correspond to phonological segments (there are no strident vowels, for example). The legal combinations, however, can be collected together, each one represented as an identifiable fs element within a feature-value library , as in the following example: Once defined, these feature structure values can also be reused. Other f elements may invoke them by reference, using the fVal attribute; for example, one might use them in a feature value pair such as: Feature structures stored in this way may also be associated with the text which they are intended to annotate, either by a link from the text (for example, using the TEI global ana attribute), or by means of stand-off annotation techniques (for example, using the TEI link element): see further section 18.10 Linking Text and Analysis below. Note that when features or feature structures are linked to in this way, the result is effectively a copy of the item linked to into the place from which it is linked. This form of linking should be distinguished from the phenomenon of structure-sharing , where it is desired to indicate that some part of an annotation structure appears simultaneously in two or more places within the structure. This kind of annotation should be represented using the vLabel element, as discussed in 18.6 Re-entrant Feature Structures below. 18.5 Feature Structures as Complex Feature Values Features may have complex values as well as atomic ones; the simplest such complex value is represented by supplying an fs element as the content of an f element, or (equivalently) by supplying the identifier of an fs element as the value for the fVal attribute on the f element. Structures may be nested as deeply as appropriate, using this mechanism. For example, an fs element may contain or point to an f element, which may contain or point to an fs element, which may contain or point to an f element, and so on. To illustrate the use of complex values, consider the following simple model of a word, as a structure combining surface form information, a syntactic category, and semantic information. Each word analysis is represented as a fs type='word' element, containing three features named surface , syntax , and semantics . The first of these has an atomic string value, but the other two have complex values, represented as nested feature structures of types category and act respectively: This analysis does not tell us much about the meaning of the symbols verb or transitive . It might be preferable to replace these atomic feature values by feature structures. Suppose therefore that we maintain a feature-value library for each of the major syntactic categories (N, V, ADJ, PREP): This library allows us to use shortcut codes ( N , V , etc.) to reference a complete definition for the corresponding feature structure. Each definition may be explicitly contained within the fs element, as a number of f elements. Alternatively, the relevant features may be referenced by their identifiers, supplied as the value of the feats attribute, as in these examples: This ability to re-use feature definitions within multiple feature structure definitions is an essential simplification in any realistic example. In this case, we assume the existence of a feature library containing specifications for the basic feature categories like the following: With such libraries in place, and assuming the availability of similarly predefined feature structures for transitivity and semantics, the preceding example could be considerably simplified: Although in principle the fVal attribute could point to any kind of feature value, its use is not recommended for simple atomic values. 18.6 Re-entrant Feature Structures Sometimes the same feature value is required at multiple places within a feature structure, in particular where the value is only partially specified at one or more places. The vLabel element is provided as a means of labelling each such re-entrancy point: < vLabel > represents the value part of a feature-value specification which appears at more than one point in a feature structure. For example, suppose one wishes to represent noun-verb agreement as a single feature structure. Within the representation, the feature indicating (say) number appears more than once. To represent the fact that each occurrence is another appearance of the same feature (rather than a copy) one could use an encoding like the following: In the above encoding, the features named vb-num and nm-num exhibit structure sharing. Their values, given as vLabel elements, are understood to be references to the same point in the feature structure, which is labelled by their name attribute. The scope of the names used to label re-entrancy points is that of the outermost fs element in which they appear. When a feature structure is imported from a feature value library, or referenced from elsewhere (for example by using the fVal attribute) the names of any sharing points it may contain are implicitly prefixed by the identifier used for the imported feature structure, to avoid name clashes. Thus, if some other feature structure were to reference the fs element given in the example above, for example in this way: 18.7 Collections as Complex Feature Values Complex feature values need not always be represented as feature structures. Multiple values may also be organized as sets, bags or multisets, or lists of atomic values of any type. The vColl element is provided to represent such cases: < vColl > represents the value part of a feature-value specification which contains multiple values organized as a set, bag, or list. A feature whose value is regarded as a set, bag, or list may have any positive number of values as its content, or none at all, (thus allowing for representation of the empty set, bag, or list). The items in a list are ordered, and need not be distinct. The items in a set are not ordered, and must be distinct. The items in a bag are neither ordered nor distinct. Sets and bags are thus distinguished from lists in that the order in which the values are specified does not matter for the former, but does matter for the latter, while sets are distinguished from bags and lists in that repetitions of values do not count for the former but do count for the latter. If no value is specified for the org attribute, the assumption is that the vColl defines a list of values. If the vColl element is empty, the assumption is that it represents the null list, set, or bag. To illustrate the use of the org attribute, suppose that a feature structure analysis is used to represent a genealogical tree, with the information about each individual treated as a single feature structure, like this: In this example, the vColl element is first used to supply a list of name feature values, which together constitute the forenames feature. Other features are defined by reference to values which we assume are held in some external feature value library (not shown here). For example, the vColl element is used a second time to indicate that the persons's siblings should be regarded as constituting a set rather than a list. Each sibling is represented by a feature structure: in this example, each feature structure is a copy of one specified in the feature value library. If a specific feature contains only a single feature structure as its value, the component features of which are organized as a set, bag, or list, it may be more convenient to represent the value as a vColl rather than as an fs . For example, consider the following encoding of the English verb form sinks , which contains an agreement feature whose value is a feature structure which contains person and number features with symbolic values. If the names of the features contained within the agreement feature structure are of no particular significance, the following simpler representation may be used: The vColl element is also useful in cases where an analysis has several components. In the following example, the French word auxquels has a two-part analysis, represented as a list of two values. The first specifies that the word contains a preposition; the second that it contains a masculine plural relative pronoun: The set, bag, or list which has no members is known as the null (or empty) set, bag, or list. A vColl element with no content and with no value for its feats attribute is interpreted as referring to the null set, bag, or list, depending on the value of its org attribute. If, for example, the individual described by the feature structure with identifier p027 (above) had no siblings, we might specify the siblings feature as follows. A vColl element may also collect together one or more other vColl elements, if, for example one of the members of a set is itself a set, or if two lists are concatenated together. Note that such collections pay no attention to the contents of the nested vColl elements: if it is desired to produce the union of two sets, the vMerge element discussed below should be used to make a new collection from the two sets. 18.8 Feature Value Expressions It is sometimes desirable to express the value of a feature as the result of an operation over some other value (for example, as not green, or as male or female, or as the concatenation of two collections). Three special purpose elements are provided to represent disjunctive alternation, negation, and collection of values: < vAlt > represents the value part of a feature-value specification which contains a set of values, only one of which can be valid. < vNot > represents a feature value which is the negation of its content. < vMerge > represents a feature value which is the result of merging together the feature values contained by its children, using the organization specified by the org attribute. 18.8.1 Alternation The vAlt element can be used wherever a feature value can appear. It contains two or more feature values, any one of which is to be understood as the value required. Suppose, for example, that we are using a feature system to describe residential property, using such features as number.of.bathrooms . In a particular case, we might wish to represent uncertainty as to whether a house has two or three bathrooms. As we have already shown, one simple way to represent this would be with a numeric maximum: A more general way would be to represent the alternation explicitly, in this way: The vAlt element represents alternation over feature values, not feature-value pairs. If therefore the uncertainty relates to two or more feature value specifications, each must be represented as a feature structure, since a feature structure can always appear where a value is required. For example, suppose that it is uncertain as to whether the house being described has two bathrooms or two bedrooms, a structure like the following may be used: Note that alternation is always regarded as exclusive : in the case above, the implication is that having two bathrooms excludes the possibility of having two bedrooms and vice versa. If inclusive alternation is required, a vColl element may be included in the alternation as follows: As the previous example shows, the vAlt element can also be used to indicate alternations among values of features organized as sets, bags or lists. Suppose we use a feature selling.points to describe items that are mentioned to enhance a property's sales value, such as whether it has a pool or a good view. Now suppose for a particular listing, the selling points include an alarm system and a good view, and either a pool or a jacuzzi (but not both). This situation could be represented, using the vAlt element, as follows. Now suppose the situation is like the preceding except that one is also uncertain whether the property has an alarm system or a good view. This can be represented as follows. If a large number of ambiguities or uncertainties need to be represented, involving a relatively small number of features and values, it is recommended that a stand-off technique, for example using the general-purpose alt element discussed in section 16.8 Alternation be used, rather than the special-purpose vAlt element. 18.8.2 Negation The vNot element can be used wherever a feature value can appear. It contains any feature value and returns the complement of its contents. For example, the feature number.of.bathrooms in the following example has any whole numeric value other than 2: Strictly speaking, the effect of the vNot element is to provide the complement of the feature values it contains, rather than their negation. If a feature system declaration is available which defines the possible values for the associated feature, then it is possible to say more about the negated value. For example, suppose that the available values for the feature case are declared to be nominative, genitive, dative, or accusative, whether in a TEI feature system declaration or by some other means. Then the following two specifications are equivalent: If however no such system declaration is available, all that one can say about a feature specified via negation is that its value is something other than the negated value. Negation is always applied to a feature value, rather than to a feature-value pair. The negation of an atomic value is the set of all other values which are possible for the feature. Any kind of value can be negated, including collections (represented by a vColl elements) or feature structures (represented by fs elements). The negation of any complex value is understood to be the set of values which cannot be unified with it. Thus, for example, the negation of the feature structure F is understood to be the set of feature structures which are not unifiable with F. In the absence of a constraint mechanism such as the Feature System Declaration, the negation of a collection is anything that is not unifiable with it, including collections of different types and atomic values. It will generally be more useful to require that the organization of the negated value be the same as that of the original value, for example that a negated set is understood to mean the set which is a complement of the set, but such a requirement cannot be enforced in the absence of a constraint mechanism. 18.8.3 Collection of Values The vMerge element can be used wherever a feature value can appear. It contains two or more feature values, all of which are to be collected together. The organization of the resulting collection is specified by the value of the org attribute, which need not necessarily be the same as that of its constituent values if these are collections. For example, one can change a list to a set, or vice versa. As an example, suppose that we wish to represent the range of possible values for a feature genders used to describe some language. It would be natural to represent the possible values as a set, using the vColl element as in the following example: Suppose however that we discover for some language it is necessary to add a new possible value, and to treat the value of the feature as a list rather than as a set. The vMerge element can be used to achieve this: 18.9 Default Values The value of a feature may be underspecified in a number of different ways. It may be null, unknown, or uncertain with respect to a range of known possibilities, as well as being defined as a negation or an alternation. As previously noted, the specification of the range of known possibilities for a given feature is not part of the current specification: in the TEI scheme, this information is conveyed by the feature system declaration . Using this, or some other system, we might specify (for example) that the range of values for an element includes symbols for masculine, feminine, and neuter, and that the default value is neuter. With such definitions available to us, it becomes possible to say that some feature takes the default value, or some unspecified value from the list. The following special element is provided for this purpose: < default > represents the value part of a feature-value specification which contains a defaulted value. The value of an empty f element which also lacks an fVal attribute is understood to be the most general case, i.e. any of the available values. Thus, assuming the feature system defined above, the following two representations are equivalent. If, however, the value is explicitly stated to be the default one, using the default element, then the following two representations are equivalent: Similarly, if the value is stated to be the negation of the default, then the following two representations are equivalent: 18.10 Linking Text and Analysis Text elements can be linked with feature structures using any of the linking methods discussed elsewhere in these Guidelines (see for example sections 17.2 Global Attributes for Simple Analyses and 17.4 Linguistic Annotation ). In the simplest case, the ana attribute may be used to point from any element to an annotation of it, as in the following example: The values specified for the ana attribute reference components of a feature-structure library, which represents all of the grammatical structures used by this encoding scheme. (For illustrative purposes, we cite here only the structures needed for the first six words of the sample sentence): Alternatively, a stand-off technique may be used, as in the following example, where a linkGrp element is used to link selected characters in the text Caesar seized control with their phonological representations. As this example shows, a stand-off solution requires that every component to be linked to must be addressable in some way, by means of an XPointer. To handle the POS tagging example above, for example, each annotated element might be given an identifier of some sort, as follows: 18.11 Feature System Declaration The Feature System Declaration (FSD) is intended for use in conjunction with a TEI-conforming text that makes use of fs (that is, feature structure) elements. The FSD serves three purposes: the encoder can list all of the feature names and feature values and give a prose description as to what each represents. the encoder can define what it means to be a well-formed feature structure, and define constraints which may be used to determine whether a particular feature structure is valid relative to a given theory stated in typed feature logic. These may involve constraints on the range of a feature value, constraints on what features are valid within certain types of feature structures, or constraints that prevent the co-occurrence of certain feature-value pairs. the encoder can define the intended interpretation of underspecified feature structures. This involves defining default values (whether literal or computed) for missing features. The scheme described in this chapter may be used to document any feature structure system, but is primarily intended for use with the feature structure representation defined by the ISO 24610-1:2006 standard, which corresponds with the recommendations presented in these Guidelines, 18 Feature Structures . This chapter relies upon, but does not reproduce, formal definitions and descriptions presented more thoroughly in the ISO standard, which should be consulted in case of ambiguity or uncertainty. The FSD serves an important function in documenting precisely what the encoder intended by the system of feature structure markup used in an XML-encoded text. The FSD is also an important resource which standardizes the rules of inference used by software to validate the feature structure markup in a text, and to infer the full interpretation of underspecified feature structures. The reader should be aware the terminology used in this document does not always closely follow conventional practice in formal logic, and may also diverge from practice in some linguistic applications of typed feature structures. In particular, the term interpretation when applied to a feature structure is not an interpretation in the model-theoretic sense, but is instead a minimally informative (or equivalently, most general) extension of that feature structure that is consistent with a set of constraints declared by an FSD. In linguistic application, such a system of constraints is the principal means by which the grammar of some natural language is expressed. There is a great deal of disagreement as to what, if any, model-theoretic interpretation feature structures have in such applications, but the status of this formal kind of interpretation is not germane to the present document. Similarly, the term valid is used here as elsewhere in these Guidelines to identify the syntactic state of well-formedness in the sense defined by the logic of typed feature structures itself, as distinct from and in addition to the well-formedness that pertains at the level of this encoding standard. No appeal to any notion from formal semantics should be inferred. We begin by describing how an encoded text is associated with one or more feature system declarations. The second, third, and fourth sections describe the overall structure of a feature system declaration and give details of how to encode its components. The final section offers a full example; fuller discussion of the reasoning behind FSDs and another complete example are provided in 1 . 18.11.1 Linking a TEI Text to Feature System Declarations In order for application software to use feature system declarations to aid in the automatic interpretation of encoded texts, or even for human readers to find the appropriate declarations which document the feature system used in markup, there must be a formal link from the encoded texts to the declarations. However, the schema which declares the syntax of the Feature System itself should be kept distinct from the feature structure schema, which is an application of that system. A document containing typed feature structures may simply include a feature system declaration documenting those feature structures. A more usual scenario, however, is that the same feature system declaration (or parts of it) will be shared by many documents. In either case, an fsDecl element for each distinct type of feature structure used must be provided and associated with the type, which is the value used within each feature structure for its type attribute. When the module defined in this chapter is included in an XML schema, the following elements become available via the model.fsdDeclPart class: < fsdDecl > provides a feature system declaration comprising one or more feature structure declarations or feature structure declaration links. < model.fsdDeclPart > For example, suppose that a document doc.xml contains feature structures of two types: gpsg and lex. We might simply embed an fsDecl element for each within the header attached to the document as follows: In this case there is an implicit link between the fs element and the corresponding fsDecl element because they share the same value for their type attribute and appear within the same document. This is a short cut for the more general case which requires a more explicit link provided by means of the fsdLink element, as demonstrated below. Now suppose that we wish to create a second document which includes feature structures of the same type. Rather than duplicate the corresponding declarations, we will need to provide a means of pointing to them from this second document. The easiest 3 way of accomplishing this is to add an XML identifier to each fsDecl element in example.xml : In the fsdDecl for the second document, we can now include pointers to the fsDecl elements in the first: An fsdDecl may be given, as above, within the encoding description of the teiHeader element of a TEI document containing typed feature structures. Alternatively, it may appear independently of any feature structures, as a document in its own right with its own teiHeader . These options are both possible because the element is a member of both the model.encodingDescPart class and the model.resource class. The current recommendations provide no way of enforcing uniqueness of the type values among fsdDecl elements, nor of requiring that every type value specified on an fs element be also declared on an fsdDecl element. Encoders requiring such constraints (which might have some obvious utility in assisting the consistency and accuracy of tagging) are recommended to develop tools to enforce them, using such mechanisms as Schematron assertions. 18.11.2 The Overall Structure of a Feature System Declaration A feature system declaration contains one or more feature structure declarations, each of which has up to three parts: an optional description (which gives a prose comment on what that type of feature structure encodes), an obligatory set of feature declarations (which specify range constraints and default values for the features in that type of structure), and optional feature structure constraints (which specify co-occurrence restrictions on feature values). < fsDescr > describes in prose what is represented by the type of feature structure declared in the enclosing fsDecl. < fDecl > declares a single feature, specifying its name, organization, range of allowed values, and optionally its default value. < fsConstraints > specifies constraints on the content of valid feature structures. Feature declarations and feature structure constraints are described in the next two sections. Note that the specification of similar fsDecl elements can be simplified by devising an inheritance hierarchy for the feature structure types. Each fsDecl element may name one or more basetypes from which it inherits feature declarations and constraints (these are often called supertypes). For instance, suppose that fsDecl type=\"Basic\" contains fDecl name=\"One\" and fDecl name=\"Two\", and that fsDecl type=\"Derived\" baseTypes=\"Basic\" contains just fDecl name=\"Three\". Then any instance of fs type=\"Derived\" must include all three features. This is because fsDecl type=\"Derived\" inherits the two feature declarations from fsDecl type=\"Basic\" when it specifies a base type of Basic. The following sample shows the overall structure of a complete feature structure declaration: The attribute baseTypes gives the name of one or more types from which this type inherits feature specifications and constraints; if this type includes a feature specification with the same name as one inherited from any of the types specified by this attribute, or if more than one specification of the same name is inherited, then the possible values of that feature is determined by unification. Similarly, the set of constraints applicable is derived by conjoining those specified explicitly within this element with those implied by the baseTypes attribute. When no base type is specified, no feature specification or constraint is inherited. Although the present standard does provide for default feature values, feature inheritance is defined to be monotonic. The process of combining constraints may result in a contradiction, for example if two specifications for the same feature specify disjoint ranges of values, and at least one such specification is mandatory. In such a case, there is no valid feature structure of the type being defined. Every type specified by baseTypes must be a single word which is a legal XML name; for example, they cannot include whitespace or begin with digits. Multiple base types are separated with spaces, e.g. fsDecl type=\"Sub\" baseTypes=\"Super1 Super2\". 18.11.3 Feature Declarations Each feature is declared in an fDecl element whose name attribute identifies the feature being declared; this matches the name attribute of the f elements it declares. An fDecl has three parts: an optional prose description (which should explain what the feature and its values represent), an obligatory range specification (which declares what values the feature is allowed to have), and an optional default specification (which declares what default value should be supplied when the named feature does not appear in an fs ). If, in a feature structure, a feature: is not optional (i.e., is obligatory), has no value provided, or the value default is provided (see ISO 24610-1, Subclause 5.10, Default Values , and either has no default specified, or has conditional defaults, none of the conditions on which is met, is optional, has no value provided, or the value default is provided, and either has a default specified, or has conditional defaults, one of the conditions on which is met, It is possible that a feature structure will not have a valid extension because the default value that pertains to a feature is not consistent with that feature's declared range. Additional tools are required for the enforcement of such criteria. The following elements are used in feature system declarations: < fDecl > declares a single feature, specifying its name, organization, range of allowed values, and optionally its default value. < fDescr > describes in prose what is represented by the feature being declared and its values. < vRange > defines the range of allowed values for a feature, in the form of an fs , vAlt , or primitive value; for the value of an f to be valid, it must be subsumed by the specified range; if the f contains multiple values (as sanctioned by the org attribute), then each value must be subsumed by the vRange . < vDefault > declares the default value to be supplied when a feature structure does not contain an instance of f for this name; if unconditional, it is specified as one (or, depending on the value of the org attribute of the enclosing fDecl ) more fs elements or primitive values; if conditional, it is specified as one or more if elements; if no default is specified, or no condition matches, the value none is assumed. < if > defines a conditional default value for a feature; the condition is specified as a feature structure, and is met if it subsumes the feature structure in the text for which a default value is sought. < then > separates the condition from the default in an if , or the antecedent and the consequent in a cond element. The logic for validating feature values and for matching the conditions for supplying default values is based on the operation of subsumption . Subsumption is a standard operation in feature-structure-based formalisms. Informally, a feature structure FS subsumes all feature structures that are at least as informative as itself; that is, all feature structures that specify all of the feature values that FS does with values that are subsumed by the values that FS has, and that have all of the re-entrancies (see 18.6 Re-entrant Feature Structures ) that FS does. ( Bob Carpenter The logic of typed feature structures Cambridge Cambridge University Press 1992 Cambridge Tracts in Theoretical Computer Science 32 1 ; see also Fernando C. N. Pereira Grammars and logics of partial information Menlo Park, CA SRI International 1987 SRI International Technical Note 420 1 and Stuart Shieber An Introduction to Unification-based Approaches to Grammar CSLI Lecture Notes 4 Center for the Study of Language and Information Palo Alto, CA 1986 1 ) A more formal definition is provided in ISO 24610-1:2006 . Following the spirit of the informal definition above, we can extend subsumption in a straightforward way to cover alternation, negation, special primitive values, and the use of attributes in the markup. For instance, a vAlt containing the value v subsumes v. The negation of a value v (represented by means of the vNot element discussed in section 18.8.2 Negation ) subsumes any value that is not v; for example <vNot><numeric value='0'/></vNot> subsumes any numeric value other than zero. The value fs type=\"X\"/ subsumes any feature structure of type X, even if it is not valid. As an example of feature declarations, consider the following extract from Gazdar et al.'s Generalized Phrase Structure Grammar . In the appendix to their book, they propose a feature system for English of which this is just a sampling: The INV feature, which encodes whether or not a sentence is inverted, allows only the values plus (+) and minus (-). If the feature is not specified, then the default rule (FSD 1 above) says that a value of minus is always assumed. The feature declaration for this feature would be encoded as follows: The value range is specified as an alternation (more precisely, an exclusive disjunction), which can be represented by the binary feature value. That is, the value must be either true or false, but cannot be both or neither. The CONJ feature indicates the surface form of the conjunction used in a construction. The ~ in the default rule (see FSD 2 above) represents negation. This means that by default the feature is not applicable, in other words, no conjunction is taking place. Note that CONJ not being present is distinct from CONJ being present but having the NIL value allowed in the value range. In their analysis, NIL means that the phenomenon of conjunction is taking place but there is no explicit conjunction in the surface form of the sentence. The feature declaration for this feature would be encoded as follows: The COMP feature indicates the surface form of the complementizer used in a construction. In value range, it is analogous to CONJ. However, its default rule (see FSD 9 above) is conditional. It says that if the verb form is infinitival (the VFORM feature is not mentioned in the rule since it is the only feature that can take INF as a value), and the construction has a subject, then a for complement must be used. For instance, to make John the subject of the infinitive in It is necessary to go, a for complement must be used; that is, It is necessary for John to go. The feature declaration for this feature would be encoded as follows: The AGR feature stores the features relevant to subject-verb agreement. Gazdar et al. specify the range of this feature as CAT. This means that the value is a category , which is their term for a feature structure. This is actually too weak a statement. Not just any feature structure is allowable here; it must be a feature structure for agreement (which is defined in the complete example at the end of the chapter to contain the features of person and number). The following feature declaration encodes this constraint on the value range: The PFORM feature indicates the surface form of the preposition used in a construction. Since PFORM is specified above as an open set, string is used in the range specification below rather than symbol . Note that the class model.featureVal includes all possible single feature values, including feature structures, alternations ( vAlt ) and complex collections ( vColl ). 18.11.4 Feature Structure Constraints Ensuring the validity of feature structures may require much more than simply specifying the range of allowed values for each feature. There may be constraints on the co-occurrence of one feature value with the value of another feature in the same feature structure or in an embedded feature structure. Such constraints on valid feature structures are expressed as a series of conditional and biconditional tests in the fsConstraints part of an fsDecl . A particular feature structure is valid only if it meets all the constraints. The cond element encodes the conventional if-then conditional of boolean logic which succeeds when both the antecedent and consequent are true, or whenever the antecedent is false. The bicond element encodes the biconditional (if and only if) operation of boolean logic. It succeeds only when the corresponding if-then conditionals in both directions are true. In feature structure constraints the antecedent and consequent are expressed as feature structures; they are considered true if they subsume (see section 18.11.3 Feature Declarations ) the feature structure in question, but in the case of consequents, this truth is asserted rather than simply tested. That is to say, a conditional is enforced by determining that the antecedent does not (and will never) subsume the given feature structure, or by determining that the antecedent does subsume the given feature structure, and then unifying the consequent with it (the result of which, if successful, will be subsumed by the consequent). In practice, the enforcement of such constraints can result in periods in which the truth of a constraint with respect to a given feature structure is simply not known; in this case, the constraint must be persistently monitored as the feature structure becomes more informative until either its truth value is determined or computation fails for some other reason. The following elements make up the fsConstraints part of an FSD: < fsConstraints > specifies constraints on the content of valid feature structures. < cond > defines a conditional feature-structure constraint; the consequent and the antecedent are specified as feature structures or feature-structure collections; the constraint is satisfied if both the antecedent and the consequent subsume a given feature structure, or if the antecedent does not. < bicond > defines a biconditional feature-structure constraint; both consequent and antecedent are specified as feature structures or groups of feature structures; the constraint is satisfied if both subsume a given feature structure, or if both do not. < then > separates the condition from the default in an if , or the antecedent and the consequent in a cond element. < iff > separates the condition from the consequence in a bicond element. For an example of feature structure constraints, consider the following feature co-occurrence restrictions extracted from the feature system for English proposed by Gazdar, et al. (1985:246–247): The first constraint says that if a construction is inverted, it must also have an auxiliary and a finite verb form. That is, The second constraint says that if a construction has a BAR value of zero (i.e., it is a sentence), then it must have a value for the features N, V, and SUBCAT. By the same token, because it is a biconditional, if it has values for N, V, and SUBCAT, it must have BAR='0'. That is, The final constraint says that if a construction has a BAR value of 1 (i.e., it is a phrase), then the SUBCAT feature should be absent (~). This is not biconditional, since there are other instances under which the SUBCAT feature is inappropriate. That is, Note that cond and bicond use the empty tags then and iff , respectively, to separate the antecedent and consequent. These are primarily for the sake of enhancing human readability. 18.11.5 A Complete Example To summarize this chapter, the complete FSD for the example that has run through the chapter is reproduced below: 18.12 Formal Definition and Implementation This elements discussed in this chapter constitute a module of the TEI scheme which is formally defined as follows: Feature Structures Feature structures The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . ","title":"<span class=\"tei-div7 breadcrumb\">18 Feature Structures</span>"}
{"link":"p5.xml?id=GD","tag":"guidelines","content":"19 Graphs, Networks, and Trees Graphical representations are widely used for displaying relations among informational units because they help readers to visualize those relations and hence to understand them better. Two general types of graphical representations may be distinguished. Graphs , in the strictly mathematical sense, consist of points, often called nodes or vertices , and connections among them, called arcs , or under certain conditions, edges . Among the various types of graphs are networks and trees . Graphs generally and networks in particular are dealt with directly below. Trees are dealt with separately in sections 19.2 Trees and 19.3 Another Tree Notation . 1 Charts , which typically plot data in two or more dimensions, including plots with orthogonal or radial axes, bar charts, pie charts, and the like. These can be described using the elements defined in the module for figures and graphics; see chapter 14 Tables, Formulæ, Graphics, and Notated Music . Among the types of qualitative relations often represented by graphs are organizational hierarchies, flow charts, genealogies, semantic networks, transition networks, grammatical relations, tournament schedules, seating plans, and directions to people's houses. In developing recommendations for the encoding of graphs of various types, we have relied on their formal mathematical definitions and on the most common conventions for representing them visually. However, it must be emphasized that these recommendations do not provide for the full range of possible graphical representations, and deal only partially with questions of design, layout, and placement. 19.1 Graphs and Digraphs Broadly speaking, graphs can be divided into two types: undirected and directed . An undirected graph is a set of nodes (or vertices ) together with a set of pairs of those vertices, called arcs or edges . Each node in an arc of an undirected graph is said to be incident with that arc, and the two vertices (nodes) which make up an arc are said to be adjacent . An directed graph is like an undirected graph except that the arcs are ordered pairs of nodes. In the case of directed graphs, the term edge is not used; moreover, each arc in a directed graph is said to be adjacent from the node from which the arc emanates, and adjacent to the node to which the arc is directed. We use the element graph to encode graphs as a whole, node to encode nodes or vertices, and arc to encode arcs or edges; arcs can also be encoded by attributes on the node element. These elements have the following descriptions and attributes: < graph > encodes a graph, which is a collection of nodes, and arcs which connect the nodes. < node > encodes a node, a possibly labeled point in a graph. < arc > encodes an arc, the connection from one node to another in a graph. Before proceeding, some additional terminology may be helpful. We define a path in a graph as a sequence of nodes n1, ..., nk such that there is an arc from each ni to ni+1 in the sequence. A cyclic path , or cycle is a path leading from a particular node back to itself. A graph that contains at least one cycle is said to be cyclic ; otherwise it is acyclic . We say, finally, that a graph is connected if there is a path from some node to every other node in the graph; any graph that is not connected is said to be disconnected . Here is an example of an undirected, cyclic disconnected graph, in which the nodes are annotated with three-letter codes for airports, and the arcs connecting the nodes are represented by horizontal and vertical lines, with 90 degree bends used simply to avoid having to draw diagonal lines. Next is a markup of the graph, using arc elements to encode the arcs. The first child element of graph may be a label to record a label for the graph; similarly, the label child of each node element records the labels of that node. The order and size attributes on the graph element record the number of nodes and number of arcs in the graph respectively; these values are optional (since they can be computed from the rest of the graph), but if they are supplied, they must be consistent with the rest of the encoding. They can thus be used to help check that the graph has been encoded and transmitted correctly. The degree attribute on the node elements record the number of arcs that are incident with that node. It is optional (because redundant), but can be used to help in validity checking: if a value is given, it must be consistent with the rest of the information in the graph. Finally, the from and to attributes on the arc elements provide pointers to the nodes connected by those arcs. Since the graph is undirected, no directionality is implied by the use of the from and to attributes; the values of these attributes could be interchanged in each arc without changing the graph. The adj, adjFrom, and adjTo attributes of the node element provide an alternative method of representing unlabeled arcs, their values being pointers to the nodes which are adjacent to or from that node. The adj attribute is to be used for undirected graphs, and the adjFrom and adjTo attributes for directed graphs. It is a semantic error for the directed adjacency attributes to be used in an undirected graph, and vice versa. Here is a markup of the preceding graph, using the adj attribute to represent the arcs. Note that each arc is represented twice in this encoding of the graph. For example, the existence of the arc from LAX to LVG can be inferred from each of the first two node elements in the graph. This redundancy, however, is not required: it suffices to describe an arc in any one of the three places it can be described (either adjacent node, or in a separate arc element). Here is a less redundant representation of the same graph. Although in many cases the arc element is redundant (since arcs can be described using the adjacency attributes of their adjacent nodes), it has nevertheless been included in this module, in order to allow the convenient specification of identifiers, display or rendition information, and labels for each arc (using the attributes xml:id, rend, and a child label element). Next, let us modify the preceding graph by adding directionality to the arcs. Specifically, we now think of the arcs as specifying selected routes from one airport to another, as indicated by the direction of the arrowheads in the following diagram. Here is an encoding of this graph, using the arc element to designate the arcs. Here is another encoding of the graph, using the adjTo and adjFrom attributes on nodes to designate the arcs. If we wish to label the arcs, say with flight numbers, then arc elements must be used to hold the label elements, as in the following example. 19.1.1 Transition Networks For encoding transition networks and other kinds of directed graphs in which distinctions among types of nodes must be made, the type attribute is provided for node elements. In the following example, the initial and final nodes (or states ) of the network are distinguished. It can be understood as accepting the set of strings obtained by traversing it from its initial node to its final node, and concatenating the labels. A finite state transducer has two labels on each arc, and can be thought of as representing a mapping from one sequence of labels to the other. The following example represents a transducer for translating the English strings accepted by the network in the preceding example into French. The nodes have been annotated with numbers, for convenience. 19.1.2 Family Trees The next example provides an encoding a portion of a family tree 2 in which nodes are used to represent individuals and parents of individuals, and arcs are used to represent common parentage and descent links. Let us suppose, further, that information about individuals is contained in feature structures, which are contained in feature-structure libraries elsewhere (see 18.4 Feature Libraries and Feature-Value Libraries ). We can use the value attribute on node elements to point to those feature structures. In this particular representation of the graph, nodes representing females are framed by ovals, nodes representing males are framed by boxes, and nodes representing parents are framed by diamonds. 19.1.3 Historical Interpretation For our final example, we represent graphically the relationships among various geographic areas mentioned in a seventeenth-century Scottish document. The document itself is a sasine, which records a grant of land from the earl of Argyll to one Donald McNeill, and reads in part as follows (abbreviations have been expanded silently, and [...] marks illegible passages): Item instrument of Sasine given the said Hector Mcneil confirmed and dated 28 May 1632 [...] at Edinburgh upon the 15 June 1632 Item ane charter granted by Archibald late earl of Argyle and Donald McNeill of Gallachalzie wh makes mention that ... the said late Earl yields and grants to the said Donald MacNeill ... All and hail the two merk land of old extent of Gallachalzie with the pertinents by and in the lordship of Knapdale within the sherrifdome of Argyll [description of other lands granted follows ...] This Charter is dated at Inverary the 15th May 1669 In this example, we are concerned with the land and pertinents (i.e. accompanying sources of revenue) described as the two merk land of old extent of Gallachalzie with the pertinents by and in the lordship of Knapdale within the sherrifdom of Argyll . The passage concerns the following pieces of land: the Earl of Argyll's land (i.e. the lands granted by this clause of the sasine) two mark of land in Gallachalzie the pertinents for this land the Lordship of Knapdale the sherrifdom of Argyll containment (INCLUDE) location within (IN) contiguity (BY) constituency (PART OF) Let us assume that feature-structure analyses are available which describe Gallachalzie, Knapdale, and Argyll. We will link to those feature structures using the value attribute on the nodes representing those places. However, there may be some uncertainty as to which noun phrase is modified by the phrase within the sheriffdome of Argyll : perhaps the entire lands (land and pertinents) are in Argyll, perhaps just the pertinents are, or perhaps only Knapdale is (together with the portion of the pertinents which is in Knapdale). We will represent all three of these interpretations in the graph; they are, however, mutually exclusive, which we represent using the exclude attribute defined in chapter 16 Linking, Segmentation, and Alignment . 3 We represent the graph and its encoding as follows, where the dotted lines in the graph indicate the mutually exclusive arcs; in the encoding, we use the exclude attribute to indicate those arcs. The graph formalizes the following relationships: the Earl of Argyll's land includes (the parcel of land in) Gallachalzie the Earl of Argyll's land includes the pertinents of that parcel the pertinents are (in part) by the Lordship of Knapdale the pertinents are (in part) part of the Lordship of Knapdale the Earl of Argyll's land, or the pertinents, or the Lordship of Knapdale, is in the Sherrifdom of Argyll 19.2 Trees A tree is a connected acyclic graph. That is, it is possible in a tree graph to follow a path from any vertex to any other vertex, but there are no paths that lead from any vertex to itself. A rooted tree is a directed graph based on a tree; that is, the arcs in the graph correspond to the arcs of a tree such that there is exactly one node, called the root , for which there is a path from that node to all other nodes in the graph. For our purposes, we may ignore all trees except for rooted trees, and hence we shall use the tree element for rooted trees, and the root element for its root. The nodes adjacent to a given node are called its children , and the node adjacent from a given node is called its parent . Nodes with both a parent and children are called internal nodes , for which we use the iNode element. A node with no children is tagged as a leaf . If the children of a node are ordered from left to right, then we say that that node is ordered . If all the nodes of a tree are ordered, then we say that the tree is an ordered tree . If some of the nodes of a tree are ordered and others are not, then the tree is a partially ordered tree . The ordering of nodes and trees may be specified by an attribute; we take the default ordering for trees to be ordered, that roots inherit their ordering from the trees in which they occur, and internal nodes inherit their ordering from their parents. Finally, we permit a node to be specified as following other nodes, which (when its parent is ordered) it would be assumed to precede, giving rise to crossing arcs. The elements used for the encoding of trees have the following descriptions and attributes. < tree > encodes a tree, which is made up of a root, internal nodes, leaves, and arcs from root to leaves. < root > represents the root node of a tree. < iNode > represents an intermediate (or internal) node of a tree. < leaf > encodes the leaves (terminal nodes) of a tree. Here is an example of a tree. It represents the order in which the operators of addition (symbolized by + ), exponentiation (symbolized by ** ) and division (symbolized by / ) are applied in evaluating the arithmetic formula ((a**2)+(b**2))/((a+b)**2) . In drawing the graph, the root is placed on the far right, and directionality is presumed to be to the left. In this encoding, the arity attribute represents the arity of the tree, which is the greatest value of the outDegree attribute for any of the nodes in the tree. If, as in this case, arity is 2, we say that the tree is a binary tree. Since the left-to-right (or top-to-bottom!) order of the children of the two + nodes does not affect the arithmetic result in this case, we could represent in this tree all of the arithmetically equivalent formulas involving its leaves, by specifying the attribute ord as false on those two iNode elements, the attribute ord as true on the root and other iNode elements, and the attribute ord as partial on the tree element, as follows. This encoding represents all of the following: ((a**2)+(b**2))/((a+b)**2) ((b**2)+(a**2))/((a+b)**2) ((a**2)+(b**2))/((b+a)**2) ((b**2)+(a**2))/((a+b)**2) Linguistic phrase structure is very commonly represented by trees. Here is an example of phrase structure represented by an ordered tree with its root at the top, and a possible encoding. Finally, here is an example of an ordered tree, in which a particular node which ordinarily would precede another is specified as following it. In the drawing, the xxx symbol indicates that the arc from VB to PT crosses the arc from VP to PN. 19.3 Another Tree Notation In this section, we present an alternative to the method of representing the structure of ordered rooted trees given in section 19.2 Trees , which is based on the observation that any node of such a tree can be thought of as the root of the subtree that it dominates. Thus subtrees can be thought of as the same type as the trees they are embedded in, hence the designation eTree , for embedding tree . Whereas in a tree the relationship among the parts is indicated by the children attribute, and by the names of the elements root , iNode , and leaf , the relationship among the parts of an eTree is indicated simply by the arrangement of their content. However, we have chosen to enable encoders to distinguish the terminal elements of an eTree by means of the empty eLeaf element, though its use is not required; the eTree element can also be used to identify the terminal nodes of eTree elements. We also provide a triangle element, which can be thought of as an underspecified eTree , i.e. an eTree in which certain information has been left out. In addition, we provide a forest element, which consists of one or more tree , eTree , or triangle elements, and a listForest element, which consists of one or more forest elements. The elements used for the encoding of embedding trees and the units containing them have the following descriptions and attributes. < eTree > provides an alternative to the tree element for representing ordered rooted tree structures. < triangle > provides for an underspecified eTree , that is, an eTree with information left out. < eLeaf > provides explicitly for a leaf of an embedding tree, which may also be encoded with the eTree element. < forest > provides for groups of rooted trees. < listForest > provides for lists of forests. Like the root , iNode , and leaf of a tree , the eTree , triangle and eLeaf elements may also have value attributes and label children. To illustrate the use of the eTree and eLeaf elements, here is an encoding of the second example in section 19.2 Trees , repeated here for convenience. Next, we provide an encoding, using the triangle element, in which the internal structure of the eTree labeled NP is omitted. Ambiguity involving alternative tree structures associated with the same terminal sequence can be encoded relatively conveniently using a combination of the exclude and copyOf attributes described in sections 16.8 Alternation and 16.6 Identical Elements and Virtual Copies . In the simplest case, an eTree may be part of the content of exactly one of two different eTree elements. To mark it up, the embedded eTree may be fully specified within one of the embedding eTree elements to which it may belong, and a virtual copy, specified by the copyOf attribute, may appear on the other. In addition, each of the embedded elements in question is specified as excluding the other, using the exclude attribute. To illustrate, consider the English phrase see the vessel with the periscope , which may be considered to be structurally ambiguous, depending on whether the phrase with the periscope is a modifier of the phrase the vessel or a modifier of the phrase see the vessel . This ambiguity is indicated in the sketch of the ambiguous tree by means of the dotted-line arcs. The markup using the copyOf and exclude attributes follows the sketch. To indicate that one of the alternatives is selected, one may specify the select attribute on the highest eTree as either #GD-PPA or #GD-PPB; see section 16.8 Alternation . Depending on the grammar one uses to associate structures with examples like see the man with the periscope , the representations may be more complicated than this. For example, adopting a version of the X-bar theory of phrase structure originated by Jackendoff, 4 the attachment of a modifier may require the creation of an intermediate node which is not required when the attachment is not made, as shown in the following diagram. A possible encoding of this ambiguous structure immediately follows the diagram. A derivation in a generative grammar is often thought of as a set of trees. To encode such a derivation, one may use the forest element, in which the trees may be marked up using the tree , the eTree , or the triangle element. The type attribute may be used to specify what kind of derivation it is. Here is an example of a two-tree forest, involving application of the wh-movement transformation in the derivation of what you do (as in this is what you do ) from the underlying you do what . 5 In this markup, we have used copyOf attributes to provide virtual copies of elements in the tree representing the second stage of the derivation that also occur in the first stage, and the corresp attribute (see section 16.5 Correspondence and Alignment ) to link those elements in the second stage with corresponding elements in the first stage that are not copies of them. If a group of forests (e.g. a full grammatical derivation including syntactic, semantic, and phonological subderivations) is to be articulated, the grouping element listForest may be used. 19.4 Representing Textual Transmission A stemma codicum (sometimes called just stemma ) is a tree-like graphic structure that has become traditional in manuscript studies for representing textual transmission. Consider the following hypothetical stemma: The nodes in this stemma represent manuscripts; each has a label (a letter) which identifies it and also distinguishes whether the manuscript is extant, lost, or hypothetical. Extant manuscripts are identified by uppercase Latin letters or words beginning with uppercase Latin letters, e.g., L, shown as aqua in this example; manuscripts no longer existing, but providing readings which are attested e.g. by note or copy made before their disappearance, are identified by lowercase Latin letters, e.g., t, shown as magenta in this example; hypothetical stages in the textual transmission, which do not necessarily correspond to real manuscripts, are given lowercase Greek letters, e.g., α and shown as gold in this example. The stemma shown above thus suggests that (on the basis of similarities in the readings of the extant and lost manuscripts) L and t share textual material that is not shared with other manuscripts (represented in this case by δ) even though no physical manuscript attesting this stage in the textual transmission has ever been identified. Manuscripts are copied from other manuscripts. The preceding stemma represents the hypothesis that all manuscripts go back to a common ancestor (α), that the tradition split after that stage into two (β and γ), etc. Descent by copying is indicated with a solid line. According to this model, α is the earliest common hypothetical stage that can be reconstructed, and all nodes below α have a single parent, that is, were copied from a single other stage in the tradition. This familiar tree model is complicated because manuscripts sometimes show the influence of more than one ancestor. They may have been produced by a scribe who checked the text in one manuscript of the same work whilst copying from another, or perhaps made changes from his memory of a slightly different version of the text that he had read elsewhere. Alternatively, perhaps scribe A copied a manuscript from one source, scribe B made changes in it in the margins or between the lines (either by consulting another source directly or from memory), and another scribe then copied that manuscript, incorporating the changes into the body. Whatever the specific scenario, it is not uncommon for a manuscript to be based primarily on one source, but to incorporate features of another branch of the tradition. This mixed result is called contamination , and it is reflected in a stemma by a dotted line. Thus, the example above asserts that A is copied within the ε tradition, but is also contaminated from the γ tradition. The utility of a stemma as a visualization tool is inversely proportional to the degree of contamination in the manuscript tradition. A tradition completely without contamination (called a closed tradition ) yields a classic tree, easily represented graphically by a stemma. An open tradition , with substantial contamination, yields a spaghetti-like stemma characterized by crossing dotted lines, which is both difficult to read and not very informative. The eTree element introduced in this chapter can be used to represent a closed tradition in a straightforward manner. Each non-terminal node is represented by a typed eTree element and each terminal node by an eLeaf . A label element provides a way of identifying each node, complementary to the global attributes n and xml:id attributes. For example, the closed part of the tradition headed by the label δ may be encoded as follows: In any substantial codicological project, it is likely that significantly more data will be required about the individual witnesses than indicated in the simple structures above. These Guidelines provide a rich variety of additional elements for representing such information: see in particular chapters 10 Manuscript Description , 11 Representation of Primary Sources , and 12 Critical Apparatus . 19.5 Module for Graphs, Networks, and Trees The module described in this chapter makes available the following components: Graphs, networks, and trees Graphs, networks, and trees The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . ","title":"<span class=\"tei-div7 breadcrumb\">19 Graphs, Networks, and Trees</span>"}
{"link":"p5.xml?id=NH","tag":"guidelines","content":"20 Non-hierarchical Structures XML employs a strongly hierarchical document model. At various points, these Guidelines discuss problems that arise when using XML to encode textual features that either do not naturally lend themselves to representation in a strictly hierarchical form or conflict with other hierarchies represented in the markup. Examples of such situations include: Conflict between the hierarchy established by the physical structure of a document (e.g., volume, page, column, line) and its rhetorical or linguistic structure (e.g., chapters, paragraphs, sentences, acts, scenes, etc.) Conflict between the hierarchy established by the physical structure of a document (e.g., volume, page, column, line) and its rhetorical or linguistic structure (e.g., chapters, paragraphs, sentences, acts, scenes, etc.) Conflict between a verse text's metrical structure (e.g., its arrangement in stanzas and metrical lines) and its rhetorical or linguistic structure (e.g., phrases, sentences, and, for plays, acts, scenes, and speeches). Conflict between a verse text's metrical structure (e.g., its arrangement in stanzas and metrical lines) and its rhetorical or linguistic structure (e.g., phrases, sentences, and, for plays, acts, scenes, and speeches). Conflict between metrical, rhetorical, or linguistic structure and the representation of direct speech, especially if the quoted speech is interrupted by other elements (e.g., What, she asked, was that all about) or crosses metrical, rhetorical, or linguistic boundaries. Conflict between metrical, rhetorical, or linguistic structure and the representation of direct speech, especially if the quoted speech is interrupted by other elements (e.g., What, she asked, was that all about) or crosses metrical, rhetorical, or linguistic boundaries. Conflict between different analytical views or descriptions of a text or document, e.g., markup intended to encode diplomatic information about a word's appearance in a manuscript with markup intended to describe its morphology or pronunciation. Conflict between different analytical views or descriptions of a text or document, e.g., markup intended to encode diplomatic information about a word's appearance in a manuscript with markup intended to describe its morphology or pronunciation. Non-nesting information poses fundamental problems for any XML-based encoding scheme, and it must be stated at the outset that no current solution combines all the desirable attributes of formal simplicity, capacity to represent all occurring or imaginable kinds of structures, suitability for formal or mechanical validation. The representation of non-hierarchical information is thus necessarily a matter of trade-offs among various sets of advantages and disadvantages. These Guidelines support several methods for handling non-hierarchical information: redundant encoding of information in multiple forms (discussed in 20.1 Multiple Encodings of the Same Information ) redundant encoding of information in multiple forms (discussed in 20.1 Multiple Encodings of the Same Information ) the use of empty elements to delimit the boundaries of a non-nesting structure (discussed in 20.2 Boundary Marking with Empty Elements ) the use of empty elements to delimit the boundaries of a non-nesting structure (discussed in 20.2 Boundary Marking with Empty Elements ) the division of a logically single non-nesting element into segments that nest properly in their immediate hierarchical context but can also be reconstituted virtually across these hierarchical boundaries (discussed 20.3 Fragmentation and Reconstitution of Virtual Elements ) the division of a logically single non-nesting element into segments that nest properly in their immediate hierarchical context but can also be reconstituted virtually across these hierarchical boundaries (discussed 20.3 Fragmentation and Reconstitution of Virtual Elements ) stand-off markup: the annotation of information by pointing at it, rather than by placing XML tags within it (discussed in 20.4 Stand-off Markup ) stand-off markup: the annotation of information by pointing at it, rather than by placing XML tags within it (discussed in 20.4 Stand-off Markup ) In the sections which follow these techniques are described and their advantages and disadvantages are briefly discussed. The various solutions to the problem will be exemplified using extracts from two poems. The first is the opening quatrain from William Wordsworth's Scorn not the sonnet : 20.1 Multiple Encodings of the Same Information Conceptually, the simplest method of disentangling two (or more) conflicting hierarchical views of the same information is to encode it twice (or more), each time capturing a single view. Thus, for example, the Metrical View of Scorn not the sonnet might be encoded as follows, using the l element to encode each metrical line: The Grammatical View would be encoded by taking the same text and replacing the metrical markup with information about its sentence structure: Likewise, the more complex passage from Pinsky could be encoded in three different ways to reflect the different metrical, grammatical, and dialogic views of its text: This method is TEI-conformant. Its advantages are that each way of looking at the information is explicitly represented in the data and that the individual views are simple to process. The disadvantages are that the method requires the maintenance of multiple copies of identical textual content (an invitation to inconsistency) and that there is no explicit indication that the various views, which might be in separate files, are related to each other: it might prove difficult to combine the views or access information from one view while processing the file that contains the encoding of another. 1 20.2 Boundary Marking with Empty Elements A second method for accommodating non-hierarchical objects in an XML document involves marking the start and end points of the non-nesting material. This prevents textual features that fall outside the privileged hierarchy from invalidating the document while identifying their beginnings and ends for further processing. The disadvantage of this method is that no single XML element represents the non-nesting material and, as a result, processing with XML technologies is significantly more difficult. The empty elements used at each end are called segment-boundary elements or segment-boundary delimiters . There are several variations on this method of encoding. For some common structural features, the TEI provides milestone elements that can be used to mark the beginning of a textual feature. These include lb , pb , cb , handShift , and the generic milestone . Using lb , for example, it is possible to indicate both the physical lineation of a poem on the page and its grammatical division into sentences: The use of these elements is by definition TEI-conformant. Care should be taken, however, that the meaning of the milestone elements is preserved: semantically, for example, lb is used to mark the start of a new (typographical) line. While in much modern poetry, typographical and metrical line divisions correspond, lb does not itself make a metrical claim: in encoding verse from sources, such as Old English manuscripts, where physical line breaks are not used to indicate metrical lineation, the correspondence would break down entirely. The segment boundaries also may be delimited by the generic anchor element. Attributes can then be used to indicate the type of feature being delimited and whether a given instance opens or closes the feature. This method is TEI-conformant. Another approach is to design custom elements that provide richer information about the feature being delimited or its boundaries. This information can be included as attribute values or as part of the element name itself: e.g., boundaryStart element=\"sentence\"/... boundaryEnd element=\"sentence\"/, sentenceBoundary position=\"start\"/... sentenceBoundary position=\"end\"/, or sentenceBoundaryStart/... sentenceBoundaryEnd/: If the custom elements can be replaced by TEI elements and attributes without loss of information, this method is TEI-conformant (see 23.4 Conformance ); if the custom elements introduce information or distinctions that cannot be captured using standard TEI elements, the method is an extension. Finally, elements that are normally used to encode nesting textual features (e.g., said , seg , l , etc.) can be adapted so that they serve as empty segment boundary delimiters when the features they encode cross-hierarchical boundaries. Additional attributes (sID and eID in the example below) are added to these elements in order to allow the unambiguous correlation of start and end points. This method has been introduced in the markup literature under various names, including Trojan milestones, HORSE markup, CLIX, and COLT. It is described in detail by Steven DeRose Markup overlap: a review and a horse http://www.mulberrytech.com/Extreme/Proceedings/html/2004/DeRose01/EML2004DeRose01.html Proceedings of Extreme Markup Languages 2004 2004 1 ): The method is TEI-conformant if the modified elements and attributes can be mapped without loss of information to existing TEI markup structures such as milestone or anchor elements automatically (see 23.4 Conformance ). The method represents an Extension if the modified elements are placed in a distinct, non-TEI namespace (see 23.4 Conformance ). The method is non-conformant—and indeed strongly deprecated—if the modified elements and attributes are not placed in a distinct, non-TEI namespace (see 23.4.3 Conformance to the TEI Abstract Model ). In each of the above examples (except the last), the relationship between the start and end delimiters (where these exist) of a given feature is implicit: it is assumed that \"end\" delimiters close the nearest preceding \"start\" delimiter, or, in the case of milestones, that the milestone marks both the end of the preceding example and the beginning of the next. Complications arise, however, when the non-nesting text overlaps with other non-nesting text of the same type, as, for example, in a grammatical analysis of the various possible interpretations of the noun phrase fast trains and planes . In this case, the adjective fast can be understood as either modifying trains and planes or just trains : In order to encode the possible analyses of this phrase, an unambiguous method of associating opening and closing segment boundary delimiters is required: In this encoding, the first interpretation, in which fast modifies the NP trains and planes , the NP trains and planes is opened using an anchor tag with the xml:id value NPInterpretationA and closed with an anchor with the same value on corresp; in the second interpretation, in which fast forms a NP with trains , the NP fast cars is opened using an anchor tag with the xml:id value NPInterpretationB and closed with an anchor tag that has the same value on corresp. Despite their advantages, segment boundary delimiters incur the disadvantage of cumbersome processing: since the elements of the analysis (e.g., the sentences in the poems, or phrases in the above example) are not uniformly represented by nodes in the document tree, they must be reconstituted by software in an ad hoc fashion, which is likely to be difficult and may be error prone. Most important for some encoders, the method also disguises the relationship between the beginning and the ending of each logical element. This makes it impossible for standard validation software to provide the same kind of validation possible elsewhere in the encoding. When using grammar-based schema languages it is not possible to define a content model for the range limited by empty elements. 2 20.3 Fragmentation and Reconstitution of Virtual Elements A third method involves breaking what might be considered a single logical (but non-nesting) element into multiple smaller structural elements that fit within the dominant hierarchy but can be reconstituted virtually. For example, if a passage of direct discourse begins in the middle of one paragraph and continues for several more paragraphs, one could encode the passage as a series of said elements, each fitting within a p element. The resulting encoding is valid XML, but the text in each said element represents only a portion of the complete passage of direct discourse. For this reason these elements are sometimes called partial elements. In the case of our selection from Pinsky's poem, for example, the second passage of direct quotation, which crosses a line boundary and is broken up by a She said in the narrator's voice, can be made to fit within the hierarchy established by the metrical lineation by using two said elements: Similarly, the sentences in our example from Wordsworth could be encoded: There are two main problems with this type of encoding. The first is that it invariably means that the encoding will have more elements claiming to represent a feature than there are actual instances of that feature in the text. Thus, for example, the passage from Scorn not the sonnet marks seven spans of text using seg , even though there are only four linguistic sentences in the passage. The second problem is that it can be semantically misleading. Although they are tagged using the element for sentence , for example, very few of the textual features encoded using seg in this example represent actual linguistic sentences: with this key , for example, is a prepositional phrase, not a sentence; Of this small lute gave ease to Petrarch's wound is a string corresponding to no single grammatical category. Taken together, these problems can make automatic analysis of the fragmented features difficult. An analysis that intended to count the number of sentences in Wordsworth's poem, for example, would arrive at an inflated figure if it understood the seg elements to represent complete rhetorical sentences; if it wanted to do an analysis of his syntax, it would not be able to assume that seg delimited linguistic sentences. The technique of fragmentation is often complemented by the technique of virtual joins. Virtual joins may be used to combine objects in the text to a new hierarchy. Here is Scorn not the sonnet again; this time the relationship between the parts of the fragmented sentences is indicated explicitly using the next and prev attributes described in 16.7 Aggregation . For fragments encoded using ab , l , lg , div , or elements that belong to the att.segLike class, an even simpler mechanism for virtually joining fragments exists: the use of the part attribute with the value I (Initial), M (Medial), or F (Final) as described in 16.3 Blocks, Segments, and Anchors . Here is the above example recoded to reflect this method: This method is TEI-conformant and simple to use. Its disadvantage is that it does not work well for cases of self-overlap, or if there are nested occurrences of the same element type, as it can become difficult to ascertain which initial, medial, or final partial element should be combined with which others or in which order. This problem becomes evident if we attempt to combine a detailed Grammatical view of the Pinsky example with its metrical encoding: A third method for aggregating fragmented partial elements involves using markup that is not directly part of the encoding, e.g., the join element. In this method, a join element is used elsewhere in the document to indicate explicitly the members of the virtual element: This use of join is TEI-conformant. The major advantage of fragmentation and virtual joins is that it allows all the hierarchies in the text to be handled explicitly: both the privileged one directly represented and the alternate hierarchy that has been split up and rejoined. The major disadvantages are that (like most of the other methods described here) it privileges one hierarchy over the others, requires special processing to reconstitute the elements of the other hierarchies, and, except in the case of join , can be semantically misleading. 20.4 Stand-off Markup Most markup is characterized by the embedding of elements in the text. An alternative approach separates the text and the elements used to describe it. This approach is known as stand-off markup (see section 16.9 Stand-off Markup ). It establishes a new hierarchy by building a new tree whose nodes are XML elements that do not contain textual content, but rather links to another layer : a node in another XML document or a span of text . This approach can be subdivided according to different criteria. A first distinction concerns the link base, i.e. the content to which annotations are to be applied. Sometimes the link target contains markup that can be referred to explicitly, as in the following example where the offset markup uses the xml:id values on w to provide targets for xi:include 3 : This is very similar to the use of join discussed above. The main advantages of the stand-off method are that it is possible to specify attributes on the aggregate seg elements, and that there exists off-the-shelf software that will perform appropriate processing. Stand-off markup may be used even when the base text being annotated is plain text, i.e. does not have any XML encoding. In this case, the range of text to be marked up is indicated by character offsets (see 16.2.4 TEI XPointer Schemes , in particular 16.2.4.7 string-range() ). Another distinction concerns the number of files which can serve as link targets. Often, one (dedicated) annotation is used as the link target of all the other annotations. It is also possible to freely interlink several layers. It has been noted that stand-off markup has several advantages over embedded annotations. In particular, it is possible to produce annotations of a text even when the source document is read-only. Furthermore, annotation files can be distributed without distributing the source text. Further advantages mentioned in the literature are that discontinuous segments of text can be combined in a single annotation, that independent parallel coders can produce independent annotations, and that different annotation files can contain different layers of information. Lastly, it has also been noted that this approach is elegant. But there are also several drawbacks. First, new stand-off annotated layers require a separate interpretation, and the layers—although separate—depend on each other. Moreover, although all of the information of the multiple hierarchies is included, the information may be difficult to access using generic methods. Inasmuch as it uses elements not included in the TEI namespace, stand-off markup involves an extension of the TEI. 20.5 Non-XML-based Approaches There exist many non-XML methods of encoding a text that either solve or do not suffer the problem of the inability to encode overlapping hierarchies. These include, but are not limited to, the following proposals. Applying the notion of concurrent markup to XML ( Mirco Hilbert Oliver Schonefeld Andreas Witt Making CONCUR work http://www.mulberrytech.com/Extreme/Proceedings/html/2005/Witt01/EML2005Witt01.xml Proceedings of Extreme Markup Languages 2005 2005 1 ). This reintroduces the CONCUR feature of SGML, which was omitted from the XML specification. Designing a form of document representation in which several trees share all or part of the same frontier, and in which each individual view of the document has the form of a tree (see Alex Dekhtyar Ionut E. Iacob A framework for management of concurrent XML markup http://digitalcommons.calpoly.edu/cgi/viewcontent.cgi?article=1104&context=csse_fac 2005 1 ). The colored XML proposal ( H. V. Jagadish Laks V. S. Lakshmanan Monica Scannapieco Divesh Srivastava Nuwee Wiwatwattana Colorful XML: one hierarchy isn't enough http://web.archive.org/web/20150706093254/http://www2.research.att.com/~divesh/papers/jlssw2004-mct.pdf 2004 1 ), which stores a body of information as a set of intertwined XML trees. This approach eliminates unnecessary redundancy and makes the database readily updatable, while allowing the user to exploit different hierarchical access paths. The MultiX proposal ( Noureddine Chatti Suha Kaouk Sylvie Calabretto Jean Marie Pinon MultiX: an XML based formalism to encode multistructured documents http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.115.1525&rep=rep1&type=pdf Proceedings of Extreme Markup Languages 2007 2007 1 ) , which represents documents as directed graphs. Because XML is used to represent the graph, the document is, at least in principle, manipulable with standard XML tools. The Just-In-Time-Trees proposal ( Patrick Durusau Matthew Brook O'Donnell Coming down from the trees: next step in the evolution of markup? Proceedings of Extreme Markup Languages 2002 2002 1 ), which stores documents using XML, but processes the XML representation in non-standard ways and allows it to be mapped onto data structures that are different from those known from XML. The Layered Markup and Annotation Language proposal. This offers alternatives to the basic XML linear form as well as its data and processing models. It uses an alternative notation to XML and a data structure based on Core Range Algebra ( Jeni Tennison Wendell Piez The layered markup and annotation language Proceedings of Extreme Markup Languages Conference 2002 1 ). Markup Languages for Complex Documents . This provides a notation (TexMECS) and a data structure (Goddag) as well as a draft constraint language for the representation of non-hierarchical structures; see Claus Huitfeldt C. Michael Sperberg-McQueen TexMECS: An experimental markup meta-language for complex documents http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html 2001 1 . These approaches are based either on non-standard XML processing or data models, or not based on XML at all. Since TEI is currently based on XML they are not described any further in these Guidelines. Use of these methods with the TEI will certainly involve extensions; in most cases the documents will also be non-conformant.","title":"<span class=\"tei-div7 breadcrumb\">20 Non-hierarchical Structures</span>"}
{"link":"p5.xml?id=CE","tag":"guidelines","content":"21 Certainty, Precision, and Responsibility Encoders of text often find it useful to indicate that some aspects of the encoded text are problematic or uncertain, and to indicate who is responsible for various aspects of the markup of the electronic text. These Guidelines provide several methods of recording uncertainty about the text or its markup: the note element defined in section 3.9 Notes, Annotation, and Indexing may be used with a value of certainty for its type attribute. the certainty element defined in this chapter may be used to record the nature and degree of the uncertainty in a more structured way. the precision element defined in this chapter may be used to record the accuracy with which some numerical value (such as a date or quantity) is provided by some other element or attribute. the alt element defined in the module for linking and segmentation may be used to provide alternative encodings for parts of a text, as described in section 16.8 Alternation . the TEI header records who is responsible for an electronic text by means of the respStmt element and other more specific elements ( author , sponsor , funder , principal , etc.) used within the titleStmt , editionStmt , and revisionDesc elements. the note element may be used with a value of resp or responsibility in its type attribute. the respons element defined in this chapter may be used to record fine-grained structured information about responsibility for individual tags in the text. These three elements are all members of an attribute class called att.scoping from which they inherit the following attributes: < att.scoping > provides attributes for selecting particular elements within a document. @target points at one or more sets of zero or more elements each. @match supplies an XPath selection pattern using the syntax defined in 1 which identifies a set of nodes, selected within the context identified by the target attribute if this is supplied, or within the context of the parent element if it is not. points at one or more sets of zero or more elements each. supplies an XPath selection pattern using the syntax defined in 1 which identifies a set of nodes, selected within the context identified by the target attribute if this is supplied, or within the context of the parent element if it is not. These attributes enable statements about certainty, precision, or responsibility to be made with respect to the whole of a document, or any part or parts of it which can be identified using standard XML location methods. Several examples are given in the discussion of the certainty element below; the same mechanisms are available for all three elements discussed in this chapter. 21.1 Levels of Certainty Many types of uncertainty may be distinguished. The certainty element is designed to encode the following sorts: a given tag may or may not correctly apply (e.g. a given word may be a personal name, or perhaps not) the precise point at which an element begins or ends is uncertain the value given for an attribute is uncertain the content given for an element is unreliable for any reason. The following types of uncertainty are not indicated with the certainty element: the numerical precision associated with a number or date (for this use the precision element discussed in 21.2 Indications of Precision ) the content of the document being transcribed is identifiable, but may be read or understood in different ways (for this use the transcriptional elements such as unclear , discussed in chapter 11 Representation of Primary Sources ) a transcriber, editor, or author wishes to indicate a level of confidence in a factual assertion made in the text (for this use the interpretative mechanisms discussed in 17 Simple Analytic Mechanisms and 18 Feature Structures ) 21.1.1 Using Notes to Record Uncertainty The simplest way of recording uncertainty about markup is to attach a note to the element or location about which one is unsure. In the following (invented) paragraph, for example, an encoder might be uncertain whether to mark Essex as a place name or a personal name, since both might be plausible in the given context: Elizabeth went to Essex. She had always liked Essex. Using note , the uncertainty here may be recorded quite simply: Using the normal mechanisms, the note may be associated unambiguously with specific elements of the text, thus: The advantage of this technique is its relative simplicity. Its disadvantage is that the nature and degree of uncertainty are not conveyed in any systematic way and thus are not susceptible to any sort of automatic processing. 21.1.2 Structured Indications of Uncertainty To record uncertainty in a more structured way, susceptible of at least simple automatic processing, the certainty element may be used: < certainty > indicates the degree of certainty associated with some aspect of the text markup. Returning to the example, the certainty element may be used to record doubts about the proper encoding of Essex in several ways of varying precision. To record merely that we are not certain that Essex is in fact a place name, as it is tagged, we use the target attribute to identify the element in question, and the locus attribute to indicate which aspect of the markup we are uncertain about (in this case, whether we have used the correct name for the element used to mark it): We may wish to record the probability, assessed in some subjective way, that Essex really is a place name here. The degree attribute is used to indicate the degree of confidence associated with the certainty element, expressed as a number between 0 and 1: In the simplest case, it is also possible to place the certainty element within the element concerned: 21.1.2.1 Contingent Conditions Finally, we may wish to make our probability estimates contingent on some condition. In the passage Elizabeth went to Essex; she had always liked Essex, for example, we may feel there is a 60 percent chance that the county is meant, and a 40 percent chance that the earl is meant. But the two occurrences of the word are not independent: there is (we may feel) no chance at all that the first occurrence refers to the county and the second to the earl. We can express this by using the given attribute to list the identifiers of certainty elements. Conditional confidence may be less than 100 percent: given the sentence Ernest went to old Saybrook , we may interpret Saybrook as a personal name or a place name, assigning a 60 percent probability to the former. If it is a place name, there may be a 50 percent chance that the place name actually in question is Old Saybrook rather than Saybrook , while if it is correctly tagged as a personal name, it is much more likely (say, 90 percent certain) that the name is Saybrook . Hence there is uncertainty about the correct location for the markup as well as about which markup to use. This state of affairs can be expressed using the certainty element thus: Multiplying the numeric values out, this markup may be interpreted as assigning specific probabilities to three different ways of marking up the sentence: 21.1.2.2 Pervasive Conditions We may also wish to indicate confidence in some aspect of the tagging throughout a document, rather than (as discussed so far) in one particular instance. The match attribute may be used to supply a pattern identifying the portion of a document concerning which certainty is being expressed. The value of the match attribute is an XSLT selection pattern using the syntax defined in 1 . In the following example, we wish to indicate a low degree of confidence that the persName elements used throughout the whole document have been correctly applied: When the match attribute is processed, the namespace bindings in force are those in effect at that point in the document. For example, 21.1.2.3 Content Uncertainty Doubts about whether the content of an element is correct may also be expressed by assigning to locus the value value . For example, if the source is hard to read and so the transcription is uncertain: Degrees of confidence in the proper expansion of abbreviations may also be expressed, as in the following example: The assertedValue attribute should be used to provide an alternative value for whatever aspect of the markup is in doubt: an alternative name, or the identifier of an alternative starting or ending point, as already shown, an alternative attribute value, or alternative element content, as in this example: 21.1.2.4 Target or Match? As noted in 16 Linking, Segmentation, and Alignment , the target attribute may take any general teidata.pointer as values and may thus also contain an XPath expression of arbitrary complexity. Because full support for XPath is not provided by current processors, it is not generally recommended TEI practice. There are however some simple cases in which XPath syntax is to be preferred, notably those in which the xml:id attribute is used to identify a single element occurrence. The usage #A (to indicate the element whose xml:id attribute has the value A) is syntactically much simpler than the equivalent xpath2 expression //*[@xml:id='A'] and is hence preferred throughout these guidelines. For similar reasons, the certainty element may specify both a target value (expressed as an URI) and a match value (expressed as an XPath). The former defines the context within which the latter is to be evaluated. As previously noted, if no value is supplied for target, the context within which the value of match should be evaluated is the parent element of the certainty element itself. A typical case where it may be convenient to specify both target and match is that where we wish to indicate that the value of an attribute on some specific element is uncertain. In this case, the locus attribute takes the value value. For example, supposing there is only a 50 percent chance that the question was spoken by participant A: The match and target attributes together provide a powerful mechanism which can be used to indicate precision for a large number of assertions throughout an encoded document in an economical way. Some further examples follow: The certainty element and the other TEI mechanisms for indicating uncertainty provide a range of methods of graduated complexity. Simple expressions of uncertainty may be made by using the note element. This is simple and convenient, and can accommodate either a discursive and unstructured indication of uncertainty, or a complex and structured but probably project-specific expression of uncertainty. In general, however, unless special steps are taken, the note element does not provide as much expressive power as the certainty element, and in cases where highly structured certainty information are needed, it is recommended that the certainty element be preferred. 21.2 Indications of Precision As noted above, certainty about the accuracy of an encoding or its content is not the same thing as the precision with which a value is specified. In the case of a date or a quantity, for example, we might be certain that the value given is imprecise, or uncertain about whether or not the value given is correct. The latter possibility would be represented by the certainty element discussed in the previous section; the former by the precision element discussed in this section. The elements concerning which statements of precision are to be made are identified using the same target and match attributes inherited from the att.scoping class discussed in the previous section and in the same way. Other aspects are provided by other attributes as further discussed below. < precision > indicates the numerical accuracy or precision associated with some aspect of the text markup. In 3.6.3 Numbers and Measures several ways of indicating ranges of values were introduced. For example, if we know that a date falls between 1930 and 1935, without being certain exactly where, this fact may be encoded using attributes notBefore and notAfter, as in the following example: Suppose however that the precision with which the value of such an attribute can be specified is variable. For example, suppose an event is dated about fifty years after the death of Augustus . In this case, the precision of one end of the range (the death of Augustus) is higher than the other, assuming we know when Augustus died. We can say that the latest possible date is probably 50 years after that, but with less confidence than we can attach to the earliest possible date. The precision element allows us to indicate the two attributes concerned and attach different levels of precision to them, using a similar mechanism as that provided for the certainty element: In much the same way, we may wish to indicate different levels of precision about the dating of either end of a historical period. For example, the elements defined for encoding personal data all bear a similar set of attributes to indicate normalized values for earliest or latest dates, etc. (see section 13.1.2 Dating Attributes ); the precision of these attribute values may be indicated in exactly the same way. For example, It may also be useful to indicate that the precisions given for minimum and maximum quanta differ. For example, to indicate that all pages measure at least 10 cm wide, and at most about 30: The stdDeviation attribute may be used to indicate the standard deviation for a range of values. The generic dim element introduced in 10.3.4 Dimensions might be used to record the average number of characters per line in a typescript. If in addition we wish to record the standard deviation for the values summarized by that average, this would require an additional precision element, as in the following example: 21.3 Attribution of Responsibility In general, attribution of responsibility for the transcription and markup of an electronic text is made by respStmt elements within the header: specifically, within the title statement, the edition statement(s), and the revision history. In some cases, however, more detailed element-by-element information may be desired. For example, an encoder may wish to distinguish between the individuals responsible for transcribing the content and those responsible for determining that a given word or phrase constitutes a proper noun. Where such fine-grained attribution of responsibility is required, the respons element can be used. < respons > identifies the individual(s) responsible for some aspect of the content or markup of particular element(s). This element allows one or more aspects of the markup to be attributed to a given individual. This element inherits the target and match attributes from the att.scoping class, in the same way as the certainty and precision elements. Its locus attribute functions in the same way as that on the certainty element (see 21.1 Levels of Certainty ). It inherits the resp and cert attributes from the att.global.responsibility class. For example, the following encoding indicates that RC is responsible for transcribing an illegible word, and that PMWR is responsible for identifying that word as a proper noun, i.e. deciding to mark it with the persName element at the location indicated: Similarly, in the following example, we indicate that RC is responsible for proposing the value of the rend attribute: 21.4 The Certainty Module The module described in this chapter makes available the following additional elements: Certainty and Uncertainty Certainty, Precision, and Responsibility The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . ","title":"<span class=\"tei-div7 breadcrumb\">21 Certainty, Precision, and Responsibility</span>"}
{"link":"p5.xml?id=TD","tag":"guidelines","content":"22 Documentation Elements This chapter describes a module which may be used for the documentation of the XML elements and element classes which make up any markup scheme, in particular that described by the TEI Guidelines, and also for the automatic generation of schemas or DTDs conforming to that documentation. It should be used also by those wishing to customize or modify these Guidelines in a conformant manner, as further described in chapters 23.3 Customization and 23.4 Conformance and may also be useful in the documentation of any other comparable encoding scheme, even though it contains some aspects which are specific to the TEI and may not be generally applicable. An overview of the kind of processing environment envisaged for the module described by this chapter may be helpful. In the remainder of this chapter we refer to software which provides such a processing environment as an ODD processor . 1 Like any other piece of XML software, an ODD processor may be instantiated in many ways: the current system uses a number of XSLT stylesheets which are freely available from the TEI, but this specification makes no particular assumptions about the tools which will be used to provide an ODD processing environment. As the name suggests, an ODD processor uses a single XML document to generate multiple outputs. These outputs will include: formal reference documentation for elements, attributes, element classes, patterns, etc. such as those provided in 3 Elements below; detailed descriptive documentation, embedding some parts of the formal reference documentation, such as the tag description lists provided in this and other chapters of these Guidelines; declarative code for one or more XML schema languages, such as RELAX NG, W3C Schema, ISO Schematron, or DTD. The input required to generate these outputs consists of running prose, and special purpose elements documenting the components (elements, classes, etc.) which are to be declared in the chosen schema language. All of this input is encoded in XML using elements defined in this chapter. In order to support more than one schema language, these elements constitute a comparatively high-level model which can then be mapped by an ODD processor to the specific constructs appropriate for the schema language in use. Although some modern schema languages such as RELAX NG or W3C Schema natively support self-documentary features of this kind, we have chosen to retain the ODD model, if only for reasons of compatibility with earlier versions of these Guidelines. For reasons of backwards compatibility, the ISO standard XML schema language RELAX NG ( http://www.relaxng.org ) may be used as a means of declaring content models and datatypes, but it is also possible to express content models using native TEI XML constructs. We also use the ISO Schematron language to define additional constraints beyond those expressed in the content model, as further discussed in 22.5.2 Additional Constraints below. In the TEI system, a schema is built by combining element and attribute declarations, more or less as required. Each element is documented by an appropriate specification element and has an identifier unique across the whole TEI scheme. For convenience, these specifications are grouped into a number of discrete modules , which can also be combined more or less as required. Each major chapter of these Guidelines defines a distinct module. Each module declares a number of elements specific to that module, and may also populate particular classes . All classes are available globally, irrespective of the module in which they are declared; particular modules extend the meaning of a class by adding elements or attributes to it. Wherever possible, element content models are defined in terms of classes rather than in terms of specific elements. Modules can also declare particular patterns , which act as short-cuts for commonly used content models or class references. In the present chapter, we discuss the components needed to support this system. In addition, section 22.1 Phrase Level Documentary Elements discusses some general purpose elements which may be useful in any kind of technical documentation, wherever there is need to talk about technical features of an XML encoding such as element names and attributes. Section 22.2 Modules and Schemas discusses the elements which are used to document XML modules and their high-level components. Section 22.3 Specification Elements discusses the elements which document XML elements and their attributes, element classes, and generic patterns or macros. Finally, section 22.9 Module for Documentation Elements provides a summary overview of the elements provided by this module. 22.1 Phrase Level Documentary Elements 22.1.1 Phrase Level Terms In any kind of technical documentation, the following phrase-level elements may be found useful for marking up strings of text which need to be distinguished from the running text because they come from some formal language: < code > contains literal code from some formal language such as a programming language. < ident > contains an identifier or name for an object of some kind in a formal language. ident is used for tokens such as variable names, class names, type names, function names etc. in formal programming languages. The code and ident elements are intended for use when citing brief passages in some formal language such as a programming language, as in the following example: If the cited phrase is a mathematical or chemical formula, the more specific formula element defined by the figures module ( 14.2 Formulæ and Mathematical Expressions ) may be more appropriate. A further group of similar phrase-level elements is also defined for the special case of representing parts of an XML document: < att > < gi > contains the name (generic identifier) of an element. < tag > contains text of a complete start- or end-tag, possibly including attribute specifications, but excluding the opening and closing markup delimiter characters. < val > contains a single attribute value. As an example of the recommended use of these elements, we quote from an imaginary TEI working paper: Within technical documentation, it is also often necessary to provide more extended examples of usage or to present passages of markup for discussion. The following special elements are provided for these purposes: < eg > contains any kind of illustrative example. < egXML > a single XML fragment demonstrating the use of some XML, such as elements, attributes, or processing instructions, etc., in which the egXML element functions as the root element. Like the code element, the egXML element is used to mark strings of formal code, or passages of XML markup. The eg element may be used to enclose any kind of example, which will typically be rendered as a distinct block, possibly using particular formatting conventions, when the document is processed. It is a specialized form of the more general q element provided by the TEI core module. In documents containing examples of XML markup, the egXML element should be used for preference, as further discussed below in 22.4.2 Exemplification of Components , since the content of this element can be checked for well-formedness. These elements are added to the class model.egLike when this module is included in a schema. That class is a part of the general model.inter class, thus permitting eg or egXML elements to appear either within or between paragraph-like elements. 22.1.2 Element and Attribute Descriptions Within the body of a document using this module, the following elements may be used to reference parts of the specification elements discussed in section 22.3 Specification Elements , in particular the brief prose descriptions these provide for elements and attributes. < specList > marks where a list of descriptions is to be inserted into the prose documentation. < specDesc > indicates that a description of the specified element, class, or macro should be included at this point within a document. TEI practice recommends that a specList listing the elements under discussion introduce each subsection of a module's documentation. The source for the present section, for example, begins as follows: When formatting the ptr element in this example, an ODD processor might simply generate the section number and title of the section referred to, perhaps additionally inserting a link to the section. In a similar way, when processing the specDesc elements, an ODD processor may recover relevant details of the elements being specified ( specList and specDesc in this case) from their associated declaration elements: typically, the details recovered will include a brief description of the element and its attributes. These, and other data, will be stored in a specification element elsewhere within the current document, or they may be supplied by the ODD processor in some other way, for example from a database. For this reason, the link to the required specification element is always made using a TEI-defined key rather than an XML IDREF value. The ODD processor uses this key as a means of accessing the specification element required. There is no requirement that this be performed using the XML ID/IDREF mechanism, but there is an assumption that the identifier be unique. A specDesc generates in the documentation the identifier, and also the contents of the desc child of whatever specification element is indicated by its key attribute, as in the example above. Documentation for any attributes specified by the atts attribute will also be generated as an associated attribute list. 22.2 Modules and Schemas As mentioned above, the primary purpose of this module is to facilitate the documentation and creation of an XML schema derived from the TEI Guidelines. The following elements are provided for this purpose: < schemaSpec > generates a TEI-conformant schema and documentation for it. < moduleSpec > documents the structure, content, and purpose of a single module, i.e. a named and externally visible group of declarations. < moduleRef > references a module which is to be incorporated into a schema. < specGrp > contains any convenient grouping of specifications for use within the current module. < specGrpRef > indicates that the declarations contained by the specGrp referenced should be inserted at this point. < attRef > < elementRef > points to the specification for some element which is to be included in a schema An ODD processor generating XML DTD or schema fragments from a document marked up according to the recommendations of this chapter will generate such fragments for each moduleSpec element found. For example, the chapter documenting the TEI module for names and dates contains a module specification like the following: In most realistic applications, it will be desirable to combine more than one module together to form a complete schema . A schema consists of references to one or more modules or specification groups, and may also contain explicit declarations or redeclarations of elements (see further 22.8.1 TEI customizations ). Any combination of modules can be used to create a schema 2 A schema can combine references to TEI modules with references to other (non-TEI) modules using different namespaces, for example to include mathematical markup expressed using MathML in a TEI document. By default, the effect of combining modules is to allow all of the components declared by the constituent modules to coexist (where this is syntactically possible: where it is not—for example, because of name clashes—a schema cannot be generated). It is also possible to over-ride declarations contained by a module, as further discussed in section 22.8.1 TEI customizations It is often convenient to describe and operate on sets of declarations smaller than the whole, and to document them in a specific order: such collections are called specGrps (specification groups). Individual specGrp elements are identified using the global xml:id attribute, and may then be referenced from any point in an ODD document using the specGrpRef element. This is useful if, for example, it is desired to describe particular groups of elements in a specific sequence. Note however that the order in which element declarations appear within the schema code generated from an ODD file element is not in general affected by the order of declarations within a specGrp . An ODD processor will generate a piece of schema code corresponding with the declarations contained by a specGrp element in the documentation being output, and a cross-reference to such a piece of schema code when processing a specGrpRef . For example, if the input text reads 22.3 Specification Elements The following elements are used to specify elements, classes, patterns, and datatypes: < elementSpec > documents the structure, content, and purpose of a single element type. < classSpec > contains reference information for a TEI element class; that is a group of elements which appear together in content models, or which share some common attribute, or both. < macroSpec > documents the function and implementation of a pattern. < dataSpec > documents a datatype. Unlike most elements in the TEI scheme, each of these specification elements has a fairly rigid internal structure consisting of a large number of child elements which are always presented in the same order. Furthermore, since these elements all describe markup objects in broadly similar ways, they have several child elements in common. In the remainder of this chapter, we discuss first the elements which are common to all the specification elements, and then those which are specific to a particular type. Specification elements may appear at any point in an ODD document, both between and within paragraphs as well as inside a specGrp element, but the specification element for any particular component may only appear once (except in the case where a modification is being defined; see further 22.8.1 TEI customizations ). The order in which they appear will not affect the order in which they are presented within any schema module generated from the document. In documentation mode, however, an ODD processor will output the schema declarations corresponding with a specification element at the point in the text where they are encountered, provided that they are contained by a specGrp element, as discussed in the previous section. An ODD processor will also associate all declarations found with the nominated module, thus including them within the schema code generated for that module, and it will also generate a full reference description for the object concerned in a catalogue of markup objects. These latter two actions always occur irrespective of whether or not the declaration is included in a specGrp . 22.4 Common Elements This section discusses the child elements common to all of the specification elements; some of these are defined in the core module ( 3.4.1 Terms and Glosses ). These child elements are used to specify the naming, description, exemplification, and classification of the specification elements. 22.4.1 Description of Components < gloss > identifies a phrase or word used to provide a gloss or definition for some other word or phrase. < desc > contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented. < equiv > specifies a component which is considered equivalent to the parent element, either by co-reference, or by external link. < altIdent > supplies the recommended XML name for an element, class, attribute, etc. in some language. < listRef > supplies a list of significant references in the current document or elsewhere. < remarks > contains any commentary or discussion about the usage of an element, attribute, class, or entity not otherwise documented within the containing element. The gloss element may be used to provide a brief explanation for the name of the object if this is not self-explanatory. For example, the specification for the element ab used to mark arbitrary blocks of text begins as follows: Note that the gloss element is needed to explain the significance of the identifier for an item only when this is not apparent, for example because it is abbreviated, as in the above example. It should not be used to provide a full description of the intended meaning (this is the function of the desc element), nor to comment on equivalent values in other schemes (this is the purpose of the equiv element), nor to provide alternative versions of the ident attribute value in other languages (this is the purpose of the altIdent element). The contents of the desc element provide a brief characterization of the intended function of the object being documented in a form that permits its quotation out of context, as in the following example: Both the gloss and desc elements (in addition to exemplum , remarks , and valDesc ) are members of att.translatable , and thus carry the versionDate attributre. Where specifications are supplied in multiple languages, these elements may be repeated as often as needed. Each such element should carry both an xml:lang and a versionDate attribute to indicate the language used and the date on which the translated text was last checked against its source. specifies the date on which the source text was extracted and sent to the translator The equiv element is used to document equivalencies between the concept represented by this object and the same concept as described in other schemes or ontologies. The uri attribute is used to supply a pointer to some location where such external concepts are defined. For example, to indicate that the TEI death element corresponds to the concept defined by the CIDOC CRM category E69, the declaration for the former might begin as follows: The equiv element may also be used to map newly-defined elements onto existing constructs in the TEI, using the filter and name attributes to point to an implementation of the mapping. This is useful when a TEI customization (see 23.3 Customization ) defines shortcuts for convenience of data entry or markup readability. For example, suppose that in some TEI customization an element bo has been defined which is conceptually equivalent to the standard markup construct hi rend='bold'. The following declarations would additionally indicate that instances of the bo element can be converted to canonical TEI by obtaining a filter from the URI specified, and running the procedure with the name bold . The mimeType attribute specifies the language (in this case XSL) in which the filter is written: The altIdent element is used to provide an alternative name for an object, for example using a different natural language. Thus, the following might be used to indicate that the abbr element should be identified using the German word Abkürzung : By default, the altIdent of a component is identical to the value of its ident attribute. The remarks element contains any additional commentary about how the item concerned may be used, details of implementation-related issues, suggestions for other ways of treating related information etc., as in the following example: A specification element will usually conclude with a list of references, each tagged using the standard ptr element, and grouped together into a listRef element: in the case of the foreign element discussed above, the list is as follows: 22.4.2 Exemplification of Components < exemplum > groups an example demonstrating the use of an element along with optional paragraphs of commentary. < eg > contains any kind of illustrative example. < egXML > a single XML fragment demonstrating the use of some XML, such as elements, attributes, or processing instructions, etc., in which the egXML element functions as the root element. The exemplum element is used to combine a single illustrative example with an optional paragraph of commentary following or preceding it. The illustrative example itself may be marked up using either the eg or the egXML element. The source attribute may be used on either element to indicate the source from which an example is taken, typically by means of a pointer to an entry in an associated bibliography, as in the following example: When, as here, an example contains valid XML markup, the egXML element should be used. In such a case, it will clearly be necessary to distinguish the markup within the example from the markup of the document itself. In an XML environment, this is easily done by using a different name space for the content of the egXML element. For example: Alternatively, the XML tagging within an example may be escaped, either by using entity references to represent the opening angle bracket, or by wrapping the whole example in a CDATA marked section: If the XML contained in an example is not well-formed then it must either be enclosed in a CDATA marked section, or escaped as above: this applies whether the eg or egXML is used. The valid attribute on egXML may be used to indicate the XML validity of the example with respect to some schema, as being valid, invalid, or feasibly valid. The egXML element should not be used to tag non-XML examples: the general purpose eg or q elements should be used for such purposes. 22.4.3 Classification of Components In the TEI scheme elements are assigned to one or more classes , which may themselves have subclasses. The following elements are used to indicate class membership: < classes > specifies all the classes of which the documented element or class is a member or subclass. < memberOf > specifies class membership of the documented element or class. The classes element appears within either the elementSpec or classSpec element. It specifies the classes of which the element or class concerned is a member by means of one or more memberOf child elements. Each such element references a class by means of its key attribute. Classes themselves are defined by the classSpec element described in section 22.6 Class Specifications below. For example, to show that the element gi is a member of the class model.phrase.xml , the elementSpec which documents this element contains the following classes element: 22.5 Element Specifications The elementSpec element is used to document an element type, together with its associated attributes. In addition to the elements listed above, it may contain the following subcomponents: < content > contains a declaration of the intended content model for the element (or other construct) being specified. < constraintSpec > contains a formal constraint, typically expressed in a rule-based schema language, to which a construct must conform in order to be considered valid < attList > < model > These subcomponents are discussed in the following sections. 22.5.1 Defining Content Models As described in 5.3.2 Content Models: an Example and 5.4.1.2 Content Model , the content of the element being defined — that is, what elements are allowed inside it, and in what order they are permitted — is described by its content model . The content model is defined by the content child of elementSpec . There are three distinctly different ways of specifying a content model: The content model can be described using TEI elements defined by this chapter, as discussed in 22.5.1.1 Defining Content Models: TEI immediately below. Two such TEI elements that may be used to define a content model are dataRef and valList . But because these are most often used to define attribute values, they are discussed separately near the beginning and towards the end of 22.5.3.2 Value Specification , respectively. Alternatively, and primarily for backwards compatibility, the content model may be expressed using a RELAX NG pattern. This is discussed in 22.5.1.2 Defining Content Models: RELAX NG , below. Lastly, content models may be expressed using a schema language other than TEI or RELAX NG, but no further recommendations on doing so are provided by these Guidelines. 22.5.1.1 Defining Content Models: TEI In the simplest case, the content model of an element may be expressed using a single empty element as the only child of content . This describes the element being defined as empty , meaning a valid instance of said element can not have any content. 3 < empty > indicates the presence of an empty node within a content model More commonly, one or more of the following elements are used to define a content model: < elementRef > points to the specification for some element which is to be included in a schema < anyElement > indicates the presence of any elements in a content model < classRef > points to the specification for an attribute or model class which is to be included in a schema < macroRef > points to the specification for some pattern which is to be included in a schema An elementRef provides the name of an element which may appear at a certain point in a content model. An anyElement also asserts that an element may appear at a certain point in a content model, but rather than providing the name of a particular element type that may appear, any element regardless of its name may appear (and may have any attributes). A classRef provides the name of a model class, members of which may appear at a certain point in content model. 4 A macroRef provides the name of a predefined macro, the expansion of which is to be inserted at a certain point in a content model. These three elements are all members of an attribute class which provides attributes that further modify their significance as follows: < att.repeatable > provides attributes for the elements which define component parts of a content model. @minOccurs indicates the smallest number of times this component may occur. @maxOccurs indicates the largest number of times this component may occur. indicates the smallest number of times this component may occur. indicates the largest number of times this component may occur. Additionally, two wrapper elements are provided to indicate whether the components listed as their children form a sequence or an alternation: < sequence > indicates that the constructs referenced by its children form a sequence < alternate > indicates that the constructs referenced by its children form an alternation The sequence and alternate elements may be used in combination with great expressive power. For example, in the following example, which might be imagined as a clean replacement for the content of the choice element, one and only one of the element pairs sic and corr , orig and reg , or abbr and expan is allowed. a single street followed by a single placeName followed by a single postCode followed by an optional country , or 2, 3, or 4 addrLine elements. In addition to expressing where certain elements, members of a class of elements, or constructs matching a predefined macro may occur inside an element, a content model may permit a string of zero or more Unicode characters to occur at a certain point in the content model. This is indicated by supplying the element textNode within the content element. < textNode > indicates the presence of a text node in a content model 22.5.1.2 Defining Content Models: RELAX NG Element content models may also be defined using RELAX NG patterns. Here is a very simple example Here is a more complex example: The RELAX NG language does not formally distinguish element names, attribute names, class names, or macro names: all names are patterns which are handled in the same way, as the above example shows. Within the TEI scheme, however, different naming conventions are used to distinguish amongst the objects being named. Unqualified names ( fileDesc , revisionDesc ) are always element names. Names prefixed with model. or att. (e.g. model.teiHeaderPart and att.typed ) are always class names. In DTD language, classes are represented by parameter entities ( %model.teiHeaderPart; in the above example); see further 1 The TEI Infrastructure . The RELAX NG pattern names generated by an ODD processor by default include a special prefix, the default value for which is set using the prefix attribute on schemaSpec . The purpose of this is to ensure that the pattern name generated is uniquely identified as belonging to a particular schema, and thus avoid name clashes. For example, in a RELAX NG schema combining the TEI element ident with another element called ident from some other vocabulary, the former will be defined by a pattern called TEI_ident rather than simply ident . Most of the time, this behaviour is entirely transparent to the user; the one occasion when it is not will be where a content model (expressed using RELAX NG syntax) needs explicitly to reference either the TEI ident or the other one. In such a situation, the autoPrefix attribute on content may be used. For example, suppose that we wish to define a content model for term which permits either a TEI ident or the ident defined by some other vocabulary. A suitable content model would be generated from the following content element: 22.5.2 Additional Constraints In addition to the content element, a set of general constraintSpec elements can be used to express rules about the validity of an element. Like some other specification elements, they are identifiable (using the ident attribute) in order that a TEI customization may override, delete, or change them individually. Each constraintSpec can be expressed in any notation which is found useful; the notation used must be recorded using the scheme attribute. Schematron is an ISO standard ( ISO/IEC 19757-3:2006 ) which defines a simple XML vocabulary for an assertion language, together with a RELAX NG schema to validate it. The Schematron assertion language provides a powerful way of expressing constraints on the content of any XML document in addition to those provided by other schema languages. Such constraints can be embedded within a TEI schema specification using the methods exemplified in this chapter. An ODD processor will typically process any constraintSpec elements in a TEI specification whose scheme attribute indicates that they are expressed in Schematron to create an ISO-conformant Schematron schema which may be used to validate document instances. The TEI Guidelines include some additional constraints which are expressed using the ISO Schematron language. A conformant TEI document should respect these constraints, although automatic validation of them may not be possible for all processors. A TEI customization may likewise specify additional constraints using this mechanism. Some examples of what is possible using the Schematron language are given below. Constraints are generally used to model local rules which may be outside the scope of the target schema language. For example, in earlier versions of these Guidelines several constraints on the usage of the attributes of the TEI element relation were expressed informally as follows: only one of the attributes active and mutual may be supplied; the attribute passive may be supplied only if the attribute active is supplied. . In the current version of the Guidelines, constraint specifications expressed as Schematron rules have been added, as follows: The constraints in the preceding example all related to attributes in the empty namespace, and the Schematron rules did not therefore need to define a TEI namespace prefix. The Schematron language ns element should be used to do this when a constraint needs to refer to a TEI element, as in the following example, which models the constraint that a TEI div must contain either no subdivisions or at least two of them: As a further example, Schematron may be used to enforce rules applicable to a TEI document which is going to be rendered into accessible HTML, for example to check that some sort of content is available from which the alt attribute of an HTML img can be created: Constraints can be expressed using any convenient language. The following example uses a pattern matching language called SPITBOL to express the requirement that title and author should be different. 22.5.3 Attribute List Specification The attList element is used to document information about a collection of attributes, either within an elementSpec , or within a classSpec . An attribute list can be organized either as a group of attribute definitions, all of which are understood to be available, or as a choice of attribute definitions, of which only one is understood to be available. An attribute list may thus contain nested attribute lists. The attribute org is used to indicate whether its child attDef elements are all to be made available, or whether only one of them may be used. For example, the attribute list for the element moduleRef contains a nested attribute list to indicate that either the include or the except attribute may be supplied, but not both: The attDef element is used to document a single attribute, using an appropriate selection from the common elements already mentioned and the following : < attDef > < datatype > specifies the declared value for an attribute, by referring to any datatype defined by the chosen schema language. < dataRef > identifies the datatype of an attribute value, either by referencing an item in an externally defined datatype library, or by pointing to a TEI-defined data specification < defaultVal > specifies the default declared value for an attribute. < valDesc > specifies any semantic or syntactic constraint on the value that an attribute may take, additional to the information carried by the datatype element. < valList > contains one or more valItem elements defining possible values. < valItem > documents a single value in a predefined list of values. The attList within an elementSpec is used to specify only the attributes which are specific to that particular element. Instances of the element may carry other attributes which are declared by the classes of which the element is a member. These extra attributes, which are shared by other elements, or by all elements, are specified by an attList contained within a classSpec element, as described in section 22.6 Class Specifications below. 22.5.3.1 Datatypes The datatype (i.e. the kind of value) for an attribute may be specified using the elements datatype and dataRef . A datatype may be defined in any of the following three ways: by reference to an existing TEI datatype definition; by use of its name in the widely used schema datatype library maintained by the W3C as part of the definition of its schema language; by referencing its URI within some other datatype library. It is possible to reference a W3C schema datatype directly using name. In this case, the child dataFacet can be used instead of restriction to set W3C schema compliant restrictions on the datatype. A dataFacet is particularly useful for restrictions that can be difficult to impose and to read as a regular expression pattern. Attributes minOccurs and maxOccurs are available for the case where an attribute may take more than one value of the type specified. For example, the target attribute provided by the att.pointing class has the following declaration: 22.5.3.2 Value Specification The valDesc element may be used to describe constraints on data content in an informal way: for example Constraints expressed in this way are purely documentary; to enforce them, the constraintSpec element described in section 22.5.2 Additional Constraints must be used. For example, to specify that an imaginary attribute ageAtDeath must take positive integer values less than 150, the datatype teidata.numeric might be used in combination with a constraintSpec such as the following: The elements altIdent , equiv , gloss and desc may all be used in the same way as they are elsewhere to describe fully the meaning of a coded value, as in the following example: Where all the possible values for an attribute can be enumerated, the datatype teidata.enumerated should be used, together with a valList element specifying the values and their significance, as in the following example: The valList element can also be used to provide illustrative examples of the kinds of values expected without listing all of them. In such cases the type attribute will have the value open, as in the following example: The valList or dataRef elements may also be used (as a child of the content element) to put constraints on the permitted content of an element, as noted at 22.5.1.2 Defining Content Models: RELAX NG . This use is not however supported by all schema languages, and is therefore not recommended if support for non-RELAX NG systems is a consideration. 22.5.4 Processing Models As far as possible, the TEI defines elements and their attributes in a way which is entirely independent of their subsequent processing, since its intention is to maximize the reusability of encoded documents and their use in multiple contexts. Nevertheless, it can be very useful to specify one or more possible models for such processing, both to clarify the intentions of the encoder, and to provide default behaviours for a software engineer to implement when documents conforming to a particular TEI customization are processed. To that end, the following elements may be used to document one or more processing models for a given element. < model > < modelGrp > < modelSequence > One or more of these elements may appear directly within an element specification to define the processing anticipated for that element, more specifically how it should be processed to produce the kind of output indicated by the output attribute. Where multiple such elements appear directly within an elementSpec , they are understood to document mutually exclusive processing models, possibly for different outputs or applicable in different contexts. Alternatively, the modelGrp element may be used to group alternative model elements intended for a single kind of output. The modelSequence element is provided for the case where a sequence of models is to be processed, functioning as a single unit. A processing model suggests how a given element may be transformed to produce one or more outputs. The model is expressed in terms of behaviours and parameters , using high-level formatting concepts familiar to software engineers and web designers, such as block or inline. As such, it has a different purpose from existing TEI mechanisms for documenting the appearance of source materials, such as the global attributes rend, rendition and style, described in sections 2.3.4.1 Rendition and 3.3.1 What Is Highlighting? . It does not necessarily describe anything present in the original source, nor does it necessarily represent its original structure or semantics. A processing model is a template description, which may be used to simplify the task of producing or customizing the stylesheets needed by a formatting engine or any other form of processor. 22.5.4.1 The TEI processing model The model element is used to document the processing model intended for a particular element in an abstract manner, independently of its implementation in whatever processing language is chosen. This is achieved by means of the following attributes and elements: < model > < outputRendition > describes the rendering or appearance intended for all occurrences of an element in a specified context for a specified type of output. 22.5.4.2 Output Rendition Here is a simple example of a processing model which might be included in the specification for an element such as hi or foreign . The intent is that these elements should be presented inline using an italic font. 22.5.4.3 CSS Class In a typical workflow processing TEI documents for display on the web, a system designer will often wish to use an externally defined CSS stylesheet. The cssClass attribute simplifies the task of maintaining compatibility amongst the possibly many applications using such a stylesheet and also enables a TEI application to specify the names of classes to be used for particular processing models. For example, supposing that the associated CSS stylesheet includes a CSS class called labeled-list , the following processing model might be used to request it be used for list elements containing a child label element: In the following example, a table will be formatted using renditional information provided in the source if that is available, or by an external stylesheet, using one of the CSS classes specified, if it is not: As discussed further below, the input data available to a processing model is by default the content of the element being processed, together with its child nodes. 22.5.4.4 Model Contexts and Outputs Sometimes different processing models are required for the same element in different contexts. For example, we may wish to process the quote element as an inline italic element when it appears inside a p element, but as an indented block when it appears elsewhere. To achieve this, we need to change the specification for the quote element to include two model elements as follows: When, as here, multiple behaviours are required for the same element, it will often be the case that the appropriate processing will depend on the context. It may however be the case that the choice of an appropriate model will be made on the basis of the intended output. For example, we might wish to define quite different behaviours when a document is to be displayed on a mobile device and when it is to be displayed on a desktop screen. Different behaviours again might be specified for a print version intended for the general reader, and for a print version aimed at the technical specialist. The modelGrp element can be used to group together all the processing models which have in common a particular intended output, as in the following example: 22.5.4.5 Behaviours and their parameters In the examples above we have used without explanation or definition two simple behaviours : inline and block , but many other behaviours are possible. A list of recommended behaviour names forms part of the specification for the element model . A processing model can specify any named behaviour, some of which have additional parameters . The parameters of a behaviour resemble the arguments of a function in many programming languages: they provide names which can be used to distinguish particular parts of the input data available to the process used to implement the behaviour in question. The following elements are used to represent and to define parameters: < param > provides a parameter for a model behaviour by supplying its name and an XPath expression identifying the location of its content. < paramList > list of parameter specifications < paramSpec > supplies specification for one parameter of a model behaviour By default, a processor implementing the TEI processing model for a particular element has available to it as input data the content of the element itself, and all of its children. One or more param elements may be supplied within a model element to specify parameters which modify this, either by selecting particular parts of the default input data, or by selecting data which would not otherwise be available. In either case, the value supplied for the parameter is given as an XPath expression, evaluated with respect to the element node being processed. An arbitrary name (defined in the corresponding paramSpec ) is also supplied to a processor to identify each parameter. For example, an element such as the TEI ref element will probably be associated with a processing model which treats it as a hyperlink. But a hyperlink (in most implementations) often has two associated pieces of information: the address indicated, and some textual content serving to label the link . In HTML, the former is provided as value of the href element, and the latter by the content of an a element. In the following processing model we define a behaviour called link , which will use whatever is indicated by the parameter called uri to provide the former, while the latter is provided by the content of the ref element itself: All the parameters available for a given behaviour are defined as a part of the definition of the behaviour itself, as further discussed in section 22.5.4.8 Defining a processing model below. As a further example, the TEI choice element requires a different behaviour for which the name alternate is proposed as in the following example: A choice element might contain multiple corrections, each with differing values for their cert attribute. In the following processing model, we will accept as value of the default attribute only those child corr elements which have a value high for that attribute: A choice element might contain several different pairs of alternate elements ( abbr and expan , orig and reg , etc.) We might wish to group together a set of processing models for these, for example to determine which of the possible alternatives is displayed by default whenever a choice element is processed for output to the web: If nothing matches the XPath defining the value of a particular parameter (e.g. if in the above example there is no correction with cert=high) then the default parameter has no value. It is left to implementors to determine how null-valued parameters should be processed. 22.5.4.6 Outputs As noted above, the output attribute is used to associate particular processing models with a specific type of output. The following example documents a range of processing intentions for the date element, intended to cope with at least the following three situations: there is text inside the element, and the output is print; there is no text inside the element but there is a when attribute, and the output is print; there is a when attribute, there is text inside the element, and the output is web For output to print we supply two processing models, one for the simplest case where the content of the date is to be treated as an inline element, and the other for the case where there is no content and the value of the when attribute is to be used in its place. This is specified by a parameter, called content in this example. For output to web, we use the alternate behaviour discussed in the previous section to indicate that by default the content of the element will be used, while retaining access to the value of the when attribute, this time via a parameter called alternate . 22.5.4.7 Model sequence As well as being combined to form model groups, several models may be combined to form a model sequence . All of the individual components of a model sequence are understood to be applied, rather than considered to be mutually exclusive alternatives. For example, we might wish to define two different behaviours for a note element: the inline behaviour should be used to display the value of the note number (given by its n attribute), while a different behaviour (here called footnote ) should be used to display the content of the element at a specified place, given by the parameter place . Because both of these actions are required, the two models are grouped by a modelSequence element: The value of the parameter called place above is an XPath expression supplying an arbitrary string ( foot ), which is therefore quoted. It is left to implementors to validate or constrain the possible values for such expressions. 22.5.4.8 Defining a processing model The processing model for an element is defined using some combination of model , modelSequence , or modelGrp elements within the elementSpec element containing its specification. The processing to be carried out is defined by means of the behaviour specified for each model element, possibly supplying specified values for a number of named parameters. The parameters available for a given behaviour are specified using a number of param elements grouped together in a paramList element. This paramList is supplied within the valItem used to document and name the behaviour. Here for example is the valItem which defines the link behaviour presented above: Similarly the valItem which defines the behaviour named alternate includes specifications for two parameters: one also called alternate and the other called default The suggested behaviours provided by the model element are informally defined using commonly understood terminology, but specific details of how they should be implemented are left to the implementor. Such decisions may vary greatly depending on the kind of processing environment, the kind of output envisaged, etc. The intention is to reduce as far as possible any requirement for the implementor to be aware of TEI-specific rules, and to maximize the ability of the ODD to express processing intentions without fully specifying an implementation. 22.5.4.9 Implementation of Processing Models As elsewhere in these Guidelines, the recommendations of this section are intended to be implementation-agnostic, not favouring any particular implementation method or technology. An implementor may choose, for example, whether to pre-process processing model specifications into a free standing pipeline, or to extract and process them dynamically during document processing. However, although implementors are generally free to interpret the processing model documentation according to their own requirements, some general assumptions underlie the recommendations made here: If a model element has no child param elements, the action specified by its behaviour should be applied to the whole element node concerned, including its child nodes of whatever type. If that behaviour requires distinguishing particular parts of the input, an implementation may choose either to make those distinctions itself, or to raise an error. If a model element has no predicate or output attribute then it is assumed to apply to all instances of the element defined in its parent elementSpec for all outputs. Otherwise its applicability depends on these attributes. Only one of the model s is to be applied for a particular instance of the element, except when they appear within a modelSequence A matching model is one where the element to be processed satisfies the XPath in the predicate attribute of the model or modelSequence and the current output method matches the method specified in the output attribute of the model , modelSequence , or a containing modelGrp . A model or modelSequence without a predicate always matches the element to be processed. A model , modelGrp , or modelSequence without an output attribute matches any output method. Processing Model implementations must execute only the first matching model or modelSequence in document order. If there are two or more model elements provided for an elementSpec but they have different output attributes then the implementation should choose the model appropriate to the desired output. If there are two or more model elements provided for an elementSpec but they have different predicate attributes then the implementation should choose the model whose predicate provides the most specific context (where specific is understood in the same way as in XSLT) 22.6 Class Specifications The element classSpec is used to document either an attribute class or a model class, as defined in section 1.3 The TEI Class System . A corresponding classRef element may be used to select a specific named class from those available. < classSpec > contains reference information for a TEI element class; that is a group of elements which appear together in content models, or which share some common attribute, or both. < classRef > points to the specification for an attribute or model class which is to be included in a schema < attList > A model class specification does not list all of its members. Instead, its members declare that they belong to it by means of a classes element contained within the relevant elementSpec . This will contain a memberOf element for each class of which the relevant element is a member, supplying the name of the relevant class. For example, the elementSpec for the element hi contains the following: The function of a model class declaration is to provide another way of referring to a group of elements. It does not confer any other properties on the elements which constitute its membership. The attribute type is used to distinguish between model and attribute classes. In the case of attribute classes, the attributes provided by membership in the class are documented by an attList element contained within the classSpec . In the case of model classes, no further information is needed to define the class beyond its description, its identifier, and optionally any classes of which it is a member. When a model class is referenced in the content model of an element (i.e. by means of a classRef element within the content of an elementSpec ), its meaning will depend on the value of its expand attribute. If this attribute is not specified, the classRef is interpreted to mean an alternated list of all the current members of the class named. For example, suppose that the members of the class model.hiLike are elements hi , it , and bo . Then a content model such as An attribute class (a classSpec of type atts) contains an attList element which lists the attributes that all the members of that class inherit from it. For example, the class att.interpLike defines a small set of attributes common to all elements which are members of that class: those attributes are listed by the attList element contained by the classSpec for att.interpLike . When processing the documentation elements for elements which are members of that class, an ODD processor is required to extend the attList (or equivalent) for such elements to include any attributes defined by the classSpec elements concerned. There is a single global attribute class, att.global , to which some modules contribute additional attributes when they are included in a schema. 22.7 Macro Specifications The macroSpec element is used to declare and document predefined strings or patterns not otherwise documented by the elements described in this section. A corresponding macroRef element may be used to select a specific named pattern from those available. Patterns are used as a shorthand chiefly to describe common content models and datatypes, but may be used for any purpose. The following elements are used to represent patterns: < macroSpec > documents the function and implementation of a pattern. < macroRef > points to the specification for some pattern which is to be included in a schema 22.8 Building a TEI Schema The specification elements, and some of their children, are all members of the att.identified class, from which they inherit the following attributes: < att.identified > provides identifying attributes for elements which can be subsequently referenced by means of a key attribute. @ident supplies the identifier by which this element may be referenced. @predeclare says whether this object should be predeclared in the tei infrastructure module. @module supplies a name for the module in which this object is to be declared. supplies the identifier by which this element may be referenced. says whether this object should be predeclared in the tei infrastructure module. supplies a name for the module in which this object is to be declared. < att.combinable > provides attributes indicating how multiple references to the same object in a schema should be combined @mode specifies the effect of this declaration on its parent object. specifies the effect of this declaration on its parent object. < att.deprecated > provides attributes indicating how a deprecated feature will be treated in future releases. @validUntil provides a date before which the construct being defined will not be removed. provides a date before which the construct being defined will not be removed. specifies the effect of this declaration on its parent object. An ODD processor should handle the values for mode as follows: the object should be created (processing any children in add mode); raise an error if the object has an identifier and an object with the same identifier (and namespace in the case of an element or attribute) already exists. use this object in preference to any existing object with the same identifier (and namespace in the case of an element or attribute), and ignore any children of that object; process any new children in replace mode do not process this object or any existing object with the same identifier (and namespace in the case of an element or attribute); the element carrying this attribute must be empty: raise an error if there are any children process this object and its children, replacing only those components of an existing object of the same type with the same identifier (and namespace in case of an element or attribute) that are explicitly specified. This will change only those existing attribute values and child elements that appear both in the original specification and in the new specification. Other children from the original specification will be preserved. Un processore ODD dovrebbe considerare i valori dell'attributo mode in questo modo: l'oggetto dovrebbe essere creato, trattando tutti gli elementi figlio che hanno anch'essi il valore add. Se esistesse un oggetto con lo stesso nome (e namespace nel caso di un elemento o attributo) bisognerà dare un errore. utilizzare questo oggetto al posto di qualsiasi atro oggetto esistente con lo stesso nome (e namespace nel caso di un elemento o attributo), e ignorare gli elementi figlio di quell'oggetto; trattare tutti gli elementi che hanno anch'essi il valore replace. non trattare questo oggetto o qualsiasi altro oggetto con lo stesso nome (e namespace nel caso di un elemento o attributo); l'elemento con questo valore deve essere vuoto: dare un error nel caso in cui contenesse elementi figlio. trattare questo oggetto e tutti i suoi elementi figlio, sustituendo solo i componenti di un oggetto già esistente e direttamente specificato dello stesso tipo e con lo stesso nome (e namespace nel caso di un elemento o attributo). Questa operazione cambierà solamente i valori di attributi già esistenti ed elementi figlio che sono presenti sia nella specificazione originale che nella nuova specificazione. Gli altri elementi filgio che fanno parte della specificazione originale verranno mantenuti. La signification informelle des valeurs de l'attribut mode est la suivante : l'objet doit être créé (traitement de tout enfant dans le mode add) ; générer une erreur si un objet avec le même identifiant existe déjà. utiliser cet objet de préférence à tout autre portant le même identifiant et ignorer tout enfant de cet objet ; traiter tout nouvel enfant dans le mode replace. ne pas traiter cet objet ou aucun autre portant le même identifiant ; générer une erreur si de nouveaux enfants sont fournis. traiter cet objet, et ses enfants, et ceux de n'importe quel objet portant le même identifiant, dans le mode change. ODDプロセッサはmode属性値を次のように扱うべきである: オブジェクトを生成すべきである（子をすべてaddモードで処理する）。同一の識別子を持つオブジェクトがすでに存在するばあいはエラーを発生させる。 同一の識別子を持つ先んじて存在するすべてのオブジェクトよりも当該のオブジェクトを優先して使用し、それらのオブジェクトの子を無視する。新しい子はすべてreplaceモードで処理する。 当該の、あるいは先んじて存在するすべてのオブジェクトを処理してはならない。子が与えられたときはエラーを発生させる。 当該のオブジェクトと子、また先んじて存在するすべてのオブジェクトの子をchangeモードで処理する。 supplies the identifier by which this element may be referenced. says whether this object should be predeclared in the tei infrastructure module. supplies a name for the module in which this object is to be declared. provides a date before which the construct being defined will not be removed. The elementSpec , attDef and schemaSpec specification elements also have an attribute which determines which namespace to which the object being created will belong. In the case of schemaSpec , this namespace is inherited by all the elements created in the schema, unless they have their own ns. < att.namespaceable > provides attributes indicating the target namespace for an object being created specifies the namespace to which this element belongs These attributes are used by an ODD processor to determine how declarations are to be combined to form a schema or DTD, as further discussed in this section. 22.8.1 TEI customizations As noted above, a TEI schema is defined by a schemaSpec element containing an arbitrary mixture of explicit declarations for objects (i.e. elements, classes, patterns, or macro specifications) and references to other objects containing such declarations (i.e. references to specification groups, or to modules). A major purpose of this mechanism is to simplify the process of defining user customizations, by providing a formal method for the user to combine new declarations with existing ones, or to modify particular parts of existing declarations. In the simplest case, a user-defined schema might just combine all the declarations from two nominated modules: The value specified for the source attribute, when it is supplied as a URL, specifies any convenient location from which the relevant ODD files may be obtained. For the current release of the TEI Guidelines, a URL in the form http://www.tei-c.org/Vault/P5/x.y.z/xml/tei/odd/p5subset.xml may be used, where x.y.z represents the P5 version number, e.g. 1.3.0 . Alternatively, if the ODD files are locally installed, it may be more convenient to supply a value such as ../ODDs/p5subset.xml\". The value for the source attribute may be any form of URI. A set of TEI-conformant specifications in a form directly usable by an ODD processor must be available at the location indicated. When no source value is supplied, an ODD processor may either raise an error or assume that the location of the current release of the TEI Guidelines is intended. If the source is specified in the form of a private URI, the form recommended is aaa:x.y.z , where aaa is a prefix indicating the markup language in use, and x.y.z indicates the version number. For example, tei:1.2.1 should be used to reference release 1.2.1 of the current TEI Guidelines. When such a URI is used, it will usually be necessary to translate it before such a file can be used in blind interchange. The effect of a moduleRef element is to include in the schema all declarations provided by that module. This may be modified by means of the attributes include and except which allow the encoder to supply an explicit lists of elements from the stated module which are to be included or excluded respectively. For example: Alternatively, the element elementRef may be used to indicate explicitly which elements are to be included in a schema. The same effect as the preceding example might thus be achieved by the following: In the same way, a schema may select a subset of the attributes available in a specific class, using the classRef element to point to an attribute class: A schema may also include declarations for new elements, as in the following example: A schema might also include re-declarations of existing elements, as in the following example: A schema may not contain more than two declarations for any given component. The value of the mode attribute is used to determine exactly how the second declaration (and its constituents) should be combined with the first. The following table summarizes how a processor should resolve duplicate declarations; the term identifiable refers to those elements which can have a mode attribute: 22.8.2 Combining TEI and Non-TEI Modules In the simplest case, all that is needed to include a non-TEI module in a schema is to reference its RELAX NG source using the url attribute on moduleRef . The following specification, for example, creates a schema in which declarations from the non-TEI module svg11.rng (defining Standard Vector Graphics) are included. To avoid any risk of name clashes, the schema specifies that all TEI patterns generated should be prefixed by the string \"TEI_\". This specification generates a single schema which might be used to validate either a TEI document (with the root element TEI ), or an SVG document (with a root element svg:svg ), but would not validate a TEI document containing svg:svg or other elements from the SVG language. For that to be possible, the svg:svg element must become a member of a TEI model class ( 1.3 The TEI Class System ), so that it may be referenced by other TEI elements. To achieve this, we modify the last moduleRef in the above example as follows: This states that when the declarations from the svg11.rng module are combined with those from the other modules, the declaration for the model class model.graphicLike in the TEI module should be extended to include the element svg:svg as an alternative. This has the effect that elements in the TEI scheme which define their content model in terms of that element class (notably figure ) can now include it. A RELAX NG schema generated from such a specification can be used to validate documents in which the TEI figure element contains any valid SVG representation of a graphic, embedded within an svg:svg element. 22.8.3 Linking Schemas to XML Documents Schemas can be linked to XML documents by means of the ?xml-model? processing instruction described in the W3C Working Group Note Associating Schemas with XML documents ( https://www.w3.org/TR/xml-model/ ). ?xml-model? can be used for any type of schema, and may be used for multiple schemas: 22.9 Module for Documentation Elements The module described in this chapter makes available the following components: Documentation Elements Documentation of TEI and other XML markup languages The selection and combination of modules to form a TEI schema is described in 1.2 Defining a TEI Schema . The elements described in this chapter are all members of one of three classes: model.oddDecl , model.oddRef , or model.phrase.xml , with the exceptions of schemaSpec (a member of model.divPart ) and both eg and egXML (members of model.common and model.egLike ). All of these classes are declared along with the other general TEI classes, in the basic structure module documented in 1 The TEI Infrastructure . In addition, some elements are members of the att.identified class, which is documented in 22.8.1 TEI customizations above.","title":"<span class=\"tei-div7 breadcrumb\">22 Documentation Elements</span>"}
{"link":"p5.xml?id=USE","tag":"guidelines","content":"23 Using the TEI This section discusses some technical topics concerning the deployment of the TEI markup schema documented elsewhere in these Guidelines. In section 23.3 Customization we discuss the scope and variety of the TEI customization mechanisms. In 23.4 Conformance we define the notions of TEI Conformance and TEI Extension . Since the ODD markup description language defined in chapter 22 Documentation Elements is fundamental to the way conformance and customization are handled in the TEI system, these two definitional sections are followed by a section ( 23.5 Implementation of an ODD System ) which describes the intended behaviour of an ODD processor. 23.1 Serving TEI files with the TEI Media Type In February 2011, the media type application/tei+xml was registered with IANA for markup languages defined in accordance with the Text Encoding and Interchange guidelines ( RFC 6129 ). We recommend that any XML file whose root element is in the TEI namespace be served with the media type application/tei+xml to enable and encourage automated recognition and processing of TEI files by external applications. 23.2 Obtaining the TEI As discussed in chapter 22 Documentation Elements , all components of the TEI schema are generated from a single set of TEI XML source files. Schemas can be generated in each of XML DTD language, W3C schema language, and RELAX NG schema language. Documentation can be generated in a variety of commonly-used document formats, including HTML, DOCX, or PDF. TEI components are freely available over the Internet and elsewhere. The canonical home for the TEI source, the schema fragments generated from it, and example modifications, is the TEI repository at https://github.com/TEIC/TEI ; versions are also available in other formats, along with copies of these Guidelines and related materials, from the TEI web site at http://www.tei-c.org/ . 23.3 Customization These Guidelines provide an encoding schema suitable for encoding a very wide range of texts, and capable of supporting a wide variety of applications. For this reason, the TEI schema supports a variety of different approaches to solving similar problems, and also defines a much richer set of elements than is likely to be necessary in any given project. Furthermore, the TEI schema may be extended in well-defined and documented ways for texts that cannot be conveniently or appropriately encoded using what is provided. For these reasons, it is almost impossible to use the TEI schema without customizing it in some way. This section describes how the TEI encoding schema may be customized, and should be read in conjunction with chapter 22 Documentation Elements , which describes how a specific application of the TEI encoding schema should be documented. The documentation system described in that chapter is, like the rest of the TEI schema, independent of any particular schema or document type definition language. Formally speaking, these Guidelines provide both syntactic rules about how elements and attributes may be used in valid documents and semantic recommendations about what interpretation should be attached to a given syntactic construct. In this sense, they provide both a document type definition and a document type declaration . More exactly, we may distinguish between the TEI Abstract Model , which defines a set of related concepts, and the TEI schema which defines a set of syntactic rules and constraints. Many (though not all) of the semantic recommendations are provided solely as informal descriptive prose, though some of them are also enforced by means of such constructs as datatypes (see 1.4.2 Datatype Specifications ), or by schema constraints expressed using the Schematron language. Schematron constraints provide information about special kinds of validation errors dependent on conditional relationships, such as the invalidity of an attribute name or value on one element when another is present, or when, given a pair of attributes such as minOccurs and maxOccurs, the minimum value exceeds the maximum value. Schematron constraints also provide warnings when a particular element, attribute, or combination is to be deprecated in future releases of the TEI scheme, to alert users that the feature in question is no longer to be used after a certain date. Very rarely, TEI Schematron constraints offer warnings that do not explicitly break with the TEI but suggest a more efficient or less ambiguous encoding. Although the descriptions, validation errors, and warnings have been written with care, there will inevitably be cases where the intention of the contributors has not been conveyed with sufficient clarity to prevent users of these Guidelines from extending them in the sense of attaching slightly variant semantics to them. Beyond this unintentional semantic extension, some of the elements described can intentionally be used in a variety of ways; for example, the element note has an attribute type which can take on arbitrary string values, depending on how it is used in a document. A new type of note , therefore, requires no change in the existing model. On the other hand, for many applications, it may be desirable to constrain the possible values for the type attribute to a small set of possibilities. A schema modified in this way would no longer necessarily regard as valid the same set of documents as the corresponding unmodified TEI schema, but would remain faithful to the same conceptual model. This section explains how the TEI schema can be customized by suppressing elements, modifying classes of elements, or adding elements. Documents which validate against an application of the TEI schema which has been customized in this way may or may not be considered TEI-conformant, as further discussed in section 23.4 Conformance . The TEI system is designed to support modification and customization in a documented way that can be validated by an XML processor. This is achieved by writing a small TEI-conformant document, known informally as an ODD (One Document Does it all), from which an appropriate processor can generate both human-readable documentation, and a schema expressed in a language such as RELAX NG or DTD. The mechanisms used to instantiate a TEI schema differ for different schema languages, and are therefore not defined here. In XML DTDs, for example, extensive use is made of parameter entities, while in RELAX NG schemas, extensive use is made of patterns. In either case, the names of elements and, wherever possible, their attributes and content models are defined indirectly. The syntax used to implement this indirection also varies with the schema language used, but the underlying constructs in the TEI Abstract Model are given the same names. This indirection makes it simpler to implement customization of the TEI system in an accessible and human-readable way. As further discussed in section 1 The TEI Infrastructure , the TEI encoding schema comprises a set of class and macro declarations, and a number of modules . Each module is made up of element and attribute declarations, and a schema is made by combining a particular set of modules together. In the absence of any other kind of customization, when modules are combined together: all the elements defined by the module (and described in the corresponding section of these Guidelines) are included in the schema; each such element is identified by the canonical name given it in these Guidelines; the content model of each such element is as defined by these Guidelines; the names, datatypes, and permitted values declared for each attribute associated with each such element are as given in these Guidelines; the elements comprising element classes and the meaning of macro declarations expressed in terms of element classes is determined by the particular combination of modules selected. particular elements may be suppressed, removing them from any classes in which they are members, and also from any generated schema; new elements may be added to an existing class, thus making them available in macros or content models defined in terms of those classes; additional attributes, or attribute values, may be specified for an individual element or for classes of elements; within certain limits, attributes, or attribute values, may also be removed either from an individual element or for classes of elements; the characteristics inherited by one class from another class may be modified by modifying its class membership: all members of the class then inherit the changed characteristics; the set of values legal for an attribute or attribute class may be constrained or relaxed by supplying or modifying a value list, or by modifying its datatype. within certain limits, the name (generic identifier) associated with an element may be changed, without changing the semantic or syntactic properties of the element; The recommended way of implementing and documenting all such modifications is by means of the ODD system described in chapter 22 Documentation Elements ; in the remainder of this section we give specific examples to illustrate how that system may be applied. An ODD processor, such as the Roma application supported by the TEI, or any other comparable set of stylesheets will use the declarations provided by an ODD to generate appropriate sets of declarations in a specific schema language such as RELAX NG or the XML DTD language. We do not discuss in detail here how this should be done, since the details are schema language-specific; some background information about the methods used for XML DTD and RELAX NG schema generation is however provided in section 1.2 Defining a TEI Schema . Several example ODD files are also provided as part of the standard TEI release: see further section 23.3.4 Examples of Modification below. 23.3.1 Kinds of Modification For ease of discussion, we distinguish the following different kinds of modification: deletion of elements; modification of content models; modification of attribute and attribute-value lists; modification of class membership; addition of new elements. renaming of elements; Each kind of modification changes the set of documents that will be considered valid according to the resulting schema. A schema derived from any combination of unmodified TEI declarations (an \"unmodified schema\") may be thought of as defining a certain set of documents. A schema deriving from a combination of modified TEI declarations (a \"modified schema\") will define a different set of documents. The set of documents valid according to the modified schema may or may not be properly contained by the set of documents considered to be valid according to the unmodified schema. The schema TEI-All is the special case of the unmodified schema which includes all currently available TEI modules. We use the term clean modification for cases where the set of documents defined by a modified schema is a proper subset of the set of documents defined by TEI-All. Where this is not the case, that is, where the modified schema considers valid some documents which TEI-All does not, we use the term unclean modification . Despite this terminology, unclean modifications are not particularly deprecated, and their use may often be vital to the success of a project. The concept is introduced solely to distinguish the effects of different kinds of modification. 23.3.1.1 Deletion of Elements The simplest way to modify the supplied modules is to suppress one or more of the supplied elements. This is simply done by setting the mode attribute to delete on an elementSpec for the element concerned. For example, if the note element is not to be used in a particular application, but has been included via one of the supplied modules, then the schema specification concerned will contain a declaration like the following: In most cases, deletion is a clean modification, since most elements are optional. Documents that are valid with respect to the modified schema are also valid according to TEI-All. To say this another way, the set of documents matching the new schema is contained by the set of documents matching the original schema. There are however some elements in the TEI schema which have mandatory children; for example, the element listPerson must contain at least one element from the model.personLike class. If that class has no members because all of its member elements have been removed, then the content model cannot be satisfied. A modification which keeps listPerson but removes all of its possible children would therefore be regarded as unclean. So long as at least one member of the class remains available, however, deleting other members would not have this effect, and would therefore be regarded as a clean modification. In general, whenever the element deleted by a modification is mandatory within the content model of some other (undeleted) element, the result is an unclean modification, and may also break the TEI Abstract Model ( 23.4.3 Conformance to the TEI Abstract Model ). However, the parent of a mandatory child can be safely removed if it is itself optional. To determine whether or not an element is mandatory in a given context, the user must inspect the content model of the element concerned. In most cases, content models are expressed in terms of model classes rather than elements; hence, removing an element will generally be a clean modification, since there will generally be other members of the class available. If a class is completely depopulated by a modification, then the cleanliness of the modification will depend upon whether or not the class reference is mandatory or optional, in the same way as for an individual element. 23.3.1.2 Modification of Content Models The content model for an element in the TEI schema is defined by means of a content element within the elementSpec which specifies it. For example, the specification for the element term provided by these Guidelines contains a content element like the following: This is a clean modification which does not change the meaning of a TEI element; there is therefore no need to assign the element to some other namespace than that of the TEI, though it may be considered good practice; see further 23.3.2 Modification and Namespaces below. A change of this kind, which simplifies the possible content of an element by reducing its model to one of its existing components, is always clean, because the set of documents matched by the resulting schema is a subset of the set of documents which would have been matched by TEI-All. Note that content models are generally defined (as far as possible) in terms of references to model classes, rather than to explicit elements. This means that the need to modify content models is greatly reduced: if an element is deleted or modified, for example, then the deletion or modification will be available for every content model which references that element via its class, as well as those which reference it explicitly. For this reason it is not (in general) good practice to replace class references by explicit element references, since this may have unintended side effects. An unqualified reference to an element class within a content model generates a content model which is equivalent to an alternation of all the members of the class referenced. Thus, a content model which refers to the model class model.phrase will generate a content model in which any one of the members of that class is equally acceptable. The classRef element used to reference a class has an expand attribute which may be used to vary this behaviour, for example to require an optional repeatable alternation of all members of a class , a sequence containing no more than one of each member of the class , etc. as described further in 22.6 Class Specifications . Content model changes which are not simple restrictions on an existing model should be undertaken with caution. The set of documents matching the schema which results from such changes is unlikely to be contained by the set of documents matching TEI-All, and such changes are therefore regarded as unclean. When content models are changed or extended, care should be taken to respect the existing semantics of the element concerned as stated in these Guidelines. For example, the element l is defined as containing a line of verse. It would not therefore make sense to redefine its content model so that it could also include members of the class model.pLike such as p or ab . Although syntactically feasible, such a modification would not be regarded as TEI-conformant because it breaks the TEI Abstract Model. 23.3.1.3 Modification of Attribute and Attribute Value Lists The attributes applicable to a given element may be specified in two ways: they may be given explicitly, by means of an attList element within the corresponding elementSpec , or they may be inherited from an attribute class, as specified in the classes element. To add a new attribute to an element, the designer should therefore first check to see whether this attribute is already available from some existing attribute class. If it is, then the simplest method of adding it will be to make the element in question a member of that class, as further discussed below. If this is not possible, then a new attDef element must be added to the existing attList for the element in question. Whichever method is adopted, the modification capabilities are the same as those available for elements. Attributes may be added or deleted from the list, using the mode attribute on attDef in the same way as on elementSpec . The content of an attribute is defined by means of the datatype , valList , or valDesc elements within the attDef element. Any of these elements may be changed. Suppose, for example, that we wish to add two attributes to the eg element (used to indicate examples in a text), type to characterize the example in some way, and valid to indicate whether the example is considered valid or not. A quick glance through the Guidelines indicates that the attribute class att.typed could be used to provide the type attribute, but there is no comparable class which will provide a valid attribute. The existing eg element in fact has no local attributes defined for it at all: we will therefore need to add not only an attDef element to define the new attribute, but also an attList to hold it. We begin by adding the new valid attribute: The value supplied for the mode attribute on the attDef element is add; if this attribute already existed on the element we are modifying this should generate an error, since a specification cannot have more than one attribute of the same name. If the attribute is already present, we can replace the whole of the existing declaration by supplying replace as the value for mode; alternatively, we can change some parts of an existing declaration only by supplying just the new parts, and setting change as the value for mode. Because the new attribute is not defined by the TEI, it is good practice to specify a namespace for it on the attDef ; see further 23.3.2 Modification and Namespaces . As noted above, adding the new type attribute involves changing this element's class membership; we therefore discuss that in the next section ( 23.3.1.4 Class Modification ). The canonical name for the new attribute is valid, and is supplied on the ident attribute of the attDef element. In this simple example, we supply only a description and datatype for the new attribute; the former is given by the desc element, and the latter by the datatype element. (There are of course many other pieces of information which could be supplied, as documented in 22 Documentation Elements ). The content of the datatype element is a dataRef element which references an existing TEI data specification. It is often desirable to constrain the possible values for an attribute to a greater extent than is possible by simply supplying a TEI datatype for it. This facility is provided by the valList element, which can also appear as a child of the attDef element. Suppose for example that, rather than simply indicating whether or not the example is considered valid by means of the values true and false we wish to provide a more nuanced indication, using encoded values such as A, B, and C. A declaration like the following might be appropriate: The same technique may be used to replace or extend the valList supplied as part of any attribute in the TEI schema. 23.3.1.4 Class Modification The concept of element classes was introduced in 1.3.2 Model Classes ; an understanding of it is fundamental to successful use of the TEI system. As noted there, we distinguish model classes , the members of which all have structural similarity, from attribute classes , the members of which simply share a set of attributes. The part of an element specification which determines its class membership is an element called classes . All classes to which the element belongs must be specified within this, using a memberOf element for each. To add an element to a class in which it is not already a member, all that is needed is to supply a new memberOf element within the classes element for the element concerned. For example, to add an element to the att.typed class, we include a declaration like the following: Equally, to remove the attributes which an element inherits from its membership in some class, all that is needed is to remove the relevant memberOf element. For example, the element term defined in the core module is a member of two attribute classes, att.typed and att.declaring . It inherits the attributes type and subtype from the former, and the attribute decls from the latter. To remove the last of these attributes from this element, we need to remove it from that class: If the intention is to change the class membership of an element completely, rather than simply add or remove it to or from one or more classes, the value of the mode attribute of classes can be set to replace (which is the default if no value is specified), indicating that the memberships indicated by its child memberOf elements are the only ones applicable. Thus the following declaration: If however the mode attribute is set to change, the implication is that the memberships indicated by its child memberOf elements are to be combined with the existing memberships for the element. To change or remove attributes inherited from an attribute class for all members of the class (as opposed to specific members of that class), it is also possible to modify the class specification itself. For example, the class att.global.rendition defines several attributes which are available for all elements, namely rend, style, and rendition. If we decide that we never wish to use the rend attribute, the simplest way of removing it is to supply a modified class specification for att.global.rendition as follows: The classes used in the TEI schema are further discussed in chapter 1 The TEI Infrastructure . Note in particular that classes are themselves classified: the attributes inherited by a member of attribute class A may come to it directly from that class, or from another class of which A is itself a member. For example, the class att.global is itself a member of the classes att.global.linking and att.global.analytic . By default, these two classes are predefined as empty. However, if (for example) the linking module is included in a schema, a number of attributes (corresp, sameAs, etc.) are defined as members of the att.global.linking class. All elements which are members of att.global will then inherit these new attributes (see further section 1.3.1 Attribute Classes ). A new attribute may thus be added to the global class in two ways: either by adding it to the attList defined within the class specification for att.global ; or by defining a new attribute class, and changing the class membership of the att.global class to reference it. Such global changes should be undertaken with caution: in general removing existing non-mandatory attributes from a class will always be a clean modification, in the same way as removing non-mandatory elements. Adding a new attribute to a class however can be a clean modification only if the new attribute is labelled as belonging to some namespace other than the TEI. The same mechanisms are available for modification of model classes. Care should be taken when modifying the model class membership of existing elements since model class membership is what determines the content model of most elements in the TEI schema, and a small change may have unintended consequences. 23.3.1.5 Addition of New Elements To add a completely new element into a schema involves providing a complete element specification for it. It is recommended that the classes element of this new declaration should include a reference to at least one TEI model class. Without such a reference, the new element would not otherwise be referenced by the content model of any other TEI element, and would therefore be inaccessible within a TEI document. It is also possible to modify the content models of one or more existing elements to refer to the new element explicitly, as discussed in 23.3.1.2 Modification of Content Models but this will generally be less convenient. For example, the three elements bibl , biblFull , and biblStruct are all defined as members of the class model.biblLike . To add a fourth member (say myBibl ) to this class, we need to include in the elementSpec defining our new element a memberOf element which nominates the intended class: 23.3.1.6 Renaming of Elements Every element and other named markup construct in the TEI schema has a canonical name , usually composed of English language words or syllables: this name is supplied as the value of the ident attribute on the elementSpec , attDef , classSpec , or macroSpec used to define it. In some circumstances, it may be convenient for the element or attribute declaration used within a schema generated from that specification to take a different form, for example, permitting schemas to use generic identifiers from a different language, or in an abbreviated form. There may be many alternative identifiers for the same markup construct, and an ODD processor may choose which of them to use for a given purpose. Each such alternative name is supplied by means of an altIdent element within the specification element concerned. For example, the following declaration converts note to nt : Renaming in this way is is an inherently unclean modification (because the set of documents matched by the resulting schema is not contained by the set matched by TEI-All), even though the process of converting any document in which elements have been renamed into an exactly equivalent document using canonical names is completely deterministic. Documents using such a schema should not claim to be in the TEI namespace, but either use a null namespace or some user-defined namespace, as further discussed in 23.3.2 Modification and Namespaces ; this is necessary to avoid the risk of name collision between the new name and all existing TEI names as well as for reasons of conformance (see further 23.3 Customization ). 23.3.2 Modification and Namespaces All the elements defined by the TEI schema are labelled as belonging to a single namespace , maintained by the TEI and with the URI http://www.tei-c.org/ns/1.0. 2 Only elements which are unmodified or which have undergone a clean modification may use this namespace. Note however that TEI-defined attributes are not associated with any namespace. This implies that any other modification must either specify a different namespace or, equivalently, specify no namespace at all. The ns attribute is provided on elements schemaSpec , elementSpec , and attDef for this purpose. Suppose, for example, that we wish to add a new attribute topic to the existing TEI element p . In the absence of namespace considerations, this would be an unclean modification, since p does not currently have such an attribute. The most appropriate action is to explicitly attach the new attribute to a new namespace by a declaration such as the following: Document instances using a schema derived from this ODD can now indicate clearly the status of this attribute: Since topic is explicitly labelled as belonging to something other than the TEI namespace, we regard the modification which introduced it as clean. A namespace-aware processor will be able to validate those elements in the TEI namespace against the unmodified schema. 3 Similar considerations apply when modification is made to the content model or some other aspect of an element, or when a new element is declared. All such changes should be explicitly labelled as belonging to some non-TEI namespace or to no namespace at all. If the ns attribute is supplied on a schemaSpec element, it identifies the namespace applicable to all components of the schema being specified. Even if such a schema includes unmodified modules from the TEI namespace, the elements contained by such modules will now be regarded as belonging to the namespace specified on the schemaSpec . This can be useful if it is desired simply to avoid namespace processing. For example, the following schema specification results in a schema called noName which has no namespace, even though it comprises declarations from the TEI header module: In addition to the TEI canonical namespace mentioned above, the TEI may also define namespaces for approved translations of the TEI schema into other languages. The namespace for such translations is the same as that for the canonical namespace, suffixed by the appropriate ISO language identifier ( 6.1 Language Identification ). A schema specification using the Chinese translation, for example, would use the namespace http://www.tei-c.org/ns/1.0/zh 23.3.3 Documenting the Modification The elements used to define a TEI customization ( schemaSpec , moduleRef , elementSpec , etc.) will typically be used within a TEI document which supplies further information about the intended use of the new schema, the meaning and application of any new or modified elements within it, and so on. This document will typically conform to a schema which includes components from the module described in chapter 22 Documentation Elements . 4 Where the customization to be documented simply consists in a selection of TEI modules, perhaps with some deletion of unwanted elements or attributes, the documentation need not specify anything further. Even here however it may be considered worthwhile to replace some of the semantic information provided by the unmodified TEI specification. For example, the desc element of an unmodified TEI elementSpec may describe an element in terms more general than appropriate to a particular project, or the exemplum elements within it may not illustrate the project's actual intended usage of the element, or the remarks element may contain discussions of matters irrelevant to the project. These elements may therefore be replaced or deleted within an elementSpec as necessary. Radical revision is also possible. It is feasible to produce a modification in which the teiHeader or text elements are not required, or in which any other rule stated in these Guidelines is either not enforced or not enforceable. In fact, the mechanism, if used in an extreme way, permits replacement of all that the TEI has to say about every component of its schema. Such revisions would result in documents that are not TEI-conformant in even the broadest sense, and it is not intended that encoders use the mechanism in this way. We discuss exactly what is meant by the concept of TEI conformance in the next section, 23.4 Conformance . 23.3.4 Examples of Modification Several examples of customizations of the TEI are provided as part of the standard release. They include the following: The schema generated from this customization is the minimum needed for TEI Conformance. It provides only a handful of elements. The schema generated from this customization combines all available TEI modules, providing 585 elements. The schema generated from this customization combines all available TEI modules with three other non-TEI vocabularies, specifically MathML, SVG, and XInclude. It is unlikely that any project would wish to use any of these extremes unchanged. However, they form a useful starting point for customization, whether by removing modules from tei_all or tei_allPlus, or by replacing elements deleted from tei_bare. They also demonstrate how an ODD document may be constructed to provide a basic reference manual to accompany schemas generated from it. Shortly after publication of the first edition of these Guidelines, as a demonstration of how the TEI encoding schema might be adopted to meet 90% of the needs of 90% of the TEI user community, the TEI editors produced a brief tutorial defining one specific clean modification of the TEI schema, which they called TEI Lite. This tutorial and its associated DTD became very popular and are still available from the TEI web site at http://www.tei-c.org/Guidelines/Customization/Lite/ . The tutorial and associated schema specification is also included as one of the exemplars provided with TEI P5. An updated and expanded version of this schema known as TEI simplePrint was added to the Exemplars at release 3.1.0. The elements it defines have been modified to take advantage of the processing model features (see further 22.5.4 Processing Models ) introduced to the Guidelines at release 3.0.0. The exemplars provided with TEI P5 also include a customization file from which a schema for the validation of other customization files may be generated. This ODD, called tei_odds, combines the four basic modules with the tagdocs, dictionaries, gaiji, linking, and figures modules and also provides facilities for including RELAX NG or Schematron code within a document. 23.4 Conformance The notion of TEI Conformance is intended to assist in the description of the format and contents of a particular XML document instance or set of documents. It may be found useful in such situations as: interchange or integration of documents amongst different researchers or users; software specifications for TEI-aware processing tools; agreements for the deposit of texts in, and distribution of texts from, archives; specifying the form of documents to be produced by or for a given project. In this section we explore several aspects of conformance, and in particular attempt to define how the term TEI-conformant should be used. The terminology defined here should be considered normative: users and implementors of the TEI Guidelines should use the phrases TEI-conformant and TEI Extension only in the senses given and with the usages described. A document is TEI-conformant if it: is a well-formed XML document ( 23.4.1 Well-formedness Criterion ) can be validated against a TEI Schema , that is, a schema derived from the TEI Guidelines ( 23.4.2 Validation Constraint ) conforms to the TEI Abstract Model ( 23.4.3 Conformance to the TEI Abstract Model ) uses the TEI namespace (and other namespaces where relevant) correctly ( 23.4.4 Use of the TEI Namespace ) is documented by means of a TEI-conformant ODD file ( 23.4.5 Documentation Constraint ) which refers to the TEI Guidelines A document is said to use a TEI Extension if it is a well-formed XML document which is valid against a TEI Schema which contains additional distinctions, representing concepts not present in the TEI Abstract Model, and therefore not documented in these Guidelines. Such a document cannot necessarily be transformed automatically to a TEI-conformant document without loss of information. However, since one of the goals of the TEI is to support extensions and modifications, it should not be assumed that no TEI document can include extensions: an extension which is expressed by means of the recommended mechanisms is also a TEI-conformant document provided that those parts of it which are not extensions are TEI-conformant. A TEI-conformant document is said to follow TEI Recommended Practice if, wherever these Guidelines prefer one encoding practice to another, the preferred practice is used. 23.4.1 Well-formedness Criterion These Guidelines mandate the use of well-formed XML as representation format. Documents must conform to the World Wide Web Consortium recommendation of the Extensible Markup Language (XML) 1.0 (Fourth Edition) or successor editions found at https://www.w3.org/TR/xml/ . Other ways of representing the concepts of the TEI Abstract Model are possible, and other representations may be considered appropriate for use in particular situations (for example, for data capture, or project-internal processing). But such alternative representations should not be considered in any way TEI-conformant. Previous versions of these Guidelines used SGML as a representation format. With the release of P5, the only representation format supported by these Guidelines became valid XML; legacy documents in SGML format should therefore be converted using appropriate software. A TEI-conformant document must use the TEI namespace, and therefore must also include an XML-conformant namespace declaration, as defined below ( 23.4.4 Use of the TEI Namespace ). The use of XML greatly reduces the need to consider hardware or software differences between processing environments when exchanging data. No special packing or interchange format is required for an XML document, beyond that defined by the W3C recommendations, and no special interchange format is therefore proposed by these Guidelines. For discussion of encoding issues that may arise in the processing of special character sets or non-standard writing systems, see further chapter 6 Languages and Character Sets . In addition to the well-formedness criterion, the W3C defines the notion of a valid document, as being a well-formed document which matches a specific set of rules or syntactic constraints, defined by a schema . As noted above, TEI conformance implies that the schema used to determine validity of a given document should be derived from the present Guidelines, by means of an ODD which references and documents components which these Guidelines define. 23.4.2 Validation Constraint All TEI-conformant documents must validate against a schema file that has been derived from the published TEI Guidelines, combined and documented in the manner described in section 23.3 Customization . We call the formal output of this process a TEI Schema . The TEI does not mandate use of any particular schema language, only that this schema 5 should have been generated from a TEI ODD file that references the TEI Guidelines. Currently available tools permit the expression of schemas in any or all of the XML DTD language, W3C XML Schema, and RELAX NG (both compact and XML formats). Some of what is syntactically possible using the ODD formalism cannot be represented by all schema languages; and there are some features of some schema languages which have no counterpart in ODD. No single schema language fully captures all the constraints implied by conformance to the TEI Abstract Model. A document which is valid according to a TEI schema represented using one schema language may not be valid against the same schema expressed in other languages; for example, the DTD language does not support namespaces. As noted in section 23.3 Customization , many varieties of TEI schema are possible and not all of them are necessarily TEI-conformant ; derivation from an ODD is a necessary but not a sufficient condition for TEI Conformance. 23.4.3 Conformance to the TEI Abstract Model The TEI Abstract Model is the conceptual schema instantiated by the TEI Guidelines. These Guidelines define, both formally and informally, a set of abstract concepts such as paragraph or heading , and their structural relationships, for example stating that paragraphs do not contain headings. These Guidelines also define classes of elements, which have both semantic and structural properties in common. Those semantic and structural properties are also a part of the TEI Abstract Model; the class membership of an existing TEI element cannot therefore be changed without changing the model. Elements can however be removed from a class by deletion, and new non-TEI elements within their own namespaces can be added to existing TEI classes. 23.4.3.1 Semantic Constraints It is an important condition of TEI conformance that elements defined in the TEI Guidelines as having one specific meaning should not be used with another. For example, the element l is defined in the TEI Guidelines as containing a line of verse. A schema in which it is redefined to mean a typographic line, or an ordered queue of objects of some kind, cannot therefore be TEI-conformant, whatever its other properties. The semantics of elements defined in the TEI Guidelines are conveyed in a number of ways, ranging from formally verifiable datatypes to informal descriptive prose. In addition, a mapping between TEI elements and concepts in other conceptual models may be provided by the equiv element where this is available. A schema which shares equivalent concepts to those of the TEI conceptual model may be mappable to the TEI Schema by means of such a mechanism. For example, the concept of paragraph expressed in the TEI schema by the p element is probably the same concept as that expressed in the DocBook schema by the para element. Such areas of overlap facilitate interchange because elements from one namespace may be readily integrated with those from another, but do not affect the definition of conformance. A document is said to conform to the TEI Abstract Model if features for which an encoding is proposed by the TEI Guidelines are encoded within it using the markup and other syntactic properties defined by means of a valid TEI-conformant schema. Hence, even though the names of elements or attributes may vary, a TEI-conformant document must respect the TEI Semantic Model, and be valid with respect to a TEI-conformant Schema. Although it may be possible to transform a document which follows the TEI Abstract Model into a TEI-conformant document, such a document is not itself conformant. As noted above, the notion of semantic conformance cannot be completely enforced in a formal way. The TEI conceptual model is expressed by means of formal specification in a customization file, by means of descriptive prose in the body of these Guidelines, and implicitly by examples of usage. Any inconsistency between, for example, the text of these Guidelines and a part of a specification should be considered an error and reported to the TEI Council for correction. 23.4.3.2 Mandatory Components of a TEI Document It is a long-standing requirement for any TEI-conformant document that it should contain a teiHeader element. To be more specific a TEI-conformant document must contain a single teiHeader element followed by one or more elements from the model.resource class; or in the case of a corpus or collection, a single overall teiHeader element followed by a series of TEI elements each with its own teiHeader This should include the title of the TEI document expressed using a titleStmt element. This should include the place and date of publication or distribution of the TEI document, expressed using the publicationStmt element. For a document derived from some previously existing document, this must include a bibliographic description of that source. For a document not so derived, this must include a brief statement that the document has no pre-existing source. In either case, this will be expressed using the sourceDesc element. 23.4.4 Use of the TEI Namespace The Namespaces Recommendation of the W3C ( 1 ) provides a way for an XML document to combine markup from different vocabularies without risking name collision and consequent processing difficulties. While the scope of the TEI is large, there are many areas in which it makes no particular recommendation, or where it recommends that other defined markup schemas should be adopted, such as graphics or mathematics. It is also considered desirable that users of other markup schemas should be able to integrate documents using TEI markup with their own system. To meet these objectives without compromising the reliability of its encoding, a TEI-conformant document is required to make appropriate use of the TEI namespace. Essentially all elements in a TEI Schema which represents concepts from the TEI Abstract Model belong to the TEI namespace, http://www.tei-c.org/ns/1.0 , maintained by the TEI. A TEI-conformant document is required to declare the namespace for all the elements it contains whether these come from the TEI namespace or from other schemas. A TEI Schema may be created which assigns TEI elements to some other namespace, or to no namespace at all. A document using such a schema cannot be considered TEI-conformant. A document which places non-TEI elements or attributes within the TEI namespace cannot be considered TEI-conformant; such practices are strongly deprecated as they may lead to serious difficulties for processing or interchange. 23.4.5 Documentation Constraint As noted in 23.4.2 Validation Constraint above, a TEI Schema can only be generated from a TEI ODD, which also serves to document the semantics of the elements defined by it. A TEI-conformant document should therefore always be accompanied by (or refer to) a valid TEI ODD file specifying which modules, elements, classes, etc. are in use together with any modifications applied, and from which a TEI Schema can be generated to validate the document. The TEI supplies a number of predefined TEI Customization exemplar ODD files and the schemas already generated from them (see 23.3.4 Examples of Modification ), but most projects will typically need to customize the TEI beyond what these examples provide. It is assumed, for example, that most projects will customize the TEI schema by removing those elements that are not needed for the texts they are encoding, and by providing further constraints on the attribute values and element content models the TEI provides. All such customizations must be specified by means of a valid TEI ODD file. As different sorts of customization have different implications for the interchange and interoperability of TEI documents, it cannot be assumed that every customization will necessarily result in a schema that validates only TEI-conformant documents. The ODD language permits modifications which conflict with the TEI Abstract Model, even though observing this model is a requirement for TEI Conformance. The ODD language can in fact be used to describe many kinds of markup schema, including schemas which have nothing to do with the TEI at all. Equally, it is possible to construct a TEI Schema which is identical to that derived from a given TEI ODD file without using the ODD schema. A schema can constructed simply by combining the predefined schema language fragments corresponding with the required set of TEI modules and other statements in the relevant schema language. However, the status of such a schema with respect to the tei_all schema cannot in general be easily determined; it may therefore be impractical to determine whether such a schema represents a clean modification or an extension. This is one reason for making the presence of a TEI ODD file a requirement for conformance. 23.4.6 Varieties of TEI Conformance The conformance status of a given document may be assessed by answering the following questions, in the order indicated: Is it a valid XML document, for which a TEI Schema exists? If not, then the document cannot be considered TEI-conformant in any sense. Is the document accompanied by a TEI-conformant ODD specification describing its markup schema and intended semantics? If not, then the document can only be considered TEI-conformant if it validates against a predefined TEI Schema and conforms to the TEI abstract model. Does the markup in the document correctly represent the TEI abstract model? Though difficult to assess, this is essential to TEI conformance. Does the document claim that all of its elements come from some namespace other than the TEI (or no namespace)? If so, the document cannot be TEI-conformant. If the document claims to use the TEI namespace, in part or wholly, do the elements associated with that namespace in fact belong to it? If not, the document cannot be TEI-conformant; if so, and if all non-TEI elements and attributes are correctly associated with other namespaces, then the document may be TEI-conformant. Is the document valid according to a schema made by combining all TEI modules as well as valid according to the schema derived from its associated ODD specification? If so, the document is TEI-conformant. Is the document valid according to the schema derived from its associated ODD specification, but not according to tei_all ? If so, the document uses a TEI extension. Is it possible automatically to transform the document into a document which is valid according to tei_all , using only information supplied in the accompanying ODD and without loss of information? If so, the document is TEI-conformant. In the following table, we examine more closely some specific, though imaginary, cases: We assume firstly that each sample document assessed here is a well-formed XML document, and that it is valid against some schema. The document in column A is TEI-conformant. Its tagging follows the TEI Abstract Model, both as regards syntactic constraints (its l elements appear within div elements and not the reverse) and semantic constraints (its l elements appear to contain verse lines rather than typographic ones). It is accompanied by a valid ODD which documents exactly how it uses the TEI. All the TEI-defined elements and attributes in the document are placed in the TEI namespace. The schema against which it is valid is a clean subset of the tei_all schema. The document in column B is not a TEI document. Although it is accompanied by a valid TEI ODD, the resulting schema includes some unclean modifications, and represents some concepts from the TEI Abstract Model using non-TEI elements; for example, it re-defines the content model of p to permit div within it, and it includes an element pageTrimming which appears to have the same meaning as the existing TEI fw element, but the equivalence is not made explicit in the ODD. It uses the TEI namespace correctly to identify the TEI elements it contains, but the ODD does not contain enough information automatically to convert its non-TEI elements into TEI equivalents. The document in column C is TEI conformant. It is almost the same as the document in column A, except that the names of the elements used are not those specified for the TEI namespace. Because the ODD accompanying it contains an exact mapping for each element name (using the altIdent element) and there are no name conflicts, it is possible to make an automatic conversion of this document. The document in column D is a TEI Extension. It combines elements from its own namespace with unmodified TEI elements in the TEI namespace. Its usage of TEI elements conforms to the TEI Abstract Model. Its ODD defines a new blort element which has no exact TEI equivalent, but which is assigned to an existing TEI class; consequently its schema is not a clean subset of tei_all . If the associated ODD provided a way of mapping this element to an existing TEI element, then this would be TEI-conformant. The document in column E is superficially similar to document D, but because it does not use any namespace declarations (or, equivalently, it assigns unmodified TEI elements to its own namespace), it may contain name collisions; there is no way of knowing whether a p within it is the same as the TEI's p or has some other meaning. The accompanying ODD file may be used to provide the human reader with information about equivalently named elements in the TEI namespace, and hence to determine whether the document is valid with respect to the TEI Abstract Model but this is not an automatable process. In particular, cases of apparent conflict (for example use of an element p to represent a concept not in the TEI Abstract Model but in the abstract model of some other system, whose namespace has been removed as well) cannot be reliably resolved. By our current definition therefore, this is not a TEI document. The document in column F is TEI-conformant. The difference between it and that in column D is that the new element blort which is used in this document is a specialization of an existing TEI element, and the ODD in which it is defined specifies the mapping (a my:blort may be automatically converted to a tei:seg type=\"blort\", for example). For this to work, however, the blort must observe the same syntactic constraints as the seg ; if it does not, this would also be a case of TEI Extension. The document in column G is not a TEI document. Its structure is fully documented by a valid TEI ODD, but it does not claim to represent the TEI Abstract Model, does not use the TEI namespace, and is not intended to validate against any TEI schema. The document in column H is very like that in column A, but it lacks an accompanying ODD. Instead, the schema used to validate it is produced simply by combining TEI schema fragments in the same way as an ODD processor would, given the ODD. If the resulting schema is a clean subset of tei_all , such a document is indistinguishable from a TEI-conformant one, but there is no way of determining (without inspection) whether this is the case if any modification or extension has been applied. Its status is therefore, like that of Text E, impossible to determine. 23.5 Implementation of an ODD System This section specifies how a processing system may take advantage of the markup specification elements documented in chapter 22 Documentation Elements of these Guidelines in order to produce project specific user documentation, schemas in one or more schema languages, and validation tools for other processors. The specifications in this section are illustrative but not normative. Its function is to further illustrate the intended scope and application of the elements documented in chapter 22 Documentation Elements , since it is believed that these may have application beyond the areas directly addressed by the TEI. An ODD processing system has to accomplish two main tasks. A set of selections, deletions, changes, and additions supplied by an ODD customization (as described in 23.3 Customization ) must first be merged with the published TEI P5 ODD specifications. Next, the resulting unified ODD must be processed to produce the desired outputs. An ODD processor is not required to do these two stages in sequence, but that may well be the simplest approach; the ODD processing tools currently provided by the TEI Consortium, which are also used to process the source of these Guidelines, adopt this approach. 23.5.1 Making a Unified ODD An ODD customization must contain a single schemaSpec element, which defines the schema to be constructed. < schemaSpec > generates a TEI-conformant schema and documentation for it. The schemaSpec element contains an unordered series of specialized elements, each of which is of one of the following four types: elements from the class model.oddDecl (by default elementSpec , classSpec , moduleSpec , and macroSpec ); these must have a mode attribute which determines how they will be processed. 6 If the value of mode is add, then the object is simply copied to the output, but if it is change, delete, or replace, then it will be looked at by other parts of the process. specGrpRef elements refer to specGrp elements that occur elsewhere in this, or another, document. A specGrp element, in turn, groups together a set of ODD specifications (among other things, including further specGrpRef elements). The use of specGrp and specGrpRef permits the ODD markup to occur at the points in documentation where they are discussed, rather than all inside schemaSpec . The target attribute of any specGrpRef should be followed, and the elementSpec , classSpec , and macroSpec , elements in the corresponding specGrp should be processed as described in the previous item; specGrpRef elements should be processed as described here. moduleRef elements with key attributes refer to components of the TEI. The value of the key attribute matches the ident attribute of the moduleSpec element defining a TEI module. The key must be dereferenced by some means, such as reading an XML file with the TEI ODD specification (either from the local hard drive or off the Web), or looking up the reference in an XML database (again, locally or remotely); whatever means is used, it should return a stream of XML containing the element, class, and macro specifications collected together in the specified module. These specification elements are then processed in the same way as if they had been supplied directly within the schemaSpec being processed. a moduleRef element may also refer to a compatible external module by means of its url attribute; the content of such modules, which must be available in the RELAX NG XML syntax, are passed directly and without modification to the output schema when that is created. Each object obtained from the TEI ODD specification using moduleRef by means of the key attribute must be checked against objects in the customization schemaSpec according to the following rules: if there is an object in the ODD customization with the same value for the ident attribute, and a mode value of delete, then the object from the module is ignored; if there is an object in the ODD customization with the same value for the ident attribute, and a mode value of replace, then the object from the module is ignored, and the one from the ODD customization is used in its place; if there is an object in the ODD customization with the same value for the ident attribute, and a mode value of change, then the two objects must be merged, as described below; if there is an object in the ODD customization with the same value for the ident attribute, and a mode value of add, then an error condition should be raised; otherwise, the object from the module is copied to the result. To merge two objects with the same ident, their component attributes and child elements must be looked at recursively. Each component may fall into one of the following four categories: Some components may occur only once within the merged object (for example attributes, and altIdent , content , or classes elements). If such a component is found in the ODD customization, it will be copied to the output; if it is not found there, but is present in the TEI ODD specification, then that will be copied to the output. Some components are grouping objects ( attList , valList , for example); these are always copied to the output, and their children are then processed following the rules given in this list. Some components are identifiable: this means that they are members of the att.identified class from which they inherit the ident attribute; examples include attDef and valItem . A component of this type will be processed according to its mode attribute, following the rules given above. Some components may occur multiple times, but are neither grouped nor identifiable. Examples include the members of model.glossLike such as equiv , desc , gloss , the exemplum , remarks , listRef , datatype or defaultVal elements. These should be copied from both the TEI ODD specification and the ODD customization, and all occurrences included in the output. A special problem arises with elements which are members of attribute classes, as they are permitted to override attributes inherited from a class. For example, consider this simple modification: The effect of the concatenation of unidentifiable components should be considered carefully. An original may have Similar considerations apply to multiple example elements, though these are less likely to cause problems in documentation. Note that existing examples can only be deleted by supplying a completely new elementSpec in replace mode, since the exemplum element is not identifiable. In the processing of the content models of elements and the content of macros, deleted elements may require special attention. 7 A content model like this: If an element refers directly to an element child, like this: The result of the work carried out should be a new schemaSpec which contains a complete and internally consistent set of element, class, and macro specifications, possibly also including moduleRef elements with url attributes identifying external modules. 23.5.2 Generating Schemas Assuming that any modifications have been resolved, as outlined in the previous section, making a schema is now a four stage process: all datatype and other macro specifications must be collected together and declared at the start of the output schema; all classes must be declared in the right order (order is significant because since some classes reference others); all elements are declared; any moduleRef elements with a url attribute identifying an external schema must be processed. An ODD processor may choose to use any desired schema language or languages for its schema output, since ODD specifications are expressed as far as possible in a form independent of any schema language. The current TEI ODD processing system produces schema output in the three main schema languages as follows: A RELAX NG (XML) schema is generated by converting content models, datatypes, and macro specifications provided within the ODD specification; a version re-expressed in the RELAX NG compact syntax is generated using James Clark's trang application. A DTD schema is generated by converting the RELAX NG content models to DTD language, often simplifying it to allow for the less-sophisticated output language. A W3C Schema schema is created by generating a RELAX NG schema and then using James Clark's trang application. Other projects may decide to follow a different route, perhaps implementing a direct ODD to W3C Schema translator. Secondly, it is possible to create two rather different styles of schema. On the one hand, the schema can try to maintain all the flexibility of ODD by using the facilities of the schema language for parameterization; on the other, it can remove all customization features and produce a flat result which is not suitable for further manipulation. The TEI project currently generates both styles of schema; the first as a set of schema fragments in DTD and RELAX NG languages, which can be included as modules in other schemas, and customized further; the second as the output from a processor such as Roma, in which many of the parameterization features have been removed. The difference between the schema styles may be illustrated by considering this ODD specification: The equivalent parameterized version might look like this: In the remainder of these section, the terms simple schema and parameterized schema are used to distinguish the two schema types. An ODD processor is not required to support both, though the simple schema output is generally preferable for most applications. Thirdly, the problem of missing components must be resolved. For example, consider this (fictitious) model for sp : Finally, an application will need to have some method of associating the schema with document instances that use it. The TEI does not mandate any particular method of doing this, since different schema languages and processors vary considerably in their requirements. ODD processors may wish to build in support for some of the methods for associating a document instance with a schema. The TEI does not mandate any particular method, but does suggest that those which are already part of XML (the DOCTYPE declaration for DTDs) and W3C Schema (the xsi:schemaLocation attribute) be supported where possible. In order for the xsi:schemaLocation attribute to be valid when a document is validated against either a DTD or a RELAX NG schema, ODD processors may wish to add declarations for this attribute and its namespace to the root element, even though these are not part of the TEI per se . For DTDs this means adding Note that declaration of the xsi:schemaLocation attribute in a W3C Schema schema is not permitted. Therefore, if W3C Schemas are being generated by converting the RELAX NG schema (for example, with trang ), it may be necessary to perform that conversion prior to adding the xsi:schemaLocation declaration to the RELAX NG. It is recognized that this is an unsatisfactory solution, but it permits users to take advantage of the W3C Schema facility for indicating a schema, while still permitting documents to be validated using DTD and RELAX NG processors without any conflict. 23.5.3 Names and Documentation in Generated Schemas When processing class, element, or macro specifications, there are three general rules: If a RELAX NG pattern or DTD parameter entity is being created, its name is the value of the corresponding ident attribute, prefixed by the value of any prefix attribute on schemaSpec . This allows for elements from an external schema to be mixed in without risk of name clashes, since all TEI elements can be given a distinctive prefix such as tei_. Thus <schemaSpec ident=\"test\" prefix=\"tei_\"> <elementSpec ident=\"sp\"> <!--...--> </elementSpec> </schemaSpec> may generate a RELAX NG (compact syntax) pattern like this: References to these patterns (or, in DTDs, parameter entities) also need to be prefixed with the same value. If an element or attribute is being created, its default name is the value of the ident attribute, but if there is an altIdent child, its content is used instead. Where appropriate, the documentation strings in gloss and desc should be copied into the generated schema. If there is only one occurrence of either of these elements, it should be used regardless, but if there are several, local processing rules will need to be applied. For example, if there are several with different values of xml:lang, a locale indication in the processing environment might be used to decide which to use. For example, <elementSpec module=\"core\" ident=\"head\"> <equiv/> <gloss>heading</gloss> <gloss xml:lang=\"fr\">en-tête</gloss> <gloss xml:lang=\"es\">encabezamiento</gloss> <gloss xml:lang=\"it\">titolo</gloss> <!-- ... --> </elementSpec> bibliography might generate a RELAX NG schema fragment like the following, if the locale is determined to be French: In addition, there are three conventions about naming patterns relating to classes; ODD processors need not follow them, but those reading the schemas generated by the TEI project will find it necessary to understand them: when a pattern for an attribute class is created, it is named after the attribute class identifier (as above) suffixed by .attributes (e.g. att.editLike.attributes ); when a pattern for an attribute is created, it is named after the attribute class identifier (as above) suffixed by .attribute. and then the identifier of the attribute (e.g. att.editLike.attribute.resp ); when a parameterized schema is created, each element generates patterns for its attributes and its contents separately, suffixing respectively .attributes and .contents to the element name. 23.5.4 Making a RELAX NG Schema To create a RELAX NG schema, the processor processes every macroSpec , classSpec , and elementSpec in turn, creating a RELAX NG pattern for each, using the naming conventions listed above. The order of declaration is not important, and a processor may well sort them into alphabetical order of identifier. A complete RELAX NG schema must have an rng:start element defining which elements can occur as the root of a document. The ODD schemaSpec has an optional start attribute, containing one or more patterns, which can be used to construct the rng:start . A pattern normally corresponds to an element name, but if a prefix (see above, 23.5.3 Names and Documentation in Generated Schemas ) is supplied for an element, the pattern consists of the prefix name with the element name. 23.5.4.1 Macros An ODD macro generates a corresponding RELAX NG pattern by processing the body of the content element in the same way as elsewhere. Thus 23.5.4.2 Classes An ODD model class always generates a RELAX NG pattern definition listing all the members of the class in alternation. For example When classes are referenced using the classRef element, it is possible to indicate which of the available patterns is required by means of the expand attribute. Attribute classes work by producing a pattern containing definitions of the appropriate attributes. So An individual attribute consists of an rng:attribute with a name attribute derived according to the naming rules described above ( 23.5.3 Names and Documentation in Generated Schemas ). In addition, the ODD model supports a defaultVal , which is transformed to a defaultValue attribute in the namespace http://relaxng.org/ns/compatibility/annotations/1.0 on the rng:attribute . The body of the attribute is taken from the datatype child, unless there is a supporting valList with a type value of closed. In that case an rng:choice is created, listing the allowed values. Thus the following attribute definition 23.5.4.3 Elements An elementSpec produces a RELAX NG specification in two parts; firstly, it must generate an rng:define pattern by which other elements can refer to it, and then it must generate an rng:element with the content model and attributes. It may be convenient to make two separate patterns, one for the element's attributes and one for its content model. The content model is created by processing the TEI declarations found within the content element; ; the attributes are processed in the same way as those from attribute classes, described above. 23.5.5 Making a DTD Generation of DTDs largely follows the same pattern as RELAX NG generation, with one important exception— the order of declaration matters . A DTD may not refer to an entity which has not yet been declared. Since both macros and classes generate DTD parameter entities, the TEI Guidelines are constructed so that they can be declared in the right order. A processor must therefore work in the following order: declare all model classes which have a predeclare value of true declare all macros which have a predeclare value of true declare all other classes declare the modules (if DTD fragments are being constructed) declare any remaining macros declare the elements and their attributes Let us consider a complete example, a simple element with no attributes of its own: A simpler rendition for a flattened DTD generated from a customization will result in the following, with no containing marked section, and no parameterized name: 23.5.6 Generating Documentation In Donald Knuth's literate programming terminology ( 1 ), the previous sections have dealt with the tangle process; to generate documentation, we now turn to the weave process. An ODD customization may consist largely of general documentation and examples, requiring no ODD-specific processing. It will normally however also contain a schemaSpec element and possibly some specGrp fragments. The generated documentation may be of two forms. On the one hand, we may document the customization itself, that is, only those elements (etc.) which differ in their specification from that provided by the TEI reference documentation. Alternatively, we may generate reference documentation for the complete subset of the TEI which results from applying the customization. The TEI Roma tools take the latter approach, and operate on the result of the first stage processing described in 23.5.1 Making a Unified ODD . Generating reference documentation for elementSpec , classSpec , and macroSpec elements is largely dependent on the design of the preferred output. Some applications may, for example, want to turn all names of objects into hyperlinks, show lists of class members, or present lists of attributes as tables, lists, or inline prose. Another technique implemented in these Guidelines is to show lists of potential parents for each element, by tracing which other elements have them as possible members of their content models. One model of display on a web page is shown in 23.5.6.1 Example reference documentation for faith , corresponding to the faith element shown in section 23.5.5 Making a DTD . 23.5.7 Using TEI Parameterized Schema Fragments The TEI parameterized DTD and RELAX NG fragments make use of parameter entities and patterns for several purposes. In this section we describe their interface for the user. In general we recommend use of ODD instead of this technique, which has been retained only for compatability reasons. 23.5.7.1 Selection of Modules Special-purpose parameter entities are used to specify which modules are to be combined into a TEI DTD. They take the form TEI.xxxxx where xxxx is the name of the module as given in table 1 in 1.1 TEI Modules . For example, the parameter entity TEI.linking is used to define whether or not to include the module linking . All such parameter entities are declared by default with the value IGNORE: to select a module, therefore, the encoder declares the appropriate parameter entities with the value INCLUDE. For XML DTD fragments, note that some modules generate two DTD fragments: for example the analysis module generates fragments called analysis-decl and analysis . This is because the declarations they contain are needed at different points in the creation of an XML DTD. The parameter entity named for the module is used as the keyword controlling a conditional marked section in the DTD fragment generated by the tei module. The declarations for each DTD fragment constituting the module are contained within such marked sections. For example, the parameter entity TEI.linking appears twice in tei.dtd , once for the linking-decl schema fragment: The RELAX NG schema fragments can be combined in a wrapper schema using the standard mechanism of rng:include in that language. 23.5.7.2 Inclusion and Exclusion of Elements The TEI DTD fragments also use marked sections and parameter entity references to allow users to exclude the definitions of individual elements, in order either to make the elements illegal in a document or to allow the element to be redefined. The parameter entities used for this purpose have exactly the same name as the generic identifier of the element concerned. The default definition for these parameter entities is INCLUDE but they may be changed to IGNORE in order to exclude the standard element and attribute definition list declarations from the DTD. The declarations for the element p , for example, are preceded by a definition for a parameter entity with the name p and contained within a marked section whose keyword is given as %p; : These parameter entities are defined immediately preceding the element whose declarations they control; because their names are completely regular, they are not documented further. To define a DTD in which the element p is excluded therefore, the entity p needs to be redefined as IGNORE by ensuring that a declaration such as Similarly, in the parameterized RELAX NG schemas, every element is defined by a pattern named after the element. To undefine an element therefore all that is necessary is to add a declaration like the following: 23.5.7.3 Changing the Names of Generic Identifiers In the TEI DTD fragments, elements are not referred to directly by their generic identifiers; instead, the DTD fragments refer to parameter entities which expand to the standard generic identifiers. This allows users to rename elements by redefining the appropriate parameter entity. Parameter entities used for this purpose are formed by taking the standard generic identifier of the element and attaching the string n. as a prefix. Thus the standard generic identifiers for paragraphs, notes, and quotations, p , note , and persName are defined by declarations of the following form: These declarations are generated by an ODD processor when TEI DTD fragments are created. In the RELAX NG schemas, all elements are normally defined using a pattern with the same name as the element (as described in 23.5.3 Names and Documentation in Generated Schemas ): for example 23.5.7.4 Embedding Local Modifications (DTD only) Any local modifications to a DTD (i.e. changes to a schema other than simple inclusion or exclusion of modules) are made by declarations stored in one of two local extension files, one containing modifications to the TEI parameter entities, and the other new or changed declarations of elements and their attributes. Entity declarations must be made which associate the names of these two files with the appropriate parameter entity so that the declarations they contain can be embedded within the TEI DTD at an appropriate point. The following entities are referred to by the main tei.dtd file to embed portions of the TEI DTD fragments or locally developed extensions. identifies a local file containing extensions to the TEI parameter entities identifies a local file containing extensions to the TEI module For example, if the relevant files are called project.ent and project.dtd , then declarations like the following would be appropriate: When an entity is declared more than once, the first declaration is binding and the others are ignored. The local modifications to parameter entities should therefore be handled before the standard parameter entities themselves are declared in tei.dtd . The entity TEI.extensions.ent is referred to before any TEI declarations are handled, to allow the user's declarations to take priority. If the user does not provide a TEI.extensions.ent entity, the entity will be expanded to the empty string. For example the encoder might wish to add two phrase-level elements it and bd , perhaps as synonyms for hi rend='italics' and hi rend='bold'. As described in chapter 23.3 Customization , this involves two distinct steps: one to define the new elements, and the other to ensure that they are placed into the TEI document structure at the right place. Creating the new declarations is done in the same way for user-defined elements as for any other; the same parameter entities need to be defined so that they may be referenced by other elements. The content models of these new elements may also reference other parameter entities, which is why they need to be declared after other declarations. The second step involves modifying the element class to which the new elements should be attached. This requires that the parameter entity macro.phraseSeq should be modified to include the generic identifiers for the new elements we wish to create. The declaration for each modifiable parameter entity in the DTD includes a reference to an additional parameter entity with the same name prefixed by an x. ; these entities are declared by default as the null string. However, in the file containing local declarations they may be redeclared to include references to the new class members: ","title":"<span class=\"tei-div7 breadcrumb\">23 Using the TEI</span>"}
{"link":"p5.xml?id=REF-CLASSES-MODEL","tag":"guidelines","content":"1 Model Classes 1.1 About the Model Classes Appendix This appendix gives you a list of model classes and links to the reference pages for them. There are 124 distinctly-named model classes in revision e64bcedf9 of TEI P5 Version 4.5.0a of the TEI Guidelines. A B C D E F G H I L M N O P Q R S T","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">1 Model Classes</span>"}
{"link":"p5.xml?id=REF-CLASSES-ATTS","tag":"guidelines","content":"2 Attribute Classes 2.1 About the Attribute Classes Appendix This appendix gives you a list of attribute classes and links to the reference pages for them. There are 81 distinctly-named attribute classes in revision e64bcedf9 of TEI P5 Version 4.5.0a of the TEI Guidelines. A B C D E F G H I L M N P R S T W","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">2 Attribute Classes</span>"}
{"link":"p5.xml?id=REF-ELEMENTS","tag":"guidelines","content":"3 Elements 3.1 About the Elements Appendix This appendix gives you links to reference pages for all elements in the TEI Guidelines. There are 585 TEI elements in revision e64bcedf9 of TEI P5 Version 4.5.0a of the TEI Guidelines. The elements listed here are in the TEI Namespace: http://www.tei-c.org/ns/1.0 unless otherwise noted on that element's reference page. A B C D E F G H I J K L M N O P Q R S T U V W X Z","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">3 Elements</span>"}
{"link":"p5.xml?id=REF-ATTS","tag":"guidelines","content":"4 Attributes 4.1 About the Attributes Appendix This appendix gives you a list of attributes and links to the reference pages for the elements on which they appear. There are 269 distinctly-named attributes in revision e64bcedf9 of TEI P5 Version 4.5.0a of the TEI Guidelines.","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">4 Attributes</span>"}
{"link":"p5.xml?id=REF-MACROS","tag":"guidelines","content":"5 Datatypes and Other Macros 5.1 About the Datatypes and Macros Appendix This appendix gives you a list of datypes and links to the reference pages for them. There are 35 distinctly-named data specifications in revision e64bcedf9 of TEI P5 Version 4.5.0a of the TEI Guidelines. datatype macro","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">5 Datatypes and Other Macros</span>"}
{"link":"p5.xml?id=BIB","tag":"guidelines","content":"6 Bibliography 6.1 Works Cited in Examples in these Guidelines 阿城，《棋王》。 Académie française , Rectifications de l'orthographe - J.O. du 06-12-1990 , En ligne , consulté le 05-03-2010 . Adams, Douglas . The Hitchhiker's Guide to the Galaxy ( 1979 ), chapter 31 . Agence bibliographique de l'enseignement supérieur , ABES : Site internet par l' ABES , consulté le 05-03-2010 . 阿拉伯短劍，國史館：嚴家淦總統文物。 Alighieri, Dante . Doglia mi reca ne lo core ardire , Rime , XLIX . Allinson, E.P. and B. Penrose . Philadelphia 1681-1887 ( 1887 ), p. 138 . American National Standard for Bibliographic References, ANSI Z39.29-1977 , New York: American National Standards Institute ( 1977 ). Andersson, Theodore M. . A Preface to the Nibelungenlied , Stanford University Press ( 1987 ). Andrews, Mr. . Song , Chambers's Edinburgh Journal Series 1 9 : 463 ( 12 December 1840 ), 376 . https://dvpp.uvic.ca/poems/chambers_series/1840/pom_5242_song.html Anouilh, Jean , Antigone , 1842 . [As in Visions of] Single leaf of Notes for a poem about night \"visions,\" possibly related to the untitled 1855 poem that Whitman eventually titled \"The Sleepers.\" Fragments of an unidentified newspaper clipping about the Puget Sound area have been pasted to the leaf. The Trent Collection of Walt Whitman Manuscripts, Duke University Rare Book, Manuscript, and Special Collections Library. http://www.whitmanarchive.org/resources/sleepers/duk.00258.001.jpg Atkins et al. Collins Robert French-English English-French Dictionary . London: Collins ( 1978 ). Atkinson, J. Maxwell and John Heritage . Structures of social action: Studies in conversation analysis , Cambridge and Paris: Cambridge University Press, Editions de la Maison des Sciences de l'Homme ( 1984 ), ix-xvi . Austen, Jane . Pride and Prejudice . ( 1813 ), chapter 1 . 白先勇，〈金大班的最後一夜〉，《台北人》。 白先勇，《孽子》。 白居易，《憶江南》。 Baker, James K. . Night in Tarras . In Hilltop: A Literary Paper , vol 1 no 2. Wellington: Victoria University College Literary Society. ( 1949 ). Balzac, Honoré de , Les Chouans , 1845 . Balzac, Honoré de , Le Père Goriot , 1843 . Balzac, Honoré de, Petites misères de la vie conjugale , 1850 . Barbauld, Lucy Aikin . The Works of Anna Laetitia Barbauld ( 1826 ). Barker, Jane . The Lining to the Patch-Work Screen ( 1726 ). Base de datos paleográfica da lírica galego-portuguesa (PalMed) . Versión 1.2. Santiago de Compostela: Centro Ramón Piñeiro para a Investigación en Humanidades. http://www.cirp.gal/palmed . f. B126r, column a, l. 21-32. Bataille, Michel , L'Arbre de Noël , 1967 . Les Chats , in : Baudelaire, Charles , Les Fleurs du mal , 1861 . La Vie antérieure , in : Baudelaire, Charles , Les Fleurs du mal , 1861 . 電影《霸王別姬》，1993年。 Beck, Béatrice , Léon Morin, prêtre , 1952 . Beckett, Samuel . Waiting for Godot , London: Faber and Faber ( 1956 ). Beckett, Samuel . Murphy ( 1963 ), chap 2. Becque, Henry , La Parisienne . Edition électronique par l' ATILF et le CNRTL , d'après l'édition de Fasquelle (Paris, 1922). Beerbohm, Max . Autograph manuscript of The Golden Drugget , Pierpont Morgan MA 3391. in 1 123. Behn, Aphra . The Rover , ( 1697 ). Belloc, Denis , Képas , 1989 . Belloc, Denis , Néons , 1987 . Bentham, Jeremy . The Book of Fallacies. ( 1824 ). Beowulf and The fight at Finnsburg ; edited, with introduction, bibliography, notes, glossary, and appendices, by Fr. Klaeber . Boston, New York [etc.] D.C. Heath & Co. ( 1922 ). Bibliographie dans le cadre de la semaine italienne du 11 au 18 mars 2006 , , document électronique . Bibliothèque nationale de France , Projet de description des reliures remarquables de la Réserve des livres rares selon le modèle de la TEI manuscrits . Billetdoux, Marie , Un peu de désir sinon je meurs , 2006 . Blake, William . London , in Songs of Experience ( 1791 ). Blake, William . The Sick Rose , in Songs of Experience ( 1794 ). Blake, William . The Tyger , in Songs of Experience ( 1794 ). Bloomfield, Leonard . Literate and Illiterate Speech , American Speech , 2 , ( 1927 ), pp. 432-441 . Borges, Jorge Luis , tr. R. Simms . The Analytical Language of John Wilkins . In Emir Rodriguez Monegal and Alistair Reid , eds. Borges: A reader , Dutton Adult ( 1981 ), p.141 . Borges, Jorge Luis . Avatars of the Tortoise In James E. Irby tr. Labyrinths: Selected Stories and Other Writings , New York: New Directions, ( 1962 ), pp.202-203 . Bouillier, Grégoire , Rapport sur moi , 2002 . Bresson, Robert , Mouchette : script , l'Avant-scène cinéma , n° 80 , avril 1968 . Extract from British National Corpus ( http://www.natcorp.ox.ac.uk ) Text KB7, sentence 13730. Browning, Robert . Letter to George Moulton-Barrett , Pierpont Morgan MA 310, ( 1 23). Buirette de Belloy, Pierre Laurent , Gabrielle de Vergy , 1777 . Bunyan, John . The Pilgrim's Progress from this world to that which is to come... , London ( 1678 ). Burgess, Anthony . A Clockwork Orange . ( 1962 ), opening . Burnard, Lou . Principles of Database Design in S. Rahtz. ed. Information Technology in the Humanities: tools, techniques and applications , Ellis Horwood Ltd, Ellis Horwood Series in Computers and Their Applications, ( 1987 ), p. 54 . Burnard, Lou , Sperberg-McQueen, C. M. , La TEI simplifiée, une introduction au codage des textes électroniques en vue de leur échange -- version de travail , 1996 . Burton, Robert . Anatomy of Melancholy ( 1621 ), 16th ed. reprinted 1846 , p. 743 . Butler, Samuel . The Way of All Flesh ( 1903 ), chapter 37 . Byron, George Gordon . Don Juan ( 1819 ), I.xxii . Byron, George Gordon . Vision of Judgment In E.H. Coleridge ed. The Poetical Works of Lord Byron , viii , 1922. C 60/16 Fine Roll 6 HENRY III (28 October 1221-27 October 1222) , membrane 5, entry 154 . CBETA Cædmon's Hymn in Bede's Historia Ecclesiastica (MS Kk. 5. 16, Cambridge, University Library). Cabaret . A musical play, with book by Joe Masteroff, lyrics by Fred Ebb, and music by John Kaner. Based on the play by John van Druten and stories by Christopher Isherwood. 1966 Edward Barkley, describing how Essex drove the Irish from the plains into the woods to freeze or famish in winter; quoted by Canny, Nicholas P. The Ideology of English Colonization: From Ireland to America . In Stanley N. Katz and John M. Murrin eds. Colonial America: Essays in Politics and Social Development , 3d ed New York: Knopf, ( 1983 ), p.53 . Carroll, Lewis . Through the Looking Glass, and what Alice found there . ( 1871 ). Catéchisme de l'Eglise catholique , 1968 . Cavendish, Margaret . Nature's Pictures . London, 1656 . Women Writers Online. Women Writers Project, Northeastern University. 29 Mar. 2015 . Centre national de la recherche scientifique (France). UMR 7118 ATILF , Le Trésor de la Langue Française Informatisé (TLFI) , 2004 . Example recoded from Chafe, W. Adequacy, user-friendliness, and practicality in transcribing In Leech, G. , G. Myers , J. Thomas eds. Spoken English on Computer: Transcription, Markup and Applications . Harlow: Longman, 1995 . Chandler, Lloyd. Conversation with Death (also known as Oh, Death ). In Journal of Folklore Research , 41.2/3 , ( 2004 ), pp. 125-126 . Chapman, Graham , Cleese, John , Gilliam, Terry , Idle, Eric , Jones, Terry . The complete Monty Pythons Flying Circus . Chapman, Graham , Cleese, John , Gilliam, Terry , Idle, Eric , Jones, Terry . Monty Python's Life of Brian ( 1979 ). Chaucer, Geoffrey . Canterbury Tales , f52r, in Holkham MS. Chaucer, Geoffrey . The Tale of Sir Topas , The Canterbury Tales , In F. N. Robinson ed. The Works of Geoffrey Chaucer , 2nd edition Boston: Houghton Mifflin Co., 1957 . 陳政彥，〈戰後臺灣現代詩論戰史研究〉，2007。 Cholières, Nicolas de , La Forest Nuptiale ( 1600 ). Chomsky, Noam and Morris Halle . The Sound Pattern of English . New York: Harper & Row ( 1968 ), p. 415 . Claude Simon Le jardin des plantes , 1997 , p 284 Cleaver, Eldridge . Soul on Ice . New York ( 1968 ). Cloud of Unknowing In Hodgson, Phyllis ed. The Cloud of Unknowing and The Book of Privy Counselling , London: Oxford University Press, Early English Text Society, 218 , ( 1944 ). Clover, Carol J. The Medieval Saga , Ithaca: Cornell University Press ( 1982 ). Cocteau, Jean . La Machine Infernale . Coleridge, Samuel Taylor . The Rime of the Ancient Mariner . In Wordsworth, William and Samuel Taylor Coleridge . Lyrical Ballads ( 1798 ). Coleridge, Samuel Taylor . Frost at Midnight In E.H. Coleridge ed. Poetical Works , Oxford: Oxford University Press, ( 1967 ), p.240 . Colette , Colette à l'école , 1900 . Collins English Dictionary , 12th edition Glasgow: Collins 2014 ). Collins Pocket Dictionary of the English language . London: Collins. Collins, Wilkie . The Moonstone , Penguin, 6th narrative . Comenius, John Amos . Orbis Pictus: a facsimile of the first English edition of 1659 (ed. John E. Sadler ) Oxford University Press ( 1968 ). Cope, Thomas Pym . Philadelphia merchant: the diary of Thomas P. Cope, 1800-1851 , Eliza Cope Harrison ed. Corneille, Pierre , La Place Royale ou L'Amoureux extravagant , 1637 . Corneille, Pierre , Théodore, vierge et martyre : tragédie chrétienne , 1646 . Cowley, Hannah . The Runaway ( 1813 ). Crashaw, Richard , ed. J.R. Tutin . The Poems of Richard Crashaw . Muses Library Edition : ( 1900 ). Creeley, Robert A counterpoint in For Love: Poems 1950-1960 ( 1962 ). 崔西．雪佛蘭。《戴珍珠耳環的少女》。台北：皇冠，2003。 Dallas, George Mifflin . Unpublished letter cited in Russell F. Weigley , Nicholas B. Wainwright , Edwin Wolf eds. Philadelphia: A 300 Year History , New York and London: W. W. Norton & Company, 1982 , p. 349 . Danhauser, Adolphe-Leopold , Théorie de la musique , 1872 . Darwin, Charles . Narrative of the Surveying Voyages of His Majesty's ships Adventure and Beagle... volume 3 : Journal and Remarks (The Voyage of the Beagle) , chap 3. 1839 . Daudet, Alphonse , Les contes du lundi , 1873 . Davenant, William . The vvitts. A comedie, presented at the private house in Blacke Fryers, by his Majesties servants. The author VVilliam D'avenant, servant to Her Majestie. London, 1636 . [STC S109311] De Nutrimento et Nutribili, Tractatus 1 , fol 217r col b of Merton College Oxford MS O.2.1; in 1 pl. 16. Dean of Sarum Churchwardens' presentments , 1731, Hurst; Wiltshire Record Office; transcribed by Donald A. Spaeth. Defoe, Daniel . The Fortunes and Misfortunes of the Famous Moll Flanders ( 1722 ). Defoe, Daniel . Robinson Crusoe ( 1719 ). Defoe, Daniel . Journal of the Plague Year . London ( 1722 ). Dekker, Thomas and Thomas Middleton . The Honest Whore, Part One ( 1604 ). Deloney, Thomas . Thomas of Reading or the Sixe Worthie Yeomen of the West ( 1612 ). Dennery, Annie . Du mélos à la note : Les notations musicales au Moyen Age , Médiévales , n° 3 1983 . Dickens, Charles . A Christmas Carol in Prose, Being a Ghost Story of Christmas , Chapman and Hall, ( 1843 ), p. 5, p. 12 . Dickens, Charles . Little Dorrit , ( 1857 ). Dickinson, Emily . 1755 In Arthur Eastman et al. eds. The Norton Anthology of Poetry , New York: W.W. Norton, 1970 , p.859 . Diderot, Denis , Lettres à Sophie Volland , 26 sept. 1762 . 〈第三屆第一次大會第一次會議記錄〉，臺灣省諮議會。 Disraeli, Benjamin . Coningsby ( 1844 ), preface . Doyle, Arthur Conan . The Red-headed league . In The Adventures of Sherlock Holmes ( 1892 ). Doyle, Arthur Conan . The Original Illustrated Sherlock Holmes , Castle Books, 1989 . Drawing of a leaden plaque bearing an inquiry by Hermon from the oracular precinct at Dodona . Catalogue no 725; LSAG 230.13. Image from http://poinikastas.csad.ox.ac.uk/ Dubois, Jacques , Nyssen, Hubert (dir. de collection), Babel , Actes sud, 1989-... . Dubois, Jean , Dictionnaire de linguistique , 1974 . Dudo of St Quentin . De moribus et actis primorum Normannie ducum , fol 4v of British Library MS Harley 3742; in 1 pl 6(i). Dufournaud, Nicole , Numérisation des Titres de famille , édition électronique , 2002 . Duhamel, Georges , Chronique des Pasquier , 1933-1945 . Dutt, Toru . Lakshman In Ancient Ballads and Legends of Hindustan , Kegan Paul, Trench & Co., ( 1882 ) Dylan, Bob . All Along the Watchtower In John Wesley Harding ( 1967 ). Dylan, Bob . Positively 4th Street In Highway 61 Revisited ( 1965 ). Eddic poems , in Reykjavík, Landsbókasafn Íslands, Lbs 1562 4to. Editorial , .EXE magazine , 6.11 ( 1992 ), p. 2 . Eliot, George . Middlemarch ( 1871 ), I.1 . Eliot, George . Middlemarch ( 1871 ), I.XXI . Eliot, George . Daniel Deronda ( 1876 ), III.1 . Eliot, Thomas Stearns . The waste land: a facsimile and transcript of the original drafts including the annotations of Ezra Pound , Eliot, Valerie ed. Faber and Faber Ltd. ( 1971 ), p. 37 . Scalable Vector Graphics (SVG) 1.1 (Second Edition) . Editors Erik Dahlström , Jon Ferraiolo , 藤沢 淳 , Anthony Grasso , Dean Jackson , Chris Lilley , Cameron McCormack Doug Schepers , Jonathan Watt and Patrick Dengler . World Wide Web Consortium (W3C) ( 22 June 2010 ). Available from https://www.w3.org/TR/SVG11/ . Ernaux, Annie , Se perdre , 1988 . Ernaux, Annie , L'usage de la photo , 2005 . Études littéraires , consulté le 07-05-2010 . Fallet , René , Le Triporteur , 1951 . Field, Syd Screenplay: the Foundations of Screenwriting ( 1998 ). Fielding, Henry . The History of the Adventures of Joseph Andrews and his Friend, Mr. Abraham Abrams ( 1742 ). Fielding, Henry . Tragedy of Tragedies , ( 1737 ). Fish, Stanley . Is there a text in this class? The authority of interpretive communities . Harvard University Press ( 1980 ). Fisher, M. F. K. I Was Really Very Hungry In As They Were , Knopf ( 1982 ), p. 43 . FitzGerald, Edward . The Rubáiyát of Omar Khayyám, translated into English Verse ( 1859 ), stanza 25 . Flaubert, Gustave , Salammbô , 1862 . Flaubert, Gustave , La Tentation de saint Antoine , 1874 . Foley James D. , Andries van Dam , Steven K. Feiner and John F. Hughes . Computer Graphics: Principles and Practice , 2nd edition Reading: Addison-Wesley, p.259 . Forster, E.M. , Howards End . Edward Arnold. ( 1910 ). France inter, Là-bas si j'y suis , consulté le 07-05-2010 . France inter, Le téléphone sonne , consulté le 07-05-2010 . Franglais et franricain , consulté le 07-05-2010 . Fry, Christopher , The firstborn ( 1948 ). 福春嫁女 Fussell, Paul . The Norton Book of Travel . W. W. Norton ( 1987 ). Galilei, Galileo , Sidereus Nuncius , Venetiis: Apud Thomam Baglionum, 1610 , quoted by Tufte, Edward R. , Envisioning Information , Cheshire: Graphics Press ( 1990 ), p. 97 . Galland, Antoine , Les Mille et une nuits , 1704 . Galsworthy, John , Strife . In Plays, vol 1. ( 1909 ). Gaskell, Elizabeth Cleghorn . The Grey Woman , MS. Gavioli, Laura and Gillian Mansfield . The PIXI corpora: bookshop encounters in English and Italian , Bologna: Cooperativa Libraria Universitaria Editrice ( 1990 ), p.74 . Gay, John . The Beggar's Opera ( 1728 ). Gazdar, Gerald and Mellish, Christopher . Natural language processing in Prolog . Addison-Wesley ( 1989 ), p.5 . Gazdar, Gerald , Ewan Klein, Geoffrey Pullum, and Ivan Sag : Generalized Phrase Structure Grammar , Harvard University Press ( 1985 ). Gershwin, Ira By Strauss (from An American in Paris , 1953 ). Gianfraco Contini , Poeti del Duecento , Milano-Napoli:Ricciardi I, ( 1960 ). pp 155-64. Gibbon, Edward , The History of the Decline and Fall of the Roman Empire , ( 1789 ), chapter 58 . Gide, André , Le Journal des Faux-Monnayeurs , 1927 . Gide, André , Journal : 1889-1939 , 1939 . Gilbert, William Schwenck and Sullivan, Arthur . HMS Pinafore ( 1878 ), I . Gilbert, William Schwenck and Sullivan, Arthur . The Mikado ( 1885 ). Ginsberg, Allen . My alba , Reality Sandwiches , San Francisco: City Lights, ( 1963 ). Giono, Jean , Regain , 1930 . Giraudoux, Jean , La guerre de Troie n'aura pas lieu , 1935 . Godefroy, Frédéric , Dictionnaire de l'ancienne langue française et de tous ses dialectes du IXe au XVe siècle , 1881 . Goethe, Johann Wolfgang von , tr. Philip Wayne . Faust , Part 1 , London: Penguin. ( 1949 ). Goethe, Johann Wolfgang von . Auf dem See ( 1775 ). [Goldsmith, Oliver] , The History of Little GOODY TWO-SHOES; Otherwise called, Mrs. MARGERY TWO-SHOES... (Printed for J. Newbery, 1766 ). Grallert, Till , Tools for the Computational Normalisation and Analysis of Food Prices and Food Riots in the Eastern Mediterranean (Bilād al-Shām) in the 19th and 20th Centuries . Zenodo, 2021 . https://doi.org/10.5281/zenodo.5159020 . Graves, Robert . Rough draft of letter to Desmond Flower . 17 Dec 1938 . (from Diary of Robert Graves 1935-39 and ancillary materials , compiled by Beryl Graves, C.G. Petter, L.R. Roberts, University of Victoria Libraries). Greene, Robert . Groatsworth of Wit Bought with a Million of Repentance ( 1592 ). Gregory of Tours . Ecclesiastical History of the Franks (translated by Lewis Thorpe). Greimas, Algirdas Julien et Courtés, Joseph , Sémiotique : dictionnaire raisonné de la théorie du langage , 1979 . Grune, Dick and Ceriel J. H. Jacobs . Parsing Techniques: A Practical Guide , New York and London: Ellis Horwood, 1990 , p. 24 . Guerard, Françoise . Le Dictionnaire de Notre Temps , ed. Paris: Hachette, 1990 Hall, Radclyffe . The well of loneliness . ( 1928 ). Halliday, M.A.K. and R. Hassan . Language, Context and Text: Aspects of Language in a Social-Semiotic Perspective , Oxford: Oxford University Press, 1990 , p. 104 . Hanks, Patrick . Definitions and Explanations . In J. M. Sinclair ed. Looking Up. Collins, 1987 , p. 121 . Hannam's last farewell to the world:: being a full and true relation of the notorious life and shamfull death of Mr. Richard Hannam... ( 1656 ). Hansberry, Lorraine . A raisin in the sun. ( 1959 ). Harvey, Gabriel . Four letters and certain sonnets specially touching Robert Greene... ( 1592 ). Hobbes, Thomas . Leviathan ( 1681 ). 《紅樓夢》第六回：賈寶玉初試云雨情 劉姥姥一進榮國府 〈紅頭嶼踏查報告〉，國立台灣大學圖書館：田代文庫。 Hoola Van Nooten, Berthe Fleurs, fruits et feuillages choisis de l'île de Java peints d'après nature , troisième édition par C. Muquardt, Bruxelles, 1880 . Hornby, A.S. et al . Oxford Advanced Learner's Dictionary of Current English . Oxford University Press ( 1974 ). 黃晨淳編著，《希臘羅馬神話故事》，p76。 Hugo, Victor , Notre-Dame de Paris , 1845 . Souvenir de la nuit du 4 , in : Hugo, Victor , Les Contemplations , 1853 . Hugo, Victor , Les Misérables , 1862 . A la fenêtre pendant la nuit , in : Hugo, Victor , Les Contemplations , 1856 . Huizinga, Johan , L'Automne du Moyen-Âge , 1919 . ISO 690:1987: Information and documentation – Bibliographic references – Content, form and structure clause 4.1 , p.2 . Ibsen, Henrik , tr. William and Charles Archer . Peer Gynt ( 1875 ). Ibsen, Henrik Den episke Brand KBK Collin 2869, 4º I, fol. 11v. Ibsen, Henrik Digte NBO Ms.4º 1110a, p. 36. Ibsen, Henrik Brand , The Royal Library, Denmark. KBK Collin 262, 4°, I.1.1, fol. [4]v Ibsen, Henrik , tr. R. Farquharson Sharp and Eleanor Marx-Aveling. A Doll's House In A Doll's House; and Two Other Plays by Henrik Ibsen , Everyman's library: the drama 494 , London: J. M. Dent & Sons, 1910 . Idle, Eric , Michael Palin , Graham Chapman , John Cleese , Terry Gilliam . The Complete Monty Python's Flying Circus: All the Words , Pantheon Books, ( 1989 ), 2 , p.230 . Imbs, Paul , Martin, Robert , Straka, Georges , Mélanges de linguistique française et de philologie et littérature médiévales offerts à Monsieur Paul Imbs , 1973 . Institut de Littérature Française Moderne de l’Université de Neuchâtel , Présentation du projet Cyrus , En ligne , consulté le 05-03-2010 . Ionesco, Eugène , La cantatrice chauve , 1950 . 羅貫中，《三國演義》。 Jakacki, Diane . Schema question: further constraining @subtype based on @type . January 18, 2021 . TEI (Text Encoding Initiative) public discussion list , https://listserv.brown.edu/cgi-bin/wa?A2=TEI-L;b092ac32.2101 . Jarry, Alfred , tr. Simon Watson Taylor and Cyril Connolly . The Ubu plays , London: Methuen, 1968 . Jean-Jacques Rousseau Les confessions vol 6 Jerome, Jerome K. Three men in a boat ( 1889 ), chapter 6 . Joachim Heinrich Campe Wörterbuch der Deutschen Sprache. Erster Theil. A - bis - E. , 1807 . John, Lord Sheffield , The Auto-biography of Edward Gibbon esq. , ( 1846 ), 222 . Jonson, Ben . Bartholomew Fair . Jonson, Ben . Volpone , J. B. Bamborough ed. Macmillan, 1963 , p.14 . Jonson, Ben . The Alchemist , Douglas Brown ed. London: Benn, 1966 , I.1, p.9 . Joyce, James . Ulysses : The Bodley Head, 1960 . p. 933 . Judith Patt , Michiko Warkentyne and Barry Till . Haiku: Japanese Art and Poetry . 2010 . Pomegranate Communications, Inc. San Francisco. http://www.pomegranate.com . Karlstadt, Andreas Bodenstein . Distinctiones Thomistarum . Wittenberg 1507 . In Harald Bollbuck ed. Kritische Gesamtausgabe Karlstadt I , available: http://diglib.hab.de/edoc/ed000216/start.htm Kersey, John . Dictionarium Anglo-Brittannicum: Or, a General English Dictionary . London: J. Wilde, 1715 . 2nd ed. Kilian, Wilfrid , Neige et glaciers ; notes prises au cours de géologie de la Faculté des Sciences de Grenoble par M. Alamelle , 1891-1895 . King, Martin Luther . Letter from Birmingham City Jail . Philadelphia, PA: American Friends Service Committee ( 1963 ). Kipling, Rudyard . The mother hive . In Actions and Reactions , London: Macmillan, ( 1909 ). Kipling, Rudyard . Stalky & Co. , London: Macmillan ( 1899 ). Kipling, Rudyard . Kim , Macmillan, ( 1901 ), p. 9 . Knuth, Donald Ervin . The Potrzebie System of Weights and Measures , Mad Magazine 33 June 1957 . Koltès, Bernard-Marie , Quai ouest , 1985 . Krummrey, Hans , Panciera, Silvio Criteri di edizione e segni diacritici , Tituli 2 ( 1980 ), 205-215. Kyd, Thomas . Spanish Tragedy ( 1592 ). La Fayette, Marie-Madeleine Pioche de La Vergne, comtesse de , La Princesse de Clèves , 1678 . La Fontaine, Jean de . L'Astrologue qui se laisse tomber dans un puits In Fables Choisies , Classiques Larousse, Paris: Librairie Larousse, 1 , 1940 . La Fontaine, Jean de . Le corbeau et le renard In Fables Choisies , Classiques Larousse, Paris: Librairie Larousse, 1 , 1940 . Laboratoire ATILF Analyse et traitement informatique de la langue française (ATILF) , consulté le 07-05-2010 . Laclos, Pierre Choderlos de . Les Liaisons dangereuses ( 1772 ), 1963 , p. 13 . Ladurie, Emmanuel Le Roy . Montaillou , Middlesex: Penguin Books, 1980 , p. 3 . Lamartine, Alphonse de , Méditations poétiques , 1820 . Lamothe, Alexandre de Principaux manuscrits latins et français conservés dans la Bibliothèque impériale et dans celle de l'Ermitage à Saint-Pétersbourg , édition numérique , Bibliothèque de l'école nationale des chartes , 1864 . Langendoen, D. Terence and Paul M. Postal . Vastness of Natural Languages , Oxford: Basil Blackwell, 1984 , p. 24 , note 12 . Langendoen, D. Terence and Paul Postal . The vastness of natural languages , Blackwell, , 1 , 1984 . Langland, William . The Vision of Piers Plowman . In A.V.C. Schmidt ed. Langland: Vision of Piers Plowman: \"B\" Text , opening . Latin liturgical manuscript: Bod MS. Lat liturg. b. 19 , folio 4r. Taken from the digitized image described at https://www.diamm.ac.uk/sources/522/ . Lavrentev, Alexei , Manuel d’encodage XML-TEI étendu des transcriptions de manuscrits dans le projet BFM-Manuscrits , dernier enregistrement le 26 juin 2008 . Lawrence, David Herbert . Autograph manuscript of Eloi, Eloi, lama sabachthani , Pierpont Morgan MA 1892; in 1 p.129. Layamon . Brut , fol 65v of Bodleian MS. Rawlinson Poetry 32; in 1 12(ii). Le Grand Robert de la langue française , 2004 . LeTourneau, Mark S. English Grammar , 2001 , New York: Harcourt p. 89 . Leech, G. , G. Myers , J. Thomas eds. Spoken English on Computer: Transcription, Markup and Applications . Harlow: Longman, 1995 . Leech, Geoffrey and Mick Short . Style in Fiction , London: Longman, 1981 , p.272 . Lennon, John and McCartney, Paul . She Loves You . The Beatles Anthology 1 . Capitol, 1995 . Léry, Jean de , Histoire faict en la terre de Brésil , 1580 . Lessing, Doris . Martha Quest . 1952 , pp. 52-53 . Letter of Mikołaj Orlik to Mikołaj Serafin, Gródek, January 13 [1438] . Edited by Skolimowska et al. Available from https://teipublisher.com/exist/apps/serafin/letters/serafin02.xml Lewis, Leopold Davis . The Bells , ( 1871 ), translated from Erckmann-Chatrian , Le Juif Polonais . Lewis, Wyndham . Tarr (1928), Jupiter, 1968 , p. 17 . 李白，《黃鶴樓送孟浩然之廣陵》。 李白，《靜夜思》。 《梁山伯與祝英台》 電影《梁山伯與祝英台》，舊版。 〈歷代漢文大藏經概述〉，李圓淨，原載《南行》第六期（南行學社編印）。 Lillo, George . The London Merchant ( 1731 ), epilogue . 林覺民，《與妻訣別書》。 Lincoln, Abraham . A. Lincoln to Richard Yates and William Butler , 10 Apr 1862. In Fehrenbacher, Don E. ed. Lincoln: Speeches and Writings, 2 (1859-1865). Library of America 46 , 1989 , p.315 . Lincoln, Abraham . Second Inaugural Address , 4 March 1865 . In H. S. Commager , ed., Documents of American History , 5th ed Crofts American history series. New York: Appleton-Century-Crofts, 1949 , p.442 . 劉康，《對話的喧囂：巴赫汀文化理論評述》，台北：麥田，2005，二版。 劉康，《對話的喧聲：巴赫汀文化理論述評》，台北：麥田，2005，頁20-23。 Longman Dictionary of Contemporary English . Harlow, Essex: Longman ( 1978 ). Lorris, Guillaume de et Meun, Jean de Le Roman de la Rose , 1230, 1270-1285 . Lowe, David . Lost Chicago , Boston: Houghton Mifflin, ( 1978 ), p.30 . Lowell, Amy . Autumn haze .( 1919 ). Lucie Lichtig , M. Klein de Joseph Losey : script , . l'Avant-scène cinéma , n° 175 , nov. 1976 . Luther, Martin [tr]. Die gantze Heilige Schrifft Deudsch, Wittenberg 1545. Letzte zu Luthers Lebzeiten erchienene Ausgabe, hsg. Hans Volz unter Mitarbeit von Heinz Blanke. Textredaktion Friedrich Kur , München: Rogner & Bernhard, 1972 . 《論語》卷七：憲問第十四。 羅貫中，《三國演義》。 魯迅，《狂人日記 》。 魯迅，《狂人日記》。 魯迅，《狂人日記》。 MacNeice, Louis . The Sunlight on the Garden In E.R. Dodds, The collected poems of Louis MacNeice , London: Faber, 1966 . Examples from MacWhinney, Brian , 88, 87 , cited by Johansson, S. The approach of the Text Encoding Initiative to the encoding of spoken discourse In Leech, G. , G. Myers , J. Thomas eds. Spoken English on Computer: Transcription, Markup and Applications . Harlow: Longman, 1995 . Madan, Falconer, et al , A summary catalogue of western manuscripts in the Bodleian Library at Oxford which have not hitherto been catalogued ... Oxford, 1895-1953 . 5: 515 . 1 Maingeneau, Dominique , Analyser les textes de communication , 2007 . Any issue of the Malawi Daily Times. Malle, Louis , Zazie dans le métro : script , l'Avant-scène cinéma , n° 104 , juin 1970 . Manuélian, Hélène , Schang, Emmanuel , XML, DTD et TEI pour un dictionnaire étymologique des créoles , édition électronique , 12 Octobre 2007 . The Manere of Good Lyuynge : fol. 126v of Bodleian MS Laud Misc 517; in 1 , p.8. Marbury v. Madison , 1 Cranch, 137 ( 1803 ), rpt. In H. S. Commager , ed., Documents of American History , 5th ed Crofts American history series. New York: Appleton-Century-Crofts, 1949 , p.192 . Marvell, Andrew . An Horatian Ode , Bod. MS Eng. Poet d.49. Mauriac, Claude , La Marquise sortit à cinq heures , 1961 . Mauss, Marcel , Sociologie et anthropologie , 1950 . McCarthy, Niall , No Parachute: The Highest Falls People Survived , Statista , November 18, 2020 . https://www.statista.com/chart/19708/known-occasions-where-people-survived-falls/ . McCarty, Willard . Introduction in Collaborative Research in the Digital Humanities : A volume in honour of Harold Short on the occasion of his 65th birthday, September 2010, ed. Marilyn Deegan and Willard McCarty . London: Ashgate ( 2012 ). Melville, Herman , Moby Dick . ( 1851 ). Mendès-France, Pierre , Œuvres complètes , 1984-1985 . 《孟子》〈三十三〉。 Miller, Henry . Death of a Salesman in Atkinson, Brooks, New Voices in the American Theatre , New York: Modern Library, 1955 , p.113 . Milne, A. A. The House at Pooh Corner . London: Methuen & Co., 1928 , p. 83 . Milton, John . Paradise Lost: A poem in X books ( 1667 ), I, 1-10 . Milton, John . Poems of Mr John Milton, both English and Latin... ( 1645 ). Molière , L'École des femmes , 1663 . Molière , Le Médecin malgré lui , 1667 . Molière , Le Médecin volant , 1673 . Montaigne, Michel de , Essais , 1592 . Montesquieu, Charles-Louis de Secondat, baron de la Brède et de , Lettres persanes , 1721 . Montherlant, Henry de , Pitié pour les femmes , 1936 . Moore, George . Autograph manuscript of Memoirs of my dead life , Pierpont Morgan MA 3421; in 1 Moore, Thomas . Autograph manuscript of the second version of Lalla Rookh , Pierpont Morgan MA 310; in 1 23. Moreland, Floyd L. and Rita M. Fleischer . Latin: An Intensive Course, ( 1977 ) p.53 . Des Minnesangs Frühling , Moser, Hugo , Helmut Tervooren eds. 36., neugestaltete und erweiterte Auflage I Texte , Stuttgart: S. Hirzel Verlag, 1977 . Mrs Isabella Beeton . The book of Household Management , London: S.O. Beeton ( 1861 ). Mréjen, Valérie , Eau sauvage , 2004 . Zuigan calls himself \"Master\" . Mumon Ekai . (In The Gateless Gate , Case 12.) Mustafa Siddik Altinakar , René Walther (éds.), Hydraulique fluviale. Tome 16, Écoulement et phénomènes de transport dans les canaux à géométrie simple , 2008 . Mégnin, Michel (éd.), Tunis 1900 Lehnert & Landrock photographes , 2005 . Nabokov, Vladimir Pnin (1953) , p.14 The New Penguin English Dictionary . London: Penguin Books ( 1986 ). Njal's saga . tr. Magnus Magnusson and Hermann Palsson . Penguin. ( 1960 ), chapter 12, p.60 . O'Casey, Sean . Time to go ( 1951 ). Ollagnier, Jeanne , Main , 2008 . Herodotus. On Libya , from the Histories . [Letter of Capt. E. Hopkins. Providence, 10 Sep 1764] \"[I am a curse]\" in Original Manuscript Drafts for the Song of Myself , Collection MSS3829, part of the Papers of Walt Whitman, Clifton Waller Barrett Library of American Literature, Albert and Shirley Small Special Collections Library, University of Virginia. Ormesson, Jean d' , La Douane de mer , 1993 . Orwell, George . Nineteen-Eighty-Four . London: Gollancz ( 1949 ). 大隅亜希子 . 1996 . 律令制下における権衡普及の実態: 海産物の貢納単位を中心として . 史論 49 . pp. 22–44 . http://id.nii.ac.jp/1632/00015761/ . Owen, Wilfred . Dulce et decorum est , from autograph manuscript in the English Faculty Library, Oxford University. Owenson, Sydney . The Wild Irish Girl . Ed. Kathryn Kirkpatrick . Oxford: Oxford University Press, 1999 , p. 17 . 擺夷文經，中央研究院歷史語言研究所 。 Pascal, Blaise , Le Mémorial , in Pensées , 1670 . Payne, J. Report on the compatibility of J P French's spoken corpus transcription conventions with the TEI guidelines for transcription of spoken texts , Working Paper , Dec 1992 , NERC WP8/WP4 122. Peacock, Thomas Love . Gryll Grange ( 1861 ), chapter 1 . Pennac, Daniel , La Petite marchande de prose , 1978 . Perec, Georges , Espèces d'espaces , 1974 . Perec, Georges , La Vie mode d'emploi : romans , 1978 . Perec, Georges , Les Choses , 1965 . Partial family tree for Bertrand Russell based on an example in Pereira, Fernando C.N. and Stuart M. Shieber , Prolog and Natural Language Analysis , Stanford: Center for the Study of Language and Information. ( 1987 ), p.22 . Pernoud, Régine , La Femme au temps des Cathédrales , 1982 . Perreault, Simon , vCard Format Specification Internet Engineering Task Force (IETF) ( 2011 ). https://datatracker.ietf.org/doc/html/rfc6350 . Petit Larousse en Couleurs . Paris: Larousse, ( 1990 ). Philipott, Thomas Poems. ( 1646 ). Pinsky, Robert . Essays on Psychiatrists in Sadness and Happiness ( 1975 ). Pix, Mary . The False Friend ( 1699 ). Plautus, Titus Macchius . Asinaria, or the Comedy of Asses . Edited and translated by Wolfgang de Melo . Loeb Classical Library 60. Cambridge, MA: Harvard University Press ( 2011 ). Plautus, Titus Macchius . Menaechmi . Polac, Michel , Un fils unique : script , l'Avant-scène cinéma , n° 99 , janvier. 1970 . Pope, Alexander . The Rape of the Lock ( 1714 ) III.7 . Pope, Alexander . An Essay on Criticism ( 1711 ). Pope, Alexander . Dunciad Variorum ( 1729 ), III.284 . From letter 'JK' found in Poulson's Daily Advertiser, 8 Oct 1835 . Proust, Marcel , A la recherche du temps perdu : Du côté de chez Swann , 1913 . Queneau, Raymond . Exercices de style . Paris: Gallimard, ( 1947 ), p. 192 . 瓊瑤，《還珠格格》。 Queneau, Raymond , Journaux , 1914-1965 . Rabelais, François . Gargantua Lyon, 1542 Rabelais, François Tiers livre des faictz et dictz Heroïques du noble Pantagruel... ( 1546 ), adapted from the website at http://www.bvh.univ-tours.fr/Epistemon/ Renard, Jules , Journal : 1887-1910 , 1910 . Reference from the bibliography in Reps, Thomas William and Teitelbaum, Tim eds. The Synthesizer Generator: A system for constructing language-based editors , New York and Berlin: Springer-Verlag, 1989 , p.304 . 日本法隆寺貝葉心經 (Wikipedia Sept 2008). Richardson, Samuel . Clarissa; or the History of a Young Lady ( 1748 ), 2 Letter XIV. Robert, Paul . Le Petit Robert . Paris: Dictionnaires Le Robert ( 1967 ). Rohmer, Eric , Ma nuit chez Maud : script , l'Avant-scène cinéma , n°98 , 2001 . Romains, Jules , Knock , 1923 . Rostand, Edmond , Cyrano de Bergerac , 1898 . Roubaud, Jacques , La Boucle , 1993 . Rowling, J. K. The Sorting Hat . In Harry Potter and the Sorcerer's Stone , New York: Scholastic, Inc. ( 1999 ), chapter 7 , p. 121 . The Saga of the Volsungs: the Norse epic of Sigurd the Dragon Slayer . trans. Jesse L. Byock . University of California Press ( 1990 ). Le Sanctoral du lectionnaire de l'office dominicain (ms. Rome, Sainte-Sabine XIV L 1, f.142r et 189r-230v, Ecclesiasticum officium secundum ordinem fratrum praedicatorum) , édition électronique par l' Ecole nationale des chartes , d'après l'édition d' Anne-Élisabeth Urfels-Capot (Paris : Ecole nationale des chartes, 2007). 崎山理 . 1985 インドネシア語 . 講座日本語学 11 . 外国語との対照II . 東京:明治書院 61-80 三毛，〈沙漠中的飯店〉，《撒哈拉的故事》。 《三家詩鈔》，華培昌，藏於國家圖書館。 Sapir, Edward . Language: an introduction to the study of speech , New York: Harcourt, Brace and World, 1921 , p.79 . Shakespeare William , Richard III , 1597 . Shakespeare, William . Henry V In Mr. William Shakespeares Comedies, Histories, & Tragedies , London: Jaggard and Blount, 1623 . Shakespeare, William . Henry V In The Works of Shakespeare in seven volumes , ed. Lewis Theobald , London: Bettesworth, Hitch, Tonson et al, ( 1733 ). Shakespeare, William . Antony and Cleopatra , IV.4, 14-21 . Shakespeare, William . Merchant of Venice , I.ii, speech 5 (Portia) . Shakespeare, William . Macbeth , Act V, Scene 1 . Shakespeare, William . Antony and Cleopatra ( 1623 ), V. ii . Shakespeare, William . Hamlet In Stanley Wells and Gary Taylor eds. The Complete Works , Oxford: Clarendon Press, 1986 , I.i . Shakespeare, William . Hamlet , London: Valentine Simmes. ( 1603 ), I.i . Shakespeare, William . The Tempest In Mr. William Shakespeares Comedies, Histories, & Tragedies , London: Jaggard and Blount, ( 1623 ). Shakespeare, William . Twelfth Night, or What you Will In Mr. William Shakespeares Comedies, Histories, & Tragedies , London: Jaggard and Blount, ( 1623 ). Shakespeare, William , The Sonnets ( 1609 ), 18 . Shakespeare, William , The Sonnets ( 1609 ), 130 . 莎士比亞，《終成眷屬 》。 莎士比亞，《馬克白》。 Sharing Ancient Wisdoms , 2013 , available: http://www.ancientwisdoms.ac.uk/ . Shaw, George Bernard . Heartbreak House: a fantasia in the Russian manner on English themes ( 1919 ). Shaw, George Bernard . Pygmalion , 1913 . Shields, David . Dead Languages , HarperCollins Canada/Perennial Rack, rpt. 1990 , p.10 . Sinclair, John ed. Collins COBUILD English Language Dictionary . London and Glasgow: Collins, ( 1987 ), p. 337 s.v. croissant. 京劇《四郎探母》，1947年梅蘭芳演出。 Smith, Adam . An Inquiry into the Nature and Causes of the Wealth of Nations , London. ( 1776 ), index to vol. 1 . Smith, Sydney . Autograph letter . In Pierpont Morgan library; 1 11. Smith, William . A New Classical Dictionary of Greek and Roman Biography, Mythology, and Geography, Partly Based Upon the Dictionary of Greek and Roman Biography and Mythology , New York: Harper & Brothers, Publishers, 1860 , 1026 . Southey, Robert . Autograph manuscript of The Life of Cowper . In Pierpont Morgan MA 412 ( 1 15). Soyinka, Akinwande Oluwole Wole . Madmen and Specialists , London: Methuen ( 1971 ). Spenser, Edmund . The Faerie Queene: Disposed into twelue bookes, Fashioning XII. Morall vertues. ( 1596 ). Sterne, Laurence . The Life and Opinions of Tristram Shandy, Gentleman . ( 1760 ). Stow, John A survey of the cities of London and Westminster: containing the original, antiquity, increase, modern estate and government of those cities. Written at first in the year MDXCVIII. By John Stow, citizen and native of London. ... Now lastly, corrected, improved, and very much enlarged: ... by John Strype, ... In six books. ... (London c.1525 - London 1605). Sudetic, Chuck Serbs Tighten Grip On Eastern Bosnia. New York Times, April 20, 1992 . SUEtheTrex, Twitter biography . https://twitter.com/SUEtheTrex . Accessed March 25th, 2020 . Sutherland, L.S. and L.G. Mitchell eds. The Eighteenth century , The History of the University of Oxford V , p.178 . 蘇童，《妻妾成群》。 蘇軾，《定風波》。 Swift, Jonathan . Travels into Several Remote Nations of the World, in Four Parts. By Lemuel Gulliver... ( 1735 ). Swift, Jonathan . Law is a bottomless pit, or the history of John Bull ( 1712 ). Swinburne, Algernon Charles . Poems and Ballads (First Series) . London: Chatto & Windus. ( 1904 ). Swinnerton, Frank Arthur . The Georgian Literary Scene 1910-1935 , 1938 , London: J. M. Dent, p. 195 . 台灣，《結婚入盟誓》，1997年5月。 台灣區三碼與三加二碼郵遞區號 《台灣叢書》，伊能嘉矩著，藏於國立台灣大學圖書館。(http://catalog.ndap.org.tw/?URN=2155366 (Aug 2008)). 唐．白居易．琵琶行 Taylor, John The Cold Tearme or, The Frozen age, Or, The Metamorphosis of the Riuer of Thames. London, 1621. [STC (2nd ed.) 23910]. The Castle of the Fly , in Russian Fairy Tales, translated by Norbert Guterman from the collections of Aleksandr Afanas'ev, illustrations by Alexander Alexeieff, folkloristic commentary by Roman Jakobson (New York: Pantheon Books, 1947, rpt. [n.d.]), p. 25. The Daily Telegraph , 21 Dec 1992 . The Guardian, 26 Oct 1992 , p. 2 The Guardian, 21 Dec 1992 , p. 2 . The Holy Bible, conteyning the Old Testament and the new... appointed to be read in Churches. ( 1611 ), Genesis 1:1 . The Independent, 26 Oct 1775 , headline . Thurber, James . The 13 Clocks ( 1950 ). Tolkien, J. R. R. The Monsters and the Critics . London: George Allen & Unwin ( 1983 ). Townsend, Sue . The growing pains of Adrian Mole ( 1984 ), p.43 . Trollope, Anthony . An Autobiography ( 1883 ). Trollope, Anthony . North America ( 1862 ). Truffaut, François et Gruault, Jean , Les deux Anglaises et le continent : script , l'Avant-scène cinéma , n° 121 , nov. 1971 . Tufte, Edward R. , Envisioning Information , Cheshire: Graphics Press. ( 1990 ). United States Code Title 17, Section 107, found at http://www.copyright.gov/title17/92chap1.html#107 . United States District Court for the Middle District of Pennsylvania . Kitzmiller v. Dover Area School District et al. : 2005 . 04cv2688, p. 33 . Available from http://ncse.com/files/pub/legal/kitzmiller/highlights/2005-12-20_Kitzmiller_decision.pdf and transcribed at http://en.wikisource.org/wiki/Kitzmiller_v._Dover_Area_School_District_et_al. . Valéry, Paul , Monsieur Teste , 1929 . Vergil (Publius Vergilius Naso) . Aeneid , I.1 . Verne, Jules , Cinq semaines en ballon , 1863 . Verne, Jules , La Chasse au météore , 1908 . Verne, Jules , Vingt mille lieues sous les mers , 1870 . Vinge, Vernor Across realtime ch 10 ( 1986 ). Viton de Saint-Allais, Nicolas , Dictionnaire encyclopédique de la noblesse de France , 1816 . Vóluspá recto of folio 5 of the unique manuscript of the Elder Edda. Codex Regius, ed. L. F. A. Wimmer and F. Jónsson (Copenhagen 1891 ). Wanklyn, M.D.G. et al. Gloucester Port Books, 1575-1765 . Available from http://discover.ukdataservice.ac.uk/catalogue?sn=3218 . Wanton, Joseph . Unpublished letter to Nicholas Brown and Co , 1761 Brown University Steering Committee on Slavery and Justice: Repository of Historical Documents. ( http://library.brown.edu/cds/slaveryandjustice/ ). Warriner, John E. English Composition and Grammar ( 1988 ), p.280 . Webster's Seventh Collegiate Dictionary . Springfield, Mass. G. & C. Merriam Co. ( 1975 ). 魏飴，《小說鑑賞入門》，台北：萬卷樓，1999。 Weil, Simone , Lettres à Antonio Atarès , in Oeuvres complètes 1988- . Williams, Nigel . The Wimbledon Poisoner ( 1990 ), p. 204 . Winock, Michel , Jeanne et les siens : récit , 2003 . Wölfflin, Heinrich , trans. Hottinger, Marie Donald Mackie ( 1932 ). Principles of art history: the problem of the development of style in later art. . Originally published as Kunstgeschichtliche Grundbegriffe (1915). Woolf, Virginia . Mrs Dalloway ( 1925 ), p.64, p.65 . Wordsworth, William . Scorn not the sonnet in Poetical Works ( 1827 ). Wordsworth, William . The Prelude ( 1850 ). Wrenn C. L. ed. Beowulf: with the Finnesburg fragment , London: Harrap ( 1953 ). 吳承恩，《西遊記》。 Wycherley, William . The Country Wife ( 1675 ). 夏宇，〈甜蜜的復仇〉，《備忘錄》。 蕭紅，《呼蘭河傳》。 幼莘貢俚賀曉濤之新婚賀詞 余秋雨 元曲。馬致遠，《天淨沙：秋思》。 張錯， 《西洋文學術與手冊》，台北：書林，2005。頁201。 珍．奧斯丁，《傲慢與偏見》。 中國青年守則 中國學位論文全文數據庫 周慧玲，《表演中國：女明星表演文化視覺政治1910-1945》，2004。 朱自清， 《憶》跋。 Zimman, Lal . Lal Zimman http://lalzimman.com/bio.html , accessed February 1, 2021 . Zupko, Ronald Edward British Weights & Measures: A History from Antiquity to the Seventeenth Century . Madison: University of Wisconsin Press, 141-151 . No source, made up for these Guidelines . Example is copied from the source of these Guidelines . Undetermined. 6.2 Works Cited Elsewhere in the Text of these Guidelines 6.3 Reading List The following lists of readings in markup theory and the TEI derive from work originally prepared by Susan Schreibman and Kevin Hawkins for the TEI Education Special Interest Group, recoded in TEI P5 by Sabine Krott and Eva Radermacher. They should be regarded only as a snapshot of work in progress, to which further contributions and corrections are welcomed (see further http://www.tei-c.org/Support/Learn/tei_bibliography.xml ). 6.3.1 Theory of Markup and XML 6.3.2 TEI","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">6 Bibliography</span>"}
{"link":"p5.xml?id=DEPRECATIONS","tag":"guidelines","content":"7 Deprecations 7.1 Items Scheduled to be Removed This appendix provides a partial list of items (elements, attributes, attribute values, datatypes etc.) which are deprecated in this revision of the TEI Guidelines (revision e64bcedf9 of TEI P5 Version 4.5.0a ).","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">7 Deprecations</span>"}
{"link":"p5.xml?id=PREFS","tag":"guidelines","content":"8 Prefatory Notes This Appendix contains (in reverse chronological order) the Introductory Notes prefixed to each revision of the TEI Guidelines since its first publication in 1994. 8.1 Prefatory Note (March 2002) The primary goal of this revision has been to make available a new and corrected version of the TEI Guidelines which: is expressed in XML and conforms to a TEI-conformant XML DTD; generates a set of DTD fragments that can be combined together to form either SGML or XML document type definitions; corrects blatant errors, typographical mishaps, and other egregious editorial oversights; can be processed and maintained using readily available XML tools instead of the special-purpose ad hoc software originally used for TEI P3. A second major design goal of this revision has been to ensure that the DTD fragments generated would not break existing documents: in other words, that any document conforming to the original TEI P3 SGML DTD would also conform to the new XML version of it. Although full backwards compatibility cannot be guaranteed, we believe our implementation is consistent with that goal. In most respects, the TEI Guidelines have stood the test of time remarkably well. The present edition makes no substantial attempt to rewrite those few parts of them which have now been rendered obsolete by changes since their first publication, though an indication is given in the text of where such rewriting is now considered necessary. Neither does the present version attempt to address any of the many possible new areas of digital activity in which the TEI approach to standardization may have something to offer. Both these tasks require the existence of an informed and active TEI Council to direct and validate such extension and maintenance work, in response to the changing needs and priorities of the TEI user community. Two exceptions to the above principles may be cited: firstly, the chapter which originally provided a Gentle Introduction to SGML has been completely rewritten to provide a similarly gentle introduction to XML; secondly the chapter on character sets has been completely revised in light of the close connexion between Unicode and XML. The editors gratefully acknowledge the assistance of the ad hoc workgroup chaired by Christian Wittern, which undertook to provide expert advice and correction at very short notice, in the latter task. The preparation of this new version relied extensively on preliminary work carried out by the former North American editor of the TEI Guidelines, C.M. Sperberg-McQueen. In a TEI working paper written in 1999 1 he sketched out a precise blueprint for the conversion of the TEI from SGML to XML, which we have implemented, with only slight modification. The Editors would also like to express thanks to the team of volunteers from the TEI community who helped us with the task of proofreading the first draft during the summer of 2001; and to Sebastian Rahtz of Oxford University Computing Services, without whose skill and enthusiasm this new edition would not have been possible. A substantial proportion of the work of preparing this new edition was funded with the assistance of a grant from the US National Endowment for the Humanities, whose continued support of the TEI has also been crucial to the effort of setting up the TEI Consortium. Finally, we would like to thank all our colleagues on the interim management board of the TEI Consortium, in particular its Chairman John Unsworth, for their continued support of the TEI's work, and their willingness to devote effort to the difficult task of overseeing its transition to a new organizational infrastructure. Summary details of the changes made in the present and previous editions are given in their Prefatory Notes, all of which are now reproduced in an Appendix to the present edition: see 8 Prefatory Notes . 8.2 Introductory Note (November 2001) To complete the work started in June of this year, the TEI Editors asked for volunteers from the TEI community to proofread the preliminary XML version. 24 volunteers responded to this call during August, and gave invaluable help both by identifying a number of previously un-noticed errors, and by suggesting areas in which more substantial revision should be undertaken in the future. The Editors gratefully acknowledge the assistance of the following individuals during this exercise: Jimmy Adair, Syd Bauman, Michael Beddow, Steven Bird, Lisa Charlong, Matthew Driscoll, Patrick Durusau, Tomaz Erjavec, Nick Finke, Tim Finney, Julia Flanders, Mike Fraser, Pankaj Kamthan, François Lachance, Terry Langendoen, Anne Mahoney, Gregory Murphy, Daniel Pitti, Rafal Prinke, Laurent Romary, Stewart Russell, Gary Simons, Elisabeth Solopova, Christian Wittern, Martin Wynne. In addition to error correction, and clear delineation of those sections in which substantial revision is yet to be undertaken for TEI P5, the present draft differs from earlier ones in the following respects: Formal Public Identifiers have been introduced as a means of constructing TEI DTDs and an SGML Open Catalog is now included with the standard release; Some systematic errors and omissions in the reference section have been removed; the format of this section has been substantially changed, we hope for the better; The chapters on obtaining the TEI DTDs and WSDs have been brought up to date; the chapter on modification has been expanded to include a discussion of the TEI Lite customization; All examples and cited markup has been checked for XML validity against the published DTDs, and corrected where faulty; examples have been formatted in a (more or less) consistent style. 8.3 Introductory Note (June 2001) This is a preliminary version of a revised and fully XML-compliant edition of the TEI Guidelines. Although work on revising and correcting the text of the document is incomplete, by making available this preliminary version we hope to facilitate testing of the XML document type declarations which it describes by as wide a range of TEI users as possible. The primary goal of this revision is to make available the corrected (May 1999) edition of the Guidelines in a new version which: is expressed in XML and itself conforms to a TEI-conformant XML DTD; generates a set of XML DTD fragments that can be combined together in the same way as the existing TEI (P3) SGML DTD fragments to form true TEI XML DTD fragments without loss of functionality; can be processed and maintained using readily available XML tools instead of the special-purpose ad hoc software originally used for TEI P3. A major design goal of both this and the previous revision has been to ensure that the DTD fragments generated would not break existing documents: in other words, that any document conforming to the original TEI P3 SGML DTD would also conform to the new XML version of it. Although full backwards compatibility cannot be guaranteed, we believe our implementation is consistent with that goal. In making this new version, we relied extensively on preliminary work carried out by the outgoing North American editor of the TEI Guidelines, Michael Sperberg-McQueen. In a TEI working paper written in 1999, TEI ED W69, Michael sketched out a precise blueprint for the conversion of the TEI from SGML to XML, which we have implemented, with only slight modification. The current TEI editors wish to express here our admiration for the detailed care put into that paper, without which our task would have been forbiddingly difficult, if not impossible. We would also like to express our thanks to Sebastian Rahtz of Oxford University Computing Services, for his invaluable assistance in preparing this new edition. We list here in summary form all the changes made in the present edition. Full technical details are provided in documents TEI EDW69 and TEI EDW70, available from the TEI web site. A new keyword TEI.XML has been added. By setting its value to INCLUDE, rather than the default IGNORE, the user can request generation of an XML rather than an SGML DTD; The content models of all elements have been checked, and, where necessary, changed so that they are equally valid as SGML or as XML; The declared value for all attributes has been changed to a form which is equally valid as SGML or as XML; All the examples have been checked for conformance and converted to use XML syntax, where possible. (This process is currently incomplete.) Some errors and duplications in the class membership of elements from the names and dates tagsets have been corrected. To implement the first of these, we have parameterized the tag omissibility indicators - o and - - used within element declarations in the DTD. When XML is to be generated, the parameter entities concerned are redeclared with the null string as their value. The second change was achieved by removing SGML-specific features (ampersand connectors, inclusion and exclusion exceptions, various types of attribute content) from the DTD and revising the syntax of the DTD to conform to XML requirements (specifically in the representation of mixed-content models, and by removing redundant parentheses). In making these changes, we took care to ensure that the resulting content model would continue to accept existing valid documents, though in the nature of things it could not be guaranteed to reject the same set of documents. As further discussed in EDW69 and EDW70, some constraints (exclusion exceptions, for example) which could be carried out by a generic SGML parser using TEI P3 will have to be implemented by a special purpose TEI validator using TEI P4. Much work remains to be done, firstly in testing the new DTD fragments against as wide a range of TEI materials as possible, secondly in revising the discussion of markup theory and practice within the text to reflect current thinking. A few sections of the current text (the Gentle Introduction to SGML and the discussion of Extended Pointer syntax are two examples) will need substantial rewriting. For the most part, however, we think the Guidelines have stood the test of time well and can be recommended to a new generation of text encoders scarcely born at the time they were first formulated. Lou Burnard and Steve De Rose (Editors) Oxford and Providence, May 2001. 8.4 Introductory Note (May 1999) No work of the size and complexity of the TEI Guidelines could reasonably be expected to be error-free on publication, nor to remain long uncorrected. It has however taken rather longer than might have been anticipated to complete production of the present corrected reprint of the first edition, for which we present our apologies, both to the many individuals and institutions whose enthusiastic adoption and promotion of the TEI encoding scheme have ensured its continued survival in the rapidly changing world of digital scholarship, and also to the many helpfully critical users whose assiduous uncovering and reporting of our errors have made possible the present revision. At its first meeting in Bergen, in June 1996, the TEI Technical Review Committee (TRC) approved the setting up of a small working committee to oversee the production of a revised edition of the TEI Guidelines , to include corrections of as many as possible of the `corrigible errors' notified to the editors since publication of the first edition in May 1994, the bulk of which are summarized in a TEI working paper (TEI EDW67, available from the TEI web site). During the spring of 1997, this TRC Core Subcommittee reviewed nearly 200 comments and proposals which the editors had collected from public debate and discussion over the preceding two years, and provided invaluable technical guidance in disposition of them. We are glad to take this opportunity of expressing our thanks to this subcommittee, whose members were Elli Mylonas, Dominic Dunlop, and David T. Barnard. The work of making the corrections and regenerating the text proceeded rather fitfully during 1998 and 1999, largely because of increasing demands on the editors' time from their other responsibilities. With the establishment of the new TEI Consortium, it is be hoped that maintenance of the Guidelines will be placed on a more secure footing. Some specific areas in which we anticipate future revisions being carried out are listed below. 8.4.1 Typographic Corrections Made examples of TEI markup throughout the text were all checked against the relevant DTD fragment and an embarassingly large number of tagging errors corrected; various minor typographic and spelling errors were corrected; the corrigible errors listed in working paper TEI EDW67 were all corrected: some of these required specific changes to the DTD which are listed in the next section. 8.4.2 Specific Changes in the DTD A major goal of this revision was to avoid changes which might invalidate existing data, even where existing constructs seemed erroneous in retrospect. To that end, wherever changes have been made in content models for existing elements, they have as far as possible been made so that the DTD will now accept a superset of what was previously legal. Only one new element ( ab ) has been added. Where possible, a few content models have been changed in such a way as to facilitate conversion to XML, but XML compatibility is not a goal of this revision. Brief details of all changes made in the DTD follow: Several changes were made in class membership, in order to correct unreachability problems. Specifically: elements geogName , persName , placeName were added to the m.data class; geogName and placeName were removed from the m.placepart class; the elements addSpan , delSpan , gap , were added to the m.Edit class; a new class m.editIncl was defined, with members addSpan , delSpan , and gap ; this class was then added to the global inclusion class m.globIncl along with anchor (erroneously a member of the m.Seg class, from which it is now removed), m.metadata and m.refsys ; elements geogName , persName , placeName were added to the m.data class; geogName and placeName were removed from the m.placepart class; the elements addSpan , delSpan , gap , were added to the m.Edit class; a new class m.editIncl was defined, with members addSpan , delSpan , and gap ; this class was then added to the global inclusion class m.globIncl along with anchor (erroneously a member of the m.Seg class, from which it is now removed), m.metadata and m.refsys ; added name element to m.addrPart class; added dateline to m.divtop and m.divbot classes; added epilogue and castList to m.dramafront class; added divGen to m.front class; added dateline to m.divtop and m.divtop classes; added u element to a.declaring class; defined new class m.fmchunk (front matter chunk), comprising argument , byline , docAuthor , docDate , docEdition , docImprint , docTitle , epigraph , head , and titlePart for use in simplification of the content model for front element; defined new element ab (anonymous block), and added it to the m.chunk class; corrected an error whereby global attributes were not properly defined for elements specifying a non-default value for any of the a.global attributes: elements affected include: foreign , hi , del , pb , lb , cb , language , anchor , and when ; changed content models to permit empty list and empty availability elements; changed content model for series element to permit #PCDATA; changed content model for setting element to permit date element as a direct child; added a key attribute to the distance element, for consistency with other elements in its class; changed content model for orgName element to make it more consistent with e.g. persName ; changed content model for opener element to include argument , byline , and epigraph ; changed content models for app , rdgGrp , and wit elements; revised attributes on hand element. A number of content models were changed with a view to easing the creation of an XML compatible version of the Guidelines. Specifically: removed ampersand connectors from cit , respStmt , publicationStmt , and graph ; changed the mixed content models for sense , re , persName , placeName , geogName , dateStruct , timeStruct , and dateline to make them XML-conformant. 8.4.3 Outstanding Errors A small number of other known problems remain uncorrected in this version and are briefly listed below. Please watch the TEI mailing list for announcements of their correction. elements of class model.inter don't always behave as they should (e.g. one cannot insert a table before anything else in a div ); some mixed-content problems consequent on the definition of macro.specialPara need to be addressed systematically; in particular, the treatment of list items or notes which contain several paragraphs continues to surprise many users: no whitespace is allowed between the paragraphs; the resp attributes on editorial elements are not consistently defined; the discussions of DTD invocation, and the DTD itself, all use system identifiers instead of formal public identifiers. Our next priority however will be the production of a fully XML-compliant version of the TEI DTD, work on which is already well advanced. 8.5 Preface (April 1994) These Guidelines are the result of over five years' effort by members of the research and academic community within the framework of an international cooperative project called the Text Encoding Initiative (TEI), established in 1987 under the joint sponsorship of the Association for Computers and the Humanities, the Association for Computational Linguistics, and the Association for Literary and Linguistic Computing. The impetus for the project came from the humanities computing community, which sought a common encoding scheme for complex textual structures in order to reduce the diversity of existing encoding practices, simplify processing by machine, and encourage the sharing of electronic texts. It soon became apparent that a sufficiently flexible scheme could provide solutions for text encoding problems generally. The scope of the TEI was therefore broadened to meet the varied encoding requirements of any discipline or application. Thus, the TEI became the only systematized attempt to develop a fully general text encoding model and set of encoding conventions based upon it, suitable for processing and analysis of any type of text, in any language, and intended to serve the increasing range of existing (and potential) applications and use. What is published here is a major milestone in this effort. It provides a single, coherent framework for all kinds of text encoding which is hardware-, software- and application-independent. Within this framework, it specifies encoding conventions for a number of key text types and features. The ongoing work of the TEI is to extend the scheme presented here to cover additional text types and features, as well as to continue to refine its encoding recommendations on the basis of extensive experience with their actual application and use. We therefore offer these Guidelines to the user community for use in the same spirit of active collaboration and cooperation with which they have so far been developed. The TEI is committed to actively supporting the wide-spread and large-scale use of the Guidelines which, with the publication of this volume, is now for the first time possible. In addition, we anticipate that users of the TEI Guidelines will in some instances adapt and extend them as necessary to suit particular needs; we invite such users to engage in the further development of these Guidelines by working with us as they do so. Like any standard which is actually used, these Guidelines do not represent a static finished work, but rather one which will evolve over time with the active involvement of its community of users. We invite and encourage the participation of the user community in this process, in order to ensure that the TEI Guidelines become and remain useful in all sorts of work with machine-readable texts. This document was made possible in part by financial support from the U.S. National Endowment for the Humanities, an independent federal agency; Directorate General XIII of the Commission of the European Communities; the Andrew W. Mellon Foundation; and the Social Science and Humanities Research Council of Canada. Direct and indirect support has also been received from the University of Illinois at Chicago, the Oxford University Computing Services, the University of Arizona, the University of Oslo and Queen's University (Kingston, Ont.), Bellcore (Bell Communications Research), the Istituto di Linguistica Computazionale (C.N.R.) Pisa, the British Academy, and Ohio State University, as well as the employers and host institutions of the members of the TEI working committees and work groups listed in the acknowledgments. The production of this document has been greatly facilitated by the willingness of many software vendors to provide us with evaluation versions of their products. Most parts of this text have been processed at some time by almost every currently available SGML-aware software system. In particular, we gratefully acknowledge the assistance of the following vendors: Berger-Levrault AIS s.a. (for Balise); E2S n.v. (for E2S Advanced SGML Editor); Electronic Book Technology (for DynaText); SEMA Group and Yard Software (for Mark-It and Write-It); Software Exoterica (for CheckMark and Xtran); SoftQuad, Inc., (for Author/Editor and RulesBuilder); Xerox Corporation (for Ventura Publisher). Details of the software actually used to produce the current document are given in the colophon at the end of the work. 8.6 Acknowledgments Many people have given of their time, energy, expertise, and support in the creation of this document; it is unfortunately not possible to thank them all adequately. Below are listed those who have served as formal members of the TEI's Work Groups and Working Committees during its six-year history; others not so officially enfranchised also contributed much to the quality of the result. The editors take this opportunity to acknowledge our debt to those who have patiently endured and corrected our misunderstandings of their work; we hope that they will feel the wait has not been in vain. For any errors and inconsistencies remaining, we must accept responsibility; any virtue in what is here presented, we gladly ascribe to the energies of the keen intellects listed below. C. M. Sperberg-McQueen and Lou Burnard 8.6.1 TEI Working Committees (1990-1993) Chair: Dominik Wujastyk (Wellcome Institute for the History of Medicine) Members 1990–1992: J. D. Byrum (Library of Congress); Marianne Gaunt (Rutgers University); Richard Giordano (Manchester University); Barbara Ann Kipfer (Independent Consultant); Hans Jørgen Marker (Danish Data Archive, Odense); Marcia Taylor (University of Essex); Chair: Dominik Wujastyk (Wellcome Institute for the History of Medicine) Members 1990–1992: J. D. Byrum (Library of Congress); Marianne Gaunt (Rutgers University); Richard Giordano (Manchester University); Barbara Ann Kipfer (Independent Consultant); Hans Jørgen Marker (Danish Data Archive, Odense); Marcia Taylor (University of Essex); Chair: Stig Johansson (University of Oslo) Members 1990–1992: Roberto Cencioni (Commission of the European Communities); David R. Chesnutt (University of South Carolina); Robin C. Cover (Dallas Theological Seminary); Steven J. DeRose (Electronic Book Technology Inc); David G. Durand (Boston University); Susan M. Hockey (Oxford University Computing Service); Claus Huitfeldt (University of Bergen); Francisco Marcos-Marin (University Madrid); Elli Mylonas (Harvard University); Wilhelm Ott (University of Tübingen); Allen H. Renear (Brown University); Manfred Thaller (Max-Planck-Institut für Geschichte, Göttingen) Chair: Stig Johansson (University of Oslo) Members 1990–1992: Roberto Cencioni (Commission of the European Communities); David R. Chesnutt (University of South Carolina); Robin C. Cover (Dallas Theological Seminary); Steven J. DeRose (Electronic Book Technology Inc); David G. Durand (Boston University); Susan M. Hockey (Oxford University Computing Service); Claus Huitfeldt (University of Bergen); Francisco Marcos-Marin (University Madrid); Elli Mylonas (Harvard University); Wilhelm Ott (University of Tübingen); Allen H. Renear (Brown University); Manfred Thaller (Max-Planck-Institut für Geschichte, Göttingen) Chair: D. Terence Langendoen (University of Arizona) Members 1990–1992: Robert Amsler (Bell Communications Research); Stephen Anderson (Johns Hopkins University); Branimir Boguraev (IBM T. J. Watson Research Center); Nicoletta Calzolari (University of Pisa); Robert Ingria (Bolt Beranek Newman Inc); Winfried Lenders (University of Bonn); Mitch Marcus (University of Pennsylvania); Nelleke Oostdijk (University of Nijmegen); William Poser (Stanford University); Beatrice Santorini (University of Pennsylvania); Gary Simons (Summer Institute of Linguistics); Antonio Zampolli, University of Pisa. Chair: D. Terence Langendoen (University of Arizona) Members 1990–1992: Robert Amsler (Bell Communications Research); Stephen Anderson (Johns Hopkins University); Branimir Boguraev (IBM T. J. Watson Research Center); Nicoletta Calzolari (University of Pisa); Robert Ingria (Bolt Beranek Newman Inc); Winfried Lenders (University of Bonn); Mitch Marcus (University of Pennsylvania); Nelleke Oostdijk (University of Nijmegen); William Poser (Stanford University); Beatrice Santorini (University of Pennsylvania); Gary Simons (Summer Institute of Linguistics); Antonio Zampolli, University of Pisa. Chair: David T. Barnard (Queen's University) Members 1990–1994: David G. Durand (Boston University); Jean-Pierre Gaspart (Associated Consultants and Software Engineers sa/nv); Nancy M. Ide (Vassar College); Lynne A. Price (Software Exoterica / Xerox PARC); Frank Tompa (University of Waterloo); Giovanni Battista Varile (Commission of the European Communities). Chair: David T. Barnard (Queen's University) Members 1990–1994: David G. Durand (Boston University); Jean-Pierre Gaspart (Associated Consultants and Software Engineers sa/nv); Nancy M. Ide (Vassar College); Lynne A. Price (Software Exoterica / Xerox PARC); Frank Tompa (University of Waterloo); Giovanni Battista Varile (Commission of the European Communities). In addition, the two TEI editors served ex officio on each committee. Following publication of the first draft of the TEI Guidelines (P1) in November 1990, a number of specialist work groups were charged with responsibility for drafting revisions and extensions, which, together with material already presented in P1, constitute the basis of the present work. In addition, many members of the work groups listed below met on three occasions to review the emerging proposals in detail at technical review meetings convened by the TEI Steering Committee. These meetings, held in Myrdal, Norway (November 1991), Chicago (May 1992) and Oxford (May 1993), were largely responsible for the technical content and organization of the present work. Attendants at these meetings are starred in the list below. Chair: Harry Gaylord* (University of Groningen); Syun Tutiya* (Chiba University). Chair: Peter Robinson* (Oxford University); David Chesnutt* (University of South Carolina); Robin Cover* (Dallas Theological Seminary); Robert Kraft (University of Pennsylvania); Peter Shillingsburg (Mississippi State University). Chair: Steven J. DeRose* (Electronic Book Technologies Inc); David Durand (Boston University); Edward A. Fox (Virginia State University); Eve Wilson (University of Kent). Chair: Paul Ellison* (University of Exeter); Anders Berglund (Independent Consultant); Dale Waldt (Thompson Professional Publishing). Chair: Douglas Biber* (University of Northern Arizona); Jeremy Clear (Birmingham University); Gunnel Engwall (University of Stockholm). Chair: Claus Huitfeldt* (University of Bergen); Dino Buzzetti (University of Bologna); Jacqueline Hamesse (University of Louvain); Mary Keeler (Georgetown University); Christian Kloesel (Indiana University); Allen Renear* (Brown University); Donald Spaeth (Glasgow University). Chair: David Robey* (University of Manchester); Elaine Brennan* (Brown University); David Chisholm (University of Arizona); Willard McCarty (University of Toronto). Chair: Elli Mylonas* (Harvard University); John Lavagnino* (Brandeis University); Rosanne Potter (University of Iowa). Chair Thomas N. Corns* (University of Wales); Christian Delcourt (University of Liège). Chair: D. Terence Langendoen* (University of Arizona); Stephen R. Anderson (Johns Hopkins University); Nicoletta Calzolari (University of Pisa); Geoffrey Sampson* (University of Sussex); Gary Simons* (Summer Institute of Linguistics). Chair: Stig Johansson* (University of Oslo); Jane Edwards (University of California at Berkeley); Andrew Rosta (University College London). Chair: Paul Fortier* (University of Manitoba); Christian Delcourt (University of Liège;); Ian Lancashire (University of Toronto); Rosanne Potter (University of Iowa); David Robey* (University of Manchester). Chair: Daniel Greenstein* (University of Glasgow); Peter Denley (Queen Mary Westfield College, London); Ingo Kropac (University of Graz); Hans Jørgen Marker (Danish Data Archive, Odense); Jan Oldervoll (University of Tromsø); Kevin Schurer (University of Cambridge); Donald Spaeth (Glasgow University); Manfred Thaller (Max-Planck-Institut für Geschichte, Göttingen). 3 Chairs: Robert Amsler* (Bell Communications Research) and Nicoletta Calzolari (University of Pisa); Susan Armstrong-Warwick (University of Geneva); John Fought (University of Pennsylvania); Louise Guthrie (University of New Mexico); Nancy M. Ide* (Vassar College); Frank Tompa (University of Waterloo); Carol Van Ess-Dykema (US Department of Defense); Jean Veronis (University of Aix-en-Provence). Chair: Robert Ingria* (Bolt Beranek Newman Inc); Susan Armstrong-Warwick (University of Geneva); Nicoletta Calzolari (University of Pisa). Chair: Alan Melby* (Brigham Young University) Gerhard Budin (University of Vienna); Gregory Shreve (Kent State University); Richard Strehlow (Oak Ridge National Laboratory); Sue Ellen Wright (Kent State University). 8.6.2 Advisory Board Members of the TEI Advisory Board during the lifetime of the project are listed below, grouped under the name of the organization represented. Chad McDaniel (University of Maryland). Elizabeth A. R. Brown (Brooklyn College, CUNY). Jocelyn Penny Small (Rutgers University). Allen Renear (Brown University). Clifford A. Lynch (University of California). 1989–93: Scott Deerwester (University of Chicago); 1993- : Martha Evens (Illinois Institute of Technology). David Chesnutt (University of South Carolina). 1989–91: Manfred Thaller, Max-Planck-Institut für Geschichte, Göttingen; 1991- : Daniel Greenstein (Glasgow University). 1989–93: Wilhelm Ott (University of Tübingen); 1993- : Winfried Bader (University of Tübingen). Anne-Maria di Sciullo (Université du Québec à Montréal) Barbara Ann Kipfer (Independent Consultant). 1989–92: Betsy Kiser (OCLC); 1992- : Deborah Bendig and Andrea Keyhani (OCLC). J. D. Byrum Jr. (The Library of Congress). Stephen Anderson (The Johns Hopkins University) Randall Jones (Brigham Young University) and Ian Lancashire (University of Toronto). 8.6.3 Steering Committee Membership Members of the Steering Committee of the TEI during the preparation of this work were: 1987–1993: Robert A. Amsler (Bell Communications Research); 1987–1993: Donald E. Walker (Bell Communications Research); 1993–1994: Susan Armstrong-Warwick (University of Geneva); 1994–1999: Judith Klavans (Columbia University). 1987–1993: Robert A. Amsler (Bell Communications Research); 1987–1993: Donald E. Walker (Bell Communications Research); 1993–1994: Susan Armstrong-Warwick (University of Geneva); 1994–1999: Judith Klavans (Columbia University). 1987–1999: Nancy M. Ide (Vassar College); 1987–1994: C. M. Sperberg-McQueen (University of Illinois at Chicago); 1994–1999: David Barnard (Queen's University). 1987–1999: Nancy M. Ide (Vassar College); 1987–1994: C. M. Sperberg-McQueen (University of Illinois at Chicago); 1994–1999: David Barnard (Queen's University). 1987–1999: Susan M. Hockey (Center for Electronic Texts in the Humanities); 1987–1999: Antonio Zampolli (University of Pisa). 1987–1999: Susan M. Hockey (Center for Electronic Texts in the Humanities); 1987–1999: Antonio Zampolli (University of Pisa).","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">8 Prefatory Notes</span>"}
{"link":"p5.xml?id=COL","tag":"guidelines","content":"9 Colophon The text of this manual was prepared electronically on a variety of systems. Most sections were originally drafted by members of the work groups and working committees of the TEI; all have been revised by the editors to achieve greater uniformity of style and greater consistency in the tag set. The web release of the Guidelines was created using a library of XSLT stylesheets to convert to XHTML; the PDF version for printing was produced by conversion to LaTeX markup, processed using XeLaTeX. The XSLT libraries were written by Sebastian Rahtz. Almost every available SGML and XML editor or processing program has been used at one time or another by the TEI; but without the open source implementations of XML parsers, editors and XSLT engines by James Clark, Richard Stallman, Michael Kay, and Daniel Veillard, the TEI could not survive, and we thank these individuals. We would also like to thank the staff at SyncRO Soft SRL, creators of the oXygen editor, for their support for the TEI during the creation on P5. Many volunteers contributed to the preparation of this release of the Guidelines; we particularly note the work of Sabine Krott, Eva Radermacher and Arianna Ciula for their work in structuring the bibliographies. The production and release process for TEI P5 was originally developed by Sebastian Rahtz for the TEI Technical Council.","title":"<span class=\"tei-back1 breadcrumb\">Back matter</span> <span class=\"tei-div7 breadcrumb\">9 Colophon</span>"}
{"link":"/ref/q","tag":"reference","content":"contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. Elements common to all TEI documents may be used to indicate whether the offset passage is spoken or thought, or to characterize it more finely.","title":"q"}
{"link":"/ref/cit","tag":"reference","content":"contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. Elements common to all TEI documents","title":"cit"}
{"link":"/ref/mentioned","tag":"reference","content":"marks words or phrases mentioned, not used. Elements common to all TEI documents","title":"mentioned"}
{"link":"/ref/soCalled","tag":"reference","content":"contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. Elements common to all TEI documents","title":"soCalled"}
{"link":"/ref/desc","tag":"reference","content":"contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented. Elements common to all TEI documents A desc with a type of deprecationInfo should only occur when its parent element is being deprecated. Furthermore, it should always occur in an element that is being deprecated when desc is a valid child of that element.","title":"desc"}
{"link":"/ref/unitDef","tag":"reference","content":"contains descriptive information related to a specific unit of measurement. The TEI header","title":"unitDef"}
{"link":"/ref/gloss","tag":"reference","content":"identifies a phrase or word used to provide a gloss or definition for some other word or phrase. Elements common to all TEI documents","title":"gloss"}
{"link":"/ref/term","tag":"reference","content":"contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. Elements common to all TEI documents","title":"term"}
{"link":"/ref/rb","tag":"reference","content":"contains the base text annotated by a ruby gloss. Elements common to all TEI documents","title":"rb"}
{"link":"/ref/rt","tag":"reference","content":"contains a ruby text, an annotation closely associated with a passage of the main text. Elements common to all TEI documents supplies a pointer to the base being glossed by this ruby text. points to the starting point of the span of text being glossed by this ruby text. points to the ending point of the span of text being glossed.","title":"rt"}
{"link":"/ref/corr","tag":"reference","content":"contains the correct form of a passage apparently erroneous in the copy text. Elements common to all TEI documents","title":"corr"}
{"link":"/ref/sic","tag":"reference","content":"contains text reproduced although apparently incorrect or inaccurate. Elements common to all TEI documents","title":"sic"}
{"link":"/ref/choice","tag":"reference","content":"groups a number of alternative encodings for the same point in a text. Elements common to all TEI documents","title":"choice"}
{"link":"/ref/extent","tag":"reference","content":"describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. The TEI header","title":"extent"}
{"link":"/ref/macro.paraContent","tag":"reference","content":"defines the content of paragraphs and similar elements. Declarations for classes, datatypes, and macros available to all TEI modules","title":"macro.paraContent"}
{"link":"/ref/orig","tag":"reference","content":"contains a reading which is marked as following the original, rather than being normalized or corrected. Elements common to all TEI documents","title":"orig"}
{"link":"/ref/ruby","tag":"reference","content":"contains a passage of base text along with its associated ruby gloss(es). Elements common to all TEI documents","title":"ruby"}
{"link":"/ref/add","tag":"reference","content":"contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. Elements common to all TEI documents","title":"add"}
{"link":"/ref/del","tag":"reference","content":"contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. Elements common to all TEI documents","title":"del"}
{"link":"/ref/name","tag":"reference","content":"contains a proper noun or noun phrase. Elements common to all TEI documents","title":"name"}
{"link":"/ref/unclear","tag":"reference","content":"contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. Elements common to all TEI documents indicates why the material is hard to transcribe. Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.","title":"unclear"}
{"link":"/ref/rs","tag":"reference","content":"contains a general purpose name or referring string. Elements common to all TEI documents","title":"rs"}
{"link":"/ref/email","tag":"reference","content":"contains an email address identifying a location to which email messages can be delivered. Elements common to all TEI documents","title":"email"}
{"link":"/ref/address","tag":"reference","content":"contains a postal address, for example of a publisher, an organization, or an individual. Elements common to all TEI documents","title":"address"}
{"link":"/ref/addrLine","tag":"reference","content":"contains one line of a postal address. Elements common to all TEI documents","title":"addrLine"}
{"link":"/ref/postBox","tag":"reference","content":"contains a number or other identifier for some postal delivery point other than a street address. Elements common to all TEI documents","title":"postBox"}
{"link":"/ref/postCode","tag":"reference","content":"contains a numerical or alphanumeric code used as part of a postal address to simplify sorting or delivery of mail. Elements common to all TEI documents","title":"postCode"}
{"link":"/ref/street","tag":"reference","content":"contains a full street address including any name or number identifying a building as well as the name of the street or route on which it is located. Elements common to all TEI documents","title":"street"}
{"link":"/ref/num","tag":"reference","content":"contains a number, written in any form. Elements common to all TEI documents indicates the type of numeric value. supplies the value of the number in standard form.","title":"num"}
{"link":"/ref/measure","tag":"reference","content":"contains a word or phrase referring to some quantity of an object or commodity, usually comprising a number, a unit, and a commodity name. Elements common to all TEI documents specifies the type of measurement in any convenient typology.","title":"measure"}
{"link":"/ref/measureGrp","tag":"reference","content":"contains a group of dimensional specifications which relate to the same object, for example the height and width of a manuscript page. Elements common to all TEI documents","title":"measureGrp"}
{"link":"/ref/unit","tag":"reference","content":"contains a symbol, a word or a phrase referring to a unit of measurement in any kind of formal or informal system. Elements common to all TEI documents","title":"unit"}
{"link":"/ref/date","tag":"reference","content":"contains a date in any format. Elements common to all TEI documents","title":"date"}
{"link":"/ref/abbr","tag":"reference","content":"contains an abbreviation of any sort. Elements common to all TEI documents allows the encoder to classify the abbreviation according to some convenient typology.","title":"abbr"}
{"link":"/ref/time","tag":"reference","content":"contains a phrase defining a time of day in any format. Elements common to all TEI documents","title":"time"}
{"link":"/ref/ptr","tag":"reference","content":"defines a pointer to another location. Elements common to all TEI documents","title":"ptr"}
{"link":"/ref/expan","tag":"reference","content":"contains the expansion of an abbreviation. Elements common to all TEI documents","title":"expan"}
{"link":"/ref/ref","tag":"reference","content":"defines a reference to another location, possibly modified by additional text or comment. Elements common to all TEI documents","title":"ref"}
{"link":"/ref/list","tag":"reference","content":"contains any sequence of items organized as a list. Elements common to all TEI documents describes the nature of the items in the list.","title":"list"}
{"link":"/ref/item","tag":"reference","content":"contains one component of a list. Elements common to all TEI documents","title":"item"}
{"link":"/ref/label","tag":"reference","content":"contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. Elements common to all TEI documents","title":"label"}
{"link":"/ref/head","tag":"reference","content":"contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. Elements common to all TEI documents","title":"head"}
{"link":"/ref/headLabel","tag":"reference","content":"contains the heading for the label or term column in a glossary list or similar structured list. Elements common to all TEI documents","title":"headLabel"}
{"link":"/ref/headItem","tag":"reference","content":"contains the heading for the item or gloss column in a glossary list or similar structured list. Elements common to all TEI documents","title":"headItem"}
{"link":"/ref/note","tag":"reference","content":"contains a note or annotation. Elements common to all TEI documents","title":"note"}
{"link":"/ref/index","tag":"reference","content":"marks a location to be indexed for whatever purpose. Elements common to all TEI documents a single word which follows the rules defining a legal XML name (see 1 ), supplying a name to specify which index (of several) the index entry belongs to.","title":"index"}
{"link":"/ref/reg","tag":"reference","content":"contains a reading which has been regularized or normalized in some sense. Elements common to all TEI documents","title":"reg"}
{"link":"/ref/media","tag":"reference","content":"indicates the location of any form of external media such as an audio or video clip etc. Elements common to all TEI documents","title":"media"}
{"link":"/ref/graphic","tag":"reference","content":"indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. Elements common to all TEI documents","title":"graphic"}
{"link":"/ref/binaryObject","tag":"reference","content":"provides encoded binary data representing an inline graphic, audio, video or other object. Elements common to all TEI documents The encoding used to encode the binary data. If not specified, this is assumed to be Base64 .","title":"binaryObject"}
{"link":"/ref/milestone","tag":"reference","content":"marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. Elements common to all TEI documents","title":"milestone"}
{"link":"/ref/pb","tag":"reference","content":"marks the beginning of a new page in a paginated document. Elements common to all TEI documents","title":"pb"}
{"link":"/ref/gb","tag":"reference","content":"marks the beginning of a new gathering or quire in a transcribed codex. Elements common to all TEI documents","title":"gb"}
{"link":"/ref/lb","tag":"reference","content":"marks the beginning of a new (typographic) line in some edition or version of a text. Elements common to all TEI documents","title":"lb"}
{"link":"/ref/cb","tag":"reference","content":"marks the beginning of a new column of a text on a multi-column page. Elements common to all TEI documents","title":"cb"}
{"link":"/ref/analytic","tag":"reference","content":"contains bibliographic elements describing an item (e.g. an article or poem) published within a monograph or journal and not as an independent publication. Elements common to all TEI documents","title":"analytic"}
{"link":"/ref/monogr","tag":"reference","content":"contains bibliographic elements describing an item (e.g. a book or journal) published as an independent item (i.e. as a separate physical object). Elements common to all TEI documents","title":"monogr"}
{"link":"/ref/author","tag":"reference","content":"in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. Elements common to all TEI documents","title":"author"}
{"link":"/ref/series","tag":"reference","content":"contains information about the series in which a book or other bibliographic item has appeared. Elements common to all TEI documents","title":"series"}
{"link":"/ref/respStmt","tag":"reference","content":"supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. Elements common to all TEI documents","title":"respStmt"}
{"link":"/ref/editor","tag":"reference","content":"contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. Elements common to all TEI documents","title":"editor"}
{"link":"/ref/resp","tag":"reference","content":"contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. Elements common to all TEI documents","title":"resp"}
{"link":"/ref/meeting","tag":"reference","content":"contains the formalized descriptive title for a meeting or conference, for use in a bibliographic description for an item derived from such a meeting, or as a heading or preamble to publications emanating from it. Elements common to all TEI documents","title":"meeting"}
{"link":"/ref/title","tag":"reference","content":"contains a title for any kind of work. Elements common to all TEI documents indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material. classifies the title according to some convenient typology.","title":"title"}
{"link":"/ref/imprint","tag":"reference","content":"groups information relating to the publication or distribution of a bibliographic item. Elements common to all TEI documents","title":"imprint"}
{"link":"/ref/publisher","tag":"reference","content":"provides the name of the organization responsible for the publication or distribution of a bibliographic item. Elements common to all TEI documents","title":"publisher"}
{"link":"/ref/biblScope","tag":"reference","content":"defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. Elements common to all TEI documents","title":"biblScope"}
{"link":"/ref/citedRange","tag":"reference","content":"defines the range of cited content, often represented by pages or other units Elements common to all TEI documents","title":"citedRange"}
{"link":"/ref/pubPlace","tag":"reference","content":"contains the name of the place where a bibliographic item was published. Elements common to all TEI documents","title":"pubPlace"}
{"link":"/ref/bibl","tag":"reference","content":"contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. Elements common to all TEI documents","title":"bibl"}
{"link":"/ref/biblStruct","tag":"reference","content":"contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order. Elements common to all TEI documents","title":"biblStruct"}
{"link":"/ref/relatedItem","tag":"reference","content":"contains or references some other bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. Elements common to all TEI documents points to the related bibliographic element by means of an absolute or relative URI reference","title":"relatedItem"}
{"link":"/ref/listBibl","tag":"reference","content":"contains a list of bibliographic citations of any kind. Elements common to all TEI documents","title":"listBibl"}
{"link":"/ref/l","tag":"reference","content":"contains a single, possibly incomplete, line of verse. Elements common to all TEI documents","title":"l"}
{"link":"/ref/lg","tag":"reference","content":"contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. Elements common to all TEI documents","title":"lg"}
{"link":"/ref/speaker","tag":"reference","content":"contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. Elements common to all TEI documents","title":"speaker"}
{"link":"/ref/sp","tag":"reference","content":"contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. Elements common to all TEI documents","title":"sp"}
{"link":"/ref/TEI","tag":"reference","content":"contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple TEI elements may be combined within a TEI (or teiCorpus ) element. Default text structure specifies the version number of the TEI Guidelines against which this document is valid.","title":"TEI"}
{"link":"/ref/teiCorpus","tag":"reference","content":"contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more TEI elements, each containing a single text header and a text. Elements common to all TEI documents specifies the version number of the TEI Guidelines against which this document is valid.","title":"teiCorpus"}
{"link":"/ref/stage","tag":"reference","content":"contains any kind of stage direction within a dramatic text or fragment. Elements common to all TEI documents indicates the kind of stage direction.","title":"stage"}
{"link":"/ref/text","tag":"reference","content":"contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. Default text structure","title":"text"}
{"link":"/ref/group","tag":"reference","content":"contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. Default text structure","title":"group"}
{"link":"/ref/floatingText","tag":"reference","content":"contains a single text of any kind, whether unitary or composite, which interrupts the text containing it at any point and after which the surrounding text resumes. Default text structure","title":"floatingText"}
{"link":"/ref/body","tag":"reference","content":"contains the whole body of a single unitary text, excluding any front or back matter. Default text structure","title":"body"}
{"link":"/ref/div","tag":"reference","content":"contains a subdivision of the front, body, or back of a text. Default text structure","title":"div"}
{"link":"/ref/div2","tag":"reference","content":"contains a second-level subdivision of the front, body, or back of a text. Default text structure","title":"div2"}
{"link":"/ref/div1","tag":"reference","content":"contains a first-level subdivision of the front, body, or back of a text. Default text structure","title":"div1"}
{"link":"/ref/div3","tag":"reference","content":"contains a third-level subdivision of the front, body, or back of a text. Default text structure","title":"div3"}
{"link":"/ref/div4","tag":"reference","content":"contains a fourth-level subdivision of the front, body, or back of a text. Default text structure","title":"div4"}
{"link":"/ref/div5","tag":"reference","content":"contains a fifth-level subdivision of the front, body, or back of a text. Default text structure","title":"div5"}
{"link":"/ref/div7","tag":"reference","content":"contains the smallest possible subdivision of the front, body or back of a text, larger than a paragraph. Default text structure","title":"div7"}
{"link":"/ref/div6","tag":"reference","content":"contains a sixth-level subdivision of the front, body, or back of a text. Default text structure","title":"div6"}
{"link":"/ref/divGen","tag":"reference","content":"indicates the location at which a textual division generated automatically by a text-processing application is to appear. Elements common to all TEI documents specifies what type of generated text division (e.g. index, table of contents, etc.) is to appear.","title":"divGen"}
{"link":"/ref/trailer","tag":"reference","content":"contains a closing title or footer appearing at the end of a division of a text. Default text structure","title":"trailer"}
{"link":"/ref/byline","tag":"reference","content":"contains the primary statement of responsibility given for a work on its title page or at the head or end of the work. Default text structure","title":"byline"}
{"link":"/ref/dateline","tag":"reference","content":"contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer. Default text structure","title":"dateline"}
{"link":"/ref/argument","tag":"reference","content":"contains a formal list or prose description of the topics addressed by a subdivision of a text. Default text structure","title":"argument"}
{"link":"/ref/epigraph","tag":"reference","content":"contains a quotation, anonymous or attributed, appearing at the start or end of a section or on a title page. Default text structure","title":"epigraph"}
{"link":"/ref/opener","tag":"reference","content":"groups together dateline, byline, salutation, and similar phrases appearing as a preliminary group at the start of a division, especially of a letter. Default text structure","title":"opener"}
{"link":"/ref/closer","tag":"reference","content":"groups together salutations, datelines, and similar phrases appearing as a final group at the end of a division, especially of a letter. Default text structure","title":"closer"}
{"link":"/ref/salute","tag":"reference","content":"contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. Default text structure","title":"salute"}
{"link":"/ref/signed","tag":"reference","content":"contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text. Default text structure","title":"signed"}
{"link":"/ref/titlePage","tag":"reference","content":"contains the title page of a text, appearing within the front or back matter. Default text structure classifies the title page according to any convenient typology.","title":"titlePage"}
{"link":"/ref/postscript","tag":"reference","content":"contains a postscript, e.g. to a letter. Default text structure","title":"postscript"}
{"link":"/ref/docTitle","tag":"reference","content":"contains the title of a document, including all its constituents, as given on a title page. Default text structure","title":"docTitle"}
{"link":"/ref/titlePart","tag":"reference","content":"contains a subsection or division of the title of a work, as indicated on a title page. Default text structure specifies the role of this subdivision of the title.","title":"titlePart"}
{"link":"/ref/docAuthor","tag":"reference","content":"contains the name of the author of the document, as given on the title page (often but not always contained in a byline). Default text structure","title":"docAuthor"}
{"link":"/ref/imprimatur","tag":"reference","content":"contains a formal statement authorizing the publication of a work, sometimes required to appear on a title page or its verso. Default text structure","title":"imprimatur"}
{"link":"/ref/docEdition","tag":"reference","content":"contains an edition statement as presented on a title page of a document. Default text structure","title":"docEdition"}
{"link":"/ref/docImprint","tag":"reference","content":"contains the imprint statement (place and date of publication, publisher name), as given (usually) at the foot of a title page. Default text structure","title":"docImprint"}
{"link":"/ref/docDate","tag":"reference","content":"contains the date of a document, as given on a title page or in a dateline. Default text structure gives the value of the date in standard form, i.e. YYYY-MM-DD.","title":"docDate"}
{"link":"/ref/front","tag":"reference","content":"contains any prefatory matter (headers, abstracts, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. Default text structure","title":"front"}
{"link":"/ref/back","tag":"reference","content":"contains any appendixes, etc. following the main part of a text. Default text structure","title":"back"}
{"link":"/ref/g","tag":"reference","content":"represents a glyph, or a non-standard character. Character and glyph documentation points to a description of the character or glyph intended.","title":"g"}
{"link":"/ref/charDecl","tag":"reference","content":"provides information about nonstandard characters and glyphs. Character and glyph documentation","title":"charDecl"}
{"link":"/ref/char","tag":"reference","content":"provides descriptive information about a character. Character and glyph documentation","title":"char"}
{"link":"/ref/localProp","tag":"reference","content":"provides a locally defined character (or glyph) property. Character and glyph documentation","title":"localProp"}
{"link":"/ref/gap","tag":"reference","content":"indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. Elements common to all TEI documents gives the reason for omission in the case of text omitted because of damage, categorizes the cause of the damage, if it can be identified.","title":"gap"}
{"link":"/ref/unihanProp","tag":"reference","content":"holds the name and value of a normative or informative Unihan character (or glyph) property as part of its attributes. Character and glyph documentation specifies the normalized name of a unicode han database (Unihan) property specifies the value of a named Unihan property","title":"unihanProp"}
{"link":"/ref/mapping","tag":"reference","content":"contains one or more characters which are related to the parent character or glyph in some respect, as specified by the type attribute. Character and glyph documentation","title":"mapping"}
{"link":"/ref/att.gaijiProp","tag":"reference","content":"provides attributes for defining the properties of non-standard characters or glyphs. Character and glyph documentation provides the name of the character or glyph property being defined. provides the value of the character or glyph property being defined. specifies the version number of the Unicode Standard in which this property name is defined.","title":"att.gaijiProp"}
{"link":"/ref/unicodeProp","tag":"reference","content":"provides a Unicode property for a character (or glyph). Character and glyph documentation specifies the normalized name of a Unicode property. specifies the value of a named Unicode property.","title":"unicodeProp"}
{"link":"/ref/metDecl","tag":"reference","content":"documents the notation employed to represent a metrical pattern when this is specified as the value of a met, real, or rhyme attribute on any structural element of a metrical text (e.g. lg , l , or seg ). Verse structures indicates whether the notation conveys the abstract metrical form, its actual prosodic realization, or the rhyme scheme, or some combination thereof. specifies a regular expression defining any value that is legal for this notation.","title":"metDecl"}
{"link":"/ref/att.metrical","tag":"reference","content":"defines a set of attributes that certain elements may use to represent metrical information. Verse structures contains a user-specified encoding for the conventional metrical structure of the element. contains a user-specified encoding for the actual realization of the conventional metrical structure applicable to the element. specifies the rhyme scheme applicable to a group of verse lines.","title":"att.metrical"}
{"link":"/ref/caesura","tag":"reference","content":"marks the point at which a metrical line may be divided. Verse structures","title":"caesura"}
{"link":"/ref/metSym","tag":"reference","content":"documents the intended significance of a particular character or character sequence within a metrical notation, either explicitly or in terms of other metSym elements in the same metDecl . Verse structures specifies the character or character sequence being documented. specifies whether the symbol is defined in terms of other symbols (terminal is set to false) or in prose (terminal is set to true).","title":"metSym"}
{"link":"/ref/att.enjamb","tag":"reference","content":"provides attributes that may be used to indicate enjambement of the parent element. Verse structures indicates that the end of a verse line is marked by enjambement.","title":"att.enjamb"}
{"link":"/ref/set","tag":"reference","content":"contains a description of the setting, time, locale, appearance, etc., of the action of a play, typically found in the front matter of a printed performance text (not a stage direction). Performance texts","title":"set"}
{"link":"/ref/rhyme","tag":"reference","content":"marks the rhyming part of a metrical line. Verse structures provides a label (usually a single letter) to identify which part of a rhyme scheme this rhyming string instantiates.","title":"rhyme"}
{"link":"/ref/prologue","tag":"reference","content":"contains the prologue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. Performance texts","title":"prologue"}
{"link":"/ref/epilogue","tag":"reference","content":"contains the epilogue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. Performance texts","title":"epilogue"}
{"link":"/ref/performance","tag":"reference","content":"contains a section of front or back matter describing how a dramatic piece is to be performed in general or how it was performed on some specific occasion. Performance texts","title":"performance"}
{"link":"/ref/castGroup","tag":"reference","content":"groups one or more individual castItem elements within a cast list. Performance texts","title":"castGroup"}
{"link":"/ref/castList","tag":"reference","content":"contains a single cast list or dramatis personae. Performance texts","title":"castList"}
{"link":"/ref/castItem","tag":"reference","content":"contains a single entry within a cast list, describing either a single role or a list of non-speaking roles. Performance texts characterizes the cast item.","title":"castItem"}
{"link":"/ref/role","tag":"reference","content":"contains the name of a dramatic role, as given in a cast list. Performance texts","title":"role"}
{"link":"/ref/roleDesc","tag":"reference","content":"describes a character's role in a drama. Performance texts","title":"roleDesc"}
{"link":"/ref/actor","tag":"reference","content":"contains the name of an actor appearing within a cast list. Performance texts","title":"actor"}
{"link":"/ref/spGrp","tag":"reference","content":"contains a group of speeches or songs in a performance text presented in a source as constituting a single unit or number. Performance texts","title":"spGrp"}
{"link":"/ref/move","tag":"reference","content":"marks the actual movement of one or more characters. Performance texts characterizes the movement, for example as an entrance or exit. specifies the direction of a stage movement. identifies the performance or performances in which this movement occurred as specified by pointing to one or more performance elements.","title":"move"}
{"link":"/ref/camera","tag":"reference","content":"describes a particular camera angle or viewpoint in a screen play. Performance texts","title":"camera"}
{"link":"/ref/view","tag":"reference","content":"describes the visual context of some part of a screen play in terms of what the spectator sees, generally independent of any dialogue. Performance texts","title":"view"}
{"link":"/ref/sound","tag":"reference","content":"describes a sound effect or musical sequence specified within a screen play or radio script. Performance texts categorizes the sound in some respect, e.g. as music, special effect, etc. indicates whether the sound overlaps the surrounding speeches or interrupts them.","title":"sound"}
{"link":"/ref/caption","tag":"reference","content":"contains the text of a caption or other text displayed as part of a film script or screenplay. Performance texts","title":"caption"}
{"link":"/ref/scriptStmt","tag":"reference","content":"contains a citation giving details of the script used for a spoken text. Transcribed Speech","title":"scriptStmt"}
{"link":"/ref/recordingStmt","tag":"reference","content":"describes a set of recordings used as the basis for transcription of a spoken text. Transcribed Speech","title":"recordingStmt"}
{"link":"/ref/recording","tag":"reference","content":"provides details of an audio or video recording event used as the source of a spoken text, either directly or from a public broadcast. Transcribed Speech the kind of recording.","title":"recording"}
{"link":"/ref/equipment","tag":"reference","content":"provides technical details of the equipment and media used for an audio or video recording used as the source for a spoken text. Transcribed Speech","title":"equipment"}
{"link":"/ref/tech","tag":"reference","content":"describes a special-purpose stage direction that is not meant for the actors. Performance texts categorizes the technical stage direction. points to one or more performance elements documenting the performance or performances to which this technical direction applies.","title":"tech"}
{"link":"/ref/broadcast","tag":"reference","content":"describes a broadcast used as the source of a spoken text. Transcribed Speech","title":"broadcast"}
{"link":"/ref/transcriptionDesc","tag":"reference","content":"describes the set of transcription conventions used, particularly for spoken material. Transcribed Speech supplies an identifier for the encoding convention, independent of any version number. supplies a version number for the encoding conventions used, if any.","title":"transcriptionDesc"}
{"link":"/ref/pause","tag":"reference","content":"marks a pause either between or within utterances. Transcribed Speech","title":"pause"}
{"link":"/ref/u","tag":"reference","content":"contains a stretch of speech usually preceded and followed by silence or by a change of speaker. Transcribed Speech indicates the nature of the transition between this utterance and the previous one.","title":"u"}
{"link":"/ref/vocal","tag":"reference","content":"marks any vocalized but not necessarily lexical phenomenon, for example voiced pauses, non-lexical backchannels, etc. Transcribed Speech indicates whether or not the phenomenon is repeated.","title":"vocal"}
{"link":"/ref/kinesic","tag":"reference","content":"marks any communicative phenomenon, not necessarily vocalized, for example a gesture, frown, etc. Transcribed Speech indicates whether or not the phenomenon is repeated.","title":"kinesic"}
{"link":"/ref/incident","tag":"reference","content":"marks any phenomenon or occurrence, not necessarily vocalized or communicative, for example incidental noises or other events affecting communication. Transcribed Speech","title":"incident"}
{"link":"/ref/shift","tag":"reference","content":"marks the point at which some paralinguistic feature of a series of utterances by any one speaker changes. Transcribed Speech a paralinguistic feature. specifies the new state of the paralinguistic feature specified.","title":"shift"}
{"link":"/ref/model.divPart.spoken","tag":"reference","content":"groups elements structurally analogous to paragraphs within spoken texts. Transcribed Speech","title":"model.divPart.spoken"}
{"link":"/ref/annotationBlock","tag":"reference","content":"groups together various annotations, e.g. for parallel interpretations of a spoken segment. Transcribed Speech","title":"annotationBlock"}
{"link":"/ref/writing","tag":"reference","content":"contains a passage of written text revealed to participants in the course of a spoken text. Transcribed Speech indicates whether the writing is revealed all at once or gradually.","title":"writing"}
{"link":"/ref/model.entryLike","tag":"reference","content":"groups elements structurally analogous to paragraphs within dictionaries. Dictionaries","title":"model.entryLike"}
{"link":"/ref/att.entryLike","tag":"reference","content":"provides attributes used to distinguish different styles of dictionary entries. Dictionaries indicates type of entry, in dictionaries with multiple types.","title":"att.entryLike"}
{"link":"/ref/att.lexicographic","tag":"reference","content":"provides a set of attributes for specifying standard and normalized values, grammatical functions, alternate or equivalent forms, and information about composite parts. Dictionaries gives an expanded form of information presented more concisely in the dictionary gives the list of split values for a merged form gives a value which lacks any realization in the printed source text. indicates an anchor element typically elsewhere in the document, but possibly in another document, which is the original location of this component. gives a reference to another element, where the original appears as a merged form. indicates whether the element is optional or not","title":"att.lexicographic"}
{"link":"/ref/att.partials","tag":"reference","content":"provides attributes for describing the extent of lexical references for a dictionary term. Declarations for classes, datatypes, and macros available to all TEI modules indicates whether the pronunciation or orthography applies to all or part of a word.","title":"att.partials"}
{"link":"/ref/superEntry","tag":"reference","content":"groups a sequence of entries within any kind of lexical resource, such as a dictionary or lexicon which function as a single unit, for example a set of homographs. Dictionaries","title":"superEntry"}
{"link":"/ref/entry","tag":"reference","content":"contains a single structured entry in any kind of lexical resource, such as a dictionary or lexicon. Dictionaries","title":"entry"}
{"link":"/ref/hom","tag":"reference","content":"groups information relating to one homograph within an entry. Dictionaries","title":"hom"}
{"link":"/ref/sense","tag":"reference","content":"groups together all information relating to one word sense in a dictionary entry, for example definitions, examples, and translation equivalents. Dictionaries gives the nesting depth of this sense.","title":"sense"}
{"link":"/ref/entryFree","tag":"reference","content":"contains a single unstructured entry in any kind of lexical resource, such as a dictionary or lexicon. Dictionaries","title":"entryFree"}
{"link":"/ref/dictScrap","tag":"reference","content":"encloses a part of a dictionary entry in which other phrase-level dictionary elements are freely combined. Dictionaries","title":"dictScrap"}
{"link":"/ref/form","tag":"reference","content":"groups all the information on the written and spoken forms of one headword. Dictionaries classifies form as simple, compound, etc.","title":"form"}
{"link":"/ref/orth","tag":"reference","content":"gives the orthographic form of a dictionary headword. Dictionaries gives the type of spelling.","title":"orth"}
{"link":"/ref/pron","tag":"reference","content":"contains the pronunciation(s) of the word. Dictionaries","title":"pron"}
{"link":"/ref/hyph","tag":"reference","content":"contains a hyphenated form of a dictionary headword, or hyphenation information in some other form. Dictionaries","title":"hyph"}
{"link":"/ref/stress","tag":"reference","content":"contains the stress pattern for a dictionary headword, if given separately. Dictionaries","title":"stress"}
{"link":"/ref/ellipsis","tag":"reference","content":"indicates a purposeful marking in the source document signalling that content has been omitted, and may also supply or describe the omitted content. Elements common to all TEI documents","title":"ellipsis"}
{"link":"/ref/gen","tag":"reference","content":"identifies the morphological gender of a lexical item, as given in the dictionary. Dictionaries","title":"gen"}
{"link":"/ref/gram","tag":"reference","content":"within an entry in a dictionary or a terminological data file, contains grammatical information relating to a term, word, or form. Dictionaries classifies the grammatical information given according to some convenient typology—in the case of terminological information, preferably the dictionary of data element types specified in ISO 12620 .","title":"gram"}
{"link":"/ref/number","tag":"reference","content":"indicates grammatical number associated with a form, as given in a dictionary. Dictionaries","title":"number"}
{"link":"/ref/case","tag":"reference","content":"contains grammatical case information given by a dictionary for a given form. Dictionaries","title":"case"}
{"link":"/ref/per","tag":"reference","content":"contains an indication of the grammatical person (1st, 2nd, 3rd, etc.) associated with a given inflected form in a dictionary. Dictionaries","title":"per"}
{"link":"/ref/tns","tag":"reference","content":"indicates the grammatical tense associated with a given inflected form in a dictionary. Dictionaries","title":"tns"}
{"link":"/ref/iType","tag":"reference","content":"indicates the inflectional class associated with a lexical item. Dictionaries indicates the type of indicator used to specify the inflection class, when it is necessary to distinguish between the usual abbreviated indications (e.g. inv ) and other kinds of indicators, such as special codes referring to conjugation patterns, etc.","title":"iType"}
{"link":"/ref/mood","tag":"reference","content":"contains information about the grammatical mood of verbs (e.g. indicative, subjunctive, imperative). Dictionaries","title":"mood"}
{"link":"/ref/model.morphLike","tag":"reference","content":"groups elements which provide morphological information within a dictionary entry. Dictionaries","title":"model.morphLike"}
{"link":"/ref/model.lexicalRefinement","tag":"reference","content":"elements adding further precision to the lexico-grammatical information provided for a dictionary entry. Dictionaries","title":"model.lexicalRefinement"}
{"link":"/ref/model.formPart","tag":"reference","content":"groups elements allowed within a form element in a dictionary. Dictionaries","title":"model.formPart"}
{"link":"/ref/model.gramPart","tag":"reference","content":"groups elements allowed within a gramGrp element in a dictionary. Dictionaries","title":"model.gramPart"}
{"link":"/ref/gramGrp","tag":"reference","content":"groups morpho-syntactic information about a lexical item, e.g. pos , gen , number , case , or iType (inflectional class). Dictionaries","title":"gramGrp"}
{"link":"/ref/pos","tag":"reference","content":"indicates the part of speech assigned to a dictionary headword such as noun, verb, or adjective. Dictionaries","title":"pos"}
{"link":"/ref/def","tag":"reference","content":"contains definition text in a dictionary entry. Dictionaries","title":"def"}
{"link":"/ref/subc","tag":"reference","content":"contains subcategorization information (transitive/intransitive, countable/non-countable, etc.) Dictionaries","title":"subc"}
{"link":"/ref/colloc","tag":"reference","content":"contains any sequence of words that co-occur with the headword with significant frequency. Dictionaries","title":"colloc"}
{"link":"/ref/etym","tag":"reference","content":"encloses the etymological information in a dictionary entry. Dictionaries","title":"etym"}
{"link":"/ref/usg","tag":"reference","content":"contains usage information in a dictionary entry. Dictionaries classifies the usage information using any convenient typology.","title":"usg"}
{"link":"/ref/lang","tag":"reference","content":"contains the name of a language mentioned in etymological or other linguistic discussion. Dictionaries","title":"lang"}
{"link":"/ref/re","tag":"reference","content":"contains a dictionary entry for a lexical item related to the headword, such as a compound phrase or derived form, embedded inside a larger entry. Dictionaries","title":"re"}
{"link":"/ref/lbl","tag":"reference","content":"contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. Dictionaries classifies the label using any convenient typology.","title":"lbl"}
{"link":"/ref/model.ptrLike.form","tag":"reference","content":"groups elements used for purposes of location of particular orthographic or pronunciation forms within a dictionary entry. Dictionaries","title":"model.ptrLike.form"}
{"link":"/ref/oRef","tag":"reference","content":"in a dictionary example, indicates a reference to the orthographic form(s) of the headword. Dictionaries indicates the kind of typographic modification made to the headword in the reference.","title":"oRef"}
{"link":"/ref/pRef","tag":"reference","content":"in a dictionary example, indicates a reference to the pronunciation(s) of the headword. Dictionaries","title":"pRef"}
{"link":"/ref/xr","tag":"reference","content":"contains a phrase, sentence, or icon referring the reader to some other location in this or another text. Dictionaries indicates the type of cross reference, using any convenient typology.","title":"xr"}
{"link":"/ref/msDesc","tag":"reference","content":"contains a description of a single identifiable manuscript or other text-bearing object such as an early printed book. Manuscript Description","title":"msDesc"}
{"link":"/ref/dimensions","tag":"reference","content":"contains a dimensional specification. Manuscript Description indicates which aspect of the object is being measured.","title":"dimensions"}
{"link":"/ref/catchwords","tag":"reference","content":"describes the system used to ensure correct ordering of the quires or similar making up a codex, incunable, or other object typically by means of annotations at the foot of the page. Manuscript Description","title":"catchwords"}
{"link":"/ref/dim","tag":"reference","content":"contains any single measurement forming part of a dimensional specification of some sort. Manuscript Description","title":"dim"}
{"link":"/ref/height","tag":"reference","content":"contains a measurement measured along the axis at a right angle to the bottom of the object. Manuscript Description","title":"height"}
{"link":"/ref/depth","tag":"reference","content":"contains a measurement from the front to the back of an object, perpendicular to the measurement given by the width element. Manuscript Description","title":"depth"}
{"link":"/ref/width","tag":"reference","content":"contains a measurement of an object along the axis parallel to its bottom, e.g. perpendicular to the spine of a book or codex. Manuscript Description","title":"width"}
{"link":"/ref/heraldry","tag":"reference","content":"contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc. Manuscript Description","title":"heraldry"}
{"link":"/ref/locus","tag":"reference","content":"defines a location within a manuscript, manuscript part, or other object typically as a (possibly discontinuous) sequence of folio references. Manuscript Description identifies the foliation scheme in terms of which the location is being specified by pointing to some foliation element defining it, or to some other equivalent resource. specifies the starting point of the location in a normalized form, typically a page number. specifies the end-point of the location in a normalized form, typically as a page number.","title":"locus"}
{"link":"/ref/locusGrp","tag":"reference","content":"groups a number of locations which together form a distinct but discontinuous item within a manuscript, manuscript part, or other object. Manuscript Description identifies the foliation scheme in terms of which all the locations contained by the group are specified by pointing to some foliation element defining it, or to some other equivalent resource.","title":"locusGrp"}
{"link":"/ref/material","tag":"reference","content":"contains a word or phrase describing the material of which the object being described is composed. Manuscript Description describes the function or use of the material in relation to the object as a whole. identifies one or more elements to which the metamark applies.","title":"material"}
{"link":"/ref/objectType","tag":"reference","content":"contains a word or phrase describing the type of object being referred to. Manuscript Description","title":"objectType"}
{"link":"/ref/origDate","tag":"reference","content":"contains any form of date, used to identify the date of origin for a manuscript, manuscript part, or other object. Manuscript Description","title":"origDate"}
{"link":"/ref/origPlace","tag":"reference","content":"contains any form of place name, used to identify the place of origin for a manuscript, manuscript part, or other object. Manuscript Description","title":"origPlace"}
{"link":"/ref/noteGrp","tag":"reference","content":"contains a group of notes Elements common to all TEI documents","title":"noteGrp"}
{"link":"/ref/stamp","tag":"reference","content":"contains a word or phrase describing a stamp or similar device. Manuscript Description","title":"stamp"}
{"link":"/ref/signatures","tag":"reference","content":"contains discussion of the leaf or quire signatures found within a codex or similar object. Manuscript Description","title":"signatures"}
{"link":"/ref/msIdentifier","tag":"reference","content":"contains the information required to identify the manuscript or similar object being described. Manuscript Description","title":"msIdentifier"}
{"link":"/ref/watermark","tag":"reference","content":"contains a word or phrase describing a watermark or similar device. Manuscript Description","title":"watermark"}
{"link":"/ref/institution","tag":"reference","content":"contains the name of an organization such as a university or library, with which a manuscript or other object is identified, generally its holding institution. Manuscript Description","title":"institution"}
{"link":"/ref/repository","tag":"reference","content":"contains the name of a repository within which manuscripts or other objects are stored, possibly forming part of an institution. Manuscript Description","title":"repository"}
{"link":"/ref/collection","tag":"reference","content":"contains the name of a collection of manuscripts or other objects, not necessarily located within a single repository. Manuscript Description","title":"collection"}
{"link":"/ref/altIdentifier","tag":"reference","content":"contains an alternative or former structured identifier used for a manuscript or other object, such as a former catalogue number. Manuscript Description","title":"altIdentifier"}
{"link":"/ref/msName","tag":"reference","content":"contains any form of unstructured alternative name used for a manuscript or other object, such as an ocellus nominum, or nickname. Manuscript Description","title":"msName"}
{"link":"/ref/teidata.text","tag":"reference","content":"defines the range of attribute values used to express some kind of identifying string as a single sequence of Unicode characters possibly including whitespace.","title":"teidata.text"}
{"link":"/ref/teidata.name","tag":"reference","content":"defines the range of attribute values expressed as an XML Name.","title":"teidata.name"}
{"link":"/ref/finalRubric","tag":"reference","content":"contains the string of words that denotes the end of a text division, often with an assertion as to its author and title, usually set off from the text itself by red ink, by a different size or type of script, or by some other such visual device. Manuscript Description","title":"finalRubric"}
{"link":"/ref/filiation","tag":"reference","content":"contains information concerning the manuscript or other object's filiation , i.e. its relationship to other surviving manuscripts or other objects of the same text or contents, its protographs , antigraphs and apographs . Manuscript Description","title":"filiation"}
{"link":"/ref/msContents","tag":"reference","content":"describes the intellectual content of a manuscript, manuscript part, or other object either as a series of paragraphs or as a series of structured manuscript items. Manuscript Description","title":"msContents"}
{"link":"/ref/incipit","tag":"reference","content":"contains the incipit of a manuscript or similar object item, that is the opening words of the text proper, exclusive of any rubric which might precede it, of sufficient length to identify the work uniquely; such incipits were, in former times, frequently used a means of reference to a work, in place of a title. Manuscript Description","title":"incipit"}
{"link":"/ref/msItem","tag":"reference","content":"describes an individual work or item within the intellectual content of a manuscript, manuscript part, or other object. Manuscript Description","title":"msItem"}
{"link":"/ref/notesStmt","tag":"reference","content":"collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. The TEI header","title":"notesStmt"}
{"link":"/ref/msItemStruct","tag":"reference","content":"contains a structured description for an individual work or item within the intellectual content of a manuscript, manuscript part, or other object. Manuscript Description","title":"msItemStruct"}
{"link":"/ref/explicit","tag":"reference","content":"contains the explicit of a item, that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it. Manuscript Description","title":"explicit"}
{"link":"/ref/rubric","tag":"reference","content":"contains the text of any rubric or heading attached to a particular manuscript item, that is, a string of words through which a manuscript or other object signals the beginning of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, typically in red ink, or by use of different size or type of script, or some other such visual device. Manuscript Description","title":"rubric"}
{"link":"/ref/textLang","tag":"reference","content":"describes the languages and writing systems identified within the bibliographic work being described, rather than its description. Elements common to all TEI documents supplies a code which identifies the chief language used in the bibliographic work. one or more codes identifying any other languages used in the bibliographic work.","title":"textLang"}
{"link":"/ref/att.msExcerpt","tag":"reference","content":"provides attributes used to describe excerpts from a manuscript placed in a description thereof. Manuscript Description indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage.","title":"att.msExcerpt"}
{"link":"/ref/att.msClass","tag":"reference","content":"provides attributes to indicate text type or classification. Manuscript Description identifies the text types or classifications applicable to this item by pointing to other elements or resources defining the classification concerned. ","title":"att.msClass"}
{"link":"/ref/physDesc","tag":"reference","content":"contains a full physical description of a manuscript, manuscript part, or other object optionally subdivided using more specialized elements from the model.physDescPart class. Manuscript Description","title":"physDesc"}
{"link":"/ref/summary","tag":"reference","content":"contains an overview of the available information concerning some aspect of an item or object (for example, its intellectual content, history, layout, typography etc.) as a complement or alternative to the more detailed information carried by more specific elements. Manuscript Description","title":"summary"}
{"link":"/ref/objectDesc","tag":"reference","content":"contains a description of the physical components making up the object which is being described. Manuscript Description a short project-specific name identifying the physical form of the carrier, for example as a codex, roll, fragment, partial leaf, cutting etc.","title":"objectDesc"}
{"link":"/ref/secFol","tag":"reference","content":"marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for it. Manuscript Description","title":"secFol"}
{"link":"/ref/supportDesc","tag":"reference","content":"groups elements describing the physical support for the written part of a manuscript or other object. Manuscript Description a short project-defined name for the material composing the majority of the support","title":"supportDesc"}
{"link":"/ref/collation","tag":"reference","content":"contains a description of how the leaves, bifolia, or similar objects are physically arranged. Manuscript Description","title":"collation"}
{"link":"/ref/foliation","tag":"reference","content":"describes the numbering system or systems used to count the leaves or pages in a codex or similar object. Manuscript Description","title":"foliation"}
{"link":"/ref/support","tag":"reference","content":"contains a description of the materials etc. which make up the physical support for the written part of a manuscript or other object. Manuscript Description","title":"support"}
{"link":"/ref/condition","tag":"reference","content":"contains a description of the physical condition of the manuscript or object. Manuscript Description","title":"condition"}
{"link":"/ref/layoutDesc","tag":"reference","content":"collects the set of layout descriptions applicable to a manuscript or other object. Manuscript Description","title":"layoutDesc"}
{"link":"/ref/handDesc","tag":"reference","content":"contains a description of all the different hands used in a manuscript or other object. Manuscript Description specifies the number of distinct hands identified within the manuscript","title":"handDesc"}
{"link":"/ref/typeDesc","tag":"reference","content":"contains a description of the typefaces or other aspects of the printing of an incunable or other printed source. Manuscript Description","title":"typeDesc"}
{"link":"/ref/scriptDesc","tag":"reference","content":"contains a description of the scripts used in a manuscript or other object. Manuscript Description","title":"scriptDesc"}
{"link":"/ref/layout","tag":"reference","content":"describes how text is laid out on the page or surface of the object, including information about any ruling, pricking, or other evidence of page-preparation techniques. Manuscript Description specifies the number of columns per page indicates the number of streams per page, each of which contains an independent textual stream specifies the number of ruled lines per column specifies the number of written lines per column","title":"layout"}
{"link":"/ref/typeNote","tag":"reference","content":"describes a particular font or other significant typographic feature distinguished within the description of a printed resource. Manuscript Description","title":"typeNote"}
{"link":"/ref/scriptNote","tag":"reference","content":"describes a particular script distinguished within the description of a manuscript or similar resource. The TEI header","title":"scriptNote"}
{"link":"/ref/decoDesc","tag":"reference","content":"contains a description of the decoration of a manuscript or other object, either as in paragraphs, or as one or more decoNote elements. Manuscript Description","title":"decoDesc"}
{"link":"/ref/musicNotation","tag":"reference","content":"contains description of type of musical notation. Manuscript Description","title":"musicNotation"}
{"link":"/ref/decoNote","tag":"reference","content":"contains a note describing either a decorative component of a manuscript or other object, or a fairly homogenous class of such components. Manuscript Description","title":"decoNote"}
{"link":"/ref/bindingDesc","tag":"reference","content":"describes the present and former bindings of a manuscript or other object, either as a series of paragraphs or as a series of distinct binding elements, one for each binding of the manuscript. Manuscript Description","title":"bindingDesc"}
{"link":"/ref/sealDesc","tag":"reference","content":"describes the seals or similar items related to the object described, either as a series of paragraphs or as a series of seal elements. Manuscript Description","title":"sealDesc"}
{"link":"/ref/binding","tag":"reference","content":"contains a description of one binding, i.e. type of covering, boards, etc. applied to a manuscript or other object. Manuscript Description specifies whether or not the binding is contemporary with the majority of its contents","title":"binding"}
{"link":"/ref/seal","tag":"reference","content":"contains a description of one seal or similar applied to the object described Manuscript Description specifies whether or not the seal is contemporary with the item to which it is affixed","title":"seal"}
{"link":"/ref/additions","tag":"reference","content":"contains a description of any significant additions found within a manuscript or other object, such as marginalia or other annotations. Manuscript Description","title":"additions"}
{"link":"/ref/history","tag":"reference","content":" groups elements describing the full history of a manuscript, manuscript part, or other object. Manuscript Description","title":"history"}
{"link":"/ref/accMat","tag":"reference","content":"contains details of any significant additional material which may be closely associated with the manuscript or object being described, such as non-contemporaneous documents or fragments bound in with it at some earlier historical period. Manuscript Description","title":"accMat"}
{"link":"/ref/origin","tag":"reference","content":"contains any descriptive or other information concerning the origin of a manuscript, manuscript part, or other object. Manuscript Description","title":"origin"}
{"link":"/ref/provenance","tag":"reference","content":"contains any descriptive or other information concerning a single identifiable episode during the history of a manuscript, manuscript part, or other object after its creation but before its acquisition. Manuscript Description","title":"provenance"}
{"link":"/ref/acquisition","tag":"reference","content":"contains any descriptive or other information concerning the process by which a manuscript or manuscript part or other object entered the holding institution. Manuscript Description","title":"acquisition"}
{"link":"/ref/additional","tag":"reference","content":"groups additional information, combining bibliographic information about a manuscript or other object, or surrogate copies of it, with curatorial or administrative information. Manuscript Description","title":"additional"}
{"link":"/ref/recordHist","tag":"reference","content":"provides information about the source and revision status of the parent manuscript or object description itself. Manuscript Description","title":"recordHist"}
{"link":"/ref/adminInfo","tag":"reference","content":"contains information about the present custody and availability of the manuscript or other object, and also about the record description itself. Manuscript Description","title":"adminInfo"}
{"link":"/ref/custodialHist","tag":"reference","content":"contains a description of a manuscript or other object's custodial history, either as running prose or as a series of dated custodial events. Manuscript Description","title":"custodialHist"}
{"link":"/ref/source","tag":"reference","content":"describes the original source for the information contained with a manuscript or object description. Manuscript Description","title":"source"}
{"link":"/ref/surrogates","tag":"reference","content":"contains information about any representations of the manuscript or other object being described which may exist in the holding institution or elsewhere. Manuscript Description","title":"surrogates"}
{"link":"/ref/msPart","tag":"reference","content":"contains information about an originally distinct manuscript or part of a manuscript, which is now part of a composite manuscript. Manuscript Description","title":"msPart"}
{"link":"/ref/msFrag","tag":"reference","content":"contains information about a fragment described in relation to a prior context, typically as a description of a virtual reconstruction of a manuscript or other object whose fragments were catalogued separately Manuscript Description","title":"msFrag"}
{"link":"/ref/custEvent","tag":"reference","content":"describes a single event during the custodial history of a manuscript or other object. Manuscript Description","title":"custEvent"}
{"link":"/ref/facsimile","tag":"reference","content":"contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. Transcription of primary sources","title":"facsimile"}
{"link":"/ref/sourceDoc","tag":"reference","content":" contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. Transcription of primary sources","title":"sourceDoc"}
{"link":"/ref/att.global.facs","tag":"reference","content":"provides attributes used to express correspondence between an element and all or part of a facsimile image or surface. Transcription of primary sources points to one or more images, portions of an image, or surfaces which correspond to the current element.","title":"att.global.facs"}
{"link":"/ref/att.global.change","tag":"reference","content":"provides attributes allowing its member elements to specify one or more states or revision campaigns with which they are associated. Transcription of primary sources points to one or more change elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder.","title":"att.global.change"}
{"link":"/ref/surfaceGrp","tag":"reference","content":"defines any kind of useful grouping of written surfaces, for example the recto and verso of a single leaf, which the encoder wishes to treat as a single unit. Transcription of primary sources","title":"surfaceGrp"}
{"link":"/ref/surface","tag":"reference","content":"defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. Transcription of primary sources describes the method by which this surface is or was connected to the main surface indicates whether the surface is attached and folded in such a way as to provide two writing surfaces","title":"surface"}
{"link":"/ref/att.coordinated","tag":"reference","content":"provides attributes that can be used to position their parent element within a two dimensional coordinate system. Transcription of primary sources indicates the element within a transcription of the text containing at least the start of the writing represented by this zone or surface. gives the x coordinate value for the upper left corner of a rectangular space. gives the y coordinate value for the upper left corner of a rectangular space. gives the x coordinate value for the lower right corner of a rectangular space. gives the y coordinate value for the lower right corner of a rectangular space. identifies a two dimensional area by means of a series of pairs of numbers, each of which gives the x,y coordinates of a point on a line enclosing the area.","title":"att.coordinated"}
{"link":"/ref/zone","tag":"reference","content":"defines any two-dimensional area within a surface element. Transcription of primary sources indicates the amount by which this zone has been rotated clockwise, with respect to the normal orientation of the parent surface element as implied by the dimensions given in the msDesc element or by the coordinates of the surface itself. The orientation is expressed in arc degrees.","title":"zone"}
{"link":"/ref/path","tag":"reference","content":"defines any line passing through two or more points within a surface element. Transcription of primary sources identifies a line within the container or bounding box specified by the parent element by means of a series of two or more pairs of numbers, each of which gives the x,y coordinates of a point on the line.","title":"path"}
{"link":"/ref/model.resource","tag":"reference","content":"groups separate elements which constitute the content of a digital resource, as opposed to its metadata. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.resource"}
{"link":"/ref/model.describedResource","tag":"reference","content":"groups elements which contain the content of a digital resource and its metadata; these elements may serve as the outermost or root element of a TEI-conformant document Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.describedResource"}
{"link":"/ref/addSpan","tag":"reference","content":"marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also add ). Transcription of primary sources","title":"addSpan"}
{"link":"/ref/damageSpan","tag":"reference","content":"marks the beginning of a longer sequence of text which is damaged in some way but still legible. Transcription of primary sources","title":"damageSpan"}
{"link":"/ref/damage","tag":"reference","content":"contains an area of damage to the text witness. Transcription of primary sources","title":"damage"}
{"link":"/ref/delSpan","tag":"reference","content":"marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. Transcription of primary sources","title":"delSpan"}
{"link":"/ref/ex","tag":"reference","content":"contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. Transcription of primary sources","title":"ex"}
{"link":"/ref/handNotes","tag":"reference","content":"contains one or more handNote elements documenting the different hands identified within the source texts. Transcription of primary sources","title":"handNotes"}
{"link":"/ref/fw","tag":"reference","content":"contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. Transcription of primary sources classifies the material encoded according to some useful typology.","title":"fw"}
{"link":"/ref/handShift","tag":"reference","content":"marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. Transcription of primary sources indicates a handNote element describing the hand concerned.","title":"handShift"}
{"link":"/ref/am","tag":"reference","content":"contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. Transcription of primary sources","title":"am"}
{"link":"/ref/space","tag":"reference","content":"indicates the location of a significant space in the text. Transcription of primary sources indicates whether the space is horizontal or vertical. (responsible party) indicates the individual responsible for identifying and measuring the space","title":"space"}
{"link":"/ref/restore","tag":"reference","content":"indicates restoration of text to an earlier state by cancellation of an editorial or authorial marking or instruction. Transcription of primary sources","title":"restore"}
{"link":"/ref/subst","tag":"reference","content":"groups one or more deletions (or surplus text) with one or more additions when the combination is to be regarded as a single intervention in the text. Transcription of primary sources","title":"subst"}
{"link":"/ref/substJoin","tag":"reference","content":"identifies a series of possibly fragmented additions, deletions, or other revisions on a manuscript that combine to make up a single intervention in the text Transcription of primary sources","title":"substJoin"}
{"link":"/ref/supplied","tag":"reference","content":"signifies text supplied by the transcriber or editor for any reason; for example because the original cannot be read due to physical damage, or because of an obvious omission by the author or scribe. Transcription of primary sources one or more words indicating why the text has had to be supplied, e.g. overbinding , faded-ink , lost-folio , omitted-in-original .","title":"supplied"}
{"link":"/ref/surplus","tag":"reference","content":"marks text present in the source which the editor believes to be superfluous or redundant. Transcription of primary sources one or more words indicating why this text is believed to be superfluous, e.g. repeated , interpolated etc.","title":"surplus"}
{"link":"/ref/listChange","tag":"reference","content":"groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text. The TEI header indicates whether the ordering of its child change elements is to be considered significant or not","title":"listChange"}
{"link":"/ref/listTranspose","tag":"reference","content":"supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. Transcription of primary sources","title":"listTranspose"}
{"link":"/ref/line","tag":"reference","content":"contains the transcription of a topographic line in the source document Transcription of primary sources","title":"line"}
{"link":"/ref/syll","tag":"reference","content":"contains the syllabification of the headword. Dictionaries","title":"syll"}
{"link":"/ref/metamark","tag":"reference","content":"contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. Transcription of primary sources describes the function (for example status, insertion, deletion, transposition) of the metamark. identifies one or more elements to which the metamark applies.","title":"metamark"}
{"link":"/ref/retrace","tag":"reference","content":"contains a sequence of writing which has been retraced, for example by over-inking, to clarify or fix it. Transcription of primary sources","title":"retrace"}
{"link":"/ref/mod","tag":"reference","content":"represents any kind of modification identified within a single document. Transcription of primary sources","title":"mod"}
{"link":"/ref/transpose","tag":"reference","content":" describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined. Transcription of primary sources","title":"transpose"}
{"link":"/ref/redo","tag":"reference","content":"indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. Transcription of primary sources points to one or more elements representing the interventions which are being reasserted.","title":"redo"}
{"link":"/ref/undo","tag":"reference","content":"indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. Transcription of primary sources points to one or more elements representing the interventions which are to be reverted or undone.","title":"undo"}
{"link":"/ref/app","tag":"reference","content":"contains one entry in a critical apparatus, with an optional lemma and usually one or more readings or notes on the relevant passage. Critical Apparatus classifies the variation contained in this element according to some convenient typology. identifies the beginning of the lemma in the base text. identifies the endpoint of the lemma in the base text. indicates the location of the variation, when the location-referenced method of apparatus markup is used.","title":"app"}
{"link":"/ref/listApp","tag":"reference","content":"contains a list of apparatus entries. Critical Apparatus","title":"listApp"}
{"link":"/ref/lem","tag":"reference","content":"contains the lemma, or base text, of a textual variation. Critical Apparatus","title":"lem"}
{"link":"/ref/rdg","tag":"reference","content":"contains a single reading within a textual variation. Critical Apparatus","title":"rdg"}
{"link":"/ref/rdgGrp","tag":"reference","content":"within a textual variation, groups two or more readings perceived to have a genetic relationship or other affinity. Critical Apparatus","title":"rdgGrp"}
{"link":"/ref/witDetail","tag":"reference","content":"gives further information about a particular witness, or witnesses, to a particular reading. Critical Apparatus indicates the sigil or sigla identifying the witness or witnesses to which the detail refers. describes the type of information given about the witness.","title":"witDetail"}
{"link":"/ref/listWit","tag":"reference","content":"lists definitions for all the witnesses referred to by a critical apparatus, optionally grouped hierarchically. Critical Apparatus","title":"listWit"}
{"link":"/ref/wit","tag":"reference","content":"contains a list of one or more sigla of witnesses attesting a given reading, in a textual variation. Critical Apparatus","title":"wit"}
{"link":"/ref/witStart","tag":"reference","content":"indicates the beginning, or resumption, of the text of a fragmentary witness. Critical Apparatus","title":"witStart"}
{"link":"/ref/witEnd","tag":"reference","content":"indicates the end, or suspension, of the text of a fragmentary witness. Critical Apparatus","title":"witEnd"}
{"link":"/ref/lacunaStart","tag":"reference","content":"indicates the beginning of a lacuna in the text of a mostly complete textual witness. Critical Apparatus","title":"lacunaStart"}
{"link":"/ref/witness","tag":"reference","content":"contains either a description of a single witness referred to within the critical apparatus, or a list of witnesses which is to be referred to by a single sigil. Critical Apparatus","title":"witness"}
{"link":"/ref/lacunaEnd","tag":"reference","content":"indicates the end of a lacuna in a mostly complete textual witness. Critical Apparatus","title":"lacunaEnd"}
{"link":"/ref/model.rdgPart","tag":"reference","content":"groups elements which mark the beginning or ending of a fragmentary manuscript or other witness. Critical Apparatus","title":"model.rdgPart"}
{"link":"/ref/variantEncoding","tag":"reference","content":"declares the method used to encode text-critical variants. Critical Apparatus indicates which method is used to encode the apparatus of variants. indicates whether the apparatus appears within the running text or external to it.","title":"variantEncoding"}
{"link":"/ref/att.rdgPart","tag":"reference","content":"provides attributes to mark the beginning or ending of a fragmentary manuscript or other witness. Critical Apparatus contains a space-delimited list of one or more sigla indicating the witnesses to this reading beginning or ending at this point.","title":"att.rdgPart"}
{"link":"/ref/att.witnessed","tag":"reference","content":"provides attributes used to identify the witnesses supporting a particular reading in a critical apparatus. Critical Apparatus contains a space-delimited list of one or more pointers indicating the witnesses which attest to a given reading.","title":"att.witnessed"}
{"link":"/ref/att.textCritical","tag":"reference","content":"defines a set of attributes common to all elements representing variant readings in text critical work. Critical Apparatus classifies the reading according to some useful typology. classifies the cause for the variant reading, according to any appropriate typology of possible origins. provides a number indicating the position of this reading in a sequence, when there is reason to presume a sequence to the variants. points to other readings that are required when adopting the current reading or lemma.","title":"att.textCritical"}
{"link":"/ref/orgName","tag":"reference","content":"contains an organizational name. Names and dates","title":"orgName"}
{"link":"/ref/persName","tag":"reference","content":"contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. Names and dates","title":"persName"}
{"link":"/ref/surname","tag":"reference","content":"contains a family (inherited) name, as opposed to a given, baptismal, or nick name. Names and dates","title":"surname"}
{"link":"/ref/forename","tag":"reference","content":"contains a forename, given or baptismal name. Names and dates","title":"forename"}
{"link":"/ref/nameLink","tag":"reference","content":"contains a connecting phrase or link used within a name but not regarded as part of it, such as van der or of . Names and dates","title":"nameLink"}
{"link":"/ref/genName","tag":"reference","content":"contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named. Names and dates","title":"genName"}
{"link":"/ref/roleName","tag":"reference","content":"contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank. Names and dates","title":"roleName"}
{"link":"/ref/addName","tag":"reference","content":"contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name. Names and dates","title":"addName"}
{"link":"/ref/placeName","tag":"reference","content":"contains an absolute or relative place name. Names and dates","title":"placeName"}
{"link":"/ref/bloc","tag":"reference","content":"contains the name of a geo-political unit consisting of two or more nation states or countries. Names and dates","title":"bloc"}
{"link":"/ref/country","tag":"reference","content":"contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. Names and dates","title":"country"}
{"link":"/ref/region","tag":"reference","content":"contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. Names and dates","title":"region"}
{"link":"/ref/profileDesc","tag":"reference","content":"provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. The TEI header","title":"profileDesc"}
{"link":"/ref/settlement","tag":"reference","content":"contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. Names and dates","title":"settlement"}
{"link":"/ref/model.physDescPart","tag":"reference","content":"groups specialized elements forming part of the physical description of a manuscript or similar written source. Manuscript Description","title":"model.physDescPart"}
{"link":"/ref/district","tag":"reference","content":"contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit. Names and dates","title":"district"}
{"link":"/ref/geogFeat","tag":"reference","content":"contains a common noun identifying some geographical feature contained within a geographic name, such as valley, mount, etc. Names and dates","title":"geogFeat"}
{"link":"/ref/affiliation","tag":"reference","content":"contains an informal description of a person's present or past affiliation with some organization, for example an employer or sponsor. Names and dates","title":"affiliation"}
{"link":"/ref/age","tag":"reference","content":"specifies the age of a person. Names and dates supplies a numeric code representing the age or age group","title":"age"}
{"link":"/ref/birth","tag":"reference","content":"contains information about a person's birth, such as its date and place. Names and dates","title":"birth"}
{"link":"/ref/death","tag":"reference","content":"contains information about a person's death, such as its date and place. Names and dates","title":"death"}
{"link":"/ref/climate","tag":"reference","content":"contains information about the physical climate of a place. Names and dates","title":"climate"}
{"link":"/ref/education","tag":"reference","content":"contains a description of the educational experience of a person. Names and dates","title":"education"}
{"link":"/ref/faith","tag":"reference","content":"specifies the faith, religion, or belief set of a person. Names and dates","title":"faith"}
{"link":"/ref/event","tag":"reference","content":"contains data relating to any kind of significant event associated with a person, place, or organization. Names and dates","title":"event"}
{"link":"/ref/floruit","tag":"reference","content":"contains information about a person's period of activity. Names and dates","title":"floruit"}
{"link":"/ref/gender","tag":"reference","content":"specifies the gender identity of a person, persona, or character. Names and dates supplies a coded value for gender identity","title":"gender"}
{"link":"/ref/geo","tag":"reference","content":"contains any expression of a set of geographic coordinates, representing a point, line, or area on the surface of the earth in some notation. Names and dates","title":"geo"}
{"link":"/ref/langKnowledge","tag":"reference","content":"summarizes the state of a person's linguistic knowledge, either as prose or by a list of langKnown elements. Names and dates supplies one or more valid language tags for the languages specified","title":"langKnowledge"}
{"link":"/ref/glyph","tag":"reference","content":"provides descriptive information about a character glyph. Character and glyph documentation","title":"glyph"}
{"link":"/ref/langKnown","tag":"reference","content":"summarizes the state of a person's linguistic competence, i.e., knowledge of a single language. Names and dates supplies a valid language tag for the language concerned. a code indicating the person's level of knowledge for this language","title":"langKnown"}
{"link":"/ref/listEvent","tag":"reference","content":"contains a list of descriptions, each of which provides information about an identifiable event. Names and dates","title":"listEvent"}
{"link":"/ref/listPerson","tag":"reference","content":"contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. Names and dates","title":"listPerson"}
{"link":"/ref/listPlace","tag":"reference","content":"contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. Names and dates","title":"listPlace"}
{"link":"/ref/location","tag":"reference","content":"defines the location of a place as a set of geographical coordinates, in terms of other named geo-political entities, or as an address. Names and dates","title":"location"}
{"link":"/ref/listRelation","tag":"reference","content":"provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links. Names and dates","title":"listRelation"}
{"link":"/ref/nationality","tag":"reference","content":"contains an informal description of a person's present or past nationality or citizenship. Names and dates","title":"nationality"}
{"link":"/ref/occupation","tag":"reference","content":"contains an informal description of a person's trade, profession or occupation. Names and dates indicates the classification system or taxonomy in use, for example by supplying the identifier of a taxonomy element, or pointing to some other resource. identifies an occupation code defined within the classification system or taxonomy defined by the scheme attribute.","title":"occupation"}
{"link":"/ref/org","tag":"reference","content":"provides information about an identifiable organization such as a business, a tribe, or any other grouping of people. Names and dates specifies a primary role or classification for the organization.","title":"org"}
{"link":"/ref/person","tag":"reference","content":"provides information about an identifiable individual, for example a participant in a language interaction, or a person referred to in a historical source. Names and dates specifies a primary role or classification for the person. specifies the sex of the person. specifies the gender of the person. specifies an age group for the person.","title":"person"}
{"link":"/ref/persona","tag":"reference","content":"provides information about one of the personalities identified for a given individual, where an individual has multiple personalities. Names and dates specifies a primary role or classification for the persona. specifies the sex of the persona. specifies the gender of the persona. specifies an age group for the persona.","title":"persona"}
{"link":"/ref/personGrp","tag":"reference","content":"describes a group of individuals treated as a single person for analytic purposes. Names and dates specifies the role of this group of participants in the interaction. specifies the sex of the participant group. specifies the age group of the participants. describes informally the size or approximate size of the group for example by means of a number and an indication of accuracy e.g. approx 200.","title":"personGrp"}
{"link":"/ref/population","tag":"reference","content":"contains information about the population of a place. Names and dates","title":"population"}
{"link":"/ref/persPronouns","tag":"reference","content":"indicates the personal pronouns used, or assumed to be used, by the individual being described. Names and dates indicates support for the listed personal pronouns. supplies a regularized value for personal pronouns.","title":"persPronouns"}
{"link":"/ref/place","tag":"reference","content":"contains data about a geographic location Names and dates","title":"place"}
{"link":"/ref/relation","tag":"reference","content":"describes any kind of relationship or linkage amongst a specified group of places, events, persons, objects or other items. Names and dates supplies a name for the kind of relationship of which this is an instance. identifies the active participants in a non-mutual relationship, or all the participants in a mutual one. supplies a list of participants amongst all of whom the relationship holds equally. identifies the passive participants in a non-mutual relationship.","title":"relation"}
{"link":"/ref/sex","tag":"reference","content":"specifies the sex of an organism. Names and dates supplies a coded value for sex","title":"sex"}
{"link":"/ref/residence","tag":"reference","content":"describes a person's present or past places of residence. Names and dates","title":"residence"}
{"link":"/ref/state","tag":"reference","content":"contains a description of some status or quality attributed to a person, place, or organization often at some specific time or for a specific date range. Names and dates","title":"state"}
{"link":"/ref/socecStatus","tag":"reference","content":"contains an informal description of a person's perceived social or economic status. Names and dates identifies the classification system or taxonomy in use, for example by pointing to a locally-defined taxonomy element or by supplying a URI for an externally-defined system. identifies a status code defined within the classification system or taxonomy defined by the scheme attribute.","title":"socecStatus"}
{"link":"/ref/terrain","tag":"reference","content":"contains information about the physical terrain of a place. Names and dates","title":"terrain"}
{"link":"/ref/trait","tag":"reference","content":"contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. Names and dates","title":"trait"}
{"link":"/ref/object","tag":"reference","content":"contains a description of a single identifiable physical object. Names and dates","title":"object"}
{"link":"/ref/model.objectLike","tag":"reference","content":"groups elements which describe objects. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.objectLike"}
{"link":"/ref/objectName","tag":"reference","content":"contains a proper noun or noun phrase used to refer to an object. Names and dates","title":"objectName"}
{"link":"/ref/listObject","tag":"reference","content":"contains a list of descriptions, each of which provides information about an identifiable physical object. Names and dates","title":"listObject"}
{"link":"/ref/nym","tag":"reference","content":"contains the definition for a canonical name or name component of any kind. Names and dates points to constituent nyms","title":"nym"}
{"link":"/ref/objectIdentifier","tag":"reference","content":"groups one or more identifiers or pieces of locating information concerning a single object. Names and dates","title":"objectIdentifier"}
{"link":"/ref/model.orgStateLike","tag":"reference","content":"groups elements describing changeable characteristics of an organization which have a definite duration. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.orgStateLike"}
{"link":"/ref/listNym","tag":"reference","content":"contains a list of nyms, that is, standardized names for any thing. Names and dates","title":"listNym"}
{"link":"/ref/model.placeLike","tag":"reference","content":"groups elements used to provide information about places and their relationships. Declarations for classes, datatypes, and macros available to all TEI modules","title":"model.placeLike"}
{"link":"/ref/att.personal","tag":"reference","content":"common attributes for those elements which form part of a name usually, but not necessarily, a personal name. Declarations for classes, datatypes, and macros available to all TEI modules indicates whether the name component is given in full, as an abbreviation or simply as an initial. specifies the sort order of the name component in relation to others within the name.","title":"att.personal"}
{"link":"/ref/att.duration.iso","tag":"reference","content":"provides attributes for recording normalized temporal durations. Declarations for classes, datatypes, and macros available to all TEI modules indicates the length of this element in time.","title":"att.duration.iso"}
{"link":"/ref/teidata.temporal.iso","tag":"reference","content":"defines the range of attribute values expressing a temporal expression such as a date, a time, or a combination of them, that conform to the international standard Data elements and interchange formats – Information interchange – Representation of dates and times .","title":"teidata.temporal.iso"}
{"link":"/ref/teidata.duration.iso","tag":"reference","content":"defines the range of attribute values available for representation of a duration in time using ISO 8601 standard formats","title":"teidata.duration.iso"}
{"link":"/ref/geogName","tag":"reference","content":"identifies a name associated with some geographical feature such as Windrush Valley or Mount Sinai. Names and dates","title":"geogName"}
{"link":"/ref/row","tag":"reference","content":"contains one row of a table. Tables, formulæ, notated music, and figures","title":"row"}
{"link":"/ref/table","tag":"reference","content":"contains text displayed in tabular form, in rows and columns. Tables, formulæ, notated music, and figures indicates the number of rows in the table. indicates the number of columns in each row of the table.","title":"table"}
{"link":"/ref/formula","tag":"reference","content":"contains a mathematical or other formula. Tables, formulæ, notated music, and figures","title":"formula"}
{"link":"/ref/cell","tag":"reference","content":"contains one cell of a table. Tables, formulæ, notated music, and figures","title":"cell"}
{"link":"/ref/notatedMusic","tag":"reference","content":"encodes the presence of music notation in a text Tables, formulæ, notated music, and figures","title":"notatedMusic"}
{"link":"/ref/figDesc","tag":"reference","content":"contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. Tables, formulæ, notated music, and figures","title":"figDesc"}
{"link":"/ref/figure","tag":"reference","content":"groups elements representing or containing graphic information such as an illustration, formula, or figure. Tables, formulæ, notated music, and figures","title":"figure"}
{"link":"/ref/textDesc","tag":"reference","content":"provides a description of a text in terms of its situational parameters. Corpus texts","title":"textDesc"}
{"link":"/ref/settingDesc","tag":"reference","content":"describes the setting or settings within which a language interaction takes place, or other places otherwise referred to in a text, edition, or metadata. Corpus texts","title":"settingDesc"}
{"link":"/ref/particDesc","tag":"reference","content":"describes the identifiable speakers, voices, or other participants in any kind of text or other persons named or otherwise referred to in a text, edition, or metadata. Corpus texts","title":"particDesc"}
{"link":"/ref/constitution","tag":"reference","content":"describes the internal composition of a text or text sample, for example as fragmentary, complete, etc. Corpus texts specifies how the text was constituted.","title":"constitution"}
{"link":"/ref/channel","tag":"reference","content":"describes the medium or channel by which a text is delivered or experienced. For a written text, this might be print, manuscript, email, etc.; for a spoken one, radio, telephone, face-to-face, etc. Corpus texts specifies the mode of this channel with respect to speech and writing.","title":"channel"}
{"link":"/ref/derivation","tag":"reference","content":"describes the nature and extent of originality of this text. Corpus texts categorizes the derivation of the text.","title":"derivation"}
{"link":"/ref/domain","tag":"reference","content":"describes the most important social context in which the text was realized or for which it is intended, for example private vs. public, education, religion, etc. Corpus texts categorizes the domain of use.","title":"domain"}
{"link":"/ref/preparedness","tag":"reference","content":"describes the extent to which a text may be regarded as prepared or spontaneous. Corpus texts a keyword characterizing the type of preparedness.","title":"preparedness"}
{"link":"/ref/interaction","tag":"reference","content":"describes the extent, cardinality and nature of any interaction among those producing and experiencing the text, for example in the form of response or interjection, commentary, etc. Corpus texts specifies the degree of interaction between active and passive participants in the text. specifies the number of active participants (or addressors ) producing parts of the text. specifies the number of passive participants (or addressees ) to whom a text is directed or in whose presence it is created or performed.","title":"interaction"}
{"link":"/ref/setting","tag":"reference","content":"describes one particular setting in which a language interaction takes place. Corpus texts","title":"setting"}
{"link":"/ref/purpose","tag":"reference","content":"characterizes a single purpose or communicative function of the text. Corpus texts specifies a particular kind of purpose. specifies the extent to which this purpose predominates.","title":"purpose"}
{"link":"/ref/locale","tag":"reference","content":"contains a brief informal description of the kind of place concerned, for example: a room, a restaurant, a park bench, etc. Corpus texts","title":"locale"}
{"link":"/ref/activity","tag":"reference","content":"contains a brief informal description of what a participant in a language interaction is doing other than speaking, if anything. Corpus texts","title":"activity"}
{"link":"/ref/link","tag":"reference","content":"defines an association or hypertextual link among elements or passages, of some type not more precisely specifiable by other elements. Linking, segmentation, and alignment","title":"link"}
{"link":"/ref/linkGrp","tag":"reference","content":"defines a collection of associations or hypertextual links. Linking, segmentation, and alignment","title":"linkGrp"}
{"link":"/ref/anchor","tag":"reference","content":"attaches an identifier to a point within a text, whether or not it corresponds with a textual element. Linking, segmentation, and alignment","title":"anchor"}
{"link":"/ref/ab","tag":"reference","content":"contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph. Linking, segmentation, and alignment","title":"ab"}
{"link":"/ref/when","tag":"reference","content":"indicates a point in time either relative to other elements in the same timeline tag, or absolutely. Linking, segmentation, and alignment supplies an absolute value for the time. specifies the unit of time in which the interval value is expressed, if this is not inherited from the parent timeline . specifies a time interval either as a number or as one of the keywords defined by the datatype teidata.interval identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point.","title":"when"}
{"link":"/ref/timeline","tag":"reference","content":"provides a set of ordered points in time which can be linked to elements of a spoken text to create a temporal alignment of that text. Linking, segmentation, and alignment designates the origin of the timeline, i.e. the time at which it begins. specifies the unit of time corresponding to the interval value of the timeline or of its constituent points in time. specifies a time interval either as a positive integral value or using one of a set of predefined codes.","title":"timeline"}
{"link":"/ref/seg","tag":"reference","content":"represents any segmentation of text below the chunk level. Linking, segmentation, and alignment","title":"seg"}
{"link":"/ref/join","tag":"reference","content":"identifies a possibly fragmented segment of text, by pointing at the possibly discontiguous elements which compose it. Linking, segmentation, and alignment specifies the name of an element which this aggregation may be understood to represent. indicates whether the targets to be joined include the entire element indicated (the entire subtree including its root), or just the children of the target (the branches of the subtree).","title":"join"}
{"link":"/ref/alt","tag":"reference","content":"identifies an alternation or a set of choices among elements or passages. Linking, segmentation, and alignment states whether the alternations gathered in this collection are exclusive or inclusive. If mode is excl, each weight states the probability that the corresponding alternative occurs. If mode is incl each weight states the probability that the corresponding alternative occurs given that at least one of the other alternatives occurs.","title":"alt"}
{"link":"/ref/joinGrp","tag":"reference","content":"groups a collection of join elements and possibly pointers. Linking, segmentation, and alignment supplies the default value for the result on each join included within the group.","title":"joinGrp"}
{"link":"/ref/standOff","tag":"reference","content":"Functions as a container element for linked data, contextual information, and stand-off annotations embedded in a TEI document. Linking, segmentation, and alignment","title":"standOff"}
{"link":"/ref/altGrp","tag":"reference","content":"groups a collection of alt elements and possibly pointers. Linking, segmentation, and alignment states whether the alternations gathered in this collection are exclusive or inclusive.","title":"altGrp"}
{"link":"/ref/listAnnotation","tag":"reference","content":"contains a list of annotations, typically encoded as annotation , annotationBlock , or note , possibly organized with nested listAnnotation elements. Linking, segmentation, and alignment","title":"listAnnotation"}
{"link":"/ref/annotation","tag":"reference","content":"represents an annotation following the Web Annotation Data Model . Linking, segmentation, and alignment","title":"annotation"}
{"link":"/ref/att.global.linking","tag":"reference","content":"provides a set of attributes for hypertextual linking. Linking, segmentation, and alignment points to elements that correspond to the current element in some way. points to elements that are synchronous with the current element. points to an element that is the same as the current element. points to an element of which the current element is a copy. points to the next element of a virtual aggregate of which the current element is part. points to the previous element of a virtual aggregate of which the current element is part. points to elements that are in exclusive alternation with the current element. selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected.","title":"att.global.linking"}
{"link":"/ref/s","tag":"reference","content":"contains a sentence-like division of a text. Simple analytic mechanisms","title":"s"}
{"link":"/ref/cl","tag":"reference","content":"represents a grammatical clause. Simple analytic mechanisms","title":"cl"}
{"link":"/ref/secl","tag":"reference","content":"Secluded. Marks text present in the source which the editor believes to be genuine but out of its original place (which is unknown). Transcription of primary sources one or more words indicating why this text has been secluded, e.g. interpolated etc.","title":"secl"}
{"link":"/ref/m","tag":"reference","content":"represents a grammatical morpheme. Simple analytic mechanisms supplies the morpheme's base form.","title":"m"}
{"link":"/ref/phr","tag":"reference","content":"represents a grammatical phrase. Simple analytic mechanisms","title":"phr"}
{"link":"/ref/c","tag":"reference","content":"represents a character. Simple analytic mechanisms","title":"c"}
{"link":"/ref/att.lexicographic.normalized","tag":"reference","content":"provides attributes for usage within word-level elements in the analysis module and within lexicographic microstructure in the dictionaries module. Simple analytic mechanisms provides the normalized/standardized form of information present in the source text in a non-normalized form gives the original string or is the empty string when the element does not appear in the source text.","title":"att.lexicographic.normalized"}
{"link":"/ref/att.linguistic","tag":"reference","content":"provides a set of attributes concerning linguistic features of tokens, for usage within token-level elements, specifically w and pc in the analysis module. Simple analytic mechanisms provides a lemma (base form) for the word, typically uninflected and serving both as an identifier (e.g. in dictionary contexts, as a headword), and as a basis for potential inflections. provides a pointer to a definition of the lemma for the word, for example in an online lexicon. (part of speech) indicates the part of speech assigned to a token (i.e. information on whether it is a noun, adjective, or verb), usually according to some official reference vocabulary (e.g. for German: STTS, for English: CLAWS, for Polish: NKJP, etc.). (morphosyntactic description) supplies morphosyntactic information for a token, usually according to some official reference vocabulary (e.g. for German: STTS-large tagset ; for a feature description system designed as (pragmatically) universal, see Universal Features ). when present, provides information on whether the token in question is adjacent to another, and if so, on which side.","title":"att.linguistic"}
{"link":"/ref/pc","tag":"reference","content":"contains a character or string of characters regarded as constituting a single punctuation mark. Simple analytic mechanisms indicates the extent to which this punctuation mark conventionally separates words or phrases provides a name for the kind of unit delimited by this punctuation mark. indicates whether this punctuation mark precedes or follows the unit it delimits.","title":"pc"}
{"link":"/ref/att.global.analytic","tag":"reference","content":"provides additional global attributes for associating specific analyses or interpretations with appropriate portions of a text. Simple analytic mechanisms indicates one or more elements containing interpretations of the element on which the ana attribute appears.","title":"att.global.analytic"}
{"link":"/ref/span","tag":"reference","content":"associates an interpretative annotation directly with a span of text. Simple analytic mechanisms gives the identifier of the node which is the starting point of the span of text being annotated; if not accompanied by a to attribute, gives the identifier of the node of the entire span of text being annotated. gives the identifier of the node which is the end-point of the span of text being annotated.","title":"span"}
{"link":"/ref/spanGrp","tag":"reference","content":"collects together span tags. Simple analytic mechanisms","title":"spanGrp"}
{"link":"/ref/interp","tag":"reference","content":"summarizes a specific interpretative annotation which can be linked to a span of text. Simple analytic mechanisms","title":"interp"}
{"link":"/ref/fsDecl","tag":"reference","content":"declares one type of feature structure. Feature structures gives a name for the type of feature structure being declared. gives the name of one or more typed feature structures from which this type inherits feature specifications and constraints; if this type includes a feature specification with the same name as that of any of those specified by this attribute, or if more than one specification of the same name is inherited, then the set of possible values is defined by unification. Similarly, the set of constraints applicable is derived by combining those specified explicitly within this element with those implied by the baseTypes attribute. When no baseTypes attribute is specified, no feature specification or constraint is inherited. ","title":"fsDecl"}
{"link":"/ref/interpGrp","tag":"reference","content":"collects together a set of related interpretations which share responsibility or type. Simple analytic mechanisms","title":"interpGrp"}
{"link":"/ref/fsdDecl","tag":"reference","content":"provides a feature system declaration comprising one or more feature structure declarations or feature structure declaration links. Feature structures","title":"fsdDecl"}
{"link":"/ref/fsdLink","tag":"reference","content":"associates the name of a typed feature structure with a feature structure declaration for it. Feature structures identifies the type of feature structure to be documented; this will be the value of the type attribute on at least one feature structure. supplies a pointer to a feature structure declaration ( fsDecl ) element within the current document or elsewhere.","title":"fsdLink"}
{"link":"/ref/fDecl","tag":"reference","content":"declares a single feature, specifying its name, organization, range of allowed values, and optionally its default value. Feature structures a single word which follows the rules defining a legal XML name (see 1 ), indicating the name of the feature being declared; matches the name attribute of f elements in the text. indicates whether or not the value of this feature may be present.","title":"fDecl"}
{"link":"/ref/fsDescr","tag":"reference","content":"describes in prose what is represented by the type of feature structure declared in the enclosing fsDecl. Feature structures","title":"fsDescr"}
{"link":"/ref/vRange","tag":"reference","content":"defines the range of allowed values for a feature, in the form of an fs , vAlt , or primitive value; for the value of an f to be valid, it must be subsumed by the specified range; if the f contains multiple values (as sanctioned by the org attribute), then each value must be subsumed by the vRange . Feature structures","title":"vRange"}
{"link":"/ref/vDefault","tag":"reference","content":"declares the default value to be supplied when a feature structure does not contain an instance of f for this name; if unconditional, it is specified as one (or, depending on the value of the org attribute of the enclosing fDecl ) more fs elements or primitive values; if conditional, it is specified as one or more if elements; if no default is specified, or no condition matches, the value none is assumed. Feature structures","title":"vDefault"}
{"link":"/ref/fDescr","tag":"reference","content":"describes in prose what is represented by the feature being declared and its values. Feature structures","title":"fDescr"}
{"link":"/ref/if","tag":"reference","content":"defines a conditional default value for a feature; the condition is specified as a feature structure, and is met if it subsumes the feature structure in the text for which a default value is sought. Feature structures","title":"if"}
{"link":"/ref/then","tag":"reference","content":"separates the condition from the default in an if , or the antecedent and the consequent in a cond element. Feature structures","title":"then"}
{"link":"/ref/fsConstraints","tag":"reference","content":"specifies constraints on the content of valid feature structures. Feature structures","title":"fsConstraints"}
{"link":"/ref/cond","tag":"reference","content":"defines a conditional feature-structure constraint; the consequent and the antecedent are specified as feature structures or feature-structure collections; the constraint is satisfied if both the antecedent and the consequent subsume a given feature structure, or if the antecedent does not. Feature structures","title":"cond"}
{"link":"/ref/iff","tag":"reference","content":"separates the condition from the consequence in a bicond element. Feature structures","title":"iff"}
{"link":"/ref/bicond","tag":"reference","content":"defines a biconditional feature-structure constraint; both consequent and antecedent are specified as feature structures or groups of feature structures; the constraint is satisfied if both subsume a given feature structure, or if both do not. Feature structures","title":"bicond"}
{"link":"/ref/f","tag":"reference","content":"represents a feature value specification , that is, the association of a name with a value of any of several different types. Feature structures a single word which follows the rules defining a legal XML name (see 1 ), providing a name for the feature. references any element which can be used to represent the value of a feature.","title":"f"}
{"link":"/ref/fs","tag":"reference","content":"represents a feature structure , that is, a collection of feature-value pairs organized as a structural unit. Feature structures specifies the type of the feature structure. references the feature-value specifications making up this feature structure.","title":"fs"}
{"link":"/ref/binary","tag":"reference","content":"represents the value part of a feature-value specification which can contain either of exactly two possible values. Feature structures supplies a binary value.","title":"binary"}
{"link":"/ref/numeric","tag":"reference","content":"represents the value part of a feature-value specification which contains a numeric value or range. Feature structures supplies a lower bound for the numeric value represented, and also (if max is not supplied) its upper bound. supplies an upper bound for the numeric value represented. specifies whether the value represented should be truncated to give an integer value.","title":"numeric"}
{"link":"/ref/symbol","tag":"reference","content":"represents the value part of a feature-value specification which contains one of a finite list of symbols. Feature structures supplies a symbolic value for the feature, one of a finite list that may be specified in a feature declaration.","title":"symbol"}
{"link":"/ref/vLabel","tag":"reference","content":"represents the value part of a feature-value specification which appears at more than one point in a feature structure. Feature structures supplies a name identifying the sharing point.","title":"vLabel"}
{"link":"/ref/string","tag":"reference","content":"represents the value part of a feature-value specification which contains a string. Feature structures","title":"string"}
{"link":"/ref/vColl","tag":"reference","content":"represents the value part of a feature-value specification which contains multiple values organized as a set, bag, or list. Feature structures indicates organization of given value or values as set, bag or list.","title":"vColl"}
{"link":"/ref/default","tag":"reference","content":"represents the value part of a feature-value specification which contains a defaulted value. Feature structures","title":"default"}
{"link":"/ref/vAlt","tag":"reference","content":"represents the value part of a feature-value specification which contains a set of values, only one of which can be valid. Feature structures","title":"vAlt"}
{"link":"/ref/vNot","tag":"reference","content":"represents a feature value which is the negation of its content. Feature structures","title":"vNot"}
{"link":"/ref/vMerge","tag":"reference","content":"represents a feature value which is the result of merging together the feature values contained by its children, using the organization specified by the org attribute. Feature structures indicates the organization of the resulting merged values as set, bag or list.","title":"vMerge"}
{"link":"/ref/model.fsdDeclPart","tag":"reference","content":"groups elements which can occur as direct children of fsdDecl . Feature structures","title":"model.fsdDeclPart"}
{"link":"/ref/fLib","tag":"reference","content":"assembles a library of f (feature) elements. Feature structures","title":"fLib"}
{"link":"/ref/fvLib","tag":"reference","content":"assembles a library of reusable feature value elements (including complete feature structures). Feature structures","title":"fvLib"}
{"link":"/ref/listOrg","tag":"reference","content":"contains a list of elements, each of which provides information about an identifiable organization. Names and dates","title":"listOrg"}
{"link":"/ref/graph","tag":"reference","content":"encodes a graph, which is a collection of nodes, and arcs which connect the nodes. Graphs, networks, and trees describes the type of graph. states the order of the graph, i.e., the number of its nodes. states the size of the graph, i.e., the number of its arcs.","title":"graph"}
{"link":"/ref/arc","tag":"reference","content":"encodes an arc, the connection from one node to another in a graph. Graphs, networks, and trees gives the identifier of the node which is adjacent from this arc. gives the identifier of the node which is adjacent to this arc.","title":"arc"}
{"link":"/ref/node","tag":"reference","content":"encodes a node, a possibly labeled point in a graph. Graphs, networks, and trees provides the value of a node, which is a feature structure or other analytic element. provides a type for a node. gives the identifiers of the nodes which are adjacent to the current node. gives the identifiers of the nodes which are adjacent from the current node. gives the identifiers of the nodes which are both adjacent to and adjacent from the current node. gives the in degree of the node, the number of nodes which are adjacent from the given node. gives the out degree of the node, the number of nodes which are adjacent to the given node. gives the degree of the node, the number of arcs with which the node is incident.","title":"node"}
{"link":"/ref/iNode","tag":"reference","content":"represents an intermediate (or internal) node of a tree. Graphs, networks, and trees indicates an intermediate node, which is a feature structure or other analytic element. provides a list of identifiers of the elements which are the children of the intermediate node. provides the identifier of the element which is the parent of this node. indicates whether or not the internal node is ordered. provides the identifier of an element which this node follows. gives the out degree of an intermediate node, the number of its children.","title":"iNode"}
{"link":"/ref/tree","tag":"reference","content":"encodes a tree, which is made up of a root, internal nodes, leaves, and arcs from root to leaves. Graphs, networks, and trees gives the maximum number of children of the root and internal nodes of the tree. indicates whether or not the tree is ordered, or if it is partially ordered. gives the order of the tree, i.e., the number of its nodes.","title":"tree"}
{"link":"/ref/root","tag":"reference","content":"represents the root node of a tree. Graphs, networks, and trees identifies the root node of the network by pointing to a feature structure or other analytic element. identifies the elements which are the children of the root node. indicates whether or not the root is ordered. gives the out degree of the root, the number of its children.","title":"root"}
{"link":"/ref/leaf","tag":"reference","content":"encodes the leaves (terminal nodes) of a tree. Graphs, networks, and trees provides a pointer to a feature structure or other analytic element. provides the identifier of parent of a leaf. provides an identifier of an element which this leaf follows.","title":"leaf"}
{"link":"/ref/eTree","tag":"reference","content":"provides an alternative to the tree element for representing ordered rooted tree structures. Graphs, networks, and trees provides the value of an embedding tree, which is a feature structure or other analytic element.","title":"eTree"}
{"link":"/ref/triangle","tag":"reference","content":"provides for an underspecified eTree , that is, an eTree with information left out. Graphs, networks, and trees supplies a value for the triangle, in the form of the identifier of a feature structure or other analytic element.","title":"triangle"}
{"link":"/ref/eLeaf","tag":"reference","content":"provides explicitly for a leaf of an embedding tree, which may also be encoded with the eTree element. Graphs, networks, and trees indicates the value of an embedding leaf, which is a feature structure or other analytic element.","title":"eLeaf"}
{"link":"/ref/forest","tag":"reference","content":"provides for groups of rooted trees. Graphs, networks, and trees","title":"forest"}
{"link":"/ref/listForest","tag":"reference","content":"provides for lists of forests. Graphs, networks, and trees identifies the type of the forest group.","title":"listForest"}
{"link":"/ref/precision","tag":"reference","content":"indicates the numerical accuracy or precision associated with some aspect of the text markup. Certainty, Precision, and Responsibility characterizes the precision of the element or attribute pointed to by the precision element. supplies a standard deviation associated with the value in question","title":"precision"}
{"link":"/ref/att","tag":"reference","content":"contains the name of an attribute appearing within running text. Documentation of TEI and other XML markup languages supplies an identifier for the scheme in which this name is defined.","title":"att"}
{"link":"/ref/certainty","tag":"reference","content":"indicates the degree of certainty associated with some aspect of the text markup. Certainty, Precision, and Responsibility characterizes the element in some sense, using any convenient classification scheme or typology; sample categorization of annotations of uncertainty might use following values: signifies the degree of certainty associated with the object pointed to by the certainty element. indicates more exactly the aspect concerning which certainty is being expressed: specifically, whether the markup is correctly located, whether the correct element or attribute name has been used, or whether the content of the element or attribute is correct, etc. provides an alternative value for the aspect of the markup in question—an alternative generic identifier, transcription, or attribute value, or the identifier of an anchor element (to indicate an alternative starting or ending location). If an assertedValue is given, the confidence level specified by degree applies to the alternative markup specified by assertedValue; if none is given, it applies to the markup in the text. indicates one or more element(s) characterizing the conditions which are assumed in the assignment of a degree of confidence. indicates the degree of confidence assigned to the aspect of the markup named by the locus attribute.","title":"certainty"}
{"link":"/ref/code","tag":"reference","content":"contains literal code from some formal language such as a programming language. Documentation of TEI and other XML markup languages a name identifying the formal language in which the code is expressed","title":"code"}
{"link":"/ref/respons","tag":"reference","content":"identifies the individual(s) responsible for some aspect of the content or markup of particular element(s). Certainty, Precision, and Responsibility indicates the specific aspect of the encoding (markup or content) for which responsibility is being assigned.","title":"respons"}
{"link":"/ref/egXML","tag":"reference","content":"a single XML fragment demonstrating the use of some XML, such as elements, attributes, or processing instructions, etc., in which the egXML element functions as the root element. Documentation of TEI and other XML markup languages indicates the intended validity of the example with respect to a schema.","title":"egXML"}
{"link":"/ref/gi","tag":"reference","content":"contains the name (generic identifier) of an element. Documentation of TEI and other XML markup languages supplies the name of the scheme in which this name is defined.","title":"gi"}
{"link":"/ref/eg","tag":"reference","content":"contains any kind of illustrative example. Documentation of TEI and other XML markup languages","title":"eg"}
{"link":"/ref/ident","tag":"reference","content":"contains an identifier or name for an object of some kind in a formal language. ident is used for tokens such as variable names, class names, type names, function names etc. in formal programming languages. Documentation of TEI and other XML markup languages","title":"ident"}
{"link":"/ref/tag","tag":"reference","content":"contains text of a complete start- or end-tag, possibly including attribute specifications, but excluding the opening and closing markup delimiter characters. Documentation of TEI and other XML markup languages indicates the type of XML tag intended supplies the name of the schema in which this tag is defined.","title":"tag"}
{"link":"/ref/val","tag":"reference","content":"contains a single attribute value. Documentation of TEI and other XML markup languages","title":"val"}
{"link":"/ref/specDesc","tag":"reference","content":"indicates that a description of the specified element, class, or macro should be included at this point within a document. Documentation of TEI and other XML markup languages supplies the identifier of the documentary element or class for which a description is to be obtained. supplies attribute names for which descriptions should additionally be obtained.","title":"specDesc"}
{"link":"/ref/specList","tag":"reference","content":"marks where a list of descriptions is to be inserted into the prose documentation. Documentation of TEI and other XML markup languages","title":"specList"}
{"link":"/ref/classRef","tag":"reference","content":"points to the specification for an attribute or model class which is to be included in a schema Documentation of TEI and other XML markup languages the identifier used for the required class within the source indicated. indicates how references to this class within a content model should be interpreted. supplies a list of class members which are to be included in the schema being defined. supplies a list of class members which are to be excluded from the schema being defined.","title":"classRef"}
{"link":"/ref/elementRef","tag":"reference","content":"points to the specification for some element which is to be included in a schema Documentation of TEI and other XML markup languages the identifier used for the required element within the source indicated.","title":"elementRef"}
{"link":"/ref/macroRef","tag":"reference","content":"points to the specification for some pattern which is to be included in a schema Documentation of TEI and other XML markup languages the identifier used for the required pattern within the source indicated.","title":"macroRef"}
{"link":"/ref/moduleSpec","tag":"reference","content":"documents the structure, content, and purpose of a single module, i.e. a named and externally visible group of declarations. Documentation of TEI and other XML markup languages","title":"moduleSpec"}
{"link":"/ref/moduleRef","tag":"reference","content":"references a module which is to be incorporated into a schema. Documentation of TEI and other XML markup languages specifies a default prefix which will be prepended to all patterns from the imported module supplies a list of the elements which are to be copied from the specified module into the schema being defined. supplies a list of the elements which are not to be copied from the specified module into the schema being defined. the name of a TEI module refers to a non-TEI module of RELAX NG code by external location","title":"moduleRef"}
{"link":"/ref/schemaSpec","tag":"reference","content":"generates a TEI-conformant schema and documentation for it. Documentation of TEI and other XML markup languages specifies entry points to the schema, i.e. which patterns may be used as the root of documents conforming to it. specifies a default prefix which will be prepended to all patterns relating to TEI elements, unless otherwise stated. specifies which language to use when creating the objects in a schema if names for elements or attributes are available in more than one language specifies which languages to use when creating documentation if the description for an element, attribute, class or macro is available in more than one language provides a list of namespaces and/or prefixed element names to be excluded by default from anyName in RELAX NG schemas","title":"schemaSpec"}
{"link":"/ref/specGrp","tag":"reference","content":"contains any convenient grouping of specifications for use within the current module. Documentation of TEI and other XML markup languages","title":"specGrp"}
{"link":"/ref/specGrpRef","tag":"reference","content":"indicates that the declarations contained by the specGrp referenced should be inserted at this point. Documentation of TEI and other XML markup languages points at the specification group which logically belongs here.","title":"specGrpRef"}
{"link":"/ref/elementSpec","tag":"reference","content":"documents the structure, content, and purpose of a single element type. Documentation of TEI and other XML markup languages specifies a default prefix which will be prepended to all patterns relating to the element, unless otherwise stated.","title":"elementSpec"}
{"link":"/ref/classSpec","tag":"reference","content":"contains reference information for a TEI element class; that is a group of elements which appear together in content models, or which share some common attribute, or both. Documentation of TEI and other XML markup languages indicates whether this is a model class or an attribute class indicates which alternation and sequence instantiations of a model class may be referenced. By default, all variations are permitted.","title":"classSpec"}
{"link":"/ref/dataSpec","tag":"reference","content":"documents a datatype. Documentation of TEI and other XML markup languages","title":"dataSpec"}
{"link":"/ref/att.translatable","tag":"reference","content":"provides attributes used to indicate the status of a translatable portion of an ODD document. Documentation of TEI and other XML markup languages specifies the date on which the source text was extracted and sent to the translator","title":"att.translatable"}
{"link":"/ref/macroSpec","tag":"reference","content":"documents the function and implementation of a pattern. Documentation of TEI and other XML markup languages","title":"macroSpec"}
{"link":"/ref/remarks","tag":"reference","content":"contains any commentary or discussion about the usage of an element, attribute, class, or entity not otherwise documented within the containing element. Documentation of TEI and other XML markup languages specifies the remark concerned.","title":"remarks"}
{"link":"/ref/listRef","tag":"reference","content":"supplies a list of significant references in the current document or elsewhere. Documentation of TEI and other XML markup languages","title":"listRef"}
{"link":"/ref/exemplum","tag":"reference","content":"groups an example demonstrating the use of an element along with optional paragraphs of commentary. Documentation of TEI and other XML markup languages","title":"exemplum"}
{"link":"/ref/classes","tag":"reference","content":"specifies all the classes of which the documented element or class is a member or subclass. Documentation of TEI and other XML markup languages specifies the effect of this declaration on its parent module.","title":"classes"}
{"link":"/ref/memberOf","tag":"reference","content":"specifies class membership of the documented element or class. Documentation of TEI and other XML markup languages specifies the identifier for a class of which the documented element or class is a member or subclass specifies the effect of this declaration on its parent module. supplies the maximum number of times the element can occur in elements which use this model class in their content model supplies the minumum number of times the element must occur in elements which use this model class in their content model","title":"memberOf"}
{"link":"/ref/equiv","tag":"reference","content":"specifies a component which is considered equivalent to the parent element, either by co-reference, or by external link. Documentation of TEI and other XML markup languages a single word which follows the rules defining a legal XML name (see 1 ), naming the underlying concept of which the parent is a representation. references the underlying concept of which the parent is a representation by means of some external identifier references an external script which contains a method to transform instances of this element to canonical TEI","title":"equiv"}
{"link":"/ref/altIdent","tag":"reference","content":"supplies the recommended XML name for an element, class, attribute, etc. in some language. Documentation of TEI and other XML markup languages The altIdent element should only be a child of attDef , classSpec , constraintSpec , dataSpec , elementSpec , macroSpec , or valItem . Thus its use in other places is being deprecated. Other than when used to indicate the formal public identifier of a module (which is a deprecated usage), the content of altIdent should be a single teidata.xmlName . ","title":"altIdent"}
{"link":"/ref/modelSequence","tag":"reference","content":"any sequence of model or modelSequence elements which is to be processed as a single set of actions Documentation of TEI and other XML markup languages the condition under which this model applies given as an XPath Predicate Expression whether to obey any rendition attribute that is present the intended output method","title":"modelSequence"}
{"link":"/ref/model","tag":"reference","content":"describes the processing intended for a specified element. Documentation of TEI and other XML markup languages names the process or function which this processing model uses in order to produce output. whether to obey any rendition attribute that is present. the intended output. the name of a CSS class which should be associated with this element It is ambigous to have 2 model s that have both the same output and have no predicate (and thus select the same set of nodes). It is ambigous to have 2 model s that have both the same output and the same predicate (and thus select the same set of nodes).","title":"model"}
{"link":"/ref/modelGrp","tag":"reference","content":"any grouping of model or modelSequence elements with a common output method Documentation of TEI and other XML markup languages whether to obey any rendition attribute which is present the intended output method","title":"modelGrp"}
{"link":"/ref/outputRendition","tag":"reference","content":" describes the rendering or appearance intended for all occurrences of an element in a specified context for a specified type of output. Documentation of TEI and other XML markup languages provides a way of defining pseudo-elements, that is, styling rules applicable to specific sub-portions of an element.","title":"outputRendition"}
{"link":"/ref/paramList","tag":"reference","content":"list of parameter specifications Documentation of TEI and other XML markup languages","title":"paramList"}
{"link":"/ref/paramSpec","tag":"reference","content":"supplies specification for one parameter of a model behaviour Documentation of TEI and other XML markup languages","title":"paramSpec"}
{"link":"/ref/att.predicate","tag":"reference","content":"provides attributes for filtering by an XPath predicate expression. Documentation of TEI and other XML markup languages the condition under which the element bearing this attribute applies, given as an XPath predicate expression.","title":"att.predicate"}
{"link":"/ref/param","tag":"reference","content":"provides a parameter for a model behaviour by supplying its name and an XPath expression identifying the location of its content. Documentation of TEI and other XML markup languages a name for the parameter being supplied supplies an XPath expression which when evaluated provides the value for the parameter","title":"param"}
{"link":"/ref/att.repeatable","tag":"reference","content":"provides attributes for the elements which define component parts of a content model. Documentation of TEI and other XML markup languages indicates the smallest number of times this component may occur. indicates the largest number of times this component may occur.","title":"att.repeatable"}
{"link":"/ref/content","tag":"reference","content":"contains a declaration of the intended content model for the element (or other construct) being specified. Documentation of TEI and other XML markup languages controls whether or not pattern names generated in the corresponding RELAX NG schema source are automatically prefixed to avoid potential nameclashes.","title":"content"}
{"link":"/ref/model.contentPart","tag":"reference","content":"groups elements which may appear as part of the content element. Documentation of TEI and other XML markup languages","title":"model.contentPart"}
{"link":"/ref/sequence","tag":"reference","content":"indicates that the constructs referenced by its children form a sequence Documentation of TEI and other XML markup languages if true, indicates that the order in which component elements of a sequence appear in a document must correspond to the order in which they are given in the content model.","title":"sequence"}
{"link":"/ref/alternate","tag":"reference","content":"indicates that the constructs referenced by its children form an alternation Documentation of TEI and other XML markup languages","title":"alternate"}
{"link":"/ref/constraint","tag":"reference","content":"the formal rules of a constraint Documentation of TEI and other XML markup languages","title":"constraint"}
{"link":"/ref/attList","tag":"reference","content":"contains documentation for all the attributes associated with this element, as a series of attDef elements. Documentation of TEI and other XML markup languages specifies whether all the attributes in the list are available (org=\"group\") or only one of them (org=\"choice\")","title":"attList"}
{"link":"/ref/constraintSpec","tag":"reference","content":"contains a formal constraint, typically expressed in a rule-based schema language, to which a construct must conform in order to be considered valid Documentation of TEI and other XML markup languages supplies the name of the language in which the constraints are defined characterizes the constraintSpec element in some sense; used to indicate when a constraintSpec warns about a deprecated construct. Relationship between scheme attribute and contents: Schematron 1.x Relationship between scheme attribute and contents: ISO Schematron","title":"constraintSpec"}
{"link":"/ref/datatype","tag":"reference","content":"specifies the declared value for an attribute, by referring to any datatype defined by the chosen schema language. Documentation of TEI and other XML markup languages indicates the minimum number of times this datatype may occur in an instance of the attribute being defined indicates the maximum number of times this datatype may occur in an instance of the attribute being defined","title":"datatype"}
{"link":"/ref/attDef","tag":"reference","content":"contains the definition of a single attribute. Documentation of TEI and other XML markup languages specifies the optionality of the attribute. specifies the namespace to which this attribute belongs","title":"attDef"}
{"link":"/ref/attRef","tag":"reference","content":"points to the definition of an attribute or group of attributes. Documentation of TEI and other XML markup languages the name of the attribute class the name of the attribute","title":"attRef"}
{"link":"/ref/dataRef","tag":"reference","content":"identifies the datatype of an attribute value, either by referencing an item in an externally defined datatype library, or by pointing to a TEI-defined data specification Documentation of TEI and other XML markup languages the identifier used for this datatype specification the name of a datatype in the list provided by XML Schemas: Part 2: Datatypes a pointer to a datatype defined in some datatype library supplies a string representing a regular expression providing additional constraints on the strings used to represent values of this datatype","title":"dataRef"}
{"link":"/ref/dataFacet","tag":"reference","content":"Restricts the value of the strings used to represent values of a datatype, according to XML Schemas: Part 2: Datatypes . Documentation of TEI and other XML markup languages the name of the facet. the facet value.","title":"dataFacet"}
{"link":"/ref/defaultVal","tag":"reference","content":"specifies the default declared value for an attribute. Documentation of TEI and other XML markup languages","title":"defaultVal"}
{"link":"/ref/valItem","tag":"reference","content":"documents a single value in a predefined list of values. Documentation of TEI and other XML markup languages specifies the value concerned.","title":"valItem"}
{"link":"/ref/valDesc","tag":"reference","content":"specifies any semantic or syntactic constraint on the value that an attribute may take, additional to the information carried by the datatype element. Documentation of TEI and other XML markup languages","title":"valDesc"}
{"link":"/ref/valList","tag":"reference","content":"contains one or more valItem elements defining possible values. Documentation of TEI and other XML markup languages specifies the extensibility of the list of values specified.","title":"valList"}
{"link":"/ref/textNode","tag":"reference","content":"indicates the presence of a text node in a content model Documentation of TEI and other XML markup languages","title":"textNode"}
{"link":"/ref/anyElement","tag":"reference","content":"indicates the presence of any elements in a content model Documentation of TEI and other XML markup languages supplies a list of namespaces to one of which the permitted elements must belong. supplies a list of namespaces or prefixed element names which are not permitted.","title":"anyElement"}
{"link":"/ref/empty","tag":"reference","content":"indicates the presence of an empty node within a content model Documentation of TEI and other XML markup languages","title":"empty"}
{"link":"/ref/att.deprecated","tag":"reference","content":"provides attributes indicating how a deprecated feature will be treated in future releases. Documentation of TEI and other XML markup languages provides a date before which the construct being defined will not be removed.","title":"att.deprecated"}
{"link":"/ref/att.combinable","tag":"reference","content":"provides attributes indicating how multiple references to the same object in a schema should be combined Documentation of TEI and other XML markup languages specifies the effect of this declaration on its parent object.","title":"att.combinable"}
{"link":"/ref/att.identified","tag":"reference","content":"provides identifying attributes for elements which can be subsequently referenced by means of a key attribute. Documentation of TEI and other XML markup languages supplies the identifier by which this element may be referenced. says whether this object should be predeclared in the tei infrastructure module. supplies a name for the module in which this object is to be declared.","title":"att.identified"}
{"link":"/ref/att.namespaceable","tag":"reference","content":"provides attributes indicating the target namespace for an object being created Documentation of TEI and other XML markup languages specifies the namespace to which this element belongs","title":"att.namespaceable"}
{"link":"/ref/att.datable.iso","tag":"reference","content":"provides attributes for normalization of elements that contain datable events using the ISO 8601:2004 standard. Names and dates supplies the value of a date or time in a standard form. specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd. specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd. indicates the starting point of the period in standard form. indicates the ending point of the period in standard form.","title":"att.datable.iso"}
{"link":"/ref/w","tag":"reference","content":"represents a grammatical (not necessarily orthographic) word. Simple analytic mechanisms","title":"w"}
{"link":"/ref/offset","tag":"reference","content":"marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression. Names and dates","title":"offset"}
{"link":"/ref/factuality","tag":"reference","content":"describes the extent to which the text may be regarded as imaginative or non-imaginative, that is, as describing a fictional or a non-fictional world. Corpus texts categorizes the factuality of the text.","title":"factuality"}
{"link":"/ref/colophon","tag":"reference","content":"contains the colophon of an item: that is, a statement providing information regarding the date, place, agency, or reason for production of the manuscript or other object. Manuscript Description","title":"colophon"}
