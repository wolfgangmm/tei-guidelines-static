---js
{
    permalink: "resources/scripts/search.js",
    eleventyComputed: {
        fields: data => Object.keys(data.tpConfig.index)
    }
}
---

function kwicText(str, start, end, words = 5) {
    let p0 = start - 1;
    let count = 0;
    while (p0 >= 0) {
        if (/[\p{P}\s]/.test(str.charAt(p0))) {
            while (p0 > 1 && /[\p{P}\s]/.test(str.charAt(p0 - 1))) {
                p0 -= 1;
            }
            count += 1;
            if (count === words) {
                break;
            }
        }
        p0 -= 1;
    }
    let p1 = end + 1;
    count = 0;
    while (p1 < str.length) {
        if (/[\p{P}\s]/.test(str.charAt(p1))) {
            while (p1 < str.length - 1 && /[\p{P}\s]/.test(str.charAt(p1 + 1))) {
                p1 += 1;
            }
            count += 1;
            if (count === words) {
                break;
            }
        }
        p1 += 1;
    }
    return `... ${str.substring(p0, start)}<mark>${str.substring(start, end)}</mark>${str.substring(end, p1 + 1)} ...`;
}

function search(index, fields, query) {
    const results = document.getElementById('results');
    results.innerHTML = '';
    
    if (fields === 'all') {
        fields = {{fields | dump | safe}};
    }
    const queryOptions = {
        index: fields,
        suggest: true,
        enrich: true,
        limit: 100
    };
    index.searchAsync(query, queryOptions).then((resultsByField) => {
        const result = [];
        resultsByField.forEach(byField => {
            byField.result.forEach((match) => { result.push(match.doc) });
        });

        const info = document.createElement('h4');
        if (result.length === 100) {
            info.innerHTML = `Showing first 100 matches.`;
        } else {
            info.innerHTML = `Found ${result.length} matches.`;
        }
        results.appendChild(info);

        const tokens = [query, ...query.split(/\W+/)];
        const regex = new RegExp(tokens.join('|'), 'gi');
        for (const data of result) {
            const div = document.createElement('div');
            const header = document.createElement('header');
            header.className = "title";
            div.appendChild(header);
            const head = document.createElement('h3');
            head.className = 'mb-0';
            const link = document.createElement('a');
            link.href = data.link;
            link.innerHTML = data.title;
            head.appendChild(link);
            header.appendChild(head);

            if (data.tag) {
                const tags = document.createElement('ul');
                tags.className = 'tags';
                if (Array.isArray(data.tag)) {
                    data.tag.forEach((tag) => {
                        const li = document.createElement('li');
                        li.innerHTML = `<span class="badge">${tag}</span>`;
                        tags.appendChild(li);
                    });
                } else {
                    const li = document.createElement('li');
                    li.innerHTML = `<span class="badge">${data.tag}</span>`;
                    tags.appendChild(li);
                }
                header.appendChild(tags);
            }

            const list = document.createElement('ul');
            let matches = Array.from(data.content.matchAll(regex));
            if (matches.length > 10) {
                matches = matches.slice(0, 3);
            }
            for (const match of matches) {
                const kwic = kwicText(data.content, match.index, match.index + match[0].length, 5);
                const li = document.createElement('li');
                li.innerHTML = kwic;
                list.appendChild(li);
            }
            div.appendChild(list);

            results.appendChild(div);
        }
    });
}

window.addEventListener('WebComponentsReady', () => {
    const index = new FlexSearch.Document({
        tokenize: "strict",
        context: true,
        document: {
            id: "id",
            index: {{fields | dump | safe}},
            store: ["content", "title", "link", "tag"]
        }
    });

    const params = new URLSearchParams(location.search);
    const query = params.get('query');
    if (query) {
        document.getElementById('search-input').value = query;
    }

    pbEvents.subscribe('pb-load', null, (ev) => {
        const query = ev.detail.params.query;
        search(index, 'all', query);
    });

    pbEvents.emit('pb-start-update', 'transcription');
    fetch('/index.jsonl')
    .then((response) => {
        if (!response.ok) {
            throw new Error('Network response was not OK');
        }
        return response.text();
    })
    .then((text) => {
        const chunks = text.split('\n');
        chunks.forEach((chunk, idx) => {
            if (chunk.length === 0) {
                return;
            }
            try {
                const data = JSON.parse(chunk);
                const indexParams = {
                    id: idx,
                    ...data
                };
                index.add(indexParams);
            } catch (e) {
                console.log('error parsing "%s"', chunk);
            }
        });

        if (query) {
            search(index, 'all', params.get('query'));
        }
        pbEvents.emit('pb-end-update', 'transcription');
    })
    .catch(error => {
        console.log(error);
        document.getElementById('results').innerHTML = 'Request failed!';
        pbEvents.emit('pb-end-update', 'transcription');
    });
});