{
    "format": "json",
    "view": "div",
    "doc": "p5.xml",
    "root": "1.7.2.15",
    "rootNode": "1.7.2.15",
    "id": "SG",
    "odd": "tei.odd",
    "next": "1.7.2.17",
    "previous": "1.7.2.13",
    "nextId": "CH",
    "previousId": "AB",
    "switchView": null,
    "content": "<!DOCTYPE html><html><head></head><body><div class=\"content \"><section data-tei=\"1.7.2.15\" class=\"tei-div9\" id=\"SG\">\n\n<h1 data-tei=\"1.7.2.15.4\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG\">5 A Gentle Introduction to XML</a></pb-clipboard></h1>\n\n<p data-tei=\"1.7.2.15.6\" class=\"tei-p\">The encoding scheme defined by these Guidelines is formulated as an\napplication of the Extensible Markup Language (XML) (<pb-link data-tei=\"1.7.2.15.6.2\" class=\"inner-ref\" xml-id=\"XMLREC\" hash=\"XMLREC\" emit=\"transcription\">1 </pb-link>). XML is widely used for\nthe definition of device-independent, system-independent methods of\nstoring and processing texts in electronic form. It is now also the\ninterchange and communication format used by many applications on the\nWorld Wide Web. In the present chapter we informally introduce some of\nits basic concepts and attempt to explain to the reader encountering\nthem for the first time how and why they are used in the TEI\nscheme. More detailed technical accounts of TEI practice in this\nrespect are provided in chapters <pb-link data-tei=\"1.7.2.15.6.4\" class=\"inner-ref\" xml-id=\"USE\" hash=\"USE\" emit=\"transcription\">23 Using the TEI</pb-link>, <pb-link data-tei=\"1.7.2.15.6.6\" class=\"inner-ref\" xml-id=\"ST\" hash=\"ST\" emit=\"transcription\">1 The TEI Infrastructure</pb-link>, and <pb-link data-tei=\"1.7.2.15.6.8\" class=\"inner-ref\" xml-id=\"TD\" hash=\"TD\" emit=\"transcription\">22 Documentation Elements</pb-link> of these Guidelines.</p>\n\n<p data-tei=\"1.7.2.15.8\" class=\"tei-p\">Strictly speaking, XML is a <span data-tei=\"1.7.2.15.8.2\" class=\"tei-term\">metalanguage</span>, that is, a\nlanguage used to describe other languages, in this case,\n<span data-tei=\"1.7.2.15.8.4\" class=\"tei-term\">markup</span> languages. Historically, the word\n<span data-tei=\"1.7.2.15.8.6\" class=\"tei-term\">markup</span> has been used to describe annotation or other\nmarks within a text intended to instruct a compositor or typist how a\nparticular passage should be printed or laid out. Examples include\nwavy underlining to indicate boldface, special symbols for passages to\nbe omitted or printed in a particular font, and so forth. As the\nformatting and printing of texts was automated, the term was extended\nto cover all sorts of special codes inserted into electronic texts to\ngovern formatting, printing, or other processing.</p>\n<p data-tei=\"1.7.2.15.10\" class=\"tei-p\">Generalizing from that sense, we define <span data-tei=\"1.7.2.15.10.2\" class=\"tei-term\">markup</span>, or\n(synonymously) <span data-tei=\"1.7.2.15.10.4\" class=\"tei-term\">encoding</span>, as any means of making explicit\nan interpretation of a text. Of course, all printed texts are\nimplicitly encoded (or marked up) in this sense: punctuation marks,\ncapitalization, disposition of letters around the page, even\nthe spaces between words all might be regarded as a kind of markup, the\npurpose of which is to help the human reader determine where one word\nends and another begins, or how to identify gross structural features\nsuch as headings or simple syntactic units such as dependent clauses\nor sentences. Encoding a text for computer processing is, in\nprinciple, like transcribing a manuscript from <span data-tei=\"1.7.2.15.10.6\" class=\"tei-foreign\">scriptio continua</span><a data-tei=\"1.7.2.15.10.7\" id=\"fnref_1_7_2_15_10_7\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_10_7\">1</a>; it is a process of making explicit what is\nconjectural or implicit, a process of directing the user as to how the\ncontent of the text should be (or has been) interpreted.</p>\n\n<p data-tei=\"1.7.2.15.12\" class=\"tei-p\">By <span data-tei=\"1.7.2.15.12.2\" class=\"tei-term\">markup language</span> we mean a set of markup conventions\nused together for encoding texts. A markup language must specify how\nmarkup is to be distinguished from text, what markup is allowed, what\nmarkup is required, and what the markup means. XML provides the means\nfor doing the first three; documentation such as these Guidelines is\nrequired for the last.</p>\n\n<p data-tei=\"1.7.2.15.14\" class=\"tei-p\">The present chapter attempts to give an informal introduction to\nthose parts of XML of which a proper understanding is necessary to\nmake best use of these Guidelines. The interested reader should also\nconsult one or more of the many excellent introductory textbooks and\nweb sites now available on the subject.<a data-tei=\"1.7.2.15.14.2\" id=\"fnref_1_7_2_15_14_2\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_14_2\">2</a></p>\n\n<div data-tei=\"1.7.2.15.16\" class=\"tei-div10\" id=\"SG11\"><h2 data-tei=\"1.7.2.15.16.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG11\">5.1 What's Special about XML?</a></pb-clipboard></h2>\n\n<p data-tei=\"1.7.2.15.16.5\" class=\"tei-p\">XML has three highly distinctive advantages: \n</p><ol data-tei=\"1.7.2.15.16.5.2\" class=\"tei-list1 numbered\">\n<li data-tei=\"1.7.2.15.16.5.2.3\" class=\"tei-item\">it places emphasis on descriptive rather than\nprocedural markup;</li>\n<li data-tei=\"1.7.2.15.16.5.2.5\" class=\"tei-item\">it distinguishes the concepts of syntactic correctness and of\n<span data-tei=\"1.7.2.15.16.5.2.5.2\" class=\"tei-term\">validity</span> with respect to a <span data-tei=\"1.7.2.15.16.5.2.5.4\" class=\"tei-term\">document type definition</span>;</li>\n<li data-tei=\"1.7.2.15.16.5.2.7\" class=\"tei-item\">it is independent of any one hardware or software\nsystem.</li></ol> These three aspects are discussed briefly below,\nand then in more depth in the remainder of this chapter.<p></p>\n\n<p data-tei=\"1.7.2.15.16.7\" class=\"tei-p\">XML is frequently compared with HTML, the language in which web\npages have generally been written, which\nshares some of the above characteristics. Compared with HTML, however,\nXML has some other important features:\n\n</p><ul data-tei=\"1.7.2.15.16.7.2\" class=\"tei-list3 bulleted\"><li data-tei=\"1.7.2.15.16.7.2.2\" class=\"tei-item\">XML is <span data-tei=\"1.7.2.15.16.7.2.2.2\" class=\"tei-hi3\">extensible</span>: it does not consist of a fixed set of\ntags;</li><li data-tei=\"1.7.2.15.16.7.2.4\" class=\"tei-item\">XML documents must be <span data-tei=\"1.7.2.15.16.7.2.4.2\" class=\"tei-hi3\">well-formed</span> according to a defined\nsyntax;</li><li data-tei=\"1.7.2.15.16.7.2.6\" class=\"tei-item\">an XML document can be formally <span data-tei=\"1.7.2.15.16.7.2.6.2\" class=\"tei-hi3\">validated</span> against a set of schema rules for consistent application;</li><li data-tei=\"1.7.2.15.16.7.2.8\" class=\"tei-item\">XML is more interested in the meaning of data than in its\npresentation.</li></ul> <p></p>\n\n<div data-tei=\"1.7.2.15.16.9\" class=\"tei-div10\" id=\"SG111\"><h3 data-tei=\"1.7.2.15.16.9.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG111\">5.1.1 Descriptive Markup</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.16.9.5\" class=\"tei-p\">In a descriptive markup system, the markup codes used do little\nmore than categorize parts of a document. Markup codes such as\npara or <span data-tei=\"1.7.2.15.16.9.5.4\" class=\"tei-code2 code\">\\end{list}</span> simply identify a portion\nof a document and assert of it that <span data-tei=\"1.7.2.15.16.9.5.6\" class=\"tei-q2\">the following item is a\nparagraph</span>, or <span data-tei=\"1.7.2.15.16.9.5.8\" class=\"tei-q2\">this is the end of the most recently begun\nlist</span>, etc. By contrast, a procedural markup system defines what\nprocessing is to be carried out at particular points in a document:\n<span data-tei=\"1.7.2.15.16.9.5.10\" class=\"tei-q2\">call procedure PARA with parameters 42, b, and x here</span> or <span data-tei=\"1.7.2.15.16.9.5.12\" class=\"tei-q2\">move\nthe left margin 2 quads left, move the right margin 2 quads right,\nskip down one line, and go to the new left margin,</span> etc. In XML,\nthe instructions needed to process a document for some particular\npurpose (for example, to format it) are sharply distinguished from the\nmarkup used to describe it.</p>\n\n<p data-tei=\"1.7.2.15.16.9.7\" class=\"tei-p\">Usually, the markup or other information needed to process a\ndocument will be maintained separately from the document itself,\ntypically in a distinct document called a <span data-tei=\"1.7.2.15.16.9.7.2\" class=\"tei-term\">stylesheet</span>,\nthough it may do much more than simply define the rendition or visual\nappearance of a document.<a data-tei=\"1.7.2.15.16.9.7.4\" id=\"fnref_1_7_2_15_16_9_7_4\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_16_9_7_4\">3</a></p>\n\n<p data-tei=\"1.7.2.15.16.9.9\" class=\"tei-p\">When descriptive markup is used, the same document can\nreadily be processed in many different ways, using only those parts of\nit which are considered relevant. For example, a content analysis\nprogram might disregard entirely the footnotes embedded in an\nannotated text, while a formatting program might extract and collect\nthem all together for printing at the end of each chapter. Different\nkinds of processing can be carried out with the same part of a file.\nFor example, one program might extract names of persons and places\nfrom a document to create an index or database, while another,\noperating on the same text, but using a different stylesheet, might\nprint names of persons and places in a distinctive typeface.</p>\n</div>\n\n<div data-tei=\"1.7.2.15.16.11\" class=\"tei-div10\" id=\"SG112\"><h3 data-tei=\"1.7.2.15.16.11.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG112\">5.1.2 Types of Document</a></pb-clipboard></h3> \n\n<p data-tei=\"1.7.2.15.16.11.5\" class=\"tei-p\">A second key aspect of XML is its notion of a <span data-tei=\"1.7.2.15.16.11.5.2\" class=\"tei-term\">document\ntype</span>: documents are regarded as having types, just as other\nobjects processed by computers do. The type of a document is formally\ndefined by its constituent parts and their structure. The definition\nof a report, for example, might be that it\nconsisted of a title and possibly an\nauthor, followed by an\nabstract and a sequence of one or more\nparagraphs. Anything lacking a title, according\nto this formal definition, would not formally be a report, and neither\nwould a sequence of paragraphs followed by an abstract, whatever other\nreport-like characteristics these might have for the human reader.</p>\n\n<p data-tei=\"1.7.2.15.16.11.7\" class=\"tei-p\">If documents are of known types, a special-purpose program (called\na <span data-tei=\"1.7.2.15.16.11.7.2\" class=\"tei-term\">parser</span>), once provided with an unambiguous definition\nof a document type, can check that any document claiming to be of \nthat type does in fact conform to the specification. A parser\ncan check that all elements specified for a particular\ndocument type are present and no others, that they are combined in appropriate ways,\ncorrectly ordered, and so forth. More significantly, different\ndocuments of the same type can be processed in a uniform way. Programs\ncan be written which take advantage of the knowledge encapsulated in\nthe document type information, and which can thus behave in a\nmore intelligent fashion.</p>\n</div>\n\n<div data-tei=\"1.7.2.15.16.13\" class=\"tei-div10\" id=\"SG113\"><h3 data-tei=\"1.7.2.15.16.13.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG113\">5.1.3 Data Independence</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.16.13.5\" class=\"tei-p\">A basic design goal of XML is to ensure that documents encoded\naccording to its provisions can move from one hardware and software\nenvironment to another without loss of information. The two features\ndiscussed so far both address this requirement at an abstract level;\nthe third feature addresses it at the level of the strings of data\ncharacters that make up a document. All XML documents,\nwhatever languages or writing systems they employ, use the same\nunderlying character encoding (that is, the same method of\nrepresenting as binary data those graphic forms making up a particular\nwriting system).<a data-tei=\"1.7.2.15.16.13.5.2\" id=\"fnref_1_7_2_15_16_13_5_2\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_16_13_5_2\">4</a> This encoding is defined by an international\nstandard,<a data-tei=\"1.7.2.15.16.13.5.4\" id=\"fnref_1_7_2_15_16_13_5_4\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_16_13_5_4\">5</a> which is implemented by a universal character set\nmaintained by an industry group called the Unicode Consortium, and\nknown as Unicode.<a data-tei=\"1.7.2.15.16.13.5.6\" id=\"fnref_1_7_2_15_16_13_5_6\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_16_13_5_6\">6</a> Unicode \nprovides a standardized way of representing any of the many thousands of\ndiscrete symbols making up the world's writing systems, past and\npresent. </p>\n\n\n<p data-tei=\"1.7.2.15.16.13.9\" class=\"tei-p\">Most modern computing systems now support Unicode directly; for\nthose which do not, XML provides a mechanism for the indirect\nrepresentation of single characters by means of\ntheir character number, known as <span data-tei=\"1.7.2.15.16.13.9.2\" class=\"tei-term\">character references</span>; see further\n<pb-link data-tei=\"1.7.2.15.16.13.9.4\" class=\"inner-ref\" xml-id=\"SG-er\" hash=\"SG-er\" emit=\"transcription\">5.7.1 Character References</pb-link>.</p>\n</div>\n</div>\n<div data-tei=\"1.7.2.15.18\" class=\"tei-div10\" id=\"SG12\"><h2 data-tei=\"1.7.2.15.18.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG12\">5.2 Textual Structures</a></pb-clipboard></h2>\n<p data-tei=\"1.7.2.15.18.5\" class=\"tei-p\">A text is not an undifferentiated sequence of words, much less of\nbytes. For different purposes, it may be divided into many different\nunits, of different types or sizes. A prose text such as this one\nmight be divided into sections, chapters, paragraphs, and sentences. A\nverse text might be divided into cantos, stanzas, and lines. Once\nprinted, sequences of prose and verse might be divided into volumes,\ngatherings, and pages.</p>\n\n<p data-tei=\"1.7.2.15.18.7\" class=\"tei-p\">Structural units of this kind are most often used to identify\nspecific locations or refer to points within a text (<span data-tei=\"1.7.2.15.18.7.2\" class=\"tei-q2\">the third\nsentence of the second paragraph in chapter ten</span>; <span data-tei=\"1.7.2.15.18.7.4\" class=\"tei-q2\">canto 10, line\n1234</span>; <span data-tei=\"1.7.2.15.18.7.6\" class=\"tei-q2\">page 412</span>, etc.) but they may also be used to\nsubdivide a text into meaningful fragments for analytic purposes\n(<span data-tei=\"1.7.2.15.18.7.8\" class=\"tei-q2\">is the average sentence length of section 2 different from that of\nsection 5?</span> <span data-tei=\"1.7.2.15.18.7.10\" class=\"tei-q2\">how many paragraphs separate each occurrence of the\nword <span data-tei=\"1.7.2.15.18.7.10.2\" class=\"tei-mentioned\">nature</span>?  how many pages?</span>).\nOther structural units are more clearly analytic, in that they\ncharacterize a section of a text. A dramatic text might regard each\nspeech by a different character as a unit of one kind, and stage\ndirections or pieces of action as units of another kind. Such an\nanalysis is less useful for locating parts of the text (<span data-tei=\"1.7.2.15.18.7.12\" class=\"tei-q2\">the 93rd\nspeech by Horatio in Act 2</span>) than for facilitating comparisons\nbetween the words used by one character and those of another, or those\nused by the same character at different points of the play.</p>\n\n<p data-tei=\"1.7.2.15.18.9\" class=\"tei-p\">In a prose text one might similarly wish to regard as units of\ndifferent types passages in direct or indirect speech, passages\nemploying different stylistic registers (narrative, polemic,\ncommentary, argument, etc.), passages of different authorship and so\nforth. And for certain types of analysis (most notably textual\ncriticism) the physical appearance of one particular printed or\nmanuscript source may be of importance:  paradoxically, one may wish to\nuse descriptive markup to describe presentational features such as\ntypeface, line breaks, use of whitespace and so forth.</p>\n\n<p data-tei=\"1.7.2.15.18.11\" class=\"tei-p\">These textual structures overlap with one another in complex and\nunpredictable ways. Particularly when dealing with texts as\ninstantiated by paper technology, the reader needs to be aware of both\nthe physical organization of the book and the logical structure of the\nwork it contains. Many great works (Sterne's <span data-tei=\"1.7.2.15.18.11.2\" class=\"tei-title5\">Tristram\nShandy</span> for example) cannot be fully appreciated without an\nawareness of the interplay between narrative units (such as chapters\nor paragraphs) and presentational ones (such as page divisions). For\nmany types of research, the interplay among different levels\nof analysis is crucial: the extent to which syntactic structure\nand narrative structure mesh, or fail to mesh, for example, or the\nextent to which phonological structures reflect morphology.</p></div>\n\n<div data-tei=\"1.7.2.15.20\" class=\"tei-div10\" id=\"SG13\"><h2 data-tei=\"1.7.2.15.20.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG13\">5.3 XML Structures</a></pb-clipboard></h2>\n\n<p data-tei=\"1.7.2.15.20.5\" class=\"tei-p\">This section describes the simple and consistent mechanism for the\nmarkup or identification of textual structure provided by XML. It\nalso describes the methods XML provides for the expression of rules\ndefining how units of textual structure can meaningfully be combined\nin a text.</p>\n\n<div data-tei=\"1.7.2.15.20.7\" class=\"tei-div10\" id=\"SG131\"><h3 data-tei=\"1.7.2.15.20.7.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG131\">5.3.1 Elements</a></pb-clipboard></h3> \n\n<p data-tei=\"1.7.2.15.20.7.5\" class=\"tei-p\">The technical term used in XML for a textual unit, viewed as a\nstructural component, is <span data-tei=\"1.7.2.15.20.7.5.2\" class=\"tei-term\">element</span>. Different types of\nelements are given different names, but XML provides no way of\nexpressing the meaning of a particular type of element, other than its\nrelationship to other element types. That is, all one can say about\nan element called (say) <a data-tei=\"1.7.2.15.20.7.5.4\" href=\"/ref/blort\" class=\"tei-gi\" target=\"\">blort</a> is that instances of\nit may (or may not) occur within elements of type <a data-tei=\"1.7.2.15.20.7.5.6\" href=\"/ref/farble\" class=\"tei-gi\" target=\"\">farble</a>, and\nthat it may (or may not) be decomposed into elements of type\n<a data-tei=\"1.7.2.15.20.7.5.8\" href=\"/ref/blortette\" class=\"tei-gi\" target=\"\">blortette</a>. It should be stressed that XML is entirely\nunconcerned with the semantics of textual elements,\nbecause these are considered to be application dependent. It is up to\nthe creators of XML vocabularies (such as these Guidelines) to choose\nintelligible element names and to define their\nintended use in text markup. That is the chief purpose of documents\nsuch as the TEI Guidelines. From the need to choose element names\nindicative of function comes the technical term for the name of an\nelement type, which is <span data-tei=\"1.7.2.15.20.7.5.12\" class=\"tei-term\">generic identifier</span>, or GI.</p>\n<p data-tei=\"1.7.2.15.20.7.7\" class=\"tei-p\">Within a marked-up text (a <span data-tei=\"1.7.2.15.20.7.7.2\" class=\"tei-term\">document instance</span>), each\nelement must be explicitly marked or tagged in some way. This is done\nby inserting a tag at the beginning of the element (a\n<span data-tei=\"1.7.2.15.20.7.7.4\" class=\"tei-term\">start-tag</span>) and another at its end (an\n<span data-tei=\"1.7.2.15.20.7.7.6\" class=\"tei-term\">end-tag</span>). The start- and end-tag pair are used to bracket\noff element occurrences within the running text, in rather the\nsame way as different types of parentheses or quotation marks are used\nin conventional punctuation. For example, a quotation element in a\ntext might be tagged as follows:\n</p><div data-tei=\"1.7.2.15.20.7.7.8\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">... Rosalind's \nremarks &lt;quote&gt;This is the silliest stuff that ere I heard \nof!&lt;/quote&gt; clearly indicate ...</pb-code-highlight></div><pb-popover data-tei=\"1.7.2.15.20.7.7.8\" class=\"alternate tei-ex_egXML2 bibl-link\" id=\"altref_1\"><span slot=\"default\">bibliography</span></pb-popover>\n\nAs this example shows, a start-tag takes the form quote,\nwhere the opening angle bracket indicates the start of the start-tag,\n<span data-tei=\"1.7.2.15.20.7.7.12\" class=\"tei-q2\">quote</span> is the generic identifier of the element that is being\ndelimited, and the closing angle bracket indicates the end of the start-tag.\nAn end-tag takes an identical form, except that the opening angle\nbracket is followed by a solidus (slash) character, so that the\ncorresponding end-tag is /quote.<a data-tei=\"1.7.2.15.20.7.7.16\" id=\"fnref_1_7_2_15_20_7_7_16\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_20_7_7_16\">7</a> The material between\nthe start-tag and the end-tag (the string of words <span data-tei=\"1.7.2.15.20.7.7.18\" class=\"tei-q2\">This is the\nsilliest stuff that ere I heard of</span> in the example above) is known\nas the <span data-tei=\"1.7.2.15.20.7.7.20\" class=\"tei-term\">content</span> of the element. Sometimes there may be\nnothing between the start and the end-tag; in this case the two may\noptionally be merged together into a single composite tag with the\nsolidus at the end, like this: quote/. <p></p></div>\n\n<div data-tei=\"1.7.2.15.20.9\" class=\"tei-div10\" id=\"SG132\"><h3 data-tei=\"1.7.2.15.20.9.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG132\">5.3.2 Content Models: an Example</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.20.9.5\" class=\"tei-p\">An element may be <span data-tei=\"1.7.2.15.20.9.5.2\" class=\"tei-term\">empty</span>, that is, it may have no\ncontent at all, or it may contain just a sequence of characters with\nno other elements. Often, however, elements of one type will\nbe <span data-tei=\"1.7.2.15.20.9.5.4\" class=\"tei-term\">embedded</span> (contained entirely) within elements of a\ndifferent type.</p>\n\n<p data-tei=\"1.7.2.15.20.9.7\" class=\"tei-p\">To illustrate this, we will consider a very simple structural\nmodel. Let us assume that we wish to identify within an anthology\nonly poems, their headings, and the stanzas and lines of which they are\ncomposed. In XML terms, our <span data-tei=\"1.7.2.15.20.9.7.2\" class=\"tei-term\">document type</span> is the\n<span data-tei=\"1.7.2.15.20.9.7.4\" class=\"tei-term\">anthology</span>, and it consists of a series of\n<span data-tei=\"1.7.2.15.20.9.7.6\" class=\"tei-term\">poem</span>s. Each poem has embedded within it one element, a\n<span data-tei=\"1.7.2.15.20.9.7.8\" class=\"tei-term\">heading</span>, and several occurrences of another, a\n<span data-tei=\"1.7.2.15.20.9.7.10\" class=\"tei-term\">stanza</span>, each stanza having embedded within it a number of\n<span data-tei=\"1.7.2.15.20.9.7.12\" class=\"tei-term\">line</span> elements. Fully marked up, a text conforming to\nthis model might appear as follows:\n</p><div data-tei=\"1.7.2.15.20.9.7.14\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\n&lt;anthology&gt;\n  &lt;poem&gt;\n    &lt;heading&gt;The SICK ROSE&lt;/heading&gt;\n    &lt;stanza&gt;\n      &lt;line&gt;O Rose thou art sick.&lt;/line&gt;\n      &lt;line&gt;The invisible worm,&lt;/line&gt;\n      &lt;line&gt;That flies in the night&lt;/line&gt;\n      &lt;line&gt;In the howling storm:&lt;/line&gt;\n    &lt;/stanza&gt;\n    &lt;stanza&gt;\n      &lt;line&gt;Has found out thy bed&lt;/line&gt;\n      &lt;line&gt;Of crimson joy:&lt;/line&gt;\n      &lt;line&gt;And his dark secret love&lt;/line&gt;\n      &lt;line&gt;Does thy life destroy.&lt;/line&gt;\n    &lt;/stanza&gt;\n  &lt;/poem&gt;\n  &lt;!-- more poems go here --&gt;\n&lt;/anthology&gt;</pb-code-highlight></div><pb-popover data-tei=\"1.7.2.15.20.9.7.14\" class=\"alternate tei-ex_egXML2 bibl-link\" id=\"altref_2\"><span slot=\"default\">bibliography</span><template slot=\"alternate\">\n        <span data-tei=\"1.7.6.12.5.4.90.3\" class=\"tei-author2\">Blake, William</span>. <span data-tei=\"1.7.6.12.5.4.90.5\" class=\"tei-title9\">The Sick Rose</span>, in <span data-tei=\"1.7.6.12.5.4.90.7\" class=\"tei-title5\">Songs of Experience</span> (<span data-tei=\"1.7.6.12.5.4.90.9\" class=\"tei-date4\">1794</span>). </template></pb-popover><p></p>\n<p data-tei=\"1.7.2.15.20.9.9\" class=\"tei-p\">It should be stressed that this example does not use\nthe names proposed for corresponding elements elsewhere\nin these Guidelines: the above is thus not a valid TEI\ndocument.<a data-tei=\"1.7.2.15.20.9.9.6\" id=\"fnref_1_7_2_15_20_9_9_6\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_20_9_9_6\">8</a> It will, however, serve as an introduction to the basic notions of XML.\nWhitespace and line breaks have been added to the example for the\nsake of visual clarity only; they have no particular significance in the\nXML encoding itself. Also, the line\n</p><div data-tei=\"1.7.2.15.20.9.9.8\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;!-- more poems go here   --&gt;</template></pb-code-highlight></div>\nis an XML <span data-tei=\"1.7.2.15.20.9.9.10\" class=\"tei-term\">comment</span> and is not treated as part of the text.<p></p>\n<p data-tei=\"1.7.2.15.20.9.11\" class=\"tei-p\">As it stands, the above example is what is known as a\n<span data-tei=\"1.7.2.15.20.9.11.2\" class=\"tei-term\">well-formed</span> XML document because it obeys the following simple rules:\n</p><ol data-tei=\"1.7.2.15.20.9.11.4\" class=\"tei-list1 numbered\">\n<li data-tei=\"1.7.2.15.20.9.11.4.3\" class=\"tei-item\">there is a single element\nenclosing the whole document: this is known as the <span data-tei=\"1.7.2.15.20.9.11.4.3.2\" class=\"tei-term\">root\nelement</span> (<a data-tei=\"1.7.2.15.20.9.11.4.3.4\" href=\"/ref/anthology\" class=\"tei-gi\" target=\"\">anthology</a> in our case);</li>\n<li data-tei=\"1.7.2.15.20.9.11.4.5\" class=\"tei-item\">each element is completely contained by the root element,\nor by an element that is so contained; elements do not partially\noverlap one another;</li>\n<li data-tei=\"1.7.2.15.20.9.11.4.7\" class=\"tei-item\">a tag explicitly marks the start and end of each element.</li>\n</ol>\n<p></p>\n<p data-tei=\"1.7.2.15.20.9.13\" class=\"tei-p\">A well-formed XML document can be processed in a number of useful\nways. A simple indexing program could extract only the relevant text\nelements in order to make a list of headings, first lines, or words\nused in the poem text; a simple formatting program could insert blank\nlines between stanzas, perhaps indenting the first line of each, or\ninserting a stanza number. Different parts of each poem could be\ntypeset in different ways. A more ambitious analytic program could\nrelate the use of punctuation marks to stanzaic and metrical\ndivisions.<a data-tei=\"1.7.2.15.20.9.13.2\" id=\"fnref_1_7_2_15_20_9_13_2\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_20_9_13_2\">9</a> Scholars wishing to see the implications of\nchanging the stanza or line divisions chosen by the editor of this\npoem can do so simply by altering the position of the tags. And of\ncourse, the text as presented above can be transported from one\ncomputer to another and processed by any program (or person) capable\nof making sense of the tags embedded within it with no need for the\nsort of transformations and translations needed for files which have\nbeen saved in one or other of the proprietary formats preferred by\nmost word-processing programs.</p>\n\n<p data-tei=\"1.7.2.15.20.9.15\" class=\"tei-p\">As we noted above, one of the attractions of XML is that it enables\nus to apply our own names for the elements rather than requiring us\nalways to use names predefined by other agencies. Clearly, however, if\nwe wish to exchange our poems with others, or to include poems others\nhave marked up in our anthology, we will need to know a bit more about\nthe names used for the tags. The means that XML provides for this is\ncalled a <span data-tei=\"1.7.2.15.20.9.15.2\" class=\"tei-term\">namespace</span>. In our simple example, the tags just\ncontain a simple name. As we shall see, it is also possible to use\ntags that include a <span data-tei=\"1.7.2.15.20.9.15.4\" class=\"tei-term\">qualified name</span>, that is, a name with\nan optional prefix identifying the set of names to which it\nbelongs. For example, we have defined an element <a data-tei=\"1.7.2.15.20.9.15.6\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> for the purpose of marking lines of\nverse. Another person might, however, define an element called <a data-tei=\"1.7.2.15.20.9.15.8\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> for the purpose of marking typographic\nlines, or drawn lines. Because of these different meanings, if we wish\nto share data it will be necessary to distinguish the two <span data-tei=\"1.7.2.15.20.9.15.10\" class=\"tei-q2\">line</span>\ncomponents in our marked-up texts. This is achieved by including a\n<span data-tei=\"1.7.2.15.20.9.15.12\" class=\"tei-term\">namespace prefix</span> within the markup, for example like\nthis: </p><div data-tei=\"1.7.2.15.20.9.15.14\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template> &lt;my:line&gt;This is one of my lines&lt;/my:line&gt; \n&lt;!-- ... --&gt; \n&lt;yr:line&gt;This is one of your lines&lt;/yr:line&gt;</template></pb-code-highlight></div>\n\nThis feature is particularly important if we have different\ndefinitions of what a line is, of course, but\nthere are many occasions when it is useful to distinguish groups of\ntags belonging to different markup vocabularies;\nwe discuss this further below (<pb-link data-tei=\"1.7.2.15.20.9.15.20\" class=\"inner-ref\" xml-id=\"SGname\" hash=\"SGname\" emit=\"transcription\">5.7.2 Namespaces</pb-link>). One\nparticularly useful namespace prefix is predefined for XML: it is\n<span data-tei=\"1.7.2.15.20.9.15.22\" class=\"tei-code2 code\">xml</span> and we will see examples of its use below.<p></p>\n\n<p data-tei=\"1.7.2.15.20.9.17\" class=\"tei-p\">Namespaces allow us to represent the fact that a name belongs to a\ngroup of names, but don't allow us to do much more by way of checking\nthe integrity or accuracy of our tagging. Simple well-formedness alone\nis not enough for the full range of what might be useful in marking up\na document. It might well be useful if, in the process of preparing\nour digital anthology, a computer system could check some basic rules\nabout how stanzas, lines, and headings can sensibly co-occur in a\ndocument. It would be even more useful if the system could check that\nstanzas are always tagged stanza and not occasionally\ncanto or Stanza. An XML document in which such\nrules have been checked is technically known as a <span data-tei=\"1.7.2.15.20.9.17.8\" class=\"tei-term\">valid</span>\ndocument, and the ability to perform such validation is one of the key\nadvantages of using XML. To carry this out, some way of formally\nstating the criteria for successful validation is necessary: in XML\nthis formal statement is provided by an additional document known\nas a <span data-tei=\"1.7.2.15.20.9.17.10\" class=\"tei-term\">schema</span>.<a data-tei=\"1.7.2.15.20.9.17.12\" id=\"fnref_1_7_2_15_20_9_17_12\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_20_9_17_12\">10</a>\n</p>\n</div>\n</div>\n\n<div data-tei=\"1.7.2.15.22\" class=\"tei-div10\" id=\"SG14\"><h2 data-tei=\"1.7.2.15.22.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG14\">5.4 Validating a Document's Structure</a></pb-clipboard></h2>\n\n<p data-tei=\"1.7.2.15.22.5\" class=\"tei-p\">The design of a schema may be as lax or as restrictive as the\noccasion warrants. A balance must be struck between the convenience\nof following simple rules and the complexity of handling real\ntexts. This is particularly the case when the rules being defined\nrelate to texts that already exist: the designer may have only the\nhaziest of notions as to an ancient text's original purpose or meaning\nand hence find it very difficult to specify consistent rules about its\nstructure. On the other hand, where a new text is being prepared to\nan exact specification, for entry into a textual database\nof some kind for example, the more precisely stated the rules, the better they can\nbe enforced. Even in marking up an existing text, a restrictive set of schema rules may be beneficial, especially when applied to test a particular view or hypothesis about the text. A schema\ndesigned for use by a small project or team is likely to take a\ndifferent position on such issues than one intended for use by a large\nand possibly fragmented community. It is\nimportant to remember that every schema results\nfrom an interpretation of a text. There is no single schema \nencompassing the absolute truth about any text, although it may\nbe convenient to privilege some schemas above others for particular\ntypes of analysis.</p>\n\n<p data-tei=\"1.7.2.15.22.7\" class=\"tei-p\">XML is widely used in environments where uniformity of document\nstructure is a major desideratum. In the production of technical\ndocumentation, for example, it is of major importance that sections\nand subsections should be properly nested, that cross-references\nshould be properly resolved and so forth. In such situations,\ndocuments are seen as raw material to match against predefined sets\nof rules. As discussed above, however, the use of simple rules can\nalso greatly simplify the task of tagging accurately elements of less\nrigidly constrained texts. By making these schema rules explicit, scholars reduce their own burdens with consistently marking up and verifying the\nelectronic text. By defining and sharing their schema rules, scholars openly express a project-specific interpretation of the structure and significant particularities of the\ntext being encoded.</p>\n  <p data-tei=\"1.7.2.15.22.9\" class=\"tei-p\">Schema validation for XML is usually written in the RELAX NG language (<span data-tei=\"1.7.2.15.22.9.2\" class=\"tei-ptr4\"><a href=\"http://relaxng.org/\">http://relaxng.org/</a></span>) originally\n    developed within the OASIS Technical Committee and now an\n    ISO standard<a data-tei=\"1.7.2.15.22.9.4\" id=\"fnref_1_7_2_15_22_9_4\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_22_9_4\">11</a>, though other older methods include the Document Type Definition\n    (DTD) language which XML inherited from SGML and the XML Schema language (<span data-tei=\"1.7.2.15.22.9.6\" class=\"tei-ptr4\"><a href=\"https://www.w3.org/XML/Schema\">https://www.w3.org/XML/Schema</a></span>) defined by the W3C.<a data-tei=\"1.7.2.15.22.9.8\" id=\"fnref_1_7_2_15_22_9_8\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_22_9_8\">12</a> In this chapter, and throughout these\n    Guidelines, we give examples using the compact\n      syntax of RELAX NG for ease of reading. The specifications for the TEI Guidelines are first expressed in the TEI language itself and a RELAX NG schema is generated from them for processing convenience. Details about schema customization using the TEI ODD language are addressed in <pb-link data-tei=\"1.7.2.15.22.9.12\" class=\"inner-ref\" xml-id=\"TD\" hash=\"TD\" emit=\"transcription\">22 Documentation Elements</pb-link>, <pb-link data-tei=\"1.7.2.15.22.9.14\" class=\"inner-ref\" xml-id=\"MD\" hash=\"MD\" emit=\"transcription\">23.3 Customization</pb-link> and <pb-link data-tei=\"1.7.2.15.22.9.16\" class=\"inner-ref\" xml-id=\"IM\" hash=\"IM\" emit=\"transcription\">23.5 Implementation of an ODD System</pb-link>.  \n</p>\n\n<div data-tei=\"1.7.2.15.22.11\" class=\"tei-div10\" id=\"SG141bis\"><h3 data-tei=\"1.7.2.15.22.11.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG141bis\">5.4.1 An Example Schema</a></pb-clipboard></h3>\n<p data-tei=\"1.7.2.15.22.11.5\" class=\"tei-p\">For the purposes of illustrating how a schema works to restrict how XML may be written, we use the RELAX NG compact syntax in what follows. The following schema can be used to validate our example poem:\n</p><div data-tei=\"1.7.2.15.22.11.5.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>anthology_p = element anthology { poem_p+ }\npoem_p = element poem { heading_p?, stanza_p+ }\nstanza_p = element stanza {line_p+}\nheading_p = element heading { text }\nline_p = element line { text }\nstart = anthology_p</template></pb-code-highlight></div>\n<p></p>\n\n<p data-tei=\"1.7.2.15.22.11.7\" class=\"tei-p\">Note that this is not the only way in which a RELAX NG schema might\nbe written; we have adopted this idiom, however, because it\nmatches that used throughout the rest of these Guidelines.</p>\n\n<p data-tei=\"1.7.2.15.22.11.9\" class=\"tei-p\">A RELAX NG schema expresses rules about the possible structure of a\ndocument in terms of <span data-tei=\"1.7.2.15.22.11.9.2\" class=\"tei-term\">patterns</span>; that is, it defines a\nnumber of named patterns, each of which acts as a kind of template\nagainst which an input document can be matched. The meaning of a\npattern is expressed in a schema either by reference to other patterns, or to\na small number of fundamental built-in concepts, as we shall see. In\nthe example above, the word to the left of the equals sign is the\npattern's name, and the material following it declares a meaning for\nthe pattern. Patterns may also be of particular types; the ones that\ninterest us here are called <span data-tei=\"1.7.2.15.22.11.9.4\" class=\"tei-term\">element patterns</span> and\n<span data-tei=\"1.7.2.15.22.11.9.6\" class=\"tei-term\">attribute patterns</span>. In this example we see definitions\nfor five element patterns. Note that we have used similar names for\nthe pattern and the element which the pattern describes: so, for\nexample, the line <span data-tei=\"1.7.2.15.22.11.9.8\" class=\"tei-code2 code\">anthology_p = element anthology {poem_p+}</span> defines an element pattern called <span data-tei=\"1.7.2.15.22.11.9.10\" class=\"tei-code2 code\">anthology_p</span>,\nthe value of which defines an element called\n<span data-tei=\"1.7.2.15.22.11.9.12\" class=\"tei-code2 code\">anthology</span>. These naming conventions are \narbitrary; we could use the same name for the pattern as\nfor the element, but we want to make clear that the two are syntactically quite distinct. The\nname, or <span data-tei=\"1.7.2.15.22.11.9.14\" class=\"tei-term\">generic identifier</span>, of the element follows the\nword <span data-tei=\"1.7.2.15.22.11.9.16\" class=\"tei-q2\">element</span>, and the <span data-tei=\"1.7.2.15.22.11.9.18\" class=\"tei-term\">content model</span> for the\nelement is given within the curly braces following that. Each of\nthese parts is discussed further below.\n</p>\n<p data-tei=\"1.7.2.15.22.11.11\" class=\"tei-p\">The last line of the schema above tells a RELAX NG validator which\nelement (or elements) in a document can be used as the root element:\nin our case only <a data-tei=\"1.7.2.15.22.11.11.2\" href=\"/ref/anthology\" class=\"tei-gi\" target=\"\">anthology</a>. This enables\nthe validator to detect whether a particular document is well-formed\nbut incomplete; it also simplifies the processing task by providing an\n<span data-tei=\"1.7.2.15.22.11.11.4\" class=\"tei-q2\">entry point</span>.</p>\n<div data-tei=\"1.7.2.15.22.11.13\" class=\"tei-div10\" id=\"SG141x\"><h4 data-tei=\"1.7.2.15.22.11.13.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG141x\">5.4.1.1 Generic Identifier</a></pb-clipboard></h4>\n<p data-tei=\"1.7.2.15.22.11.13.5\" class=\"tei-p\">Following the word <span data-tei=\"1.7.2.15.22.11.13.5.2\" class=\"tei-q2\">element</span> each pattern declaration gives\nthe generic identifier (often abbreviated to GI) of the element being\ndefined, for example <span data-tei=\"1.7.2.15.22.11.13.5.4\" class=\"tei-mentioned\">poem</span>,\n<span data-tei=\"1.7.2.15.22.11.13.5.6\" class=\"tei-mentioned\">heading</span>, etc. A GI may contain letters,\ndigits, hyphens, underscore characters, or full stops, but must begin\nwith a letter and may not contain a space.<a data-tei=\"1.7.2.15.22.11.13.5.8\" id=\"fnref_1_7_2_15_22_11_13_5_8\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_22_11_13_5_8\">13</a> Uppercase and lowercase letters are quite\ndistinct: an element with the GI <a data-tei=\"1.7.2.15.22.11.13.5.10\" href=\"/ref/foo\" class=\"tei-gi\" target=\"\">foo</a> is\nnot the same as an element with the GI <a data-tei=\"1.7.2.15.22.11.13.5.14\" href=\"/ref/Foo\" class=\"tei-gi\" target=\"\">Foo</a>; the root element of a TEI-conformant\ndocument is <a data-tei=\"1.7.2.15.22.11.13.5.16\" href=\"/ref/TEI\" class=\"tei-gi\" target=\"\">TEI</a>, not <a data-tei=\"1.7.2.15.22.11.13.5.20\" href=\"/ref/tei\" class=\"tei-gi\" target=\"\">tei</a>.</p></div>\n<div data-tei=\"1.7.2.15.22.11.15\" class=\"tei-div10\" id=\"SG143\"><h4 data-tei=\"1.7.2.15.22.11.15.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG143\">5.4.1.2 Content Model</a></pb-clipboard></h4>\n<p data-tei=\"1.7.2.15.22.11.15.5\" class=\"tei-p\">The second part of each declaration, enclosed in curly braces, is\ncalled the <span data-tei=\"1.7.2.15.22.11.15.5.2\" class=\"tei-term\">content model</span> of the element being defined, because it\nspecifies what may legitimately be contained within it. In RELAX NG,\nthe content model is defined in terms of other patterns, either by\nembedding them, or (as in our examples above) by naming or referring\nto them. The RELAX NG compact syntax also uses a small number of\nreserved words to identify other possible contents for an element, of which by\nfar the most commonly encountered is <span data-tei=\"1.7.2.15.22.11.15.5.4\" class=\"tei-code2 code\">text</span>, as in this\nexample: it means that the element being defined may contain any valid\ncharacter data, but no elements. If an XML document is thought of as a structure\nlike a family tree, with a single ancestor at the top (in our case,\nthis would be anthology), then almost always, following the\nbranches of the tree downwards (for example, from <a data-tei=\"1.7.2.15.22.11.15.5.8\" href=\"/ref/anthology\" class=\"tei-gi\" target=\"\">anthology</a>\nto <a data-tei=\"1.7.2.15.22.11.15.5.10\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> to <a data-tei=\"1.7.2.15.22.11.15.5.12\" href=\"/ref/stanza\" class=\"tei-gi\" target=\"\">stanza</a> to <a data-tei=\"1.7.2.15.22.11.15.5.14\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> and\n<a data-tei=\"1.7.2.15.22.11.15.5.16\" href=\"/ref/heading\" class=\"tei-gi\" target=\"\">heading</a>) will lead eventually to <span data-tei=\"1.7.2.15.22.11.15.5.18\" class=\"tei-code2 code\">text</span>. In our example,\n<a data-tei=\"1.7.2.15.22.11.15.5.20\" href=\"/ref/heading\" class=\"tei-gi\" target=\"\">heading</a> and <a data-tei=\"1.7.2.15.22.11.15.5.22\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> are so defined, since their content\nmodels say <span data-tei=\"1.7.2.15.22.11.15.5.24\" class=\"tei-code2 code\">text</span> only and name no embedded elements.</p></div>\n\n<div data-tei=\"1.7.2.15.22.11.17\" class=\"tei-div10\" id=\"SG144\"><h4 data-tei=\"1.7.2.15.22.11.17.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG144\">5.4.1.3 Occurrence Indicators</a></pb-clipboard></h4>\n\n<p data-tei=\"1.7.2.15.22.11.17.5\" class=\"tei-p\">The declaration for <a data-tei=\"1.7.2.15.22.11.17.5.2\" href=\"/ref/stanza\" class=\"tei-gi\" target=\"\">stanza</a> in the example above states\nthat a stanza consists of one or more lines. It uses an\n<span data-tei=\"1.7.2.15.22.11.17.5.4\" class=\"tei-term\">occurrence indicator</span> (the plus sign) to indicate how many\ntimes something matching the pattern <span data-tei=\"1.7.2.15.22.11.17.5.6\" class=\"tei-code2 code\">line_p</span> may be\nrepeated. There are three occurrence indicators: the plus sign, the\nquestion mark, and the asterisk or star. The plus sign means that\nthe pattern can match one or more times; the\nquestion mark means that it may match at most once but is not\nmandatory; the star means that the pattern concerned is not\nmandatory, but may match more than once. Thus, if the content model for\n<a data-tei=\"1.7.2.15.22.11.17.5.8\" href=\"/ref/stanza\" class=\"tei-gi\" target=\"\">stanza</a> were <span data-tei=\"1.7.2.15.22.11.17.5.10\" class=\"tei-code2 code\">{line_p*}</span>, stanzas with no lines\nwould be possible as well as those with more than one line. If it\nwere <span data-tei=\"1.7.2.15.22.11.17.5.12\" class=\"tei-code2 code\">{line_p?}</span>, again empty stanzas would be\npermitted, but no stanza could have more than a single line. The\ndeclaration for <a data-tei=\"1.7.2.15.22.11.17.5.14\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> in the example above thus states that a\n<a data-tei=\"1.7.2.15.22.11.17.5.16\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> cannot have more than one heading, but may have none,\nand that it must have at least one <a data-tei=\"1.7.2.15.22.11.17.5.18\" href=\"/ref/stanza\" class=\"tei-gi\" target=\"\">stanza</a> and may have\nseveral.  </p></div>\n\n<div data-tei=\"1.7.2.15.22.11.19\" class=\"tei-div10\" id=\"SG145\"><h4 data-tei=\"1.7.2.15.22.11.19.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG145\">5.4.1.4 Connectors</a></pb-clipboard></h4>\n<p data-tei=\"1.7.2.15.22.11.19.5\" class=\"tei-p\">The content model <span data-tei=\"1.7.2.15.22.11.19.5.2\" class=\"tei-code2 code\">{heading_p?, stanza_p+}</span> contains more than\none component, and thus needs additionally to specify the order in\nwhich these patterns (<a data-tei=\"1.7.2.15.22.11.19.5.4\" href=\"/ref/heading_p\" class=\"tei-gi\" target=\"\">heading_p</a> and <a data-tei=\"1.7.2.15.22.11.19.5.6\" href=\"/ref/stanza_p\" class=\"tei-gi\" target=\"\">stanza_p</a>) may appear.\nThis ordering is determined by the <span data-tei=\"1.7.2.15.22.11.19.5.8\" class=\"tei-term\">connector</span> (the comma)\nused between its components. The\ncomma connector indicates that the patterns concerned must appear in\nthe sequence given. Another commonly encountered connector is the\nvertical bar, representing alternation. If the comma in this example were replaced by a vertical\nbar, then a <a data-tei=\"1.7.2.15.22.11.19.5.10\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> would consist of either a heading or just\nstanzas—but not both!</p></div>\n<div data-tei=\"1.7.2.15.22.11.21\" class=\"tei-div10\" id=\"SG146\"><h4 data-tei=\"1.7.2.15.22.11.21.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG146\">5.4.1.5 Groups</a></pb-clipboard></h4>\n<p data-tei=\"1.7.2.15.22.11.21.5\" class=\"tei-p\">In our example so far, the components of each content model have\nbeen either single patterns or <span data-tei=\"1.7.2.15.22.11.21.5.2\" class=\"tei-code2 code\">text</span>. We often need to define content models in more complicated ways, in which the components\nare lists of patterns, combined by connectors. Such lists may also be\nmodified by occurrence indicators and themselves combined by\nconnectors. To demonstrate these facilities, let us expand our\nexample so that it may include non-stanzaic types of verse. For the sake of\ndemonstration, we will categorize poems as one of the following:\n<span data-tei=\"1.7.2.15.22.11.21.5.4\" class=\"tei-term\">stanzaic</span>, <span data-tei=\"1.7.2.15.22.11.21.5.6\" class=\"tei-term\">couplets</span>, or <span data-tei=\"1.7.2.15.22.11.21.5.8\" class=\"tei-term\">blank</span>\n(or <span data-tei=\"1.7.2.15.22.11.21.5.10\" class=\"tei-term\">stichic</span>). A blank-verse poem consists simply of\nlines (we ignore the possibility of verse paragraphs for the\nmoment),  so no additional elements need be defined\nfor it. We could define a couplet as a <a data-tei=\"1.7.2.15.22.11.21.5.14\" href=\"/ref/firstLine\" class=\"tei-gi\" target=\"\">firstLine</a> followed by a\n  <a data-tei=\"1.7.2.15.22.11.21.5.16\" href=\"/ref/secondLine\" class=\"tei-gi\" target=\"\">secondLine</a>, which distinction might be useful in a study of rhyme schemes.<a data-tei=\"1.7.2.15.22.11.21.5.18\" id=\"fnref_1_7_2_15_22_11_21_5_18\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_22_11_21_5_18\">14</a>\n  </p><div data-tei=\"1.7.2.15.22.11.21.5.20\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>couplet_p = element couplet {firstLine_p, secondLine_p}</template></pb-code-highlight></div>\n\n\t\n\t<p></p>\n<p data-tei=\"1.7.2.15.22.11.21.7\" class=\"tei-p\">The patterns firstLine_p and secondLine_p define elements\n<a data-tei=\"1.7.2.15.22.11.21.7.2\" href=\"/ref/firstLine\" class=\"tei-gi\" target=\"\">firstLine</a> and <a data-tei=\"1.7.2.15.22.11.21.7.4\" href=\"/ref/secondLine\" class=\"tei-gi\" target=\"\">secondLine</a>; these will have exactly\nthe same content model as the existing <a data-tei=\"1.7.2.15.22.11.21.7.6\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> element. We will\ntherefore add the following two lines to our example schema: </p><div data-tei=\"1.7.2.15.22.11.21.7.8\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>firstLine_p = element firstLine {text} \nsecondLine_p = element secondLine {text}</template></pb-code-highlight></div>\nNext, we can change the declaration for the <a data-tei=\"1.7.2.15.22.11.21.7.10\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> element to\ninclude all three possibilities: <div data-tei=\"1.7.2.15.22.11.21.7.12\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template> poem_p = element poem\n{ heading_p?, (stanza_p+ | couplet_p+ | line_p+) }</template></pb-code-highlight></div> That is, a poem\nconsists of an optional heading, followed by one or several stanzas,\nor one or several couplets, or one or several lines. Note the\ndifference between this declaration and the following: <div data-tei=\"1.7.2.15.22.11.21.7.14\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>poem_p = element poem\n{heading_p?, (stanza_p | couplet_p | line_p)+ }</template></pb-code-highlight></div> The second version,\nby applying the occurrence indicator to the group rather than to each\nelement within it, would allow a single poem to contain a mixture\nof stanzas, couplets, and lines.<p></p>\n<p data-tei=\"1.7.2.15.22.11.21.9\" class=\"tei-p\">A group of this kind can contain <span data-tei=\"1.7.2.15.22.11.21.9.2\" class=\"tei-code2 code\">text</span> as well as named\nelements: this combination, known as <span data-tei=\"1.7.2.15.22.11.21.9.4\" class=\"tei-term\">mixed content</span>,\nallows for elements in which the sub-components appear with\nintervening stretches of character data. For example, if we wished to\nmark place names wherever they appear inside our verse lines, then,\nassuming we have also added a pattern for the\n<a data-tei=\"1.7.2.15.22.11.21.9.6\" href=\"/ref/name\" class=\"tei-gi\" target=\"\">name</a> element, we could change the definition for\n<a data-tei=\"1.7.2.15.22.11.21.9.8\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> to </p><div data-tei=\"1.7.2.15.22.11.21.9.10\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>line_p = element\nline { (text | name_p )* }</template></pb-code-highlight></div>\n<p></p>\n\n<p data-tei=\"1.7.2.15.22.11.21.11\" class=\"tei-p\">Some XML schema languages place no constraints on the way that\nmixed content models may be defined, but in the XML DTD language, when\n<span data-tei=\"1.7.2.15.22.11.21.11.2\" class=\"tei-code2 code\">text</span> appears with other elements in a content model, it\nmust always appear as the first option in an alternation; it may\nappear once only, and in the outermost model group; and if the group\ncontaining it is repeated, the star operator must be used. Although\nthese constraints are not strictly necessary in RELAX NG schemas, all TEI content models currently obey them.</p>\n\n<p data-tei=\"1.7.2.15.22.11.21.13\" class=\"tei-p\">Quite complex models can be built in this way, to match\nthe structural complexity of many types of text. For example, consider the case of stanzaic verse in which a refrain or\nchorus appears. Like a stanza, a refrain consists of repetitions of\nthe line element. A refrain can appear at the start of a poem only,\nor as an optional addition following each stanza. This could be\nexpressed by a pattern such as the following:\n</p><div data-tei=\"1.7.2.15.22.11.21.13.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>refrain_p = element refrain {line_p+}\npoem_p = element poem   {heading_p?, ( line_p+ | (refrain_p?, (stanza_p,\nrefrain_p?)+ )) }</template></pb-code-highlight></div>\n\nThat is, a poem consists of an optional heading, followed by either a\nsequence of lines or an unnamed group, which starts with an optional\nrefrain and is followed by one or more occurrences of another group, each\nmember of which is composed of a stanza followed by an optional\nrefrain. A sequence such as <span data-tei=\"1.7.2.15.22.11.21.13.4\" class=\"tei-mentioned\">refrain - stanza - stanza -\nrefrain</span> follows this pattern, as does the sequence\n<span data-tei=\"1.7.2.15.22.11.21.13.6\" class=\"tei-mentioned\">stanza - refrain - stanza - refrain</span>. The\nsequence <span data-tei=\"1.7.2.15.22.11.21.13.8\" class=\"tei-mentioned\">refrain - refrain - stanza - stanza</span>\ndoes not, however, and neither does the sequence <span data-tei=\"1.7.2.15.22.11.21.13.10\" class=\"tei-mentioned\">stanza -\nrefrain - refrain - stanza.</span> Among other conditions made\nexplicit by this content model are the requirements that at least one\nstanza must appear in a poem, if it is not composed simply of lines,\nand that if there is both a heading and a stanza they must appear in\nthat order.<p></p>\n<p data-tei=\"1.7.2.15.22.11.21.15\" class=\"tei-p\">Note that the apparent complexity of this model derives from the\nconstraints expressed informally above. A simpler model, such as\n</p><div data-tei=\"1.7.2.15.22.11.21.15.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>poem_p =\nelement poem {heading_p?, (line_p | refrain_p | stanza_p)+ }</template></pb-code-highlight></div> would not enforce any of them, and would therefore permit\nsuch anomalies as a poem consisting only of refrains, or an arbitrary mixture of\nlines and refrains.<p></p>\n\n\n\n  <p data-tei=\"1.7.2.15.22.11.21.21\" class=\"tei-p\">It is beyond the scope of this \"Gentle Introduction to XML\" to provide a complete orientation to schema writing with Relax NG, but interested readers may wish to consult more thorough tutorials on the subject.<a data-tei=\"1.7.2.15.22.11.21.21.2\" id=\"fnref_1_7_2_15_22_11_21_21_2\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_22_11_21_21_2\">15</a> The examples and explanation provided here may be helpful to consult when reading the schema declarations posted for groupings of TEI elements that share the same content model, such as <span data-tei=\"1.7.2.15.22.11.21.21.4\" class=\"tei-ident1\"><a href=\"/ref/macro.phraseSeq\">macro.phraseSeq</a></span>, whose declaration features an example of mixed text and element content. Due to the complexity of the TEI schema as expressed in Relax NG, it is best to customize its content model in TEI itself by writing an ODD, as discussed in <pb-link data-tei=\"1.7.2.15.22.11.21.21.6\" class=\"inner-ref\" xml-id=\"IM\" hash=\"IM\" emit=\"transcription\">23.5 Implementation of an ODD System</pb-link>.</p>\n</div>\n</div>\n</div>\n<div data-tei=\"1.7.2.15.24\" class=\"tei-div10\" id=\"SG152\"><h2 data-tei=\"1.7.2.15.24.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG152\">5.5 Complicating the Issue</a></pb-clipboard></h2>\n<p data-tei=\"1.7.2.15.24.5\" class=\"tei-p\">In the simple cases described so far, we have assumed that one\ncan identify the immediate constituents of every element in a\ntextual structure. A poem consists of stanzas, and an anthology\nconsists of poems. Stanzas do not float around unattached to poems or\ncombined into some other unrelated element; a poem cannot contain an\nanthology. All the elements of a given document type may be arranged\ninto a hierarchic structure like a family tree, with a single\nancestor at one end and many children (mostly the elements containing\nsimple text) at the other. For example, we could represent an anthology\ncontaining two poems, the first of which contains two four-line\nstanzas and the second a single stanza,  by a tree structure like the following figure:</p>\n  <span data-tei=\"1.7.2.15.24.7\" class=\"tei-figure2\"><img data-tei=\"1.7.2.15.24.7.1\" src=\"https://tei-c.org/release/doc/tei-p5-doc/en/html/Images/xmlFlowChart.png\" class=\"tei-graphic\" title=\"\" style=\"width: 80%; \"></span>\n\n\n \n<p data-tei=\"1.7.2.15.24.15\" class=\"tei-p\">This graphic represents the hierarchical structure of an XML document,\nresembling a family tree. Most XML processing systems now use a standardized way of accessing\nparts of an XML document called <span data-tei=\"1.7.2.15.24.15.2\" class=\"tei-term\">XPath</span>.<a data-tei=\"1.7.2.15.24.15.4\" id=\"fnref_1_7_2_15_24_15_4\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_24_15_4\">16</a> XPath gives us a\nnon-graphical way of referring to any part of an XML document: for\nexample, we might refer to the last line of Blake's poem as\n<span data-tei=\"1.7.2.15.24.15.6\" class=\"tei-code2 code\">/anthology/poem[1]/stanza[2]/line[4]</span>. The square brackets\nhere indicate a numerical selection: we are talking about the fourth\nline in the second stanza of the first poem in the anthology. If we\nleft out all the square-bracketted selections, the corresponding XPath\nexpression would refer to all lines contained by stanzas contained by\npoems contained by anthologies. An XPath expression can refer to any\ncollection of elements: for example, the expression\n<span data-tei=\"1.7.2.15.24.15.8\" class=\"tei-code2 code\">/anthology/poem</span> refers to all poems in an anthology and\nthe expression <span data-tei=\"1.7.2.15.24.15.10\" class=\"tei-code2 code\">/anthology/poem/heading</span> refers to all their headings. </p>\n  <p data-tei=\"1.7.2.15.24.17\" class=\"tei-p\">The forward slash (‘/’, U+002F SOLIDUS) within an XPath expression behaves in much the same way\nas a forward slash or backslash does in a filename specification.\nTo use a family tree analogy, a single slash indicates that the item to the\nimmediate left is a parent of the item(s) to the right of it. For example,\nin the XPath expression <span data-tei=\"1.7.2.15.24.17.2\" class=\"tei-code2 code\">/anthology/poem</span>, the single slash\nbetween anthology and poem indicates that anthology is a parent of the\npoem children elements. (The first forward slash in the XPath expression\nindicates the document node.) In XPath, it is also possible to refer to\nchildren, grandchildren, and other descendants of the family tree using two\nforward slashes together. For example, the XPath expression <span data-tei=\"1.7.2.15.24.17.4\" class=\"tei-code2 code\">/anthology/poem//line</span>\nwill refer to all of the lines of all of the stanzas of all the poems, without\nhaving to represent the stanza element in the XPath.</p>\n\n<p data-tei=\"1.7.2.15.24.19\" class=\"tei-p\">Clearly, there are many such trees that might be drawn to describe\nthe structure of this or other anthologies. Some of them might be\nrepresentable as further subdivisions of this tree: for example, we\nmight subdivide the lines into individual words, since in our simple\nexample no word crosses a line boundary. Surprisingly perhaps, this\ngrossly simplified view of what text is (memorably termed an\n<span data-tei=\"1.7.2.15.24.19.2\" class=\"tei-term\">ordered hierarchy of content objects</span> (OHCO) view of text\nby Renear <span data-tei=\"1.7.2.15.24.19.4\" class=\"tei-foreign\">et al.</span><a data-tei=\"1.7.2.15.24.19.5\" id=\"fnref_1_7_2_15_24_19_5\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_24_19_5\">17</a>) turns out to\nbe very effective for a large number of purposes. It is not, however,\nadequate for the full complexity of real textual structures, for which\nmore complex mechanisms need to be employed. There are many other\ntrees that might be drawn which do not fit within the\nanthology model which we have presented so far. We might, for\nexample, be interested in syntactic structures or other linguistic\nconstructs, which rarely respect the formal boundaries of verse. Or,\nto take a simpler example, we might want to represent the pagination\nof different editions of the same text.</p>\n\n<p data-tei=\"1.7.2.15.24.21\" class=\"tei-p\">In the OHCO model of text, representation of cases where different\nelements overlap so that several different trees may be identified in\nthe same document is generally problematic. All the elements marked\nup in a document, no matter what namespace they belong to, must fit\nwithin a single hierarchy. To represent overlapping structures,\ntherefore, a single hierarchy must be chosen, and the points at which\nother hierarchies intersect with it marked. For example,\nwe might choose the verse structure as our primary hierarchy, and then\nmark the pagination by means of empty elements inserted at the boundary\npoints between one page and the next. Or we could represent alternative\nhierarchies by means of the pointing and linking mechanisms described\nin chapter <pb-link data-tei=\"1.7.2.15.24.21.2\" class=\"inner-ref\" xml-id=\"SA\" hash=\"SA\" emit=\"transcription\">16 Linking, Segmentation, and Alignment</pb-link> of these Guidelines. These mechanisms all\ndepend on the use of <span data-tei=\"1.7.2.15.24.21.4\" class=\"tei-term\">attributes</span>, which may be used both to\nidentify particular elements within a document and to point to, link,\nor align them into arbitrary structures.</p>\n\n\n</div>\n<div data-tei=\"1.7.2.15.26\" class=\"tei-div10\" id=\"SG16\"><h2 data-tei=\"1.7.2.15.26.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG16\">5.6 Attributes</a></pb-clipboard></h2>\n<p data-tei=\"1.7.2.15.26.5\" class=\"tei-p\">In the XML context, the word <span data-tei=\"1.7.2.15.26.5.2\" class=\"tei-mentioned\">attribute</span>, like\nsome other words, has a specific technical sense. It is used to\ndescribe information that is in some sense descriptive of a specific\nelement occurrence but not regarded as part of its content. For\nexample, you might wish to add a status attribute to\noccurrences of some elements in a document to indicate their degree of\nreliability, or to add an identifier attribute so that you\ncould refer to particular element occurrences from elsewhere within a\ndocument. Attributes are useful in precisely such circumstances.</p>\n<p data-tei=\"1.7.2.15.26.7\" class=\"tei-p\">Although different elements may have attributes with the same name\n(for example, in the TEI scheme, every element is defined as having an\nattribute named n), they are always regarded as\ndifferent, and may have different values assigned to them. If an\nelement has been defined as having attributes, the attribute values\nare supplied in the document instance as <span data-tei=\"1.7.2.15.26.7.4\" class=\"tei-term\">attribute-value\npairs</span> inside the start-tag for the element occurrence. An\nend-tag cannot contain an attribute-value specification, since it\nwould be redundant.</p>\n<p data-tei=\"1.7.2.15.26.9\" class=\"tei-p\">The order in which attribute-value pairs are supplied inside a tag\nhas no significance; they must, however, be separated by at least one\nwhitespace (blank, newline, or tab) character. The value part\nmust always be given inside matching quotation marks, either single or\ndouble<a data-tei=\"1.7.2.15.26.9.2\" id=\"fnref_1_7_2_15_26_9_2\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_26_9_2\">18</a>.</p>\n<p data-tei=\"1.7.2.15.26.11\" class=\"tei-p\">For example: \n</p><div data-tei=\"1.7.2.15.26.11.2\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\n  &lt;poem xml:id=\"Poem1\" status=\"draft\"&gt; ... &lt;/poem&gt;\n</pb-code-highlight></div><pb-popover data-tei=\"1.7.2.15.26.11.2\" class=\"alternate tei-ex_egXML2 bibl-link\" id=\"altref_3\"><span slot=\"default\">bibliography</span></pb-popover>\nHere attribute values are being specified for two attributes\npreviously declared for the <a data-tei=\"1.7.2.15.26.11.4\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> element: xml:id\nand status. For the instance of a <a data-tei=\"1.7.2.15.26.11.10\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> in this\nexample, represented here by ellipsis points, the xml:id\nattribute has the value P1 and the status\nattribute has the value draft. An XML processor can use the\nvalues of the attributes in any way it chooses; for example, a\n<a data-tei=\"1.7.2.15.26.11.20\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> in which the status attribute has the value\ndraft might be formatted differently from one in which the same\nattribute has the value revised; another processor might use the\nsame attribute to determine whether or not poem elements are to be\nprocessed at all. The xml:id attribute is a slightly\nspecial case in that, by convention, it is always used to supply a\nunique value to identify a particular element occurrence, which may be\nused for cross-reference purposes, as discussed further below (<pb-link data-tei=\"1.7.2.15.26.11.30\" class=\"inner-ref\" xml-id=\"SG-id\" hash=\"SG-id\" emit=\"transcription\">5.6.2 Identifiers and Indicators</pb-link>).<p></p>\n\n<div data-tei=\"1.7.2.15.26.13\" class=\"tei-div10\" id=\"SG-att\"><h3 data-tei=\"1.7.2.15.26.13.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-att\">5.6.1 Declaring Attributes</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.26.13.5\" class=\"tei-p\">Attributes are declared in a schema in the same way as elements.\nAs well as specifying an attribute's name and the element to which it is to be\nattached, it is possible to specify (within limits) what kind of value\nis acceptable for an attribute.</p>\n\n<p data-tei=\"1.7.2.15.26.13.7\" class=\"tei-p\">In the compact syntax of RELAX NG, an attribute is defined by means\nof an attribute pattern, like the following: \n\n</p><div data-tei=\"1.7.2.15.26.13.7.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>att.status = attribute status {\"draft\" | \"revised\" | \"published\"}</template></pb-code-highlight></div>\n\nThis defines a new pattern, called <span data-tei=\"1.7.2.15.26.13.7.4\" class=\"tei-code2 code\">att.status</span>, whose\nvalue is an attribute pattern defining an attribute named\nstatus. Attribute names are subject to the same\nrestrictions as other names in XML; they need not be unique across the\nwhole schema, however, but only within the list of attributes for a\ngiven element.<p></p>\n\n<p data-tei=\"1.7.2.15.26.13.9\" class=\"tei-p\">A pattern defining the possible values for this attribute is given\nwithin the curly braces, in just the same way as a content model is\ngiven for an element pattern. In this case, the attribute's value must\nbe one of the strings presented explicitly above. </p>\n\n<p data-tei=\"1.7.2.15.26.13.11\" class=\"tei-p\">The attribute pattern definition must be included or referenced\nwithin the definition for every element to which the attribute is\nattached. We therefore modify the definition for the\n<span data-tei=\"1.7.2.15.26.13.11.2\" class=\"tei-code2 code\">poem_p</span> pattern given above as follows:\n\n</p><div data-tei=\"1.7.2.15.26.13.11.4\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>poem_p = element poem { att.status?, heading_p?, stanza_p+ }</template></pb-code-highlight></div>\n\nIn RELAX NG, an element pattern simply includes any attribute patterns\napplicable to it along with its other constituents, as shown\nabove. Attribute patterns can also be grouped and alternated in the\nsame way as element patterns, though this particular feature is not\nwidely used in the TEI scheme, since it is not available to the same\nextent in all schema languages. Because a question mark follows the\nreference to the <span data-tei=\"1.7.2.15.26.13.11.6\" class=\"tei-code2 code\">att.status</span> pattern in our example, a\ndocument in which the status attribute is not specified\nwill still be valid; without this occurrence indicator the\nstatus attribute would be required.\n\n<p></p>\n\n<p data-tei=\"1.7.2.15.26.13.13\" class=\"tei-p\">Instead of supplying a list of explicit values, an attribute\npattern can specify that the attribute must have a value of a\nparticular type, for example a text string, a numeric value, a\nnormalized date, etc. This is accomplished by supplying a pattern\nthat refers to a <span data-tei=\"1.7.2.15.26.13.13.2\" class=\"tei-term\">datatype</span>. In the example above,\nbecause a list of acceptable values is predefined, a parser can check\nthat no <a data-tei=\"1.7.2.15.26.13.13.4\" href=\"/ref/poem\" class=\"tei-gi\" target=\"\">poem</a> is defined for which the status\nattribute does not have one of draft, revised,\nor published as its value. By contrast, with a definition\nsuch as </p><div data-tei=\"1.7.2.15.26.13.13.14\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>att.status =\nattribute status {text}</template></pb-code-highlight></div> a parser would accept almost any\nunbroken string of characters (<span data-tei=\"1.7.2.15.26.13.13.16\" class=\"tei-code2 code\">status=\"awful\"</span>,\n<span data-tei=\"1.7.2.15.26.13.13.18\" class=\"tei-code2 code\">status=\"awe-ful\"</span>, or <span data-tei=\"1.7.2.15.26.13.13.20\" class=\"tei-code2 code\">status=\"12345678\"</span>) as\nvalid for this attribute. Sometimes, of course, the set of possible\nvalues cannot be predefined. Where it can, as in this case, it is\ngenerally better to do so.<p></p>\n\n<p data-tei=\"1.7.2.15.26.13.15\" class=\"tei-p\">Schema languages vary widely in the extent to which they support\nvalidation of attribute values. Some languages predefine a small set\nof possibilities. Others allow the schema designer to use values from\na predefined library of possible datatypes, or to\nadd their own definitions, possibly of great complexity. A\ndatatype might be something fairly general (any\npositive integer), something very specific or idiosyncratic (any\nfour-character string ending with \"T\"), or somewhere between the\ntwo. In the RELAX NG schemas used by the TEI, general patterns have\nbeen defined for about half a dozen datatypes (using the W3C Schema\n<a data-tei=\"1.7.2.15.26.13.15.6\" href=\"#XSD2\" class=\"tei-ref3\" target=\"\">Datatype Library</a>,\nand discussed further in <pb-link data-tei=\"1.7.2.15.26.13.15.8\" class=\"inner-ref\" xml-id=\"DTYPES\" hash=\"DTYPES\" emit=\"transcription\">1.4.2 Datatype Specifications</pb-link>). In addition to the two\npossibilities already mentioned—plain text or an explicit list of\npossible strings—other datatypes likely to be encountered include\nthe following:\n</p><dl data-tei=\"1.7.2.15.26.13.15.10\" class=\"tei-list3\"><dt data-tei=\"1.7.2.15.26.13.15.10.5\"><span data-tei=\"1.7.2.15.26.13.15.10.3\" class=\"tei-label\">boolean</span></dt><dd data-tei=\"1.7.2.15.26.13.15.10.5\">values must be either true or false</dd><dt data-tei=\"1.7.2.15.26.13.15.10.9\"><span data-tei=\"1.7.2.15.26.13.15.10.7\" class=\"tei-label\">numeric</span></dt><dd data-tei=\"1.7.2.15.26.13.15.10.9\">values must represent a numeric quantity of some\nkind</dd><dt data-tei=\"1.7.2.15.26.13.15.10.13\"><span data-tei=\"1.7.2.15.26.13.15.10.11\" class=\"tei-label\">date</span></dt><dd data-tei=\"1.7.2.15.26.13.15.10.13\">values must represent a possible date and time in some calendar</dd></dl><p></p>\n<p data-tei=\"1.7.2.15.26.13.17\" class=\"tei-p\">Two further datatypes of particular usefulness in managing XML documents\nare commonly known as <span data-tei=\"1.7.2.15.26.13.17.2\" class=\"tei-code2 code\">ID</span>—for identifier—and\n<span data-tei=\"1.7.2.15.26.13.17.4\" class=\"tei-code2 code\">URI</span>—for Universal Resource Indicator, or pointer for\nshort. These are discussed in the next section.</p>\n</div>\n<div data-tei=\"1.7.2.15.26.15\" class=\"tei-div10\" id=\"SG-id\"><h3 data-tei=\"1.7.2.15.26.15.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-id\">5.6.2 Identifiers and Indicators</a></pb-clipboard></h3>\n<p data-tei=\"1.7.2.15.26.15.5\" class=\"tei-p\">It is often necessary to refer to an occurrence of one textual\nelement from within another, an obvious example being phrases such as\n<span data-tei=\"1.7.2.15.26.15.5.2\" class=\"tei-q2\">see note 6</span> or <span data-tei=\"1.7.2.15.26.15.5.4\" class=\"tei-q2\">as discussed in chapter 5</span>. When a text is\nbeing produced the actual numbers associated with the notes or\nchapters may not be certain. If we are using descriptive markup, such\nthings as page or chapter numbers, being entirely matters of\npresentation, will not in any case be present in the marked-up text:\nthey will be assigned by whatever processor is operating on the text\n(and may indeed differ in different applications). XML therefore\npredefines an attribute that may be used to provide any element\noccurrence with a special identifier, a kind of label, which may be\nused to refer to it from anywhere else: since it is defined in the XML\nnamespace, the name of this attribute is xml:id and it is\nused throughout the TEI schema. Because it is intended to act as an\nidentifier, its values must be unique within a given document. The\ncross-reference itself will be supplied by an element bearing an\nattribute of a specific kind, which must also be declared in the\nschema. </p>\n<p data-tei=\"1.7.2.15.26.15.7\" class=\"tei-p\">Suppose, for example, we wish to include a reference within\nthe notes on one poem that refers to another poem. We will\nfirst need to provide some way of attaching a label to each\npoem:  this is easily done using the xml:id attribute.\nNote that not every poem need carry an xml:id attribute and\nthe parser may safely ignore the lack of one in those that do not.\nOnly poems to which we intend to refer need use this attribute; for\neach such poem we should now include in its start-tag some unique\nidentifier, for example:\n</p><div data-tei=\"1.7.2.15.26.15.7.6\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\n&lt;poem xml:id=\"Rose\"&gt; ... &lt;/poem&gt;\n\n&lt;poem xml:id=\"P40\"&gt; ... &lt;/poem&gt;\n\n&lt;poem&gt; ... &lt;/poem&gt;\n</pb-code-highlight></div><pb-popover data-tei=\"1.7.2.15.26.15.7.6\" class=\"alternate tei-ex_egXML2 bibl-link\" id=\"altref_4\"><span slot=\"default\">bibliography</span></pb-popover>\n<p></p>\n<p data-tei=\"1.7.2.15.26.15.9\" class=\"tei-p\">Next we need to define a new element for the cross-reference\nitself. This will not have any content—it is only a\npointer—but it has an attribute, the value of which will be\nthe identifier of the element pointed at. This is achieved by\nthe following definition:\n</p><div data-tei=\"1.7.2.15.26.15.9.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>poemRef_p = element poemRef {attribute target {anyURI},  empty}</template></pb-code-highlight></div>\n<p></p>\n\n<p data-tei=\"1.7.2.15.26.15.11\" class=\"tei-p\">The <a data-tei=\"1.7.2.15.26.15.11.2\" href=\"/ref/poemRef\" class=\"tei-gi\" target=\"\">poemRef</a> element has no content, but a single attribute\ncalled target. The value of this attribute must be a\npointer or web reference of type <span data-tei=\"1.7.2.15.26.15.11.6\" class=\"tei-code2 code\">anyURI</span>;<a data-tei=\"1.7.2.15.26.15.11.8\" id=\"fnref_1_7_2_15_26_15_11_8\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_26_15_11_8\">19</a>\nfurthermore, because there is no indication of optionality on the\nattribute pattern, it must be supplied on each occurrence—a\n<a data-tei=\"1.7.2.15.26.15.11.10\" href=\"/ref/poemRef\" class=\"tei-gi\" target=\"\">poemRef</a> with no referent is an impossibility.</p>\n\n<p data-tei=\"1.7.2.15.26.15.13\" class=\"tei-p\">With these declarations in force, we can now encode a reference to\nthe poem whose xml:id attribute specifies that its\nidentifier is Rose as follows:\n</p><div data-tei=\"1.7.2.15.26.15.13.6\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\nBlake's poem on the sick rose \n&lt;poemRef target=\"#Rose\"/&gt; ...</pb-code-highlight></div><pb-popover data-tei=\"1.7.2.15.26.15.13.6\" class=\"alternate tei-ex_egXML2 bibl-link\" id=\"altref_5\"><span slot=\"default\">bibliography</span></pb-popover>\n\n<p></p>\n<p data-tei=\"1.7.2.15.26.15.15\" class=\"tei-p\">A processor may take any number of actions when it encounters a\nlink encoded in this way: a formatter might construct an exact page\nand line reference for the location of the poem in the current\ndocument and insert it, or just quote the poem's title or first lines.\nA hypertext style processor might use this element as a signal to\nactivate a link to the poem being referred to, for example by\ndisplaying it in a new window. Note, however, that the purpose of the\nXML markup is simply to indicate that a cross-reference exists: it\ndoes not necessarily determine what the processor is to do with it.</p>\n\n<p data-tei=\"1.7.2.15.26.15.17\" class=\"tei-p\">The target of a URI can be located anywhere: it may not necessarily\nbe part of the same document, nor even located on the same computer\nsystem. Equally, it can be a resource of any kind, not necessarily an\nXML document or document fragment. It is thus a very convenient way of\nincluding references to non-XML data such as image files within a\ndocument. If, for example, we wished to include an illustration\ncontaining a reproduction of Blake's original in our anthology, the\nmost appropriate method would probably be to define a new element\ncalled (for the sake of argument) <a data-tei=\"1.7.2.15.26.15.17.2\" href=\"/ref/graphic\" class=\"tei-gi\" target=\"\">graphic</a>\nwith a target attribute of datatype URI:\n</p><div data-tei=\"1.7.2.15.26.15.17.6\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>graphic_p = element graphic {att.url, empty} att.url =\nattribute url {anyURI}</template></pb-code-highlight></div> With these additions to the schema, we\ncan now represent the location of the illustration within our text\nlike this: <div data-tei=\"1.7.2.15.26.15.17.8\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">&lt;poem&gt;&lt;graphic url=\"http://en.wikisource.org/wiki/Image:Blake_sick_rose.jpg\"/&gt;\n&lt;/poem&gt;</pb-code-highlight></div> By providing a location from which a reproduction of\nthe required image can be downloaded, this encoding makes it possible\nfor appropriate software able to display the image as well as record\nits existence. <p></p>\n<p data-tei=\"1.7.2.15.26.15.19\" class=\"tei-p\">Attributes form part of the structure of an XML document in the\nsame way as elements, and can therefore be accessed using XPath. For\nexample, to refer to all the poems in our anthology whose\nstatus attribute has the value draft, we might\nuse an XPath such as <span data-tei=\"1.7.2.15.26.15.19.6\" class=\"tei-code2 code\">/anthology/poem[@status='draft']</span>. To\nfind the headings of all such poems, we would use the XPath\n<span data-tei=\"1.7.2.15.26.15.19.8\" class=\"tei-code2 code\">/anthology/poem[@status='draft']/heading</span>. </p>\n</div>\n</div>\n\n<div data-tei=\"1.7.2.15.28\" class=\"tei-div10\" id=\"SG-oth\"><h2 data-tei=\"1.7.2.15.28.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-oth\">5.7 Other Components of an XML Document</a></pb-clipboard></h2> \n\n<p data-tei=\"1.7.2.15.28.5\" class=\"tei-p\">In addition to the elements and attributes so far discussed, an XML\ndocument can contain a few other formally distinct things. An XML\ndocument may contain references to predefined strings of data that a\nvalidator must resolve before attempting to validate the document's\nstructure; these are called <span data-tei=\"1.7.2.15.28.5.2\" class=\"tei-term\">entity references</span>. They may\nbe useful as a means of providing boilerplate text or\nrepresenting character data which cannot easily be keyboarded. As\nnoted earlier, an XML document may also contain instances of elements\ntaken from some other <span data-tei=\"1.7.2.15.28.5.6\" class=\"tei-term\">namespace</span>. And an XML\ndocument may also contain arbitrary signals or flags for use when the\ndocument is processed in a particular way by some class of processor\n(a common example in document production is the need to force a\nformatter to start a new page at some specific point in a document);\nsuch flags are called <span data-tei=\"1.7.2.15.28.5.8\" class=\"tei-term\">processing instructions</span>. We discuss each of these\nthree cases in the rest of this section.</p>\n\n<p data-tei=\"1.7.2.15.28.7\" class=\"tei-p\">The <span data-tei=\"1.7.2.15.28.7.2\" class=\"tei-term\">XML declaration</span> should be supplied at the very\nbeginning of every XML file; while it looks like a processing\ninstruction, it is not, and may not occur anywhere other than at the\nvery beginning of an XML file. For example: </p><div data-tei=\"1.7.2.15.28.7.4\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;?xml\nversion=\"1.0\" encoding=\"UTF-8\"?&gt;</template></pb-code-highlight></div> The XML declaration specifies\nthe version number of the XML Recommendation applicable to the\ndocument it introduces (in this case, version 1.0), and optionally\nalso the character encoding used to represent the Unicode characters\nwithin it. By default an XML document uses the character encoding\nUTF-8 or UTF-16; other commonly-encountered encodings include ISO\n8859-1. If any character present in the document is not available in\nthe specified character encoding, it must be represented as a\ncharacter reference (<pb-link data-tei=\"1.7.2.15.28.7.6\" class=\"inner-ref\" xml-id=\"SG-er\" hash=\"SG-er\" emit=\"transcription\">5.7.1 Character References</pb-link>). The XML declaration is\ndocumentary, but should normally be supplied at the start of any XML\nfile. If it is missing many XML-aware processors will be unable to\nprocess the associated text correctly.<p></p>\n\n<div data-tei=\"1.7.2.15.28.9\" class=\"tei-div10\" id=\"SG-er\"><h3 data-tei=\"1.7.2.15.28.9.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-er\">5.7.1 Character References</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.28.9.5\" class=\"tei-p\">As mentioned above, all XML documents use the same internal\ncharacter encoding. Since not all computer systems currently support\nthis encoding directly, a special syntax is defined\nthat can be used to represent individual characters from the Unicode\ncharacter set in a portable way by providing their numeric value, in\ndecimal or hexadecimal notation.</p>\n\n<p data-tei=\"1.7.2.15.28.9.7\" class=\"tei-p\">For example, the character <span data-tei=\"1.7.2.15.28.9.7.2\" class=\"tei-mentioned\">é</span> is represented\nwithin an XML document as the Unicode character with hexadecimal value\n<span data-tei=\"1.7.2.15.28.9.7.4\" class=\"tei-num\">00E9</span>. If such a document is being prepared on (or\nexported to) a system using a different character set in which this\ncharacter is not available, it may instead be represented by the\ncharacter reference <span data-tei=\"1.7.2.15.28.9.7.6\" class=\"tei-code2 code\">&amp;#x00E9;</span> (the <span data-tei=\"1.7.2.15.28.9.7.8\" class=\"tei-code2 code\">x</span> indicating\nthat what follows is a hexadecimal value) or\n<span data-tei=\"1.7.2.15.28.9.7.10\" class=\"tei-code2 code\">&amp;#0233;</span> (its decimal equivalent). References of this type do not need\nto be predefined, since the underlying character encoding for XML is\nalways the same.</p>\n\n<p data-tei=\"1.7.2.15.28.9.9\" class=\"tei-p\">To aid legibility, however, it is also possible to use a mnemonic\nname (such as <span data-tei=\"1.7.2.15.28.9.9.2\" class=\"tei-code2 code\">eacute</span>) for such character references,\nprovided that each such name is mapped to the required Unicode value\nby means of a construct known as an <span data-tei=\"1.7.2.15.28.9.9.4\" class=\"tei-term\">entity\ndeclaration</span>. A reference to a named character entity always\ntakes the form of an ampersand, followed by the name, followed by a\nsemicolon. For example an XML document containing the string\n<span data-tei=\"1.7.2.15.28.9.9.6\" class=\"tei-q2\">T&amp;C</span> might be encoded as <span data-tei=\"1.7.2.15.28.9.9.8\" class=\"tei-code2 code\">T&amp;amp;C</span>. </p>\n\n<p data-tei=\"1.7.2.15.28.9.11\" class=\"tei-p\">There is a small set of such character\nentity references that do not have to be declared because they form\npart of the definition of XML. These include the names used for\ncharacters such as the ampersand (<span data-tei=\"1.7.2.15.28.9.11.2\" class=\"tei-code2 code\">amp</span>) and the open angle\nbracket or less-than sign (<span data-tei=\"1.7.2.15.28.9.11.4\" class=\"tei-code2 code\">lt</span>), which could not easily\notherwise be included in an XML document without ambiguity. Other\npredeclared entity names are those for quotation marks (<span data-tei=\"1.7.2.15.28.9.11.6\" class=\"tei-code2 code\">quot</span>\nand <span data-tei=\"1.7.2.15.28.9.11.8\" class=\"tei-code2 code\">apos</span> for double and single respectively), and for\ncompleteness the closing angle bracket or greater-than sign\n(<span data-tei=\"1.7.2.15.28.9.11.10\" class=\"tei-code2 code\">gt</span>).</p>\n\n<p data-tei=\"1.7.2.15.28.9.13\" class=\"tei-p\">For all other named character entities, a set of entity declarations\nmust be provided to an XML processor before the document referring to\nthem can be validated. The declaration itself uses a non-XML syntax\ninherited from SGML; for example, to define an entity named\n<span data-tei=\"1.7.2.15.28.9.13.2\" class=\"tei-ident2\">eacute</span> with the replacement value é, the declaration\ncould have any of the following forms: </p><div data-tei=\"1.7.2.15.28.9.13.4\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;!ENTITY eacute\n\"é\"&gt;</template></pb-code-highlight></div> or, using hexadecimal notation: <div data-tei=\"1.7.2.15.28.9.13.6\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;!ENTITY\neacute \"&amp;#xe9;\"&gt;</template></pb-code-highlight></div> or, using decimal notation:\n<div data-tei=\"1.7.2.15.28.9.13.8\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;!ENTITY eacute \"&amp;#233;\"&gt;</template></pb-code-highlight></div>\n <p></p>\n\n<p data-tei=\"1.7.2.15.28.9.15\" class=\"tei-p\">Entities of this kind are useful also for <span data-tei=\"1.7.2.15.28.9.15.2\" class=\"tei-term\">string\nsubstitution</span> purposes, where the same text needs to be repeated\nuniformly throughout a text. For example, if a declaration such as\n</p><div data-tei=\"1.7.2.15.28.9.15.4\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;!ENTITY TEI \"Text Encoding Initiative\"&gt;</template></pb-code-highlight></div> is included with a document,\nthen references such as <span data-tei=\"1.7.2.15.28.9.15.6\" class=\"tei-code2 code\">&amp;TEI;</span> may be used within it,\neach of which will be expanded in the same way and replaced by the\nstring <span data-tei=\"1.7.2.15.28.9.15.8\" class=\"tei-q2\">Text Encoding Initiative</span> before the text is validated.<p></p>\n\n\n</div>\n<div data-tei=\"1.7.2.15.28.11\" class=\"tei-div10\" id=\"SGname\"><h3 data-tei=\"1.7.2.15.28.11.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SGname\">5.7.2 Namespaces</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.28.11.5\" class=\"tei-p\">A valid XML document necessarily specifies the schema in which its\nconstituent elements are defined. However, a well-formed XML document\nis not required to specify its schema (indeed, it may not even have a\nschema). It would still be useful to indicate that the element names used\nin it have some defined provenance. Furthermore, it might be desirable\nto include in a document elements that are defined (possibly\ndifferently) in different schemas. A cabinet-maker's schema might well\ndefine an element called <a data-tei=\"1.7.2.15.28.11.5.2\" href=\"/ref/table\" class=\"tei-gi\" target=\"\">table</a> with very different\ncharacteristics from those of a documentalist's.</p>\n<p data-tei=\"1.7.2.15.28.11.7\" class=\"tei-p\">The concept of <span data-tei=\"1.7.2.15.28.11.7.2\" class=\"tei-term\">namespace</span> was introduced into the XML\nlanguage as a means of addressing these and related problems. If the\nmarkup of an XML document is thought of as an expression in some\nlanguage, then a namespace may be thought of as analogous to the\nlexicon of that language. Just as a document can contain words taken\nfrom different languages, so a well-formed XML document can include\nelements taken from different namespaces. A namespace resembles a\nschema in that we may say that a given\nset of elements belongs to a given namespace, or\nare defined by a given schema. However, a schema\nis a set of element definitions, whereas a namespace is really only a\nproperty of a collection of elements: the only tangible form it takes\nin an XML document is its distinctive <span data-tei=\"1.7.2.15.28.11.7.8\" class=\"tei-term\">prefix</span> and the\nidentifying <span data-tei=\"1.7.2.15.28.11.7.10\" class=\"tei-term\">name</span> associated with it.</p>\n\n<p data-tei=\"1.7.2.15.28.11.9\" class=\"tei-p\">Suppose for example that we wish to extend our anthology to include\na complex diagram. We might start by considering whether or\nnot to extend our simple schema to include XML markup for such\nfeatures as arcs, polygons, and other graphical elements. XML can be\nused to represent any kind of structure, not simply text, and there\nare clear advantages to having our text and our diagrams all expressed\nin the same way.</p>\n<p data-tei=\"1.7.2.15.28.11.11\" class=\"tei-p\">Fortunately we do not need to invent a schema for the\nrepresentation of graphical components such as diagrams; it already\nexists in the shape of the Scalable Vector Graphics (SVG) language\ndefined by the W3C.<a data-tei=\"1.7.2.15.28.11.11.2\" id=\"fnref_1_7_2_15_28_11_11_2\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_28_11_11_2\">20</a> SVG\nis a widely used and rich XML vocabulary for representing all kinds of\ntwo-dimensional graphics; it is also well supported by existing\nsoftware. Using an SVG-aware drawing package, we can easily draw our\ndiagram and save it in XML format for inclusion within our\nanthology. When we do so, we need to indicate that this part of\nthe document contains elements taken from the SVG namespace, if only\nto ensure that processing software does not confuse our <a data-tei=\"1.7.2.15.28.11.11.4\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a>\nelement with the SVG <a data-tei=\"1.7.2.15.28.11.11.6\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a>, which means something quite\ndifferent. </p>\n<p data-tei=\"1.7.2.15.28.11.13\" class=\"tei-p\">An XML document need not specify any namespace: it is then said to\nuse the null namespace. Alternatively, the root element of a\ndocument may supply a default namespace, understood to apply to all elements which have no namespace prefix. This is the function of the\nxmlns attribute which provides a\nunique name for the default namespace, in the form of a URI:\n</p><div data-tei=\"1.7.2.15.28.11.13.6\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\n&lt;anthology&gt;\n&lt;!-- anthology markup elements here --&gt;\n&lt;/anthology&gt;\n</pb-code-highlight></div>\nIn exactly the same way, on the root element for each part of our\ndocument which uses the SVG language, we might introduce the SVG\nnamespace name:\n<div data-tei=\"1.7.2.15.28.11.13.8\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\n&lt;anthology&gt;\n&lt;!-- anthology markup elements here --&gt;\n   &lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;!-- SVG markup elements here --&gt;\n  &lt;/svg&gt;\n&lt;!-- more anthology markup elements here --&gt;\n&lt;/anthology&gt;\n</pb-code-highlight></div>\nAlthough a namespace name usually uses the URI (Uniform Resource\nIdentifier) syntax, it is not treated as an online address\nand an XML processor regards it just as a string, providing a longer name for the\nnamespace.<p></p>\n<p data-tei=\"1.7.2.15.28.11.15\" class=\"tei-p\">The xmlns attribute can also be used to associate a short prefix\nname with the namespace it defines. This is very useful if we want to\nmingle elements from different namespaces within the same document,\nsince the prefix can be attached to any element, overriding the\nimplicit namespace for itself (but not its children):\n</p><div data-tei=\"1.7.2.15.28.11.15.4\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\n&lt;anthology xmlns:svg=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;!-- anthology markup elements here --&gt;\n   &lt;svg:svg&gt;\n      &lt;!-- SVG markup elements here --&gt;\n   &lt;/svg:svg&gt;\n  &lt;!-- more anthology markup elements here --&gt;\n&lt;/anthology&gt;\n</pb-code-highlight></div>\n<p></p>\n<p data-tei=\"1.7.2.15.28.11.17\" class=\"tei-p\">There is no limit on the number of namespaces that a document can\nuse. Provided that each is uniquely identified, an XML processor can\nidentify those that are relevant, and validate them appropriately. To\nextend our example further, we might decide to add a linguistic\nanalysis to each of the poems, using a set of elements such as <a data-tei=\"1.7.2.15.28.11.17.2\" href=\"/ref/aux\" class=\"tei-gi\" target=\"\">aux</a>, <a data-tei=\"1.7.2.15.28.11.17.4\" href=\"/ref/adj\" class=\"tei-gi\" target=\"\">adj</a>, etc.,\nderived from some pre-existing XML vocabulary for linguistic analysis.\n</p><div data-tei=\"1.7.2.15.28.11.17.6\" class=\"tei-ex_egXML1\"><pb-code-highlight language=\"xml\" theme=\"solarizedlight\">\n&lt;anthology xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:gram=\"http://www.gram.org\"&gt;\n    &lt;!-- anthology markup elements here --&gt;\n   &lt;svg:svg&gt;\n      &lt;!-- SVG markup elements here --&gt;\n   &lt;/svg:svg&gt;  \n&lt;line&gt;\n      &lt;gram:itj&gt;O&lt;/gram:itj&gt;\n      &lt;gram:nom&gt;Rose&lt;/gram:nom&gt;\n      &lt;gram:pron&gt;thou&lt;/gram:pron&gt;\n      &lt;gram:aux&gt;art&lt;/gram:aux&gt;\n      &lt;gram:adj&gt;sick&lt;/gram:adj&gt;\n&lt;/line&gt;\n&lt;/anthology&gt;\n</pb-code-highlight></div><pb-popover data-tei=\"1.7.2.15.28.11.17.6\" class=\"alternate tei-ex_egXML2 bibl-link\" id=\"altref_6\"><span slot=\"default\">bibliography</span></pb-popover>\n<p></p>\n\n<div data-tei=\"1.7.2.15.28.11.19\" class=\"tei-div10\" id=\"SG-ms\"><h4 data-tei=\"1.7.2.15.28.11.19.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-ms\">5.7.2.1 Marked Sections</a></pb-clipboard></h4>\n<p data-tei=\"1.7.2.15.28.11.19.5\" class=\"tei-p\">We mentioned above that the syntax of XML requires the encoder to\ntake special action if characters with a syntactic meaning in XML\n(such as the left angle bracket or ampersand) are to be used in a\ndocument to stand for themselves, rather than to signal the start of a\ntag or an entity reference respectively. The predefined entities\n<span data-tei=\"1.7.2.15.28.11.19.5.2\" class=\"tei-code2 code\">&amp;amp;</span>, <span data-tei=\"1.7.2.15.28.11.19.5.4\" class=\"tei-code2 code\">&amp;lt;</span>, and\n<span data-tei=\"1.7.2.15.28.11.19.5.6\" class=\"tei-code2 code\">&amp;gt;</span> provide one method of dealing with this problem,\nif the number of occurrences of such things is small. Other methods\nmay be considered when the number is large, as in an XML document like\nthe present Guidelines, which contains hundreds of examples of XML\nmarkup. One is to label the XML examples as belonging to a different\nnamespace from that of the document itself, which is the approach\ntaken in the present Guidelines. Another and simpler approach is\nprovided by one of the features inherited by XML from its parent SGML:\nthe marked section. </p>\n<p data-tei=\"1.7.2.15.28.11.19.7\" class=\"tei-p\">A marked section is a block of text within an XML document\nintroduced by the characters <span data-tei=\"1.7.2.15.28.11.19.7.2\" class=\"tei-code2 code\">&lt;![CDATA[</span> and terminated\nby the characters <span data-tei=\"1.7.2.15.28.11.19.7.4\" class=\"tei-code2 code\">]]&gt;</span>. Between these rather strange\nbrackets, markup recognition is turned off, and any tags or entity\nreferences encountered are therefore treated as if they were plain\ntext. For example, when we come to write the users' manual for our\nanthology, we may find ourselves often producing text like the\nfollowing:\n</p><div data-tei=\"1.7.2.15.28.11.19.7.6\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>Here is an example of the use of the &lt;gi&gt;line&lt;/gi&gt; element:\n&lt;![CDATA[&lt;line&gt;[...]&lt;/line&gt;]]&gt;</template></pb-code-highlight></div><p></p>\n\n</div>\n</div>\n\n<div data-tei=\"1.7.2.15.28.13\" class=\"tei-div10\" id=\"SG-pi\"><h3 data-tei=\"1.7.2.15.28.13.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-pi\">5.7.3 Processing Instructions</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.28.13.5\" class=\"tei-p\">Although one of the aims of using XML is to remove any information\nspecific to the processing of a document from the document itself, it\nis occasionally very convenient to be able to include such information—if \nonly so that it can be clearly distinguished from the\nstructure of the document. As suggested above, one common example is\nthe need, when processing an XML document for printed output, to\ninclude a suggestion that the formatting processor might use to\ndetermine where to begin a new page of output. Page-breaking decisions\nare usually best made by the formatting engine alone, but there will\nalways be occasions when it may be necessary to override these. An XML\nprocessing instruction inserted into the document is one very simple\nand effective way of doing this without interfering with other aspects\nof the markup.</p>\n<p data-tei=\"1.7.2.15.28.13.7\" class=\"tei-p\">Here is an example XML processing instruction: </p><div data-tei=\"1.7.2.15.28.13.7.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;?tex\n\\newpage ?&gt;</template></pb-code-highlight></div> It begins with <span data-tei=\"1.7.2.15.28.13.7.4\" class=\"tei-code2 code\">&lt;?</span> and ends with\n<span data-tei=\"1.7.2.15.28.13.7.6\" class=\"tei-code2 code\">?&gt;</span>. In between are two strings separated by a space:\nthe first is the name of some processor (<span data-tei=\"1.7.2.15.28.13.7.8\" class=\"tei-code2 code\">tex</span> in the above\nexample) and the second is some data intended for the use of that\nprocessor (in this case, the instruction to start a new page). The\nonly constraint placed by XML on the strings is that the first one\nmust be a valid XML name other than <span data-tei=\"1.7.2.15.28.13.7.10\" class=\"tei-code2 code\">XML</span>,\n<span data-tei=\"1.7.2.15.28.13.7.12\" class=\"tei-code2 code\">Xml</span>, or <span data-tei=\"1.7.2.15.28.13.7.14\" class=\"tei-code2 code\">xml</span>, etc. The second string can be\nany arbitrary sequence of characters, not including the closing\ncharacter-sequence <span data-tei=\"1.7.2.15.28.13.7.16\" class=\"tei-code2 code\">?&gt;</span>.<p></p>\n</div>\n</div>\n\n<div data-tei=\"1.7.2.15.30\" class=\"tei-div10\" id=\"SG18\"><h2 data-tei=\"1.7.2.15.30.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG18\">5.8 Putting It All Together</a></pb-clipboard></h2>\n\n<p data-tei=\"1.7.2.15.30.5\" class=\"tei-p\">In this chapter we have discussed most of the components of an XML\ndocument and its associated schema. We have described informally \nhow an XML document is represented, and also introduced one\nway of representing the rules a RELAX NG validator might use to\nvalidate it. In a working system, the following issues will also need\nto be addressed:\n</p><ul data-tei=\"1.7.2.15.30.5.2\" class=\"tei-list3 bulleted\"><li data-tei=\"1.7.2.15.30.5.2.3\" class=\"tei-item\">how does a processor determine the schema (or schemas) that\nshould be used to validate a given XML document instance?</li><li data-tei=\"1.7.2.15.30.5.2.5\" class=\"tei-item\">if a document contains entity references that must be processed before the\ndocument can be validated, where are those entities defined?</li><li data-tei=\"1.7.2.15.30.5.2.7\" class=\"tei-item\">an XML document instance may be stored in a number of different\noperating system files; how should they be assembled together?</li><li data-tei=\"1.7.2.15.30.5.2.9\" class=\"tei-item\">how does a processor determine which stylesheets it should use\nwhen processing an XML document, or how to interpret any processing\ninstructions it contains?</li><li data-tei=\"1.7.2.15.30.5.2.11\" class=\"tei-item\">how does a processor enforce more exact validation than simple\ndatatypes permit (for example of element content)?</li></ul>\n<p></p>\n\n<p data-tei=\"1.7.2.15.30.7\" class=\"tei-p\">Different schema languages and different XML processing systems\ntake very different positions on all of these topics, since none of\nthem is explicitly addressed in the XML specification itself. Consequently,\nthe best answer is likely to be specific to a particular software\nenvironment and schema language. Since this chapter is concerned with\nXML considered independently of its processing environment, we only\naddress them in summary detail here.</p> \n\n<div data-tei=\"1.7.2.15.30.9\" class=\"tei-div10\" id=\"SG-ass1\"><h3 data-tei=\"1.7.2.15.30.9.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-ass1\">5.8.1 Associating Entity Definitions with a Document\nInstance</a></pb-clipboard></h3>\n<p data-tei=\"1.7.2.15.30.9.5\" class=\"tei-p\">In <pb-link data-tei=\"1.7.2.15.30.9.5.2\" class=\"inner-ref\" xml-id=\"SG-er\" hash=\"SG-er\" emit=\"transcription\">5.7.1 Character References</pb-link> we introduced the syntax used for the\ndefinition of named character entities such as <span data-tei=\"1.7.2.15.30.9.5.4\" class=\"tei-code2 code\">eacute</span>,\nwhich XML inherited from SGML. Different schema languages vary in the\nways they make a collection of such definitions available\nto an XML processor, but fortunately there is one method that all\ncurrent schema languages support.</p>\n<p data-tei=\"1.7.2.15.30.9.7\" class=\"tei-p\">As well as, and following, the XML declaration (<pb-link data-tei=\"1.7.2.15.30.9.7.2\" class=\"inner-ref\" xml-id=\"SG-pi\" hash=\"SG-pi\" emit=\"transcription\">5.7.3 Processing Instructions</pb-link>), an XML document instance may be prefixed with a\nspecial <span data-tei=\"1.7.2.15.30.9.7.4\" class=\"tei-code2 code\">DOCTYPE</span> statement. This declarative statement has\nbeen inherited by XML from SGML; in its full form it provides a large\nnumber of facilities, but we are here concerned only with the small\nsubset of those facilities recognized by all schema languages.</p>\n<p data-tei=\"1.7.2.15.30.9.9\" class=\"tei-p\">Here is an example DOCTYPE statement which we might consider\nprefixing to the final version of our anthology:\n</p><div data-tei=\"1.7.2.15.30.9.9.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;!DOCTYPE anthology [\n&lt;!ENTITY mdash \"&amp;#2014;\"&gt;\n&lt;!ENTITY legalese \"This document is available under a Creative Commons\nShare and Enjoy Licence\"&gt;\n]&gt;</template></pb-code-highlight></div>\nAny XML processor encountering this statement will use it to add the\ntwo named entities it defines to those already predefined for\nXML. Before the document instance itself is validated, any references\nto these entities will be expanded to the character string\ngiven. Thus, wherever in the document instance the string\n<span data-tei=\"1.7.2.15.30.9.9.4\" class=\"tei-code2 code\">&amp;legalese;</span> appears, it will be replaced by the\nformulation above. This makes life a little easier for those\nkeyboarding our anthology.<a data-tei=\"1.7.2.15.30.9.9.6\" id=\"fnref_1_7_2_15_30_9_9_6\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_30_9_9_6\">21</a> The word <span data-tei=\"1.7.2.15.30.9.9.8\" class=\"tei-code2 code\">anthology</span> following the string\nDOCTYPE in this example is, of course, the name of the root element of\nthe document to which this declaration is prefixed; however, only an XML\nDTD processor will take note of this fact. <p></p></div>\n\n<div data-tei=\"1.7.2.15.30.11\" class=\"tei-div10\" id=\"SG-assoc\"><h3 data-tei=\"1.7.2.15.30.11.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-assoc\">5.8.2 Associating a Document Instance with Its Schema</a></pb-clipboard></h3>\n\n<p data-tei=\"1.7.2.15.30.11.5\" class=\"tei-p\">In the past, different schema languages adopted entirely different attitudes to\nthis question, leading to a variety of different methods of associating schemas with \ndocument instances. However, a W3C Working Group Note, \n  <span data-tei=\"1.7.2.15.30.11.5.2\" class=\"tei-title5\">Associating Schemas with XML documents</span>, \n(<span data-tei=\"1.7.2.15.30.11.5.4\" class=\"tei-ptr4\"><a href=\"https://www.w3.org/TR/xml-model/\">https://www.w3.org/TR/xml-model/</a></span>) now provides a \nstandardized method of doing this through the use of a processing instruction:\n\n  </p><div data-tei=\"1.7.2.15.30.11.5.6\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;?xml-model href=\"http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng\"?&gt;</template></pb-code-highlight></div>\n\nThe href <span data-tei=\"1.7.2.15.30.11.5.10\" class=\"tei-term\">pseudo-attribute</span> points to the location of the schema. This is the only mandatory\n  pseudo-attribute, but others can be added to give more information about the schema:\n  \n  <div data-tei=\"1.7.2.15.30.11.5.12\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;?xml-model href=\"burgess.rng\" \n                       title=\"Anthony Burgess Project Schema\" \n                       schematypens=\"http://relaxng.org/ns/structure/1.0\" \n                       type=\"application/xml\"\n                     ?&gt;</template></pb-code-highlight></div>\n\nSee the XML Model WG Note for more information on the pseudo-attributes available and \nhow to use them.<p></p>\n  \n  <p data-tei=\"1.7.2.15.30.11.7\" class=\"tei-p\">A document instance may be valid according to many\ndifferent schemas, each appropriate to a different processing task. All of these may be expressed in the same way:\n\n  </p><div data-tei=\"1.7.2.15.30.11.7.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;?xml-model href=\"tei_tite.xsd\" type=\"application/xml\" ?&gt;\n&lt;?xml-model href=\"checkNames.sch\" type=\"application/xml\" schematypens=\"http://purl.oclc.org/dsdl/schematron\" ?&gt;</template></pb-code-highlight></div>\n\nThis example includes a standard schema in XML Schema format, along with a Schematron schema which might be \nused for checking the format and linking of names.<p></p>\n\n<p data-tei=\"1.7.2.15.30.11.9\" class=\"tei-p\">Any modern XML processing software tool will provide\nconvenient methods of validating documents which are appropriate to the particular\nschema language chosen. In the interests of maximizing portability of\ndocument instances, they should contain as little processing-specific\ninformation as possible.</p>\n\n</div>\n<div data-tei=\"1.7.2.15.30.13\" class=\"tei-div10\" id=\"SG-mult\"><h3 data-tei=\"1.7.2.15.30.13.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-mult\">5.8.3 Assembling Multiple Resources into a Single Document</a></pb-clipboard></h3>\n<p data-tei=\"1.7.2.15.30.13.5\" class=\"tei-p\">As we have already indicated, a single XML document may be made up\nof several different operating system files that need to be pulled\ntogether by a processor before the whole document can be\nvalidated. The XML DTD language defines a special kind of entity (a\n<span data-tei=\"1.7.2.15.30.13.5.2\" class=\"tei-term\">system entity</span>) that can be used to embed references to\nwhole files into a document for this purpose, in much the same way as\nthe character or string entities discussed in <pb-link data-tei=\"1.7.2.15.30.13.5.4\" class=\"inner-ref\" xml-id=\"SG-er\" hash=\"SG-er\" emit=\"transcription\">5.7.1 Character References</pb-link>. Neither RELAX NG nor W3C Schema directly supports\nthis mechanism, however, and we do not\ndiscuss it further here.</p>\n<p data-tei=\"1.7.2.15.30.13.7\" class=\"tei-p\">An alternative way of achieving the same effect is to use a special\nkind of pointer element to refer to the resources that need to be\nassembled, in exactly the same way as we proposed for the illustration\nin our anthology. The W3C Recommendation <span data-tei=\"1.7.2.15.30.13.7.2\" class=\"tei-title5\">XML Inclusions\n</span> (XInclude)<a data-tei=\"1.7.2.15.30.13.7.4\" id=\"fnref_1_7_2_15_30_13_7_4\" class=\"note tei-note\" rel=\"footnote\" href=\"#fn_1_7_2_15_30_13_7_4\">22</a> defines a generic mechanism\nfor this purpose, which is supported by an increasing number of XML\nprocessors.  </p></div>\n\n<div data-tei=\"1.7.2.15.30.15\" class=\"tei-div10\" id=\"SG-style\"><h3 data-tei=\"1.7.2.15.30.15.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-style\">5.8.4 Stylesheet Association and Processing</a></pb-clipboard></h3>\n<p data-tei=\"1.7.2.15.30.15.5\" class=\"tei-p\">As mentioned above,  the processing of an XML document will usually\ninvolve the use of one or more stylesheets, often but not exclusively\nto provide specific details of how the document should be displayed or\nrendered. In general, there is no reason to associate a document\ninstance with any specific stylesheet and the schema languages we have\ndiscussed so far do not therefore make any special provision for such\nassociation. The association is made when the stylesheet processor is\ninvoked, and is thus entirely application-specific.</p>\n<p data-tei=\"1.7.2.15.30.15.7\" class=\"tei-p\">However, since one very common application for XML documents is to\nserve them as browsable documents over the Web, the W3C has defined a\nprocedure and a syntax for associating a document instance with its\nstylesheet (see <span data-tei=\"1.7.2.15.30.15.7.2\" class=\"tei-ptr4\"><a href=\"https://www.w3.org/TR/xml-stylesheet/\">https://www.w3.org/TR/xml-stylesheet/</a></span>). This Recommendation\nallows a document to supply a link to a default stylesheet and also to\ncategorize the stylesheet according to its <span data-tei=\"1.7.2.15.30.15.7.4\" class=\"tei-term\">MIME type</span>,\nfor example to indicate whether the stylesheet is written in CSS or\nXSLT, using a specialized form of processing instruction.</p>\n<p data-tei=\"1.7.2.15.30.15.9\" class=\"tei-p\">Assuming therefore that we have made a CSS-conformant stylesheet\nfor our anthology and stored it in a file called\n<span data-tei=\"1.7.2.15.30.15.9.2\" class=\"tei-code2 code\">anthology.css</span> which is available from the same location\nas the anthology itself, we could make it available over the Web simply\nby adding a processing instruction like the following to the anthology:\n</p><div data-tei=\"1.7.2.15.30.15.9.4\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;?xml-stylesheet href=\"anthology.css\"\ntype=\"text/css\"?&gt;</template></pb-code-highlight></div><p></p>\n<p data-tei=\"1.7.2.15.30.15.11\" class=\"tei-p\">Multiple stylesheets can be defined for the same document, and\noptions are available to specify how a web browser should select\namongst them. For example, if the document also contained a directive:\n</p><div data-tei=\"1.7.2.15.30.15.11.2\" class=\"tei-eg example\"><pb-code-highlight theme=\"solarizedlight\"><template>&lt;?xml-stylesheet href=\"anthology_m.css\"\ntype=\"text/css\" media=\"mobile\"?&gt;</template></pb-code-highlight></div>a different stylesheet\ncalled <span data-tei=\"1.7.2.15.30.15.11.4\" class=\"tei-code2 code\">anthology_m.css</span> could be used when rendering the\ndocument on a handheld device such as a mobile phone.<p></p>\n<p data-tei=\"1.7.2.15.30.15.13\" class=\"tei-p\">Most modern web browsers support CSS (although the extent\nof their implementation varies), and some of them\nsupport XSLT.</p>\n\n<div data-tei=\"1.7.2.15.30.15.15\" class=\"tei-div10\" id=\"SG-val\"><h4 data-tei=\"1.7.2.15.30.15.15.3\" class=\"tei-head9\"><pb-clipboard data-i18n=\"[label]clipboard.copy\"><a href=\"/?id=SG-val\">5.8.4.1 Content Validation</a></pb-clipboard></h4>\n\n<p data-tei=\"1.7.2.15.30.15.15.5\" class=\"tei-p\">As we noted above, most schema languages provide some degree of\ndatatype validation for attribute values (<pb-link data-tei=\"1.7.2.15.30.15.15.5.2\" class=\"inner-ref\" xml-id=\"SG-att\" hash=\"SG-att\" emit=\"transcription\">5.6.1 Declaring Attributes</pb-link>). They vary greatly in the validation facilities\nthey offer for the content of elements, other than the syntactic\nconstraints already discussed. Thus, while we may very easily check\nthat our <a data-tei=\"1.7.2.15.30.15.15.5.4\" href=\"/ref/stanza\" class=\"tei-gi\" target=\"\">stanza</a> elements contain only <a data-tei=\"1.7.2.15.30.15.15.5.6\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> elements, we cannot easily check that <a data-tei=\"1.7.2.15.30.15.15.5.8\" href=\"/ref/line\" class=\"tei-gi\" target=\"\">line</a> elements contain between five and 500\ncorrectly-spelled English words, should we wish to constrain our\npoetry in such a way. Also, because attributes and elements are\ntreated differently, it is difficult or impossible to express\nco-occurrence constraints: for example, if the status of a poem is draft we might\nwish to permit elements such as <a data-tei=\"1.7.2.15.30.15.15.5.14\" href=\"/ref/editorialQuery\" class=\"tei-gi\" target=\"\">editorialQuery</a> within its content, but not\notherwise.  </p>\n\n<p data-tei=\"1.7.2.15.30.15.15.7\" class=\"tei-p\">The XML DTD language offers very little beyond syntactic checking\nof element content. By contrast, a major impetus behind the design and\ndevelopment of the W3C schema language was the addition of a much more\ngeneral and powerful constraint language to the existing structural\nconstraints of XML DTDs. In RELAX NG the opposite approach was taken,\nin that all datatype validation, whether of attributes or element\ncontent, is regarded as external to the schema language. For\nattributes, as we have seen, RELAX NG makes use of the W3C Schema\nDatatype Library (but permits use of others). Because RELAX NG treats\nboth elements and attributes as special cases of patterns, the same\ndatatype validation facilities are available for element content as\nfor attribute values; it is unlike other schema languages in\nthis respect. In addition, for content validation,\na different component of DSDL known as Schematron can be used. Schematron\nis a pattern matching (rather than a grammar-based) language, which\nallows us to test the components of a document against\ntemplates that express constraints such as those mentioned above.</p>\n\n<p data-tei=\"1.7.2.15.30.15.15.9\" class=\"tei-p\">Like other XML processors, Schematron uses XPath to identify parts\nof an XML document; in addition, it provides elements that describe\nassertions to be tested and conditions which must be validated, as\nwell as elements to report the results of the test. </p>\n</div>\n</div></div></section><div class=\"popovers\"></div></div></body></html>",
    "footnotes": "<!DOCTYPE html>\n<div class=\"footnotes\"><dl class=\"footnote\" id=\"fn_1_7_2_15_10_7\"><dt class=\"fn-number\">1</dt><dd data-tei=\"1.7.2.15.10.7\" class=\"fn-content\">In the\n<span data-tei=\"1.7.2.15.10.7.3\" class=\"tei-q2\">continuous writing</span> characteristic of manuscripts from the early\nclassical period, words are written continuously with no intervening\nspaces or punctuation.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_10_7\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_14_2\"><dt class=\"fn-number\">2</dt><dd data-tei=\"1.7.2.15.14.2\" class=\"fn-content\">New\ntextbooks and websites about XML appear at regular intervals and to\nselect any one of them would be invidious. \nsome recommended online courses include <span data-tei=\"1.7.2.15.14.2.5\" class=\"tei-ptr4\"><a href=\"http://www.w3schools.com/xml/default.asp\">http://www.w3schools.com/xml/default.asp</a></span> and <span data-tei=\"1.7.2.15.14.2.7\" class=\"tei-ptr4\"><a href=\"https://www.ibm.com/developerworks/xml/tutorials/xmlintro/xmlintro.html\">https://www.ibm.com/developerworks/xml/tutorials/xmlintro/xmlintro.html</a></span>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_14_2\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_16_9_7_4\"><dt class=\"fn-number\">3</dt><dd data-tei=\"1.7.2.15.16.9.7.4\" class=\"fn-content\">We do not here discuss in\nany detail the ways that a stylesheet can be used or defined, nor do\nwe discuss the popular W3C Stylesheet Languages XSLT and CSS. See\nfurther <pb-link data-tei=\"1.7.2.15.16.9.7.4.3\" class=\"inner-ref\" xml-id=\"XSL11\" hash=\"XSL11\" emit=\"transcription\">1 </pb-link>, <pb-link data-tei=\"1.7.2.15.16.9.7.4.5\" class=\"inner-ref\" xml-id=\"XSLT\" hash=\"XSLT\" emit=\"transcription\">1 </pb-link>, and \n<pb-link data-tei=\"1.7.2.15.16.9.7.4.7\" class=\"inner-ref\" xml-id=\"CSS1\" hash=\"CSS1\" emit=\"transcription\">1 </pb-link>. <a class=\"fn-back\" href=\"#fnref_1_7_2_15_16_9_7_4\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_16_13_5_2\"><dt class=\"fn-number\">4</dt><dd data-tei=\"1.7.2.15.16.13.5.2\" class=\"fn-content\">See <span data-tei=\"1.7.2.15.16.13.5.2.3\" class=\"tei-title5\">Extensible Markup\nLanguage (XML) 1.0</span>, available from <span data-tei=\"1.7.2.15.16.13.5.2.5\" class=\"tei-ptr4\"><a href=\"https://www.w3.org/TR/REC-xml/\">https://www.w3.org/TR/REC-xml/</a></span>, Section 2.2\nCharacters.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_16_13_5_2\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_16_13_5_4\"><dt class=\"fn-number\">5</dt><dd data-tei=\"1.7.2.15.16.13.5.4\" class=\"fn-content\">ISO/IEC 10646-1993 <span data-tei=\"1.7.2.15.16.13.5.4.3\" class=\"tei-title5\">Information\nTechnology — Universal Multiple-Octet Coded Character Set</span>\n(UCS)<a class=\"fn-back\" href=\"#fnref_1_7_2_15_16_13_5_4\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_16_13_5_6\"><dt class=\"fn-number\">6</dt><dd data-tei=\"1.7.2.15.16.13.5.6\" class=\"fn-content\">See <span data-tei=\"1.7.2.15.16.13.5.6.3\" class=\"tei-ptr4\"><a href=\"https://www.unicode.org/\">https://www.unicode.org/</a></span><a class=\"fn-back\" href=\"#fnref_1_7_2_15_16_13_5_6\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_20_7_7_16\"><dt class=\"fn-number\">7</dt><dd data-tei=\"1.7.2.15.20.7.7.16\" class=\"fn-content\">Because\nthe opening angle bracket has this special function in an XML\ndocument, special steps must be taken to use that character for other\npurposes (for example, as the mathematical less-than operator); see\nfurther section <pb-link data-tei=\"1.7.2.15.20.7.7.16.3\" class=\"inner-ref\" xml-id=\"SG-er\" hash=\"SG-er\" emit=\"transcription\">5.7.1 Character References</pb-link>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_20_7_7_16\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_20_9_9_6\"><dt class=\"fn-number\">8</dt><dd data-tei=\"1.7.2.15.20.9.9.6\" class=\"fn-content\">The element names here have been chosen for\nclarity of exposition; there is, however, a TEI element corresponding to\neach.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_20_9_9_6\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_20_9_13_2\"><dt class=\"fn-number\">9</dt><dd data-tei=\"1.7.2.15.20.9.13.2\" class=\"fn-content\">Note that this simple example has not\naddressed the problem of marking elements such as sentences\nexplicitly; the implications of this are discussed in section <pb-link data-tei=\"1.7.2.15.20.9.13.2.3\" class=\"inner-ref\" xml-id=\"SG152\" hash=\"SG152\" emit=\"transcription\">5.5 Complicating the Issue</pb-link>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_20_9_13_2\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_20_9_17_12\"><dt class=\"fn-number\">10</dt><dd data-tei=\"1.7.2.15.20.9.17.12\" class=\"fn-content\">The older terms\n<span data-tei=\"1.7.2.15.20.9.17.12.3\" class=\"tei-term\">Document Type Declaration</span> and <span data-tei=\"1.7.2.15.20.9.17.12.5\" class=\"tei-term\">Document Type\nDefinition</span>, both abbreviated as DTD, may also be\nencountered. Throughout these Guidelines we use the term\n<span data-tei=\"1.7.2.15.20.9.17.12.7\" class=\"tei-term\">schema</span> for any kind of formal document grammar.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_20_9_17_12\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_22_9_4\"><dt class=\"fn-number\">11</dt><dd data-tei=\"1.7.2.15.22.9.4\" class=\"fn-content\"><a data-tei=\"1.7.2.15.22.9.4.2\" href=\"https://www.iso.org/standard/52348.html\" class=\"tei-ref3\" target=\"\">ISO/IEC FDIS 19757-2 Document\n      Schema Definition Language (DSDL) — Part 2: Regular-grammar-based\n      validation — RELAX NG</a><a class=\"fn-back\" href=\"#fnref_1_7_2_15_22_9_4\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_22_9_8\"><dt class=\"fn-number\">12</dt><dd data-tei=\"1.7.2.15.22.9.8\" class=\"fn-content\">Schema validation languages co-evolved with early markup language specifications, as summarized in <a data-tei=\"1.7.2.15.22.9.8.3\" href=\"http://xml.coverpages.org/Jelliffe-schema-family-tree3-20061130.jpg\" class=\"tei-ref3\" target=\"\">Rick Jelliffe's Family Tree of Schema Languages for Markup Languages</a>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_22_9_8\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_22_11_13_5_8\"><dt class=\"fn-number\">13</dt><dd data-tei=\"1.7.2.15.22.11.13.5.8\" class=\"fn-content\">In XML, a single colon may also\nappear in a GI, where it has a special significance related to the use\nof <span data-tei=\"1.7.2.15.22.11.13.5.8.3\" class=\"tei-term\">namespaces</span>, as further discussed in section <pb-link data-tei=\"1.7.2.15.22.11.13.5.8.5\" class=\"inner-ref\" xml-id=\"SGname\" hash=\"SGname\" emit=\"transcription\">5.7.2 Namespaces</pb-link>. The characters defined by Unicode as\n<span data-tei=\"1.7.2.15.22.11.13.5.8.7\" class=\"tei-term\">combining characters</span> and as <span data-tei=\"1.7.2.15.22.11.13.5.8.9\" class=\"tei-term\">extenders</span> are\nalso permitted, as are logograms such as Chinese characters.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_22_11_13_5_8\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_22_11_21_5_18\"><dt class=\"fn-number\">14</dt><dd data-tei=\"1.7.2.15.22.11.21.5.18\" class=\"fn-content\">This example is probably not a good practice for most XML projects, since XPath provides ways of distinguishing elements in an XML structure by their position, or the order in which they appear in relation to one another, without the need to give them distinct names.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_22_11_21_5_18\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_22_11_21_21_2\"><dt class=\"fn-number\">15</dt><dd data-tei=\"1.7.2.15.22.11.21.21.2\" class=\"fn-content\">For a complete tutorial introduction to RELAX NG, see <pb-link data-tei=\"1.7.2.15.22.11.21.21.2.3\" class=\"inner-ref\" xml-id=\"SG-BIBL-1\" hash=\"SG-BIBL-1\" emit=\"transcription\">1 </pb-link>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_22_11_21_21_2\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_24_15_4\"><dt class=\"fn-number\">16</dt><dd data-tei=\"1.7.2.15.24.15.4\" class=\"fn-content\">The official specification is at <pb-link data-tei=\"1.7.2.15.24.15.4.3\" class=\"inner-ref\" xml-id=\"XPATH\" hash=\"XPATH\" emit=\"transcription\">1 </pb-link>;  many\nintroductory tutorials are available in the XML references cited above\nand elsewhere on the Web: good beginners' tutorials include <span data-tei=\"1.7.2.15.24.15.4.5\" class=\"tei-ptr4\"><a href=\"http://dh.obdurodon.org/introduction-xpath.xhtml\">http://dh.obdurodon.org/introduction-xpath.xhtml</a></span>, <span data-tei=\"1.7.2.15.24.15.4.7\" class=\"tei-ptr4\"><a href=\"http://www.w3schools.com/xml/xpath_intro.asp\">http://www.w3schools.com/xml/xpath_intro.asp</a></span> and <span data-tei=\"1.7.2.15.24.15.4.9\" class=\"tei-ptr4\"><a href=\"http://www.zvon.org/xxl/XPathTutorial/\">http://www.zvon.org/xxl/XPathTutorial/</a></span>, the latter being\navailable in several languages.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_24_15_4\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_24_19_5\"><dt class=\"fn-number\">17</dt><dd data-tei=\"1.7.2.15.24.19.5\" class=\"fn-content\">See\n<pb-link data-tei=\"1.7.2.15.24.19.5.3\" class=\"inner-ref\" xml-id=\"SG-BIBL-2\" hash=\"SG-BIBL-2\" emit=\"transcription\">1 </pb-link>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_24_19_5\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_26_9_2\"><dt class=\"fn-number\">18</dt><dd data-tei=\"1.7.2.15.26.9.2\" class=\"fn-content\">In the unlikely event that both kinds of quotation marks are needed within the\nquoted string, either or both can also be presented in escaped form, using the\npredefined character entities <span data-tei=\"1.7.2.15.26.9.2.3\" class=\"tei-code2 code\">&amp;apos;</span> or <span data-tei=\"1.7.2.15.26.9.2.5\" class=\"tei-code2 code\">&amp;quot;</span><a class=\"fn-back\" href=\"#fnref_1_7_2_15_26_9_2\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_26_15_11_8\"><dt class=\"fn-number\">19</dt><dd data-tei=\"1.7.2.15.26.15.11.8\" class=\"fn-content\">The word <span data-tei=\"1.7.2.15.26.15.11.8.3\" class=\"tei-q2\">anyURI</span> is a predefined name, used in\nschema languages to mean that any <span data-tei=\"1.7.2.15.26.15.11.8.5\" class=\"tei-term\">Uniform Resource\nIdentifier</span> (URI) may be supplied here. The accepted syntax for\nURIs is an Internet Standard, defined in <span data-tei=\"1.7.2.15.26.15.11.8.7\" class=\"tei-ptr4\"><a href=\"http://tools.ietf.org/html/rfc3986\">http://tools.ietf.org/html/rfc3986</a></span>. <span data-tei=\"1.7.2.15.26.15.11.8.9\" class=\"tei-code2 code\">anyURI</span>\nis one of the <span data-tei=\"1.7.2.15.26.15.11.8.11\" class=\"tei-term\">datatypes</span> defined by the W3C\nSchema datatype library.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_26_15_11_8\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_28_11_11_2\"><dt class=\"fn-number\">20</dt><dd data-tei=\"1.7.2.15.28.11.11.2\" class=\"fn-content\">The W3C Recommendation is\ndefined at <span data-tei=\"1.7.2.15.28.11.11.2.3\" class=\"tei-ptr4\"><a href=\"https://www.w3.org/Graphics/SVG/\">https://www.w3.org/Graphics/SVG/</a></span>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_28_11_11_2\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_30_9_9_6\"><dt class=\"fn-number\">21</dt><dd data-tei=\"1.7.2.15.30.9.9.6\" class=\"fn-content\">And, indeed, for those\nresponsible for deciding the licensing conditions if they change their\nminds later.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_30_9_9_6\">↩</a></dd></dl><dl class=\"footnote\" id=\"fn_1_7_2_15_30_13_7_4\"><dt class=\"fn-number\">22</dt><dd data-tei=\"1.7.2.15.30.13.7.4\" class=\"fn-content\"><span data-tei=\"1.7.2.15.30.13.7.4.2\" class=\"tei-ptr4\"><a href=\"https://www.w3.org/TR/xinclude/\">https://www.w3.org/TR/xinclude/</a></span>.<a class=\"fn-back\" href=\"#fnref_1_7_2_15_30_13_7_4\">↩</a></dd></dl></div>",
    "userParams": {
        "track-ids": "True",
        "webcomponents": 7,
        "lng": "en"
    },
    "collection": ""
}